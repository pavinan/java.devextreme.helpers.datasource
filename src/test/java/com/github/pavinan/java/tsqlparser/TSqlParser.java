// Generated from .\TSqlParser.g4 by ANTLR 4.7.1
package com.github.pavinan.java.tsqlparser;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class TSqlParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.7.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		ABSENT=1, ADD=2, AES=3, ALL=4, ALLOW_CONNECTIONS=5, ALLOW_MULTIPLE_EVENT_LOSS=6, 
		ALLOW_SINGLE_EVENT_LOSS=7, ALTER=8, AND=9, ANONYMOUS=10, ANY=11, APPEND=12, 
		APPLICATION=13, AS=14, ASC=15, ASYMMETRIC=16, ASYNCHRONOUS_COMMIT=17, 
		AUTHORIZATION=18, AUTHENTICATION=19, AUTOMATED_BACKUP_PREFERENCE=20, AUTOMATIC=21, 
		AVAILABILITY_MODE=22, BACKSLASH=23, BACKUP=24, BEFORE=25, BEGIN=26, BETWEEN=27, 
		BLOCK=28, BLOCKSIZE=29, BLOCKING_HIERARCHY=30, BREAK=31, BROWSE=32, BUFFER=33, 
		BUFFERCOUNT=34, BULK=35, BY=36, CACHE=37, CALLED=38, CASCADE=39, CASE=40, 
		CERTIFICATE=41, CHANGETABLE=42, CHANGES=43, CHECK=44, CHECKPOINT=45, CHECK_POLICY=46, 
		CHECK_EXPIRATION=47, CLASSIFIER_FUNCTION=48, CLOSE=49, CLUSTER=50, CLUSTERED=51, 
		COALESCE=52, COLLATE=53, COLUMN=54, COMPRESSION=55, COMMIT=56, COMPUTE=57, 
		CONFIGURATION=58, CONSTRAINT=59, CONTAINMENT=60, CONTAINS=61, CONTAINSTABLE=62, 
		CONTEXT=63, CONTINUE=64, CONTINUE_AFTER_ERROR=65, CONTRACT=66, CONTRACT_NAME=67, 
		CONVERSATION=68, CONVERT=69, COPY_ONLY=70, CREATE=71, CROSS=72, CURRENT=73, 
		CURRENT_DATE=74, CURRENT_TIME=75, CURRENT_TIMESTAMP=76, CURRENT_USER=77, 
		CURSOR=78, CYCLE=79, DATA=80, DATA_COMPRESSION=81, DATA_SOURCE=82, DATABASE=83, 
		DATABASE_MIRRORING=84, DBCC=85, DEALLOCATE=86, DECLARE=87, DEFAULT=88, 
		DEFAULT_DATABASE=89, DEFAULT_SCHEMA=90, DELETE=91, DENY=92, DESC=93, DIAGNOSTICS=94, 
		DIFFERENTIAL=95, DISK=96, DISTINCT=97, DISTRIBUTED=98, DOUBLE=99, DOUBLE_BACK_SLASH=100, 
		DOUBLE_FORWARD_SLASH=101, DROP=102, DTC_SUPPORT=103, DUMP=104, ELSE=105, 
		ENABLED=106, END=107, ENDPOINT=108, ERRLVL=109, ESCAPE=110, ERROR=111, 
		EVENT=112, EVENTDATA=113, EVENT_RETENTION_MODE=114, EXCEPT=115, EXECUTABLE_FILE=116, 
		EXECUTE=117, EXISTS=118, EXPIREDATE=119, EXIT=120, EXTENSION=121, EXTERNAL=122, 
		EXTERNAL_ACCESS=123, FAILOVER=124, FAILURECONDITIONLEVEL=125, FAN_IN=126, 
		FETCH=127, FILE=128, FILENAME=129, FILLFACTOR=130, FILE_SNAPSHOT=131, 
		FOR=132, FORCESEEK=133, FORCE_SERVICE_ALLOW_DATA_LOSS=134, FOREIGN=135, 
		FREETEXT=136, FREETEXTTABLE=137, FROM=138, FULL=139, FUNCTION=140, GET=141, 
		GOTO=142, GOVERNOR=143, GRANT=144, GROUP=145, HAVING=146, HASHED=147, 
		HEALTHCHECKTIMEOUT=148, IDENTITY=149, IDENTITYCOL=150, IDENTITY_INSERT=151, 
		IF=152, IN=153, INCLUDE=154, INCREMENT=155, INDEX=156, INFINITE=157, INIT=158, 
		INNER=159, INSERT=160, INSTEAD=161, INTERSECT=162, INTO=163, IPV4_ADDR=164, 
		IPV6_ADDR=165, IS=166, ISNULL=167, JOIN=168, KERBEROS=169, KEY=170, KEY_PATH=171, 
		KEY_STORE_PROVIDER_NAME=172, KILL=173, LANGUAGE=174, LEFT=175, LIBRARY=176, 
		LIFETIME=177, LIKE=178, LINENO=179, LINUX=180, LISTENER_IP=181, LISTENER_PORT=182, 
		LOAD=183, LOCAL_SERVICE_NAME=184, LOG=185, MATCHED=186, MASTER=187, MAX_MEMORY=188, 
		MAXTRANSFER=189, MAXVALUE=190, MAX_DISPATCH_LATENCY=191, MAX_EVENT_SIZE=192, 
		MAX_SIZE=193, MAX_OUTSTANDING_IO_PER_VOLUME=194, MEDIADESCRIPTION=195, 
		MEDIANAME=196, MEMBER=197, MEMORY_PARTITION_MODE=198, MERGE=199, MESSAGE_FORWARDING=200, 
		MESSAGE_FORWARD_SIZE=201, MINVALUE=202, MIRROR=203, MUST_CHANGE=204, NATIONAL=205, 
		NEGOTIATE=206, NOCHECK=207, NOFORMAT=208, NOINIT=209, NONCLUSTERED=210, 
		NONE=211, NOREWIND=212, NOSKIP=213, NOUNLOAD=214, NO_CHECKSUM=215, NO_COMPRESSION=216, 
		NO_EVENT_LOSS=217, NOT=218, NOTIFICATION=219, NTLM=220, NULL=221, NULLIF=222, 
		OF=223, OFF=224, OFFSETS=225, OLD_PASSWORD=226, ON=227, ON_FAILURE=228, 
		OPEN=229, OPENDATASOURCE=230, OPENQUERY=231, OPENROWSET=232, OPENXML=233, 
		OPTION=234, OR=235, ORDER=236, OUTER=237, OVER=238, PAGE=239, PARAM_NODE=240, 
		PARTIAL=241, PASSWORD=242, PERCENT=243, PERMISSION_SET=244, PER_CPU=245, 
		PER_DB=246, PER_NODE=247, PIVOT=248, PLAN=249, PLATFORM=250, POLICY=251, 
		PRECISION=252, PREDICATE=253, PRIMARY=254, PRINT=255, PROC=256, PROCEDURE=257, 
		PROCESS=258, PUBLIC=259, PYTHON=260, R=261, RAISERROR=262, RAW=263, READ=264, 
		READTEXT=265, READ_WRITE_FILEGROUPS=266, RECONFIGURE=267, REFERENCES=268, 
		REGENERATE=269, RELATED_CONVERSATION=270, RELATED_CONVERSATION_GROUP=271, 
		REPLICATION=272, REQUIRED=273, RESET=274, RESTART=275, RESTORE=276, RESTRICT=277, 
		RESUME=278, RETAINDAYS=279, RETURN=280, RETURNS=281, REVERT=282, REVOKE=283, 
		REWIND=284, RIGHT=285, ROLLBACK=286, ROLE=287, ROWCOUNT=288, ROWGUIDCOL=289, 
		RSA_512=290, RSA_1024=291, RSA_2048=292, RSA_3072=293, RSA_4096=294, SAFETY=295, 
		RULE=296, SAFE=297, SAVE=298, SCHEDULER=299, SCHEMA=300, SCHEME=301, SECURITY=302, 
		SECURITYAUDIT=303, SELECT=304, SEMANTICKEYPHRASETABLE=305, SEMANTICSIMILARITYDETAILSTABLE=306, 
		SEMANTICSIMILARITYTABLE=307, SEQUENCE=308, SERVER=309, SERVICE=310, SERVICE_BROKER=311, 
		SERVICE_NAME=312, SESSION=313, SESSION_USER=314, SET=315, SETUSER=316, 
		SHUTDOWN=317, SID=318, SKIP_KEYWORD=319, SOFTNUMA=320, SOME=321, SOURCE=322, 
		SPECIFICATION=323, SPLIT=324, SQLDUMPERFLAGS=325, SQLDUMPERPATH=326, SQLDUMPERTIMEOUT=327, 
		STATISTICS=328, STATE=329, STATS=330, START=331, STARTED=332, STARTUP_STATE=333, 
		STOP=334, STOPPED=335, STOP_ON_ERROR=336, SUPPORTED=337, SYSTEM=338, SYSTEM_USER=339, 
		TABLE=340, TABLESAMPLE=341, TAPE=342, TARGET=343, TCP=344, TEXTSIZE=345, 
		THEN=346, TO=347, TOP=348, TRACK_CAUSALITY=349, TRAN=350, TRANSACTION=351, 
		TRANSFER=352, TRIGGER=353, TRUNCATE=354, TSEQUAL=355, UNCHECKED=356, UNION=357, 
		UNIQUE=358, UNLOCK=359, UNPIVOT=360, UNSAFE=361, UPDATE=362, UPDATETEXT=363, 
		URL=364, USE=365, USED=366, USER=367, VALUES=368, VARYING=369, VERBOSELOGGING=370, 
		VIEW=371, VISIBILITY=372, WAITFOR=373, WHEN=374, WHERE=375, WHILE=376, 
		WINDOWS=377, WITH=378, WITHIN=379, WITHOUT=380, WITNESS=381, WRITETEXT=382, 
		ABSOLUTE=383, ACCENT_SENSITIVITY=384, ACTION=385, ACTIVATION=386, ACTIVE=387, 
		ADDRESS=388, AES_128=389, AES_192=390, AES_256=391, AFFINITY=392, AFTER=393, 
		AGGREGATE=394, ALGORITHM=395, ALLOW_ENCRYPTED_VALUE_MODIFICATIONS=396, 
		ALLOW_SNAPSHOT_ISOLATION=397, ALLOWED=398, ANSI_NULL_DEFAULT=399, ANSI_NULLS=400, 
		ANSI_PADDING=401, ANSI_WARNINGS=402, APPLICATION_LOG=403, APPLY=404, ARITHABORT=405, 
		ASSEMBLY=406, AUDIT=407, AUDIT_GUID=408, AUTO=409, AUTO_CLEANUP=410, AUTO_CLOSE=411, 
		AUTO_CREATE_STATISTICS=412, AUTO_SHRINK=413, AUTO_UPDATE_STATISTICS=414, 
		AUTO_UPDATE_STATISTICS_ASYNC=415, AVAILABILITY=416, AVG=417, BACKUP_PRIORITY=418, 
		BEGIN_DIALOG=419, BIGINT=420, BINARY_BASE64=421, BINARY_CHECKSUM=422, 
		BINDING=423, BLOB_STORAGE=424, BROKER=425, BROKER_INSTANCE=426, BULK_LOGGED=427, 
		CALLER=428, CAP_CPU_PERCENT=429, CAST=430, CATALOG=431, CATCH=432, CHANGE_RETENTION=433, 
		CHANGE_TRACKING=434, CHECKSUM=435, CHECKSUM_AGG=436, CLEANUP=437, COLLECTION=438, 
		COLUMN_MASTER_KEY=439, COMMITTED=440, COMPATIBILITY_LEVEL=441, CONCAT=442, 
		CONCAT_NULL_YIELDS_NULL=443, CONTENT=444, CONTROL=445, COOKIE=446, COUNT=447, 
		COUNT_BIG=448, COUNTER=449, CPU=450, CREATE_NEW=451, CREATION_DISPOSITION=452, 
		CREDENTIAL=453, CRYPTOGRAPHIC=454, CURSOR_CLOSE_ON_COMMIT=455, CURSOR_DEFAULT=456, 
		DATE_CORRELATION_OPTIMIZATION=457, DATEADD=458, DATEDIFF=459, DATENAME=460, 
		DATEPART=461, DAYS=462, DB_CHAINING=463, DB_FAILOVER=464, DECRYPTION=465, 
		DEFAULT_DOUBLE_QUOTE=466, DEFAULT_FULLTEXT_LANGUAGE=467, DEFAULT_LANGUAGE=468, 
		DELAY=469, DELAYED_DURABILITY=470, DELETED=471, DENSE_RANK=472, DEPENDENTS=473, 
		DES=474, DESCRIPTION=475, DESX=476, DHCP=477, DIALOG=478, DIRECTORY_NAME=479, 
		DISABLE=480, DISABLE_BROKER=481, DISABLED=482, DISK_DRIVE=483, DOCUMENT=484, 
		DYNAMIC=485, ELEMENTS=486, EMERGENCY=487, EMPTY=488, ENABLE=489, ENABLE_BROKER=490, 
		ENCRYPTED_VALUE=491, ENCRYPTION=492, ENDPOINT_URL=493, ERROR_BROKER_CONVERSATIONS=494, 
		EXCLUSIVE=495, EXECUTABLE=496, EXIST=497, EXPAND=498, EXPIRY_DATE=499, 
		EXPLICIT=500, FAIL_OPERATION=501, FAILOVER_MODE=502, FAILURE=503, FAILURE_CONDITION_LEVEL=504, 
		FAST=505, FAST_FORWARD=506, FILEGROUP=507, FILEGROWTH=508, FILEPATH=509, 
		FILESTREAM=510, FILTER=511, FIRST=512, FIRST_VALUE=513, FOLLOWING=514, 
		FORCE=515, FORCE_FAILOVER_ALLOW_DATA_LOSS=516, FORCED=517, FORMAT=518, 
		FORWARD_ONLY=519, FULLSCAN=520, FULLTEXT=521, GB=522, GETDATE=523, GETUTCDATE=524, 
		GLOBAL=525, GO=526, GROUP_MAX_REQUESTS=527, GROUPING=528, GROUPING_ID=529, 
		HADR=530, HASH=531, HEALTH_CHECK_TIMEOUT=532, HIGH=533, HONOR_BROKER_PRIORITY=534, 
		HOURS=535, IDENTITY_VALUE=536, IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX=537, 
		IMMEDIATE=538, IMPERSONATE=539, IMPORTANCE=540, INCLUDE_NULL_VALUES=541, 
		INCREMENTAL=542, INITIATOR=543, INPUT=544, INSENSITIVE=545, INSERTED=546, 
		INT=547, IP=548, ISOLATION=549, JSON=550, KB=551, KEEP=552, KEEPFIXED=553, 
		KEY_SOURCE=554, KEYS=555, KEYSET=556, LAG=557, LAST=558, LAST_VALUE=559, 
		LEAD=560, LEVEL=561, LIST=562, LISTENER=563, LISTENER_URL=564, LOB_COMPACTION=565, 
		LOCAL=566, LOCATION=567, LOCK=568, LOCK_ESCALATION=569, LOGIN=570, LOOP=571, 
		LOW=572, MANUAL=573, MARK=574, MATERIALIZED=575, MAX=576, MAX_CPU_PERCENT=577, 
		MAX_DOP=578, MAX_FILES=579, MAX_IOPS_PER_VOLUME=580, MAX_MEMORY_PERCENT=581, 
		MAX_PROCESSES=582, MAX_QUEUE_READERS=583, MAX_ROLLOVER_FILES=584, MAXDOP=585, 
		MAXRECURSION=586, MAXSIZE=587, MB=588, MEDIUM=589, MEMORY_OPTIMIZED_DATA=590, 
		MESSAGE=591, MIN=592, MIN_ACTIVE_ROWVERSION=593, MIN_CPU_PERCENT=594, 
		MIN_IOPS_PER_VOLUME=595, MIN_MEMORY_PERCENT=596, MINUTES=597, MIRROR_ADDRESS=598, 
		MIXED_PAGE_ALLOCATION=599, MODE=600, MODIFY=601, MOVE=602, MULTI_USER=603, 
		NAME=604, NESTED_TRIGGERS=605, NEW_ACCOUNT=606, NEW_BROKER=607, NEW_PASSWORD=608, 
		NEXT=609, NO=610, NO_TRUNCATE=611, NO_WAIT=612, NOCOUNT=613, NODES=614, 
		NOEXPAND=615, NON_TRANSACTED_ACCESS=616, NORECOMPUTE=617, NORECOVERY=618, 
		NOWAIT=619, NTILE=620, NUMANODE=621, NUMBER=622, NUMERIC_ROUNDABORT=623, 
		OBJECT=624, OFFLINE=625, OFFSET=626, OLD_ACCOUNT=627, ONLINE=628, ONLY=629, 
		OPEN_EXISTING=630, OPTIMISTIC=631, OPTIMIZE=632, OUT=633, OUTPUT=634, 
		OWNER=635, PAGE_VERIFY=636, PARAMETERIZATION=637, PARTITION=638, PARTITIONS=639, 
		PARTNER=640, PATH=641, POISON_MESSAGE_HANDLING=642, POOL=643, PORT=644, 
		PRECEDING=645, PRIMARY_ROLE=646, PRIOR=647, PRIORITY=648, PRIORITY_LEVEL=649, 
		PRIVATE=650, PRIVATE_KEY=651, PRIVILEGES=652, PROCEDURE_NAME=653, PROPERTY=654, 
		PROVIDER=655, PROVIDER_KEY_NAME=656, QUERY=657, QUEUE=658, QUEUE_DELAY=659, 
		QUOTED_IDENTIFIER=660, RANGE=661, RANK=662, RC2=663, RC4=664, RC4_128=665, 
		READ_COMMITTED_SNAPSHOT=666, READ_ONLY=667, READ_ONLY_ROUTING_LIST=668, 
		READ_WRITE=669, READONLY=670, REBUILD=671, RECEIVE=672, RECOMPILE=673, 
		RECOVERY=674, RECURSIVE_TRIGGERS=675, RELATIVE=676, REMOTE=677, REMOTE_SERVICE_NAME=678, 
		REMOVE=679, REORGANIZE=680, REPEATABLE=681, REPLICA=682, REQUEST_MAX_CPU_TIME_SEC=683, 
		REQUEST_MAX_MEMORY_GRANT_PERCENT=684, REQUEST_MEMORY_GRANT_TIMEOUT_SEC=685, 
		REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT=686, RESERVE_DISK_SPACE=687, 
		RESOURCE=688, RESOURCE_MANAGER_LOCATION=689, RESTRICTED_USER=690, RETENTION=691, 
		ROBUST=692, ROOT=693, ROUTE=694, ROW=695, ROW_NUMBER=696, ROWGUID=697, 
		ROWS=698, SAMPLE=699, SCHEMABINDING=700, SCOPED=701, SCROLL=702, SCROLL_LOCKS=703, 
		SEARCH=704, SECONDARY=705, SECONDARY_ONLY=706, SECONDARY_ROLE=707, SECONDS=708, 
		SECRET=709, SECURITY_LOG=710, SEEDING_MODE=711, SELF=712, SEMI_SENSITIVE=713, 
		SEND=714, SENT=715, SERIALIZABLE=716, SESSION_TIMEOUT=717, SETERROR=718, 
		SHARE=719, SHOWPLAN=720, SIGNATURE=721, SIMPLE=722, SINGLE_USER=723, SIZE=724, 
		SMALLINT=725, SNAPSHOT=726, SPATIAL_WINDOW_MAX_CELLS=727, STANDBY=728, 
		START_DATE=729, STATIC=730, STATS_STREAM=731, STATUS=732, STDEV=733, STDEVP=734, 
		STOPLIST=735, STUFF=736, SUBJECT=737, SUM=738, SUSPEND=739, SYMMETRIC=740, 
		SYNCHRONOUS_COMMIT=741, SYNONYM=742, TAKE=743, TARGET_RECOVERY_TIME=744, 
		TB=745, TEXTIMAGE_ON=746, THROW=747, TIES=748, TIME=749, TIMEOUT=750, 
		TIMER=751, TINYINT=752, TORN_PAGE_DETECTION=753, TRANSFORM_NOISE_WORDS=754, 
		TRIPLE_DES=755, TRIPLE_DES_3KEY=756, TRUSTWORTHY=757, TRY=758, TSQL=759, 
		TWO_DIGIT_YEAR_CUTOFF=760, TYPE=761, TYPE_WARNING=762, UNBOUNDED=763, 
		UNCOMMITTED=764, UNKNOWN=765, UNLIMITED=766, USING=767, VALID_XML=768, 
		VALIDATION=769, VALUE=770, VAR=771, VARP=772, VIEW_METADATA=773, VIEWS=774, 
		WAIT=775, WELL_FORMED_XML=776, WITHOUT_ARRAY_WRAPPER=777, WORK=778, WORKLOAD=779, 
		XML=780, XMLDATA=781, XMLNAMESPACES=782, XMLSCHEMA=783, XSINIL=784, DOLLAR_ACTION=785, 
		SPACE=786, COMMENT=787, LINE_COMMENT=788, DOUBLE_QUOTE_ID=789, SINGLE_QUOTE=790, 
		SQUARE_BRACKET_ID=791, LOCAL_ID=792, DECIMAL=793, ID=794, QUOTED_URL=795, 
		QUOTED_HOST_AND_PORT=796, STRING=797, BINARY=798, FLOAT=799, REAL=800, 
		EQUAL=801, GREATER=802, LESS=803, EXCLAMATION=804, PLUS_ASSIGN=805, MINUS_ASSIGN=806, 
		MULT_ASSIGN=807, DIV_ASSIGN=808, MOD_ASSIGN=809, AND_ASSIGN=810, XOR_ASSIGN=811, 
		OR_ASSIGN=812, DOUBLE_BAR=813, DOT=814, UNDERLINE=815, AT=816, SHARP=817, 
		DOLLAR=818, LR_BRACKET=819, RR_BRACKET=820, COMMA=821, SEMI=822, COLON=823, 
		STAR=824, DIVIDE=825, MODULE=826, PLUS=827, MINUS=828, BIT_NOT=829, BIT_OR=830, 
		BIT_AND=831, BIT_XOR=832, IPV4_OCTECT=833;
	public static final int
		RULE_tsql_file = 0, RULE_batch = 1, RULE_sql_clauses = 2, RULE_sql_clause = 3, 
		RULE_dml_clause = 4, RULE_ddl_clause = 5, RULE_backup_statement = 6, RULE_cfl_statement = 7, 
		RULE_block_statement = 8, RULE_break_statement = 9, RULE_continue_statement = 10, 
		RULE_goto_statement = 11, RULE_return_statement = 12, RULE_if_statement = 13, 
		RULE_throw_statement = 14, RULE_throw_error_number = 15, RULE_throw_message = 16, 
		RULE_throw_state = 17, RULE_try_catch_statement = 18, RULE_waitfor_statement = 19, 
		RULE_while_statement = 20, RULE_print_statement = 21, RULE_raiseerror_statement = 22, 
		RULE_empty_statement = 23, RULE_another_statement = 24, RULE_alter_application_role = 25, 
		RULE_create_application_role = 26, RULE_drop_aggregate = 27, RULE_drop_application_role = 28, 
		RULE_alter_assembly = 29, RULE_alter_assembly_start = 30, RULE_alter_assembly_clause = 31, 
		RULE_alter_assembly_from_clause = 32, RULE_alter_assembly_from_clause_start = 33, 
		RULE_alter_assembly_drop_clause = 34, RULE_alter_assembly_drop_multiple_files = 35, 
		RULE_alter_assembly_drop = 36, RULE_alter_assembly_add_clause = 37, RULE_alter_asssembly_add_clause_start = 38, 
		RULE_alter_assembly_client_file_clause = 39, RULE_alter_assembly_file_name = 40, 
		RULE_alter_assembly_file_bits = 41, RULE_alter_assembly_as = 42, RULE_alter_assembly_with_clause = 43, 
		RULE_alter_assembly_with = 44, RULE_client_assembly_specifier = 45, RULE_assembly_option = 46, 
		RULE_network_file_share = 47, RULE_network_computer = 48, RULE_network_file_start = 49, 
		RULE_file_path = 50, RULE_file_directory_path_separator = 51, RULE_local_file = 52, 
		RULE_local_drive = 53, RULE_multiple_local_files = 54, RULE_multiple_local_file_start = 55, 
		RULE_create_assembly = 56, RULE_drop_assembly = 57, RULE_alter_asymmetric_key = 58, 
		RULE_alter_asymmetric_key_start = 59, RULE_asymmetric_key_option = 60, 
		RULE_asymmetric_key_option_start = 61, RULE_asymmetric_key_password_change_option = 62, 
		RULE_create_asymmetric_key = 63, RULE_drop_asymmetric_key = 64, RULE_alter_authorization = 65, 
		RULE_authorization_grantee = 66, RULE_entity_to = 67, RULE_colon_colon = 68, 
		RULE_alter_authorization_start = 69, RULE_alter_authorization_for_sql_database = 70, 
		RULE_alter_authorization_for_azure_dw = 71, RULE_alter_authorization_for_parallel_dw = 72, 
		RULE_class_type = 73, RULE_class_type_for_sql_database = 74, RULE_class_type_for_azure_dw = 75, 
		RULE_class_type_for_parallel_dw = 76, RULE_drop_availability_group = 77, 
		RULE_alter_availability_group = 78, RULE_alter_availability_group_start = 79, 
		RULE_alter_availability_group_options = 80, RULE_create_or_alter_broker_priority = 81, 
		RULE_drop_broker_priority = 82, RULE_alter_certificate = 83, RULE_alter_column_encryption_key = 84, 
		RULE_create_column_encryption_key = 85, RULE_drop_certificate = 86, RULE_drop_column_encryption_key = 87, 
		RULE_drop_column_master_key = 88, RULE_drop_contract = 89, RULE_drop_credential = 90, 
		RULE_drop_cryptograhic_provider = 91, RULE_drop_database = 92, RULE_drop_database_audit_specification = 93, 
		RULE_drop_database_scoped_credential = 94, RULE_drop_default = 95, RULE_drop_endpoint = 96, 
		RULE_drop_external_data_source = 97, RULE_drop_external_file_format = 98, 
		RULE_drop_external_library = 99, RULE_drop_external_resource_pool = 100, 
		RULE_drop_external_table = 101, RULE_drop_event_notifications = 102, RULE_drop_event_session = 103, 
		RULE_drop_fulltext_catalog = 104, RULE_drop_fulltext_index = 105, RULE_drop_fulltext_stoplist = 106, 
		RULE_drop_login = 107, RULE_drop_master_key = 108, RULE_drop_message_type = 109, 
		RULE_drop_partition_function = 110, RULE_drop_partition_scheme = 111, 
		RULE_drop_queue = 112, RULE_drop_remote_service_binding = 113, RULE_drop_resource_pool = 114, 
		RULE_drop_db_role = 115, RULE_drop_route = 116, RULE_drop_rule = 117, 
		RULE_drop_schema = 118, RULE_drop_search_property_list = 119, RULE_drop_security_policy = 120, 
		RULE_drop_sequence = 121, RULE_drop_server_audit = 122, RULE_drop_server_audit_specification = 123, 
		RULE_drop_server_role = 124, RULE_drop_service = 125, RULE_drop_signature = 126, 
		RULE_drop_statistics_name_azure_dw_and_pdw = 127, RULE_drop_symmetric_key = 128, 
		RULE_drop_synonym = 129, RULE_drop_user = 130, RULE_drop_workload_group = 131, 
		RULE_drop_xml_schema_collection = 132, RULE_disable_trigger = 133, RULE_enable_trigger = 134, 
		RULE_lock_table = 135, RULE_truncate_table = 136, RULE_create_column_master_key = 137, 
		RULE_alter_credential = 138, RULE_create_credential = 139, RULE_alter_cryptographic_provider = 140, 
		RULE_create_cryptographic_provider = 141, RULE_create_event_notification = 142, 
		RULE_create_or_alter_event_session = 143, RULE_event_session_predicate_expression = 144, 
		RULE_event_session_predicate_factor = 145, RULE_event_session_predicate_leaf = 146, 
		RULE_alter_external_data_source = 147, RULE_alter_external_library = 148, 
		RULE_create_external_library = 149, RULE_alter_external_resource_pool = 150, 
		RULE_create_external_resource_pool = 151, RULE_alter_fulltext_catalog = 152, 
		RULE_create_fulltext_catalog = 153, RULE_alter_fulltext_stoplist = 154, 
		RULE_create_fulltext_stoplist = 155, RULE_alter_login_sql_server = 156, 
		RULE_create_login_sql_server = 157, RULE_alter_login_azure_sql = 158, 
		RULE_create_login_azure_sql = 159, RULE_alter_login_azure_sql_dw_and_pdw = 160, 
		RULE_create_login_pdw = 161, RULE_alter_master_key_sql_server = 162, RULE_create_master_key_sql_server = 163, 
		RULE_alter_master_key_azure_sql = 164, RULE_create_master_key_azure_sql = 165, 
		RULE_alter_message_type = 166, RULE_alter_partition_function = 167, RULE_alter_partition_scheme = 168, 
		RULE_alter_remote_service_binding = 169, RULE_create_remote_service_binding = 170, 
		RULE_create_resource_pool = 171, RULE_alter_resource_governor = 172, RULE_alter_db_role = 173, 
		RULE_create_db_role = 174, RULE_create_route = 175, RULE_create_rule = 176, 
		RULE_alter_schema_sql = 177, RULE_create_schema = 178, RULE_create_schema_azure_sql_dw_and_pdw = 179, 
		RULE_alter_schema_azure_sql_dw_and_pdw = 180, RULE_create_search_property_list = 181, 
		RULE_create_security_policy = 182, RULE_alter_sequence = 183, RULE_create_sequence = 184, 
		RULE_alter_server_audit = 185, RULE_create_server_audit = 186, RULE_alter_server_audit_specification = 187, 
		RULE_create_server_audit_specification = 188, RULE_alter_server_configuration = 189, 
		RULE_alter_server_role = 190, RULE_create_server_role = 191, RULE_alter_server_role_pdw = 192, 
		RULE_alter_service = 193, RULE_create_service = 194, RULE_alter_service_master_key = 195, 
		RULE_alter_symmetric_key = 196, RULE_create_symmetric_key = 197, RULE_create_synonym = 198, 
		RULE_alter_user = 199, RULE_create_user = 200, RULE_create_user_azure_sql_dw = 201, 
		RULE_alter_user_azure_sql = 202, RULE_alter_workload_group = 203, RULE_create_workload_group = 204, 
		RULE_create_xml_schema_collection = 205, RULE_create_queue = 206, RULE_queue_settings = 207, 
		RULE_alter_queue = 208, RULE_queue_action = 209, RULE_queue_rebuild_options = 210, 
		RULE_create_contract = 211, RULE_conversation_statement = 212, RULE_message_statement = 213, 
		RULE_merge_statement = 214, RULE_merge_matched = 215, RULE_merge_not_matched = 216, 
		RULE_delete_statement = 217, RULE_delete_statement_from = 218, RULE_insert_statement = 219, 
		RULE_insert_statement_value = 220, RULE_receive_statement = 221, RULE_select_statement = 222, 
		RULE_time = 223, RULE_update_statement = 224, RULE_output_clause = 225, 
		RULE_output_dml_list_elem = 226, RULE_output_column_name = 227, RULE_create_database = 228, 
		RULE_create_index = 229, RULE_create_or_alter_procedure = 230, RULE_create_or_alter_trigger = 231, 
		RULE_create_or_alter_dml_trigger = 232, RULE_dml_trigger_option = 233, 
		RULE_dml_trigger_operation = 234, RULE_create_or_alter_ddl_trigger = 235, 
		RULE_ddl_trigger_operation = 236, RULE_create_or_alter_function = 237, 
		RULE_func_body_returns_select = 238, RULE_func_body_returns_table = 239, 
		RULE_func_body_returns_scalar = 240, RULE_procedure_param = 241, RULE_procedure_option = 242, 
		RULE_function_option = 243, RULE_create_statistics = 244, RULE_update_statistics = 245, 
		RULE_create_table = 246, RULE_table_options = 247, RULE_create_view = 248, 
		RULE_view_attribute = 249, RULE_alter_table = 250, RULE_alter_database = 251, 
		RULE_database_optionspec = 252, RULE_auto_option = 253, RULE_change_tracking_option = 254, 
		RULE_change_tracking_option_list = 255, RULE_containment_option = 256, 
		RULE_cursor_option = 257, RULE_alter_endpoint = 258, RULE_database_mirroring_option = 259, 
		RULE_mirroring_set_option = 260, RULE_mirroring_partner = 261, RULE_mirroring_witness = 262, 
		RULE_witness_partner_equal = 263, RULE_partner_option = 264, RULE_witness_option = 265, 
		RULE_witness_server = 266, RULE_partner_server = 267, RULE_mirroring_host_port_seperator = 268, 
		RULE_partner_server_tcp_prefix = 269, RULE_port_number = 270, RULE_host = 271, 
		RULE_date_correlation_optimization_option = 272, RULE_db_encryption_option = 273, 
		RULE_db_state_option = 274, RULE_db_update_option = 275, RULE_db_user_access_option = 276, 
		RULE_delayed_durability_option = 277, RULE_external_access_option = 278, 
		RULE_hadr_options = 279, RULE_mixed_page_allocation_option = 280, RULE_parameterization_option = 281, 
		RULE_recovery_option = 282, RULE_service_broker_option = 283, RULE_snapshot_option = 284, 
		RULE_sql_option = 285, RULE_target_recovery_time_option = 286, RULE_termination = 287, 
		RULE_drop_index = 288, RULE_drop_relational_or_xml_or_spatial_index = 289, 
		RULE_drop_backward_compatible_index = 290, RULE_drop_procedure = 291, 
		RULE_drop_trigger = 292, RULE_drop_dml_trigger = 293, RULE_drop_ddl_trigger = 294, 
		RULE_drop_function = 295, RULE_drop_statistics = 296, RULE_drop_table = 297, 
		RULE_drop_view = 298, RULE_create_type = 299, RULE_drop_type = 300, RULE_rowset_function_limited = 301, 
		RULE_openquery = 302, RULE_opendatasource = 303, RULE_declare_statement = 304, 
		RULE_cursor_statement = 305, RULE_backup_database = 306, RULE_backup_log = 307, 
		RULE_backup_certificate = 308, RULE_backup_master_key = 309, RULE_backup_service_master_key = 310, 
		RULE_execute_statement = 311, RULE_execute_body = 312, RULE_execute_statement_arg = 313, 
		RULE_execute_var_string = 314, RULE_security_statement = 315, RULE_create_certificate = 316, 
		RULE_existing_keys = 317, RULE_private_key_options = 318, RULE_generate_new_keys = 319, 
		RULE_date_options = 320, RULE_open_key = 321, RULE_close_key = 322, RULE_create_key = 323, 
		RULE_key_options = 324, RULE_algorithm = 325, RULE_encryption_mechanism = 326, 
		RULE_decryption_mechanism = 327, RULE_grant_permission = 328, RULE_set_statement = 329, 
		RULE_transaction_statement = 330, RULE_go_statement = 331, RULE_use_statement = 332, 
		RULE_setuser_statement = 333, RULE_dbcc_clause = 334, RULE_dbcc_options = 335, 
		RULE_execute_clause = 336, RULE_declare_local = 337, RULE_table_type_definition = 338, 
		RULE_xml_type_definition = 339, RULE_xml_schema_collection = 340, RULE_column_def_table_constraints = 341, 
		RULE_column_def_table_constraint = 342, RULE_column_definition = 343, 
		RULE_materialized_column_definition = 344, RULE_column_constraint = 345, 
		RULE_table_constraint = 346, RULE_on_delete = 347, RULE_on_update = 348, 
		RULE_index_options = 349, RULE_index_option = 350, RULE_declare_cursor = 351, 
		RULE_declare_set_cursor_common = 352, RULE_declare_set_cursor_common_partial = 353, 
		RULE_fetch_cursor = 354, RULE_set_special = 355, RULE_constant_LOCAL_ID = 356, 
		RULE_expression = 357, RULE_primitive_expression = 358, RULE_case_expression = 359, 
		RULE_unary_operator_expression = 360, RULE_bracket_expression = 361, RULE_constant_expression = 362, 
		RULE_subquery = 363, RULE_with_expression = 364, RULE_common_table_expression = 365, 
		RULE_update_elem = 366, RULE_search_condition_list = 367, RULE_search_condition = 368, 
		RULE_search_condition_and = 369, RULE_search_condition_not = 370, RULE_predicate = 371, 
		RULE_query_expression = 372, RULE_sql_union = 373, RULE_query_specification = 374, 
		RULE_top_clause = 375, RULE_top_percent = 376, RULE_top_count = 377, RULE_order_by_clause = 378, 
		RULE_for_clause = 379, RULE_xml_common_directives = 380, RULE_order_by_expression = 381, 
		RULE_group_by_item = 382, RULE_option_clause = 383, RULE_option = 384, 
		RULE_optimize_for_arg = 385, RULE_select_list = 386, RULE_udt_method_arguments = 387, 
		RULE_asterisk = 388, RULE_column_elem = 389, RULE_udt_elem = 390, RULE_expression_elem = 391, 
		RULE_select_list_elem = 392, RULE_table_sources = 393, RULE_table_source = 394, 
		RULE_table_source_item_joined = 395, RULE_table_source_item = 396, RULE_open_xml = 397, 
		RULE_schema_declaration = 398, RULE_column_declaration = 399, RULE_change_table = 400, 
		RULE_join_part = 401, RULE_pivot_clause = 402, RULE_unpivot_clause = 403, 
		RULE_full_column_name_list = 404, RULE_table_name_with_hint = 405, RULE_rowset_function = 406, 
		RULE_bulk_option = 407, RULE_derived_table = 408, RULE_function_call = 409, 
		RULE_xml_data_type_methods = 410, RULE_value_method = 411, RULE_query_method = 412, 
		RULE_exist_method = 413, RULE_modify_method = 414, RULE_nodes_method = 415, 
		RULE_switch_section = 416, RULE_switch_search_condition_section = 417, 
		RULE_as_column_alias = 418, RULE_as_table_alias = 419, RULE_table_alias = 420, 
		RULE_with_table_hints = 421, RULE_insert_with_table_hints = 422, RULE_table_hint = 423, 
		RULE_index_value = 424, RULE_column_alias_list = 425, RULE_column_alias = 426, 
		RULE_table_value_constructor = 427, RULE_expression_list = 428, RULE_ranking_windowed_function = 429, 
		RULE_aggregate_windowed_function = 430, RULE_analytic_windowed_function = 431, 
		RULE_all_distinct_expression = 432, RULE_over_clause = 433, RULE_row_or_range_clause = 434, 
		RULE_window_frame_extent = 435, RULE_window_frame_bound = 436, RULE_window_frame_preceding = 437, 
		RULE_window_frame_following = 438, RULE_create_database_option = 439, 
		RULE_database_filestream_option = 440, RULE_database_file_spec = 441, 
		RULE_file_group = 442, RULE_file_spec = 443, RULE_entity_name = 444, RULE_entity_name_for_azure_dw = 445, 
		RULE_entity_name_for_parallel_dw = 446, RULE_full_table_name = 447, RULE_table_name = 448, 
		RULE_simple_name = 449, RULE_func_proc_name = 450, RULE_ddl_object = 451, 
		RULE_full_column_name = 452, RULE_column_name_list_with_order = 453, RULE_column_name_list = 454, 
		RULE_cursor_name = 455, RULE_on_off = 456, RULE_clustered = 457, RULE_null_notnull = 458, 
		RULE_null_or_default = 459, RULE_scalar_function_name = 460, RULE_begin_conversation_timer = 461, 
		RULE_begin_conversation_dialog = 462, RULE_contract_name = 463, RULE_service_name = 464, 
		RULE_end_conversation = 465, RULE_waitfor_conversation = 466, RULE_get_conversation = 467, 
		RULE_queue_id = 468, RULE_send_conversation = 469, RULE_data_type = 470, 
		RULE_default_value = 471, RULE_constant = 472, RULE_sign = 473, RULE_id = 474, 
		RULE_simple_id = 475, RULE_comparison_operator = 476, RULE_assignment_operator = 477, 
		RULE_file_size = 478;
	public static final String[] ruleNames = {
		"tsql_file", "batch", "sql_clauses", "sql_clause", "dml_clause", "ddl_clause", 
		"backup_statement", "cfl_statement", "block_statement", "break_statement", 
		"continue_statement", "goto_statement", "return_statement", "if_statement", 
		"throw_statement", "throw_error_number", "throw_message", "throw_state", 
		"try_catch_statement", "waitfor_statement", "while_statement", "print_statement", 
		"raiseerror_statement", "empty_statement", "another_statement", "alter_application_role", 
		"create_application_role", "drop_aggregate", "drop_application_role", 
		"alter_assembly", "alter_assembly_start", "alter_assembly_clause", "alter_assembly_from_clause", 
		"alter_assembly_from_clause_start", "alter_assembly_drop_clause", "alter_assembly_drop_multiple_files", 
		"alter_assembly_drop", "alter_assembly_add_clause", "alter_asssembly_add_clause_start", 
		"alter_assembly_client_file_clause", "alter_assembly_file_name", "alter_assembly_file_bits", 
		"alter_assembly_as", "alter_assembly_with_clause", "alter_assembly_with", 
		"client_assembly_specifier", "assembly_option", "network_file_share", 
		"network_computer", "network_file_start", "file_path", "file_directory_path_separator", 
		"local_file", "local_drive", "multiple_local_files", "multiple_local_file_start", 
		"create_assembly", "drop_assembly", "alter_asymmetric_key", "alter_asymmetric_key_start", 
		"asymmetric_key_option", "asymmetric_key_option_start", "asymmetric_key_password_change_option", 
		"create_asymmetric_key", "drop_asymmetric_key", "alter_authorization", 
		"authorization_grantee", "entity_to", "colon_colon", "alter_authorization_start", 
		"alter_authorization_for_sql_database", "alter_authorization_for_azure_dw", 
		"alter_authorization_for_parallel_dw", "class_type", "class_type_for_sql_database", 
		"class_type_for_azure_dw", "class_type_for_parallel_dw", "drop_availability_group", 
		"alter_availability_group", "alter_availability_group_start", "alter_availability_group_options", 
		"create_or_alter_broker_priority", "drop_broker_priority", "alter_certificate", 
		"alter_column_encryption_key", "create_column_encryption_key", "drop_certificate", 
		"drop_column_encryption_key", "drop_column_master_key", "drop_contract", 
		"drop_credential", "drop_cryptograhic_provider", "drop_database", "drop_database_audit_specification", 
		"drop_database_scoped_credential", "drop_default", "drop_endpoint", "drop_external_data_source", 
		"drop_external_file_format", "drop_external_library", "drop_external_resource_pool", 
		"drop_external_table", "drop_event_notifications", "drop_event_session", 
		"drop_fulltext_catalog", "drop_fulltext_index", "drop_fulltext_stoplist", 
		"drop_login", "drop_master_key", "drop_message_type", "drop_partition_function", 
		"drop_partition_scheme", "drop_queue", "drop_remote_service_binding", 
		"drop_resource_pool", "drop_db_role", "drop_route", "drop_rule", "drop_schema", 
		"drop_search_property_list", "drop_security_policy", "drop_sequence", 
		"drop_server_audit", "drop_server_audit_specification", "drop_server_role", 
		"drop_service", "drop_signature", "drop_statistics_name_azure_dw_and_pdw", 
		"drop_symmetric_key", "drop_synonym", "drop_user", "drop_workload_group", 
		"drop_xml_schema_collection", "disable_trigger", "enable_trigger", "lock_table", 
		"truncate_table", "create_column_master_key", "alter_credential", "create_credential", 
		"alter_cryptographic_provider", "create_cryptographic_provider", "create_event_notification", 
		"create_or_alter_event_session", "event_session_predicate_expression", 
		"event_session_predicate_factor", "event_session_predicate_leaf", "alter_external_data_source", 
		"alter_external_library", "create_external_library", "alter_external_resource_pool", 
		"create_external_resource_pool", "alter_fulltext_catalog", "create_fulltext_catalog", 
		"alter_fulltext_stoplist", "create_fulltext_stoplist", "alter_login_sql_server", 
		"create_login_sql_server", "alter_login_azure_sql", "create_login_azure_sql", 
		"alter_login_azure_sql_dw_and_pdw", "create_login_pdw", "alter_master_key_sql_server", 
		"create_master_key_sql_server", "alter_master_key_azure_sql", "create_master_key_azure_sql", 
		"alter_message_type", "alter_partition_function", "alter_partition_scheme", 
		"alter_remote_service_binding", "create_remote_service_binding", "create_resource_pool", 
		"alter_resource_governor", "alter_db_role", "create_db_role", "create_route", 
		"create_rule", "alter_schema_sql", "create_schema", "create_schema_azure_sql_dw_and_pdw", 
		"alter_schema_azure_sql_dw_and_pdw", "create_search_property_list", "create_security_policy", 
		"alter_sequence", "create_sequence", "alter_server_audit", "create_server_audit", 
		"alter_server_audit_specification", "create_server_audit_specification", 
		"alter_server_configuration", "alter_server_role", "create_server_role", 
		"alter_server_role_pdw", "alter_service", "create_service", "alter_service_master_key", 
		"alter_symmetric_key", "create_symmetric_key", "create_synonym", "alter_user", 
		"create_user", "create_user_azure_sql_dw", "alter_user_azure_sql", "alter_workload_group", 
		"create_workload_group", "create_xml_schema_collection", "create_queue", 
		"queue_settings", "alter_queue", "queue_action", "queue_rebuild_options", 
		"create_contract", "conversation_statement", "message_statement", "merge_statement", 
		"merge_matched", "merge_not_matched", "delete_statement", "delete_statement_from", 
		"insert_statement", "insert_statement_value", "receive_statement", "select_statement", 
		"time", "update_statement", "output_clause", "output_dml_list_elem", "output_column_name", 
		"create_database", "create_index", "create_or_alter_procedure", "create_or_alter_trigger", 
		"create_or_alter_dml_trigger", "dml_trigger_option", "dml_trigger_operation", 
		"create_or_alter_ddl_trigger", "ddl_trigger_operation", "create_or_alter_function", 
		"func_body_returns_select", "func_body_returns_table", "func_body_returns_scalar", 
		"procedure_param", "procedure_option", "function_option", "create_statistics", 
		"update_statistics", "create_table", "table_options", "create_view", "view_attribute", 
		"alter_table", "alter_database", "database_optionspec", "auto_option", 
		"change_tracking_option", "change_tracking_option_list", "containment_option", 
		"cursor_option", "alter_endpoint", "database_mirroring_option", "mirroring_set_option", 
		"mirroring_partner", "mirroring_witness", "witness_partner_equal", "partner_option", 
		"witness_option", "witness_server", "partner_server", "mirroring_host_port_seperator", 
		"partner_server_tcp_prefix", "port_number", "host", "date_correlation_optimization_option", 
		"db_encryption_option", "db_state_option", "db_update_option", "db_user_access_option", 
		"delayed_durability_option", "external_access_option", "hadr_options", 
		"mixed_page_allocation_option", "parameterization_option", "recovery_option", 
		"service_broker_option", "snapshot_option", "sql_option", "target_recovery_time_option", 
		"termination", "drop_index", "drop_relational_or_xml_or_spatial_index", 
		"drop_backward_compatible_index", "drop_procedure", "drop_trigger", "drop_dml_trigger", 
		"drop_ddl_trigger", "drop_function", "drop_statistics", "drop_table", 
		"drop_view", "create_type", "drop_type", "rowset_function_limited", "openquery", 
		"opendatasource", "declare_statement", "cursor_statement", "backup_database", 
		"backup_log", "backup_certificate", "backup_master_key", "backup_service_master_key", 
		"execute_statement", "execute_body", "execute_statement_arg", "execute_var_string", 
		"security_statement", "create_certificate", "existing_keys", "private_key_options", 
		"generate_new_keys", "date_options", "open_key", "close_key", "create_key", 
		"key_options", "algorithm", "encryption_mechanism", "decryption_mechanism", 
		"grant_permission", "set_statement", "transaction_statement", "go_statement", 
		"use_statement", "setuser_statement", "dbcc_clause", "dbcc_options", "execute_clause", 
		"declare_local", "table_type_definition", "xml_type_definition", "xml_schema_collection", 
		"column_def_table_constraints", "column_def_table_constraint", "column_definition", 
		"materialized_column_definition", "column_constraint", "table_constraint", 
		"on_delete", "on_update", "index_options", "index_option", "declare_cursor", 
		"declare_set_cursor_common", "declare_set_cursor_common_partial", "fetch_cursor", 
		"set_special", "constant_LOCAL_ID", "expression", "primitive_expression", 
		"case_expression", "unary_operator_expression", "bracket_expression", 
		"constant_expression", "subquery", "with_expression", "common_table_expression", 
		"update_elem", "search_condition_list", "search_condition", "search_condition_and", 
		"search_condition_not", "predicate", "query_expression", "sql_union", 
		"query_specification", "top_clause", "top_percent", "top_count", "order_by_clause", 
		"for_clause", "xml_common_directives", "order_by_expression", "group_by_item", 
		"option_clause", "option", "optimize_for_arg", "select_list", "udt_method_arguments", 
		"asterisk", "column_elem", "udt_elem", "expression_elem", "select_list_elem", 
		"table_sources", "table_source", "table_source_item_joined", "table_source_item", 
		"open_xml", "schema_declaration", "column_declaration", "change_table", 
		"join_part", "pivot_clause", "unpivot_clause", "full_column_name_list", 
		"table_name_with_hint", "rowset_function", "bulk_option", "derived_table", 
		"function_call", "xml_data_type_methods", "value_method", "query_method", 
		"exist_method", "modify_method", "nodes_method", "switch_section", "switch_search_condition_section", 
		"as_column_alias", "as_table_alias", "table_alias", "with_table_hints", 
		"insert_with_table_hints", "table_hint", "index_value", "column_alias_list", 
		"column_alias", "table_value_constructor", "expression_list", "ranking_windowed_function", 
		"aggregate_windowed_function", "analytic_windowed_function", "all_distinct_expression", 
		"over_clause", "row_or_range_clause", "window_frame_extent", "window_frame_bound", 
		"window_frame_preceding", "window_frame_following", "create_database_option", 
		"database_filestream_option", "database_file_spec", "file_group", "file_spec", 
		"entity_name", "entity_name_for_azure_dw", "entity_name_for_parallel_dw", 
		"full_table_name", "table_name", "simple_name", "func_proc_name", "ddl_object", 
		"full_column_name", "column_name_list_with_order", "column_name_list", 
		"cursor_name", "on_off", "clustered", "null_notnull", "null_or_default", 
		"scalar_function_name", "begin_conversation_timer", "begin_conversation_dialog", 
		"contract_name", "service_name", "end_conversation", "waitfor_conversation", 
		"get_conversation", "queue_id", "send_conversation", "data_type", "default_value", 
		"constant", "sign", "id", "simple_id", "comparison_operator", "assignment_operator", 
		"file_size"
	};

	private static final String[] _LITERAL_NAMES = {
		null, "'ABSENT'", "'ADD'", "'AES'", "'ALL'", "'ALLOW_CONNECTIONS'", "'ALLOW_MULTIPLE_EVENT_LOSS'", 
		"'ALLOW_SINGLE_EVENT_LOSS'", "'ALTER'", "'AND'", "'ANONYMOUS'", "'ANY'", 
		"'APPEND'", "'APPLICATION'", "'AS'", "'ASC'", "'ASYMMETRIC'", "'ASYNCHRONOUS_COMMIT'", 
		"'AUTHORIZATION'", "'AUTHENTICATION'", "'AUTOMATED_BACKUP_PREFERENCE'", 
		"'AUTOMATIC'", "'AVAILABILITY_MODE'", "'\\'", "'BACKUP'", "'BEFORE'", 
		"'BEGIN'", "'BETWEEN'", "'BLOCK'", "'BLOCKSIZE'", "'BLOCKING_HIERARCHY'", 
		"'BREAK'", "'BROWSE'", "'BUFFER'", "'BUFFERCOUNT'", "'BULK'", "'BY'", 
		"'CACHE'", "'CALLED'", "'CASCADE'", "'CASE'", "'CERTIFICATE'", "'CHANGETABLE'", 
		"'CHANGES'", "'CHECK'", "'CHECKPOINT'", "'CHECK_POLICY'", "'CHECK_EXPIRATION'", 
		"'CLASSIFIER_FUNCTION'", "'CLOSE'", "'CLUSTER'", "'CLUSTERED'", "'COALESCE'", 
		"'COLLATE'", "'COLUMN'", "'COMPRESSION'", "'COMMIT'", "'COMPUTE'", "'CONFIGURATION'", 
		"'CONSTRAINT'", "'CONTAINMENT'", "'CONTAINS'", "'CONTAINSTABLE'", "'CONTEXT'", 
		"'CONTINUE'", "'CONTINUE_AFTER_ERROR'", "'CONTRACT'", "'CONTRACT_NAME'", 
		"'CONVERSATION'", null, "'COPY_ONLY'", "'CREATE'", "'CROSS'", "'CURRENT'", 
		"'CURRENT_DATE'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'CURRENT_USER'", 
		"'CURSOR'", "'CYCLE'", "'DATA'", "'DATA_COMPRESSION'", "'DATA_SOURCE'", 
		"'DATABASE'", "'DATABASE_MIRRORING'", "'DBCC'", "'DEALLOCATE'", "'DECLARE'", 
		"'DEFAULT'", "'DEFAULT_DATABASE'", "'DEFAULT_SCHEMA'", "'DELETE'", "'DENY'", 
		"'DESC'", "'DIAGNOSTICS'", "'DIFFERENTIAL'", "'DISK'", "'DISTINCT'", "'DISTRIBUTED'", 
		"'DOUBLE'", "'\\\\'", "'//'", "'DROP'", "'DTC_SUPPORT'", "'DUMP'", "'ELSE'", 
		"'ENABLED'", "'END'", "'ENDPOINT'", "'ERRLVL'", "'ESCAPE'", "'ERROR'", 
		"'EVENT'", null, "'EVENT_RETENTION_MODE'", "'EXCEPT'", "'EXECUTABLE_FILE'", 
		null, "'EXISTS'", "'EXPIREDATE'", "'EXIT'", "'EXTENSION'", "'EXTERNAL'", 
		"'EXTERNAL_ACCESS'", "'FAILOVER'", "'FAILURECONDITIONLEVEL'", "'FAN_IN'", 
		"'FETCH'", "'FILE'", "'FILENAME'", "'FILLFACTOR'", "'FILE_SNAPSHOT'", 
		"'FOR'", "'FORCESEEK'", "'FORCE_SERVICE_ALLOW_DATA_LOSS'", "'FOREIGN'", 
		"'FREETEXT'", "'FREETEXTTABLE'", "'FROM'", "'FULL'", "'FUNCTION'", "'GET'", 
		"'GOTO'", "'GOVERNOR'", "'GRANT'", "'GROUP'", "'HAVING'", "'HASHED'", 
		"'HEALTHCHECKTIMEOUT'", "'IDENTITY'", "'IDENTITYCOL'", "'IDENTITY_INSERT'", 
		"'IF'", "'IN'", "'INCLUDE'", "'INCREMENT'", "'INDEX'", "'INFINITE'", "'INIT'", 
		"'INNER'", "'INSERT'", "'INSTEAD'", "'INTERSECT'", "'INTO'", null, null, 
		"'IS'", "'ISNULL'", "'JOIN'", "'KERBEROS'", "'KEY'", "'KEY_PATH'", "'KEY_STORE_PROVIDER_NAME'", 
		"'KILL'", "'LANGUAGE'", "'LEFT'", "'LIBRARY'", "'LIFETIME'", "'LIKE'", 
		"'LINENO'", "'LINUX'", "'LISTENER_IP'", "'LISTENER_PORT'", "'LOAD'", "'LOCAL_SERVICE_NAME'", 
		"'LOG'", "'MATCHED'", "'MASTER'", "'MAX_MEMORY'", "'MAXTRANSFER'", "'MAXVALUE'", 
		"'MAX_DISPATCH_LATENCY'", "'MAX_EVENT_SIZE'", "'MAX_SIZE'", "'MAX_OUTSTANDING_IO_PER_VOLUME'", 
		"'MEDIADESCRIPTION'", "'MEDIANAME'", "'MEMBER'", "'MEMORY_PARTITION_MODE'", 
		"'MERGE'", "'MESSAGE_FORWARDING'", "'MESSAGE_FORWARD_SIZE'", "'MINVALUE'", 
		"'MIRROR'", "'MUST_CHANGE'", "'NATIONAL'", "'NEGOTIATE'", "'NOCHECK'", 
		"'NOFORMAT'", "'NOINIT'", "'NONCLUSTERED'", "'NONE'", "'NOREWIND'", "'NOSKIP'", 
		"'NOUNLOAD'", "'NO_CHECKSUM'", "'NO_COMPRESSION'", "'NO_EVENT_LOSS'", 
		"'NOT'", "'NOTIFICATION'", "'NTLM'", "'NULL'", "'NULLIF'", "'OF'", "'OFF'", 
		"'OFFSETS'", "'OLD_PASSWORD'", "'ON'", "'ON_FAILURE'", "'OPEN'", "'OPENDATASOURCE'", 
		"'OPENQUERY'", "'OPENROWSET'", "'OPENXML'", "'OPTION'", "'OR'", "'ORDER'", 
		"'OUTER'", "'OVER'", "'PAGE'", "'PARAM_NODE'", "'PARTIAL'", "'PASSWORD'", 
		"'PERCENT'", "'PERMISSION_SET'", "'PER_CPU'", "'PER_DB'", "'PER_NODE'", 
		"'PIVOT'", "'PLAN'", "'PLATFORM'", "'POLICY'", "'PRECISION'", "'PREDICATE'", 
		"'PRIMARY'", "'PRINT'", "'PROC'", "'PROCEDURE'", "'PROCESS'", "'PUBLIC'", 
		"'PYTHON'", "'R'", "'RAISERROR'", "'RAW'", "'READ'", "'READTEXT'", "'READ_WRITE_FILEGROUPS'", 
		"'RECONFIGURE'", "'REFERENCES'", "'REGENERATE'", "'RELATED_CONVERSATION'", 
		"'RELATED_CONVERSATION_GROUP'", "'REPLICATION'", "'REQUIRED'", "'RESET'", 
		"'RESTART'", "'RESTORE'", "'RESTRICT'", "'RESUME'", "'RETAINDAYS'", "'RETURN'", 
		"'RETURNS'", "'REVERT'", "'REVOKE'", "'REWIND'", "'RIGHT'", "'ROLLBACK'", 
		"'ROLE'", "'ROWCOUNT'", "'ROWGUIDCOL'", "'RSA_512'", "'RSA_1024'", "'RSA_2048'", 
		"'RSA_3072'", "'RSA_4096'", "'SAFETY'", "'RULE'", "'SAFE'", "'SAVE'", 
		"'SCHEDULER'", "'SCHEMA'", "'SCHEME'", "'SECURITY'", "'SECURITYAUDIT'", 
		"'SELECT'", "'SEMANTICKEYPHRASETABLE'", "'SEMANTICSIMILARITYDETAILSTABLE'", 
		"'SEMANTICSIMILARITYTABLE'", "'SEQUENCE'", "'SERVER'", "'SERVICE'", "'SERVICE_BROKER'", 
		"'SERVICE_NAME'", "'SESSION'", "'SESSION_USER'", "'SET'", "'SETUSER'", 
		"'SHUTDOWN'", "'SID'", "'SKIP'", "'SOFTNUMA'", "'SOME'", "'SOURCE'", "'SPECIFICATION'", 
		"'SPLIT'", "'SQLDUMPERFLAGS'", "'SQLDUMPERPATH'", "'SQLDUMPERTIMEOUTS'", 
		"'STATISTICS'", "'STATE'", "'STATS'", "'START'", "'STARTED'", "'STARTUP_STATE'", 
		"'STOP'", "'STOPPED'", "'STOP_ON_ERROR'", "'SUPPORTED'", "'SYSTEM'", "'SYSTEM_USER'", 
		"'TABLE'", "'TABLESAMPLE'", "'TAPE'", "'TARGET'", "'TCP'", "'TEXTSIZE'", 
		"'THEN'", "'TO'", "'TOP'", "'TRACK_CAUSALITY'", "'TRAN'", "'TRANSACTION'", 
		"'TRANSFER'", "'TRIGGER'", "'TRUNCATE'", "'TSEQUAL'", "'UNCHECKED'", "'UNION'", 
		"'UNIQUE'", "'UNLOCK'", "'UNPIVOT'", "'UNSAFE'", "'UPDATE'", "'UPDATETEXT'", 
		"'URL'", "'USE'", "'USED'", "'USER'", "'VALUES'", "'VARYING'", "'VERBOSELOGGING'", 
		"'VIEW'", "'VISIBILITY'", "'WAITFOR'", "'WHEN'", "'WHERE'", "'WHILE'", 
		"'WINDOWS'", "'WITH'", "'WITHIN'", "'WITHOUT'", "'WITNESS'", "'WRITETEXT'", 
		"'ABSOLUTE'", "'ACCENT_SENSITIVITY'", "'ACTION'", "'ACTIVATION'", "'ACTIVE'", 
		"'ADDRESS'", "'AES_128'", "'AES_192'", "'AES_256'", "'AFFINITY'", "'AFTER'", 
		"'AGGREGATE'", "'ALGORITHM'", "'ALLOW_ENCRYPTED_VALUE_MODIFICATIONS'", 
		"'ALLOW_SNAPSHOT_ISOLATION'", "'ALLOWED'", "'ANSI_NULL_DEFAULT'", "'ANSI_NULLS'", 
		"'ANSI_PADDING'", "'ANSI_WARNINGS'", "'APPLICATION_LOG'", "'APPLY'", "'ARITHABORT'", 
		"'ASSEMBLY'", "'AUDIT'", "'AUDIT_GUID'", "'AUTO'", "'AUTO_CLEANUP'", "'AUTO_CLOSE'", 
		"'AUTO_CREATE_STATISTICS'", "'AUTO_SHRINK'", "'AUTO_UPDATE_STATISTICS'", 
		"'AUTO_UPDATE_STATISTICS_ASYNC'", "'AVAILABILITY'", "'AVG'", "'BACKUP_PRIORITY'", 
		"'BEGIN_DIALOG'", "'BIGINT'", "'BINARY BASE64'", "'BINARY_CHECKSUM'", 
		"'BINDING'", "'BLOB_STORAGE'", "'BROKER'", "'BROKER_INSTANCE'", "'BULK_LOGGED'", 
		"'CALLER'", "'CAP_CPU_PERCENT'", null, "'CATALOG'", "'CATCH'", "'CHANGE_RETENTION'", 
		"'CHANGE_TRACKING'", "'CHECKSUM'", "'CHECKSUM_AGG'", "'CLEANUP'", "'COLLECTION'", 
		"'COLUMN_MASTER_KEY'", "'COMMITTED'", "'COMPATIBILITY_LEVEL'", "'CONCAT'", 
		"'CONCAT_NULL_YIELDS_NULL'", "'CONTENT'", "'CONTROL'", "'COOKIE'", "'COUNT'", 
		"'COUNT_BIG'", "'COUNTER'", "'CPU'", "'CREATE_NEW'", "'CREATION_DISPOSITION'", 
		"'CREDENTIAL'", "'CRYPTOGRAPHIC'", "'CURSOR_CLOSE_ON_COMMIT'", "'CURSOR_DEFAULT'", 
		"'DATE_CORRELATION_OPTIMIZATION'", "'DATEADD'", "'DATEDIFF'", "'DATENAME'", 
		"'DATEPART'", "'DAYS'", "'DB_CHAINING'", "'DB_FAILOVER'", "'DECRYPTION'", 
		null, "'DEFAULT_FULLTEXT_LANGUAGE'", "'DEFAULT_LANGUAGE'", "'DELAY'", 
		"'DELAYED_DURABILITY'", "'DELETED'", "'DENSE_RANK'", "'DEPENDENTS'", "'DES'", 
		"'DESCRIPTION'", "'DESX'", "'DHCP'", "'DIALOG'", "'DIRECTORY_NAME'", "'DISABLE'", 
		"'DISABLE_BROKER'", "'DISABLED'", null, "'DOCUMENT'", "'DYNAMIC'", "'ELEMENTS'", 
		"'EMERGENCY'", "'EMPTY'", "'ENABLE'", "'ENABLE_BROKER'", "'ENCRYPTED_VALUE'", 
		"'ENCRYPTION'", "'ENDPOINT_URL'", "'ERROR_BROKER_CONVERSATIONS'", "'EXCLUSIVE'", 
		"'EXECUTABLE'", "'EXIST'", "'EXPAND'", "'EXPIRY_DATE'", "'EXPLICIT'", 
		"'FAIL_OPERATION'", "'FAILOVER_MODE'", "'FAILURE'", "'FAILURE_CONDITION_LEVEL'", 
		"'FAST'", "'FAST_FORWARD'", "'FILEGROUP'", "'FILEGROWTH'", "'FILEPATH'", 
		"'FILESTREAM'", "'FILTER'", "'FIRST'", "'FIRST_VALUE'", "'FOLLOWING'", 
		"'FORCE'", "'FORCE_FAILOVER_ALLOW_DATA_LOSS'", "'FORCED'", "'FORMAT'", 
		"'FORWARD_ONLY'", "'FULLSCAN'", "'FULLTEXT'", "'GB'", "'GETDATE'", "'GETUTCDATE'", 
		"'GLOBAL'", "'GO'", "'GROUP_MAX_REQUESTS'", "'GROUPING'", "'GROUPING_ID'", 
		"'HADR'", "'HASH'", "'HEALTH_CHECK_TIMEOUT'", "'HIGH'", "'HONOR_BROKER_PRIORITY'", 
		"'HOURS'", "'IDENTITY_VALUE'", "'IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX'", 
		"'IMMEDIATE'", "'IMPERSONATE'", "'IMPORTANCE'", "'INCLUDE_NULL_VALUES'", 
		"'INCREMENTAL'", "'INITIATOR'", "'INPUT'", "'INSENSITIVE'", "'INSERTED'", 
		"'INT'", "'IP'", "'ISOLATION'", "'JSON'", "'KB'", "'KEEP'", "'KEEPFIXED'", 
		"'KEY_SOURCE'", "'KEYS'", "'KEYSET'", "'LAG'", "'LAST'", "'LAST_VALUE'", 
		"'LEAD'", "'LEVEL'", "'LIST'", "'LISTENER'", "'LISTENER_URL'", "'LOB_COMPACTION'", 
		"'LOCAL'", "'LOCATION'", "'LOCK'", "'LOCK_ESCALATION'", "'LOGIN'", "'LOOP'", 
		"'LOW'", "'MANUAL'", "'MARK'", "'MATERIALIZED'", "'MAX'", "'MAX_CPU_PERCENT'", 
		"'MAX_DOP'", "'MAX_FILES'", "'MAX_IOPS_PER_VOLUME'", "'MAX_MEMORY_PERCENT'", 
		"'MAX_PROCESSES'", "'MAX_QUEUE_READERS'", "'MAX_ROLLOVER_FILES'", "'MAXDOP'", 
		"'MAXRECURSION'", "'MAXSIZE'", "'MB'", "'MEDIUM'", "'MEMORY_OPTIMIZED_DATA'", 
		"'MESSAGE'", "'MIN'", "'MIN_ACTIVE_ROWVERSION'", "'MIN_CPU_PERCENT'", 
		"'MIN_IOPS_PER_VOLUME'", "'MIN_MEMORY_PERCENT'", "'MINUTES'", "'MIRROR_ADDRESS'", 
		"'MIXED_PAGE_ALLOCATION'", "'MODE'", "'MODIFY'", "'MOVE'", "'MULTI_USER'", 
		"'NAME'", "'NESTED_TRIGGERS'", "'NEW_ACCOUNT'", "'NEW_BROKER'", "'NEW_PASSWORD'", 
		"'NEXT'", "'NO'", "'NO_TRUNCATE'", "'NO_WAIT'", "'NOCOUNT'", "'NODES'", 
		"'NOEXPAND'", "'NON_TRANSACTED_ACCESS'", "'NORECOMPUTE'", "'NORECOVERY'", 
		"'NOWAIT'", "'NTILE'", "'NUMANODE'", "'NUMBER'", "'NUMERIC_ROUNDABORT'", 
		"'OBJECT'", "'OFFLINE'", "'OFFSET'", "'OLD_ACCOUNT'", "'ONLINE'", "'ONLY'", 
		"'OPEN_EXISTING'", "'OPTIMISTIC'", "'OPTIMIZE'", "'OUT'", "'OUTPUT'", 
		"'OWNER'", "'PAGE_VERIFY'", "'PARAMETERIZATION'", "'PARTITION'", "'PARTITIONS'", 
		"'PARTNER'", "'PATH'", "'POISON_MESSAGE_HANDLING'", "'POOL'", "'PORT'", 
		"'PRECEDING'", "'PRIMARY_ROLE'", "'PRIOR'", "'PRIORITY'", "'PRIORITY_LEVEL'", 
		"'PRIVATE'", "'PRIVATE_KEY'", "'PRIVILEGES'", "'PROCEDURE_NAME'", "'PROPERTY'", 
		"'PROVIDER'", "'PROVIDER_KEY_NAME'", "'QUERY'", "'QUEUE'", "'QUEUE_DELAY'", 
		"'QUOTED_IDENTIFIER'", "'RANGE'", "'RANK'", "'RC2'", "'RC4'", "'RC4_128'", 
		"'READ_COMMITTED_SNAPSHOT'", "'READ_ONLY'", "'READ_ONLY_ROUTING_LIST'", 
		"'READ_WRITE'", "'READONLY'", "'REBUILD'", "'RECEIVE'", "'RECOMPILE'", 
		"'RECOVERY'", "'RECURSIVE_TRIGGERS'", "'RELATIVE'", "'REMOTE'", "'REMOTE_SERVICE_NAME'", 
		"'REMOVE'", "'REORGANIZE'", "'REPEATABLE'", "'REPLICA'", "'REQUEST_MAX_CPU_TIME_SEC'", 
		"'REQUEST_MAX_MEMORY_GRANT_PERCENT'", "'REQUEST_MEMORY_GRANT_TIMEOUT_SEC'", 
		"'REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT'", "'RESERVE_DISK_SPACE'", 
		"'RESOURCE'", "'RESOURCE_MANAGER_LOCATION'", "'RESTRICTED_USER'", "'RETENTION'", 
		"'ROBUST'", "'ROOT'", "'ROUTE'", "'ROW'", "'ROW_NUMBER'", "'ROWGUID'", 
		"'ROWS'", "'SAMPLE'", "'SCHEMABINDING'", "'SCOPED'", "'SCROLL'", "'SCROLL_LOCKS'", 
		"'SEARCH'", "'SECONDARY'", "'SECONDARY_ONLY'", "'SECONDARY_ROLE'", "'SECONDS'", 
		"'SECRET'", "'SECURITY_LOG'", "'SEEDING_MODE'", "'SELF'", "'SEMI_SENSITIVE'", 
		"'SEND'", "'SENT'", "'SERIALIZABLE'", "'SESSION_TIMEOUT'", "'SETERROR'", 
		"'SHARE'", "'SHOWPLAN'", "'SIGNATURE'", "'SIMPLE'", "'SINGLE_USER'", "'SIZE'", 
		"'SMALLINT'", "'SNAPSHOT'", "'SPATIAL_WINDOW_MAX_CELLS'", "'STANDBY'", 
		"'START_DATE'", "'STATIC'", "'STATS_STREAM'", "'STATUS'", "'STDEV'", "'STDEVP'", 
		"'STOPLIST'", "'STUFF'", "'SUBJECT'", "'SUM'", "'SUSPEND'", "'SYMMETRIC'", 
		"'SYNCHRONOUS_COMMIT'", "'SYNONYM'", "'TAKE'", "'TARGET_RECOVERY_TIME'", 
		"'TB'", "'TEXTIMAGE_ON'", "'THROW'", "'TIES'", "'TIME'", "'TIMEOUT'", 
		"'TIMER'", "'TINYINT'", "'TORN_PAGE_DETECTION'", "'TRANSFORM_NOISE_WORDS'", 
		"'TRIPLE_DES'", "'TRIPLE_DES_3KEY'", "'TRUSTWORTHY'", "'TRY'", "'TSQL'", 
		"'TWO_DIGIT_YEAR_CUTOFF'", "'TYPE'", "'TYPE_WARNING'", "'UNBOUNDED'", 
		"'UNCOMMITTED'", "'UNKNOWN'", "'UNLIMITED'", "'USING'", "'VALID_XML'", 
		"'VALIDATION'", "'VALUE'", "'VAR'", "'VARP'", "'VIEW_METADATA'", "'VIEWS'", 
		"'WAIT'", "'WELL_FORMED_XML'", "'WITHOUT_ARRAY_WRAPPER'", "'WORK'", "'WORKLOAD'", 
		"'XML'", "'XMLDATA'", "'XMLNAMESPACES'", "'XMLSCHEMA'", "'XSINIL'", "'$ACTION'", 
		null, null, null, null, "'''", null, null, null, null, null, null, null, 
		null, null, null, "'='", "'>'", "'<'", "'!'", "'+='", "'-='", "'*='", 
		"'/='", "'%='", "'&='", "'^='", "'|='", "'||'", "'.'", "'_'", "'@'", "'#'", 
		"'$'", "'('", "')'", "','", "';'", "':'", "'*'", "'/'", "'%'", "'+'", 
		"'-'", "'~'", "'|'", "'&'", "'^'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, "ABSENT", "ADD", "AES", "ALL", "ALLOW_CONNECTIONS", "ALLOW_MULTIPLE_EVENT_LOSS", 
		"ALLOW_SINGLE_EVENT_LOSS", "ALTER", "AND", "ANONYMOUS", "ANY", "APPEND", 
		"APPLICATION", "AS", "ASC", "ASYMMETRIC", "ASYNCHRONOUS_COMMIT", "AUTHORIZATION", 
		"AUTHENTICATION", "AUTOMATED_BACKUP_PREFERENCE", "AUTOMATIC", "AVAILABILITY_MODE", 
		"BACKSLASH", "BACKUP", "BEFORE", "BEGIN", "BETWEEN", "BLOCK", "BLOCKSIZE", 
		"BLOCKING_HIERARCHY", "BREAK", "BROWSE", "BUFFER", "BUFFERCOUNT", "BULK", 
		"BY", "CACHE", "CALLED", "CASCADE", "CASE", "CERTIFICATE", "CHANGETABLE", 
		"CHANGES", "CHECK", "CHECKPOINT", "CHECK_POLICY", "CHECK_EXPIRATION", 
		"CLASSIFIER_FUNCTION", "CLOSE", "CLUSTER", "CLUSTERED", "COALESCE", "COLLATE", 
		"COLUMN", "COMPRESSION", "COMMIT", "COMPUTE", "CONFIGURATION", "CONSTRAINT", 
		"CONTAINMENT", "CONTAINS", "CONTAINSTABLE", "CONTEXT", "CONTINUE", "CONTINUE_AFTER_ERROR", 
		"CONTRACT", "CONTRACT_NAME", "CONVERSATION", "CONVERT", "COPY_ONLY", "CREATE", 
		"CROSS", "CURRENT", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
		"CURRENT_USER", "CURSOR", "CYCLE", "DATA", "DATA_COMPRESSION", "DATA_SOURCE", 
		"DATABASE", "DATABASE_MIRRORING", "DBCC", "DEALLOCATE", "DECLARE", "DEFAULT", 
		"DEFAULT_DATABASE", "DEFAULT_SCHEMA", "DELETE", "DENY", "DESC", "DIAGNOSTICS", 
		"DIFFERENTIAL", "DISK", "DISTINCT", "DISTRIBUTED", "DOUBLE", "DOUBLE_BACK_SLASH", 
		"DOUBLE_FORWARD_SLASH", "DROP", "DTC_SUPPORT", "DUMP", "ELSE", "ENABLED", 
		"END", "ENDPOINT", "ERRLVL", "ESCAPE", "ERROR", "EVENT", "EVENTDATA", 
		"EVENT_RETENTION_MODE", "EXCEPT", "EXECUTABLE_FILE", "EXECUTE", "EXISTS", 
		"EXPIREDATE", "EXIT", "EXTENSION", "EXTERNAL", "EXTERNAL_ACCESS", "FAILOVER", 
		"FAILURECONDITIONLEVEL", "FAN_IN", "FETCH", "FILE", "FILENAME", "FILLFACTOR", 
		"FILE_SNAPSHOT", "FOR", "FORCESEEK", "FORCE_SERVICE_ALLOW_DATA_LOSS", 
		"FOREIGN", "FREETEXT", "FREETEXTTABLE", "FROM", "FULL", "FUNCTION", "GET", 
		"GOTO", "GOVERNOR", "GRANT", "GROUP", "HAVING", "HASHED", "HEALTHCHECKTIMEOUT", 
		"IDENTITY", "IDENTITYCOL", "IDENTITY_INSERT", "IF", "IN", "INCLUDE", "INCREMENT", 
		"INDEX", "INFINITE", "INIT", "INNER", "INSERT", "INSTEAD", "INTERSECT", 
		"INTO", "IPV4_ADDR", "IPV6_ADDR", "IS", "ISNULL", "JOIN", "KERBEROS", 
		"KEY", "KEY_PATH", "KEY_STORE_PROVIDER_NAME", "KILL", "LANGUAGE", "LEFT", 
		"LIBRARY", "LIFETIME", "LIKE", "LINENO", "LINUX", "LISTENER_IP", "LISTENER_PORT", 
		"LOAD", "LOCAL_SERVICE_NAME", "LOG", "MATCHED", "MASTER", "MAX_MEMORY", 
		"MAXTRANSFER", "MAXVALUE", "MAX_DISPATCH_LATENCY", "MAX_EVENT_SIZE", "MAX_SIZE", 
		"MAX_OUTSTANDING_IO_PER_VOLUME", "MEDIADESCRIPTION", "MEDIANAME", "MEMBER", 
		"MEMORY_PARTITION_MODE", "MERGE", "MESSAGE_FORWARDING", "MESSAGE_FORWARD_SIZE", 
		"MINVALUE", "MIRROR", "MUST_CHANGE", "NATIONAL", "NEGOTIATE", "NOCHECK", 
		"NOFORMAT", "NOINIT", "NONCLUSTERED", "NONE", "NOREWIND", "NOSKIP", "NOUNLOAD", 
		"NO_CHECKSUM", "NO_COMPRESSION", "NO_EVENT_LOSS", "NOT", "NOTIFICATION", 
		"NTLM", "NULL", "NULLIF", "OF", "OFF", "OFFSETS", "OLD_PASSWORD", "ON", 
		"ON_FAILURE", "OPEN", "OPENDATASOURCE", "OPENQUERY", "OPENROWSET", "OPENXML", 
		"OPTION", "OR", "ORDER", "OUTER", "OVER", "PAGE", "PARAM_NODE", "PARTIAL", 
		"PASSWORD", "PERCENT", "PERMISSION_SET", "PER_CPU", "PER_DB", "PER_NODE", 
		"PIVOT", "PLAN", "PLATFORM", "POLICY", "PRECISION", "PREDICATE", "PRIMARY", 
		"PRINT", "PROC", "PROCEDURE", "PROCESS", "PUBLIC", "PYTHON", "R", "RAISERROR", 
		"RAW", "READ", "READTEXT", "READ_WRITE_FILEGROUPS", "RECONFIGURE", "REFERENCES", 
		"REGENERATE", "RELATED_CONVERSATION", "RELATED_CONVERSATION_GROUP", "REPLICATION", 
		"REQUIRED", "RESET", "RESTART", "RESTORE", "RESTRICT", "RESUME", "RETAINDAYS", 
		"RETURN", "RETURNS", "REVERT", "REVOKE", "REWIND", "RIGHT", "ROLLBACK", 
		"ROLE", "ROWCOUNT", "ROWGUIDCOL", "RSA_512", "RSA_1024", "RSA_2048", "RSA_3072", 
		"RSA_4096", "SAFETY", "RULE", "SAFE", "SAVE", "SCHEDULER", "SCHEMA", "SCHEME", 
		"SECURITY", "SECURITYAUDIT", "SELECT", "SEMANTICKEYPHRASETABLE", "SEMANTICSIMILARITYDETAILSTABLE", 
		"SEMANTICSIMILARITYTABLE", "SEQUENCE", "SERVER", "SERVICE", "SERVICE_BROKER", 
		"SERVICE_NAME", "SESSION", "SESSION_USER", "SET", "SETUSER", "SHUTDOWN", 
		"SID", "SKIP_KEYWORD", "SOFTNUMA", "SOME", "SOURCE", "SPECIFICATION", 
		"SPLIT", "SQLDUMPERFLAGS", "SQLDUMPERPATH", "SQLDUMPERTIMEOUT", "STATISTICS", 
		"STATE", "STATS", "START", "STARTED", "STARTUP_STATE", "STOP", "STOPPED", 
		"STOP_ON_ERROR", "SUPPORTED", "SYSTEM", "SYSTEM_USER", "TABLE", "TABLESAMPLE", 
		"TAPE", "TARGET", "TCP", "TEXTSIZE", "THEN", "TO", "TOP", "TRACK_CAUSALITY", 
		"TRAN", "TRANSACTION", "TRANSFER", "TRIGGER", "TRUNCATE", "TSEQUAL", "UNCHECKED", 
		"UNION", "UNIQUE", "UNLOCK", "UNPIVOT", "UNSAFE", "UPDATE", "UPDATETEXT", 
		"URL", "USE", "USED", "USER", "VALUES", "VARYING", "VERBOSELOGGING", "VIEW", 
		"VISIBILITY", "WAITFOR", "WHEN", "WHERE", "WHILE", "WINDOWS", "WITH", 
		"WITHIN", "WITHOUT", "WITNESS", "WRITETEXT", "ABSOLUTE", "ACCENT_SENSITIVITY", 
		"ACTION", "ACTIVATION", "ACTIVE", "ADDRESS", "AES_128", "AES_192", "AES_256", 
		"AFFINITY", "AFTER", "AGGREGATE", "ALGORITHM", "ALLOW_ENCRYPTED_VALUE_MODIFICATIONS", 
		"ALLOW_SNAPSHOT_ISOLATION", "ALLOWED", "ANSI_NULL_DEFAULT", "ANSI_NULLS", 
		"ANSI_PADDING", "ANSI_WARNINGS", "APPLICATION_LOG", "APPLY", "ARITHABORT", 
		"ASSEMBLY", "AUDIT", "AUDIT_GUID", "AUTO", "AUTO_CLEANUP", "AUTO_CLOSE", 
		"AUTO_CREATE_STATISTICS", "AUTO_SHRINK", "AUTO_UPDATE_STATISTICS", "AUTO_UPDATE_STATISTICS_ASYNC", 
		"AVAILABILITY", "AVG", "BACKUP_PRIORITY", "BEGIN_DIALOG", "BIGINT", "BINARY_BASE64", 
		"BINARY_CHECKSUM", "BINDING", "BLOB_STORAGE", "BROKER", "BROKER_INSTANCE", 
		"BULK_LOGGED", "CALLER", "CAP_CPU_PERCENT", "CAST", "CATALOG", "CATCH", 
		"CHANGE_RETENTION", "CHANGE_TRACKING", "CHECKSUM", "CHECKSUM_AGG", "CLEANUP", 
		"COLLECTION", "COLUMN_MASTER_KEY", "COMMITTED", "COMPATIBILITY_LEVEL", 
		"CONCAT", "CONCAT_NULL_YIELDS_NULL", "CONTENT", "CONTROL", "COOKIE", "COUNT", 
		"COUNT_BIG", "COUNTER", "CPU", "CREATE_NEW", "CREATION_DISPOSITION", "CREDENTIAL", 
		"CRYPTOGRAPHIC", "CURSOR_CLOSE_ON_COMMIT", "CURSOR_DEFAULT", "DATE_CORRELATION_OPTIMIZATION", 
		"DATEADD", "DATEDIFF", "DATENAME", "DATEPART", "DAYS", "DB_CHAINING", 
		"DB_FAILOVER", "DECRYPTION", "DEFAULT_DOUBLE_QUOTE", "DEFAULT_FULLTEXT_LANGUAGE", 
		"DEFAULT_LANGUAGE", "DELAY", "DELAYED_DURABILITY", "DELETED", "DENSE_RANK", 
		"DEPENDENTS", "DES", "DESCRIPTION", "DESX", "DHCP", "DIALOG", "DIRECTORY_NAME", 
		"DISABLE", "DISABLE_BROKER", "DISABLED", "DISK_DRIVE", "DOCUMENT", "DYNAMIC", 
		"ELEMENTS", "EMERGENCY", "EMPTY", "ENABLE", "ENABLE_BROKER", "ENCRYPTED_VALUE", 
		"ENCRYPTION", "ENDPOINT_URL", "ERROR_BROKER_CONVERSATIONS", "EXCLUSIVE", 
		"EXECUTABLE", "EXIST", "EXPAND", "EXPIRY_DATE", "EXPLICIT", "FAIL_OPERATION", 
		"FAILOVER_MODE", "FAILURE", "FAILURE_CONDITION_LEVEL", "FAST", "FAST_FORWARD", 
		"FILEGROUP", "FILEGROWTH", "FILEPATH", "FILESTREAM", "FILTER", "FIRST", 
		"FIRST_VALUE", "FOLLOWING", "FORCE", "FORCE_FAILOVER_ALLOW_DATA_LOSS", 
		"FORCED", "FORMAT", "FORWARD_ONLY", "FULLSCAN", "FULLTEXT", "GB", "GETDATE", 
		"GETUTCDATE", "GLOBAL", "GO", "GROUP_MAX_REQUESTS", "GROUPING", "GROUPING_ID", 
		"HADR", "HASH", "HEALTH_CHECK_TIMEOUT", "HIGH", "HONOR_BROKER_PRIORITY", 
		"HOURS", "IDENTITY_VALUE", "IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX", "IMMEDIATE", 
		"IMPERSONATE", "IMPORTANCE", "INCLUDE_NULL_VALUES", "INCREMENTAL", "INITIATOR", 
		"INPUT", "INSENSITIVE", "INSERTED", "INT", "IP", "ISOLATION", "JSON", 
		"KB", "KEEP", "KEEPFIXED", "KEY_SOURCE", "KEYS", "KEYSET", "LAG", "LAST", 
		"LAST_VALUE", "LEAD", "LEVEL", "LIST", "LISTENER", "LISTENER_URL", "LOB_COMPACTION", 
		"LOCAL", "LOCATION", "LOCK", "LOCK_ESCALATION", "LOGIN", "LOOP", "LOW", 
		"MANUAL", "MARK", "MATERIALIZED", "MAX", "MAX_CPU_PERCENT", "MAX_DOP", 
		"MAX_FILES", "MAX_IOPS_PER_VOLUME", "MAX_MEMORY_PERCENT", "MAX_PROCESSES", 
		"MAX_QUEUE_READERS", "MAX_ROLLOVER_FILES", "MAXDOP", "MAXRECURSION", "MAXSIZE", 
		"MB", "MEDIUM", "MEMORY_OPTIMIZED_DATA", "MESSAGE", "MIN", "MIN_ACTIVE_ROWVERSION", 
		"MIN_CPU_PERCENT", "MIN_IOPS_PER_VOLUME", "MIN_MEMORY_PERCENT", "MINUTES", 
		"MIRROR_ADDRESS", "MIXED_PAGE_ALLOCATION", "MODE", "MODIFY", "MOVE", "MULTI_USER", 
		"NAME", "NESTED_TRIGGERS", "NEW_ACCOUNT", "NEW_BROKER", "NEW_PASSWORD", 
		"NEXT", "NO", "NO_TRUNCATE", "NO_WAIT", "NOCOUNT", "NODES", "NOEXPAND", 
		"NON_TRANSACTED_ACCESS", "NORECOMPUTE", "NORECOVERY", "NOWAIT", "NTILE", 
		"NUMANODE", "NUMBER", "NUMERIC_ROUNDABORT", "OBJECT", "OFFLINE", "OFFSET", 
		"OLD_ACCOUNT", "ONLINE", "ONLY", "OPEN_EXISTING", "OPTIMISTIC", "OPTIMIZE", 
		"OUT", "OUTPUT", "OWNER", "PAGE_VERIFY", "PARAMETERIZATION", "PARTITION", 
		"PARTITIONS", "PARTNER", "PATH", "POISON_MESSAGE_HANDLING", "POOL", "PORT", 
		"PRECEDING", "PRIMARY_ROLE", "PRIOR", "PRIORITY", "PRIORITY_LEVEL", "PRIVATE", 
		"PRIVATE_KEY", "PRIVILEGES", "PROCEDURE_NAME", "PROPERTY", "PROVIDER", 
		"PROVIDER_KEY_NAME", "QUERY", "QUEUE", "QUEUE_DELAY", "QUOTED_IDENTIFIER", 
		"RANGE", "RANK", "RC2", "RC4", "RC4_128", "READ_COMMITTED_SNAPSHOT", "READ_ONLY", 
		"READ_ONLY_ROUTING_LIST", "READ_WRITE", "READONLY", "REBUILD", "RECEIVE", 
		"RECOMPILE", "RECOVERY", "RECURSIVE_TRIGGERS", "RELATIVE", "REMOTE", "REMOTE_SERVICE_NAME", 
		"REMOVE", "REORGANIZE", "REPEATABLE", "REPLICA", "REQUEST_MAX_CPU_TIME_SEC", 
		"REQUEST_MAX_MEMORY_GRANT_PERCENT", "REQUEST_MEMORY_GRANT_TIMEOUT_SEC", 
		"REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT", "RESERVE_DISK_SPACE", "RESOURCE", 
		"RESOURCE_MANAGER_LOCATION", "RESTRICTED_USER", "RETENTION", "ROBUST", 
		"ROOT", "ROUTE", "ROW", "ROW_NUMBER", "ROWGUID", "ROWS", "SAMPLE", "SCHEMABINDING", 
		"SCOPED", "SCROLL", "SCROLL_LOCKS", "SEARCH", "SECONDARY", "SECONDARY_ONLY", 
		"SECONDARY_ROLE", "SECONDS", "SECRET", "SECURITY_LOG", "SEEDING_MODE", 
		"SELF", "SEMI_SENSITIVE", "SEND", "SENT", "SERIALIZABLE", "SESSION_TIMEOUT", 
		"SETERROR", "SHARE", "SHOWPLAN", "SIGNATURE", "SIMPLE", "SINGLE_USER", 
		"SIZE", "SMALLINT", "SNAPSHOT", "SPATIAL_WINDOW_MAX_CELLS", "STANDBY", 
		"START_DATE", "STATIC", "STATS_STREAM", "STATUS", "STDEV", "STDEVP", "STOPLIST", 
		"STUFF", "SUBJECT", "SUM", "SUSPEND", "SYMMETRIC", "SYNCHRONOUS_COMMIT", 
		"SYNONYM", "TAKE", "TARGET_RECOVERY_TIME", "TB", "TEXTIMAGE_ON", "THROW", 
		"TIES", "TIME", "TIMEOUT", "TIMER", "TINYINT", "TORN_PAGE_DETECTION", 
		"TRANSFORM_NOISE_WORDS", "TRIPLE_DES", "TRIPLE_DES_3KEY", "TRUSTWORTHY", 
		"TRY", "TSQL", "TWO_DIGIT_YEAR_CUTOFF", "TYPE", "TYPE_WARNING", "UNBOUNDED", 
		"UNCOMMITTED", "UNKNOWN", "UNLIMITED", "USING", "VALID_XML", "VALIDATION", 
		"VALUE", "VAR", "VARP", "VIEW_METADATA", "VIEWS", "WAIT", "WELL_FORMED_XML", 
		"WITHOUT_ARRAY_WRAPPER", "WORK", "WORKLOAD", "XML", "XMLDATA", "XMLNAMESPACES", 
		"XMLSCHEMA", "XSINIL", "DOLLAR_ACTION", "SPACE", "COMMENT", "LINE_COMMENT", 
		"DOUBLE_QUOTE_ID", "SINGLE_QUOTE", "SQUARE_BRACKET_ID", "LOCAL_ID", "DECIMAL", 
		"ID", "QUOTED_URL", "QUOTED_HOST_AND_PORT", "STRING", "BINARY", "FLOAT", 
		"REAL", "EQUAL", "GREATER", "LESS", "EXCLAMATION", "PLUS_ASSIGN", "MINUS_ASSIGN", 
		"MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", 
		"OR_ASSIGN", "DOUBLE_BAR", "DOT", "UNDERLINE", "AT", "SHARP", "DOLLAR", 
		"LR_BRACKET", "RR_BRACKET", "COMMA", "SEMI", "COLON", "STAR", "DIVIDE", 
		"MODULE", "PLUS", "MINUS", "BIT_NOT", "BIT_OR", "BIT_AND", "BIT_XOR", 
		"IPV4_OCTECT"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "TSqlParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public TSqlParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class Tsql_fileContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(TSqlParser.EOF, 0); }
		public List<BatchContext> batch() {
			return getRuleContexts(BatchContext.class);
		}
		public BatchContext batch(int i) {
			return getRuleContext(BatchContext.class,i);
		}
		public Tsql_fileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsql_file; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTsql_file(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTsql_file(this);
		}
	}

	public final Tsql_fileContext tsql_file() throws RecognitionException {
		Tsql_fileContext _localctx = new Tsql_fileContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_tsql_file);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(961);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALTER) | (1L << BACKUP) | (1L << BEGIN) | (1L << BLOCKING_HIERARCHY) | (1L << BREAK) | (1L << CALLED) | (1L << CASE) | (1L << CLOSE) | (1L << COALESCE) | (1L << COMMIT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CREATE - 64)) | (1L << (CURRENT_TIMESTAMP - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (DATA_COMPRESSION - 64)) | (1L << (DBCC - 64)) | (1L << (DEALLOCATE - 64)) | (1L << (DECLARE - 64)) | (1L << (DEFAULT - 64)) | (1L << (DELETE - 64)) | (1L << (DROP - 64)) | (1L << (END - 64)) | (1L << (EVENTDATA - 64)) | (1L << (EXECUTE - 64)) | (1L << (FETCH - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (FILENAME - 129)) | (1L << (FILLFACTOR - 129)) | (1L << (FORCESEEK - 129)) | (1L << (GET - 129)) | (1L << (GOTO - 129)) | (1L << (GRANT - 129)) | (1L << (IDENTITY - 129)) | (1L << (IF - 129)) | (1L << (INIT - 129)) | (1L << (INSERT - 129)) | (1L << (ISNULL - 129)) | (1L << (KEY - 129)) | (1L << (LEFT - 129)) | (1L << (MASTER - 129)) | (1L << (MAX_MEMORY - 129)))) != 0) || ((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (MERGE - 199)) | (1L << (NULL - 199)) | (1L << (NULLIF - 199)) | (1L << (OFFSETS - 199)) | (1L << (OPEN - 199)) | (1L << (OVER - 199)) | (1L << (PAGE - 199)) | (1L << (PRINT - 199)) | (1L << (PUBLIC - 199)) | (1L << (R - 199)) | (1L << (RAISERROR - 199)))) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (RAW - 263)) | (1L << (RETURN - 263)) | (1L << (RETURNS - 263)) | (1L << (REVERT - 263)) | (1L << (RIGHT - 263)) | (1L << (ROLLBACK - 263)) | (1L << (ROWCOUNT - 263)) | (1L << (SAFETY - 263)) | (1L << (SAVE - 263)) | (1L << (SELECT - 263)) | (1L << (SERVER - 263)) | (1L << (SESSION_USER - 263)) | (1L << (SET - 263)) | (1L << (SETUSER - 263)) | (1L << (SID - 263)) | (1L << (SOURCE - 263)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (STATE - 329)) | (1L << (START - 329)) | (1L << (SYSTEM_USER - 329)) | (1L << (TARGET - 329)) | (1L << (TRUNCATE - 329)) | (1L << (UPDATE - 329)) | (1L << (USE - 329)) | (1L << (WAITFOR - 329)) | (1L << (WHILE - 329)) | (1L << (WITH - 329)) | (1L << (ABSOLUTE - 329)) | (1L << (ACCENT_SENSITIVITY - 329)) | (1L << (ACTION - 329)) | (1L << (ACTIVATION - 329)) | (1L << (ACTIVE - 329)) | (1L << (ADDRESS - 329)) | (1L << (AES_128 - 329)) | (1L << (AES_192 - 329)) | (1L << (AES_256 - 329)) | (1L << (AFFINITY - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (AFTER - 393)) | (1L << (AGGREGATE - 393)) | (1L << (ALGORITHM - 393)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 393)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 393)) | (1L << (ALLOWED - 393)) | (1L << (ANSI_NULL_DEFAULT - 393)) | (1L << (ANSI_NULLS - 393)) | (1L << (ANSI_PADDING - 393)) | (1L << (ANSI_WARNINGS - 393)) | (1L << (APPLICATION_LOG - 393)) | (1L << (APPLY - 393)) | (1L << (ARITHABORT - 393)) | (1L << (ASSEMBLY - 393)) | (1L << (AUDIT - 393)) | (1L << (AUDIT_GUID - 393)) | (1L << (AUTO - 393)) | (1L << (AUTO_CLEANUP - 393)) | (1L << (AUTO_CLOSE - 393)) | (1L << (AUTO_CREATE_STATISTICS - 393)) | (1L << (AUTO_SHRINK - 393)) | (1L << (AUTO_UPDATE_STATISTICS - 393)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 393)) | (1L << (AVAILABILITY - 393)) | (1L << (AVG - 393)) | (1L << (BACKUP_PRIORITY - 393)) | (1L << (BEGIN_DIALOG - 393)) | (1L << (BIGINT - 393)) | (1L << (BINARY_BASE64 - 393)) | (1L << (BINARY_CHECKSUM - 393)) | (1L << (BINDING - 393)) | (1L << (BLOB_STORAGE - 393)) | (1L << (BROKER - 393)) | (1L << (BROKER_INSTANCE - 393)) | (1L << (BULK_LOGGED - 393)) | (1L << (CALLER - 393)) | (1L << (CAP_CPU_PERCENT - 393)) | (1L << (CAST - 393)) | (1L << (CATALOG - 393)) | (1L << (CATCH - 393)) | (1L << (CHANGE_RETENTION - 393)) | (1L << (CHANGE_TRACKING - 393)) | (1L << (CHECKSUM - 393)) | (1L << (CHECKSUM_AGG - 393)) | (1L << (CLEANUP - 393)) | (1L << (COLLECTION - 393)) | (1L << (COLUMN_MASTER_KEY - 393)) | (1L << (COMMITTED - 393)) | (1L << (COMPATIBILITY_LEVEL - 393)) | (1L << (CONCAT - 393)) | (1L << (CONCAT_NULL_YIELDS_NULL - 393)) | (1L << (CONTENT - 393)) | (1L << (CONTROL - 393)) | (1L << (COOKIE - 393)) | (1L << (COUNT - 393)) | (1L << (COUNT_BIG - 393)) | (1L << (COUNTER - 393)) | (1L << (CPU - 393)) | (1L << (CREATE_NEW - 393)) | (1L << (CREATION_DISPOSITION - 393)) | (1L << (CREDENTIAL - 393)) | (1L << (CRYPTOGRAPHIC - 393)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 393)) | (1L << (CURSOR_DEFAULT - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (DATE_CORRELATION_OPTIMIZATION - 457)) | (1L << (DATEADD - 457)) | (1L << (DATEDIFF - 457)) | (1L << (DATENAME - 457)) | (1L << (DATEPART - 457)) | (1L << (DAYS - 457)) | (1L << (DB_CHAINING - 457)) | (1L << (DB_FAILOVER - 457)) | (1L << (DECRYPTION - 457)) | (1L << (DEFAULT_DOUBLE_QUOTE - 457)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 457)) | (1L << (DEFAULT_LANGUAGE - 457)) | (1L << (DELAY - 457)) | (1L << (DELAYED_DURABILITY - 457)) | (1L << (DELETED - 457)) | (1L << (DENSE_RANK - 457)) | (1L << (DEPENDENTS - 457)) | (1L << (DES - 457)) | (1L << (DESCRIPTION - 457)) | (1L << (DESX - 457)) | (1L << (DHCP - 457)) | (1L << (DIALOG - 457)) | (1L << (DIRECTORY_NAME - 457)) | (1L << (DISABLE - 457)) | (1L << (DISABLE_BROKER - 457)) | (1L << (DISABLED - 457)) | (1L << (DISK_DRIVE - 457)) | (1L << (DOCUMENT - 457)) | (1L << (DYNAMIC - 457)) | (1L << (EMERGENCY - 457)) | (1L << (EMPTY - 457)) | (1L << (ENABLE - 457)) | (1L << (ENABLE_BROKER - 457)) | (1L << (ENCRYPTED_VALUE - 457)) | (1L << (ENCRYPTION - 457)) | (1L << (ENDPOINT_URL - 457)) | (1L << (ERROR_BROKER_CONVERSATIONS - 457)) | (1L << (EXCLUSIVE - 457)) | (1L << (EXECUTABLE - 457)) | (1L << (EXIST - 457)) | (1L << (EXPAND - 457)) | (1L << (EXPIRY_DATE - 457)) | (1L << (EXPLICIT - 457)) | (1L << (FAIL_OPERATION - 457)) | (1L << (FAILOVER_MODE - 457)) | (1L << (FAILURE - 457)) | (1L << (FAILURE_CONDITION_LEVEL - 457)) | (1L << (FAST - 457)) | (1L << (FAST_FORWARD - 457)) | (1L << (FILEGROUP - 457)) | (1L << (FILEGROWTH - 457)) | (1L << (FILEPATH - 457)) | (1L << (FILESTREAM - 457)) | (1L << (FILTER - 457)) | (1L << (FIRST - 457)) | (1L << (FIRST_VALUE - 457)) | (1L << (FOLLOWING - 457)) | (1L << (FORCE - 457)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 457)) | (1L << (FORCED - 457)) | (1L << (FORMAT - 457)) | (1L << (FORWARD_ONLY - 457)) | (1L << (FULLSCAN - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (FULLTEXT - 521)) | (1L << (GB - 521)) | (1L << (GETDATE - 521)) | (1L << (GETUTCDATE - 521)) | (1L << (GLOBAL - 521)) | (1L << (GO - 521)) | (1L << (GROUP_MAX_REQUESTS - 521)) | (1L << (GROUPING - 521)) | (1L << (GROUPING_ID - 521)) | (1L << (HADR - 521)) | (1L << (HASH - 521)) | (1L << (HEALTH_CHECK_TIMEOUT - 521)) | (1L << (HIGH - 521)) | (1L << (HONOR_BROKER_PRIORITY - 521)) | (1L << (HOURS - 521)) | (1L << (IDENTITY_VALUE - 521)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 521)) | (1L << (IMMEDIATE - 521)) | (1L << (IMPERSONATE - 521)) | (1L << (IMPORTANCE - 521)) | (1L << (INCREMENTAL - 521)) | (1L << (INITIATOR - 521)) | (1L << (INPUT - 521)) | (1L << (INSENSITIVE - 521)) | (1L << (INSERTED - 521)) | (1L << (INT - 521)) | (1L << (IP - 521)) | (1L << (ISOLATION - 521)) | (1L << (KB - 521)) | (1L << (KEEP - 521)) | (1L << (KEEPFIXED - 521)) | (1L << (KEY_SOURCE - 521)) | (1L << (KEYS - 521)) | (1L << (KEYSET - 521)) | (1L << (LAG - 521)) | (1L << (LAST - 521)) | (1L << (LAST_VALUE - 521)) | (1L << (LEAD - 521)) | (1L << (LEVEL - 521)) | (1L << (LIST - 521)) | (1L << (LISTENER - 521)) | (1L << (LISTENER_URL - 521)) | (1L << (LOB_COMPACTION - 521)) | (1L << (LOCAL - 521)) | (1L << (LOCATION - 521)) | (1L << (LOCK - 521)) | (1L << (LOCK_ESCALATION - 521)) | (1L << (LOGIN - 521)) | (1L << (LOOP - 521)) | (1L << (LOW - 521)) | (1L << (MANUAL - 521)) | (1L << (MARK - 521)) | (1L << (MATERIALIZED - 521)) | (1L << (MAX - 521)) | (1L << (MAX_CPU_PERCENT - 521)) | (1L << (MAX_DOP - 521)) | (1L << (MAX_FILES - 521)) | (1L << (MAX_IOPS_PER_VOLUME - 521)) | (1L << (MAX_MEMORY_PERCENT - 521)) | (1L << (MAX_PROCESSES - 521)) | (1L << (MAX_QUEUE_READERS - 521)) | (1L << (MAX_ROLLOVER_FILES - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (MAXDOP - 585)) | (1L << (MAXRECURSION - 585)) | (1L << (MAXSIZE - 585)) | (1L << (MB - 585)) | (1L << (MEDIUM - 585)) | (1L << (MEMORY_OPTIMIZED_DATA - 585)) | (1L << (MESSAGE - 585)) | (1L << (MIN - 585)) | (1L << (MIN_ACTIVE_ROWVERSION - 585)) | (1L << (MIN_CPU_PERCENT - 585)) | (1L << (MIN_IOPS_PER_VOLUME - 585)) | (1L << (MIN_MEMORY_PERCENT - 585)) | (1L << (MINUTES - 585)) | (1L << (MIRROR_ADDRESS - 585)) | (1L << (MIXED_PAGE_ALLOCATION - 585)) | (1L << (MODE - 585)) | (1L << (MODIFY - 585)) | (1L << (MOVE - 585)) | (1L << (MULTI_USER - 585)) | (1L << (NAME - 585)) | (1L << (NESTED_TRIGGERS - 585)) | (1L << (NEW_ACCOUNT - 585)) | (1L << (NEW_BROKER - 585)) | (1L << (NEW_PASSWORD - 585)) | (1L << (NEXT - 585)) | (1L << (NO - 585)) | (1L << (NO_TRUNCATE - 585)) | (1L << (NO_WAIT - 585)) | (1L << (NOCOUNT - 585)) | (1L << (NODES - 585)) | (1L << (NOEXPAND - 585)) | (1L << (NON_TRANSACTED_ACCESS - 585)) | (1L << (NORECOMPUTE - 585)) | (1L << (NORECOVERY - 585)) | (1L << (NOWAIT - 585)) | (1L << (NTILE - 585)) | (1L << (NUMANODE - 585)) | (1L << (NUMBER - 585)) | (1L << (NUMERIC_ROUNDABORT - 585)) | (1L << (OBJECT - 585)) | (1L << (OFFLINE - 585)) | (1L << (OFFSET - 585)) | (1L << (OLD_ACCOUNT - 585)) | (1L << (ONLINE - 585)) | (1L << (ONLY - 585)) | (1L << (OPEN_EXISTING - 585)) | (1L << (OPTIMISTIC - 585)) | (1L << (OPTIMIZE - 585)) | (1L << (OUT - 585)) | (1L << (OUTPUT - 585)) | (1L << (OWNER - 585)) | (1L << (PAGE_VERIFY - 585)) | (1L << (PARAMETERIZATION - 585)) | (1L << (PARTITION - 585)) | (1L << (PARTITIONS - 585)) | (1L << (PARTNER - 585)) | (1L << (PATH - 585)) | (1L << (POISON_MESSAGE_HANDLING - 585)) | (1L << (POOL - 585)) | (1L << (PORT - 585)) | (1L << (PRECEDING - 585)) | (1L << (PRIMARY_ROLE - 585)) | (1L << (PRIOR - 585)) | (1L << (PRIORITY - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (PRIORITY_LEVEL - 649)) | (1L << (PRIVATE - 649)) | (1L << (PRIVATE_KEY - 649)) | (1L << (PRIVILEGES - 649)) | (1L << (PROCEDURE_NAME - 649)) | (1L << (PROPERTY - 649)) | (1L << (PROVIDER - 649)) | (1L << (PROVIDER_KEY_NAME - 649)) | (1L << (QUERY - 649)) | (1L << (QUEUE - 649)) | (1L << (QUEUE_DELAY - 649)) | (1L << (QUOTED_IDENTIFIER - 649)) | (1L << (RANGE - 649)) | (1L << (RANK - 649)) | (1L << (RC2 - 649)) | (1L << (RC4 - 649)) | (1L << (RC4_128 - 649)) | (1L << (READ_COMMITTED_SNAPSHOT - 649)) | (1L << (READ_ONLY - 649)) | (1L << (READ_ONLY_ROUTING_LIST - 649)) | (1L << (READ_WRITE - 649)) | (1L << (READONLY - 649)) | (1L << (REBUILD - 649)) | (1L << (RECEIVE - 649)) | (1L << (RECOMPILE - 649)) | (1L << (RECOVERY - 649)) | (1L << (RECURSIVE_TRIGGERS - 649)) | (1L << (RELATIVE - 649)) | (1L << (REMOTE - 649)) | (1L << (REMOTE_SERVICE_NAME - 649)) | (1L << (REMOVE - 649)) | (1L << (REORGANIZE - 649)) | (1L << (REPEATABLE - 649)) | (1L << (REPLICA - 649)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 649)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 649)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 649)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 649)) | (1L << (RESERVE_DISK_SPACE - 649)) | (1L << (RESOURCE - 649)) | (1L << (RESOURCE_MANAGER_LOCATION - 649)) | (1L << (RESTRICTED_USER - 649)) | (1L << (RETENTION - 649)) | (1L << (ROBUST - 649)) | (1L << (ROOT - 649)) | (1L << (ROUTE - 649)) | (1L << (ROW - 649)) | (1L << (ROW_NUMBER - 649)) | (1L << (ROWGUID - 649)) | (1L << (ROWS - 649)) | (1L << (SAMPLE - 649)) | (1L << (SCHEMABINDING - 649)) | (1L << (SCOPED - 649)) | (1L << (SCROLL - 649)) | (1L << (SCROLL_LOCKS - 649)) | (1L << (SEARCH - 649)) | (1L << (SECONDARY - 649)) | (1L << (SECONDARY_ONLY - 649)) | (1L << (SECONDARY_ROLE - 649)) | (1L << (SECONDS - 649)) | (1L << (SECRET - 649)) | (1L << (SECURITY_LOG - 649)) | (1L << (SEEDING_MODE - 649)) | (1L << (SELF - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (SEMI_SENSITIVE - 713)) | (1L << (SEND - 713)) | (1L << (SENT - 713)) | (1L << (SERIALIZABLE - 713)) | (1L << (SESSION_TIMEOUT - 713)) | (1L << (SETERROR - 713)) | (1L << (SHARE - 713)) | (1L << (SHOWPLAN - 713)) | (1L << (SIGNATURE - 713)) | (1L << (SIMPLE - 713)) | (1L << (SINGLE_USER - 713)) | (1L << (SIZE - 713)) | (1L << (SMALLINT - 713)) | (1L << (SNAPSHOT - 713)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 713)) | (1L << (STANDBY - 713)) | (1L << (START_DATE - 713)) | (1L << (STATIC - 713)) | (1L << (STATS_STREAM - 713)) | (1L << (STATUS - 713)) | (1L << (STDEV - 713)) | (1L << (STDEVP - 713)) | (1L << (STOPLIST - 713)) | (1L << (STUFF - 713)) | (1L << (SUBJECT - 713)) | (1L << (SUM - 713)) | (1L << (SUSPEND - 713)) | (1L << (SYMMETRIC - 713)) | (1L << (SYNCHRONOUS_COMMIT - 713)) | (1L << (SYNONYM - 713)) | (1L << (TAKE - 713)) | (1L << (TARGET_RECOVERY_TIME - 713)) | (1L << (TB - 713)) | (1L << (TEXTIMAGE_ON - 713)) | (1L << (THROW - 713)) | (1L << (TIES - 713)) | (1L << (TIME - 713)) | (1L << (TIMEOUT - 713)) | (1L << (TIMER - 713)) | (1L << (TINYINT - 713)) | (1L << (TORN_PAGE_DETECTION - 713)) | (1L << (TRANSFORM_NOISE_WORDS - 713)) | (1L << (TRIPLE_DES - 713)) | (1L << (TRIPLE_DES_3KEY - 713)) | (1L << (TRUSTWORTHY - 713)) | (1L << (TRY - 713)) | (1L << (TSQL - 713)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 713)) | (1L << (TYPE - 713)) | (1L << (TYPE_WARNING - 713)) | (1L << (UNBOUNDED - 713)) | (1L << (UNCOMMITTED - 713)) | (1L << (UNKNOWN - 713)) | (1L << (UNLIMITED - 713)) | (1L << (USING - 713)) | (1L << (VALID_XML - 713)) | (1L << (VALIDATION - 713)) | (1L << (VALUE - 713)) | (1L << (VAR - 713)) | (1L << (VARP - 713)) | (1L << (VIEW_METADATA - 713)) | (1L << (VIEWS - 713)) | (1L << (WAIT - 713)) | (1L << (WELL_FORMED_XML - 713)))) != 0) || ((((_la - 778)) & ~0x3f) == 0 && ((1L << (_la - 778)) & ((1L << (WORK - 778)) | (1L << (WORKLOAD - 778)) | (1L << (XML - 778)) | (1L << (XMLNAMESPACES - 778)) | (1L << (DOUBLE_QUOTE_ID - 778)) | (1L << (SQUARE_BRACKET_ID - 778)) | (1L << (LOCAL_ID - 778)) | (1L << (DECIMAL - 778)) | (1L << (ID - 778)) | (1L << (STRING - 778)) | (1L << (BINARY - 778)) | (1L << (FLOAT - 778)) | (1L << (REAL - 778)) | (1L << (DOLLAR - 778)) | (1L << (LR_BRACKET - 778)) | (1L << (SEMI - 778)) | (1L << (PLUS - 778)) | (1L << (MINUS - 778)) | (1L << (BIT_NOT - 778)))) != 0)) {
				{
				{
				setState(958);
				batch();
				}
				}
				setState(963);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(964);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BatchContext extends ParserRuleContext {
		public Execute_bodyContext execute_body() {
			return getRuleContext(Execute_bodyContext.class,0);
		}
		public List<Go_statementContext> go_statement() {
			return getRuleContexts(Go_statementContext.class);
		}
		public Go_statementContext go_statement(int i) {
			return getRuleContext(Go_statementContext.class,i);
		}
		public Sql_clausesContext sql_clauses() {
			return getRuleContext(Sql_clausesContext.class,0);
		}
		public BatchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_batch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterBatch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitBatch(this);
		}
	}

	public final BatchContext batch() throws RecognitionException {
		BatchContext _localctx = new BatchContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_batch);
		try {
			int _alt;
			setState(983);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,4,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(966);
				execute_body();
				setState(970);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(967);
						go_statement();
						}
						} 
					}
					setState(972);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1,_ctx);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(974);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,2,_ctx) ) {
				case 1:
					{
					setState(973);
					execute_body();
					}
					break;
				}
				setState(976);
				sql_clauses();
				setState(980);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,3,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(977);
						go_statement();
						}
						} 
					}
					setState(982);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,3,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_clausesContext extends ParserRuleContext {
		public List<Sql_clauseContext> sql_clause() {
			return getRuleContexts(Sql_clauseContext.class);
		}
		public Sql_clauseContext sql_clause(int i) {
			return getRuleContext(Sql_clauseContext.class,i);
		}
		public List<TerminalNode> SEMI() { return getTokens(TSqlParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(TSqlParser.SEMI, i);
		}
		public Sql_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSql_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSql_clauses(this);
		}
	}

	public final Sql_clausesContext sql_clauses() throws RecognitionException {
		Sql_clausesContext _localctx = new Sql_clausesContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_sql_clauses);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(989); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(985);
					sql_clause();
					setState(987);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,5,_ctx) ) {
					case 1:
						{
						setState(986);
						match(SEMI);
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(991); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,6,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_clauseContext extends ParserRuleContext {
		public Dml_clauseContext dml_clause() {
			return getRuleContext(Dml_clauseContext.class,0);
		}
		public Ddl_clauseContext ddl_clause() {
			return getRuleContext(Ddl_clauseContext.class,0);
		}
		public Cfl_statementContext cfl_statement() {
			return getRuleContext(Cfl_statementContext.class,0);
		}
		public Dbcc_clauseContext dbcc_clause() {
			return getRuleContext(Dbcc_clauseContext.class,0);
		}
		public Empty_statementContext empty_statement() {
			return getRuleContext(Empty_statementContext.class,0);
		}
		public Another_statementContext another_statement() {
			return getRuleContext(Another_statementContext.class,0);
		}
		public Backup_statementContext backup_statement() {
			return getRuleContext(Backup_statementContext.class,0);
		}
		public Sql_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSql_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSql_clause(this);
		}
	}

	public final Sql_clauseContext sql_clause() throws RecognitionException {
		Sql_clauseContext _localctx = new Sql_clauseContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_sql_clause);
		try {
			setState(1000);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,7,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(993);
				dml_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(994);
				ddl_clause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(995);
				cfl_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(996);
				dbcc_clause();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(997);
				empty_statement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(998);
				another_statement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(999);
				backup_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_clauseContext extends ParserRuleContext {
		public Merge_statementContext merge_statement() {
			return getRuleContext(Merge_statementContext.class,0);
		}
		public Delete_statementContext delete_statement() {
			return getRuleContext(Delete_statementContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Update_statementContext update_statement() {
			return getRuleContext(Update_statementContext.class,0);
		}
		public Dml_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDml_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDml_clause(this);
		}
	}

	public final Dml_clauseContext dml_clause() throws RecognitionException {
		Dml_clauseContext _localctx = new Dml_clauseContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_dml_clause);
		try {
			setState(1007);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,8,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1002);
				merge_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1003);
				delete_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1004);
				insert_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1005);
				select_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1006);
				update_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ddl_clauseContext extends ParserRuleContext {
		public Alter_application_roleContext alter_application_role() {
			return getRuleContext(Alter_application_roleContext.class,0);
		}
		public Alter_assemblyContext alter_assembly() {
			return getRuleContext(Alter_assemblyContext.class,0);
		}
		public Alter_asymmetric_keyContext alter_asymmetric_key() {
			return getRuleContext(Alter_asymmetric_keyContext.class,0);
		}
		public Alter_authorizationContext alter_authorization() {
			return getRuleContext(Alter_authorizationContext.class,0);
		}
		public Alter_authorization_for_azure_dwContext alter_authorization_for_azure_dw() {
			return getRuleContext(Alter_authorization_for_azure_dwContext.class,0);
		}
		public Alter_authorization_for_parallel_dwContext alter_authorization_for_parallel_dw() {
			return getRuleContext(Alter_authorization_for_parallel_dwContext.class,0);
		}
		public Alter_authorization_for_sql_databaseContext alter_authorization_for_sql_database() {
			return getRuleContext(Alter_authorization_for_sql_databaseContext.class,0);
		}
		public Alter_availability_groupContext alter_availability_group() {
			return getRuleContext(Alter_availability_groupContext.class,0);
		}
		public Alter_certificateContext alter_certificate() {
			return getRuleContext(Alter_certificateContext.class,0);
		}
		public Alter_column_encryption_keyContext alter_column_encryption_key() {
			return getRuleContext(Alter_column_encryption_keyContext.class,0);
		}
		public Alter_credentialContext alter_credential() {
			return getRuleContext(Alter_credentialContext.class,0);
		}
		public Alter_cryptographic_providerContext alter_cryptographic_provider() {
			return getRuleContext(Alter_cryptographic_providerContext.class,0);
		}
		public Alter_databaseContext alter_database() {
			return getRuleContext(Alter_databaseContext.class,0);
		}
		public Alter_db_roleContext alter_db_role() {
			return getRuleContext(Alter_db_roleContext.class,0);
		}
		public Alter_endpointContext alter_endpoint() {
			return getRuleContext(Alter_endpointContext.class,0);
		}
		public Create_or_alter_event_sessionContext create_or_alter_event_session() {
			return getRuleContext(Create_or_alter_event_sessionContext.class,0);
		}
		public Alter_external_data_sourceContext alter_external_data_source() {
			return getRuleContext(Alter_external_data_sourceContext.class,0);
		}
		public Alter_external_libraryContext alter_external_library() {
			return getRuleContext(Alter_external_libraryContext.class,0);
		}
		public Alter_external_resource_poolContext alter_external_resource_pool() {
			return getRuleContext(Alter_external_resource_poolContext.class,0);
		}
		public Alter_fulltext_catalogContext alter_fulltext_catalog() {
			return getRuleContext(Alter_fulltext_catalogContext.class,0);
		}
		public Alter_fulltext_stoplistContext alter_fulltext_stoplist() {
			return getRuleContext(Alter_fulltext_stoplistContext.class,0);
		}
		public Alter_login_azure_sqlContext alter_login_azure_sql() {
			return getRuleContext(Alter_login_azure_sqlContext.class,0);
		}
		public Alter_login_azure_sql_dw_and_pdwContext alter_login_azure_sql_dw_and_pdw() {
			return getRuleContext(Alter_login_azure_sql_dw_and_pdwContext.class,0);
		}
		public Alter_login_sql_serverContext alter_login_sql_server() {
			return getRuleContext(Alter_login_sql_serverContext.class,0);
		}
		public Alter_master_key_azure_sqlContext alter_master_key_azure_sql() {
			return getRuleContext(Alter_master_key_azure_sqlContext.class,0);
		}
		public Alter_master_key_sql_serverContext alter_master_key_sql_server() {
			return getRuleContext(Alter_master_key_sql_serverContext.class,0);
		}
		public Alter_message_typeContext alter_message_type() {
			return getRuleContext(Alter_message_typeContext.class,0);
		}
		public Alter_partition_functionContext alter_partition_function() {
			return getRuleContext(Alter_partition_functionContext.class,0);
		}
		public Alter_partition_schemeContext alter_partition_scheme() {
			return getRuleContext(Alter_partition_schemeContext.class,0);
		}
		public Alter_remote_service_bindingContext alter_remote_service_binding() {
			return getRuleContext(Alter_remote_service_bindingContext.class,0);
		}
		public Alter_resource_governorContext alter_resource_governor() {
			return getRuleContext(Alter_resource_governorContext.class,0);
		}
		public Alter_schema_azure_sql_dw_and_pdwContext alter_schema_azure_sql_dw_and_pdw() {
			return getRuleContext(Alter_schema_azure_sql_dw_and_pdwContext.class,0);
		}
		public Alter_schema_sqlContext alter_schema_sql() {
			return getRuleContext(Alter_schema_sqlContext.class,0);
		}
		public Alter_sequenceContext alter_sequence() {
			return getRuleContext(Alter_sequenceContext.class,0);
		}
		public Alter_server_auditContext alter_server_audit() {
			return getRuleContext(Alter_server_auditContext.class,0);
		}
		public Alter_server_audit_specificationContext alter_server_audit_specification() {
			return getRuleContext(Alter_server_audit_specificationContext.class,0);
		}
		public Alter_server_configurationContext alter_server_configuration() {
			return getRuleContext(Alter_server_configurationContext.class,0);
		}
		public Alter_server_roleContext alter_server_role() {
			return getRuleContext(Alter_server_roleContext.class,0);
		}
		public Alter_server_role_pdwContext alter_server_role_pdw() {
			return getRuleContext(Alter_server_role_pdwContext.class,0);
		}
		public Alter_serviceContext alter_service() {
			return getRuleContext(Alter_serviceContext.class,0);
		}
		public Alter_service_master_keyContext alter_service_master_key() {
			return getRuleContext(Alter_service_master_keyContext.class,0);
		}
		public Alter_symmetric_keyContext alter_symmetric_key() {
			return getRuleContext(Alter_symmetric_keyContext.class,0);
		}
		public Alter_tableContext alter_table() {
			return getRuleContext(Alter_tableContext.class,0);
		}
		public Alter_userContext alter_user() {
			return getRuleContext(Alter_userContext.class,0);
		}
		public Alter_user_azure_sqlContext alter_user_azure_sql() {
			return getRuleContext(Alter_user_azure_sqlContext.class,0);
		}
		public Alter_workload_groupContext alter_workload_group() {
			return getRuleContext(Alter_workload_groupContext.class,0);
		}
		public Create_application_roleContext create_application_role() {
			return getRuleContext(Create_application_roleContext.class,0);
		}
		public Create_assemblyContext create_assembly() {
			return getRuleContext(Create_assemblyContext.class,0);
		}
		public Create_asymmetric_keyContext create_asymmetric_key() {
			return getRuleContext(Create_asymmetric_keyContext.class,0);
		}
		public Create_column_encryption_keyContext create_column_encryption_key() {
			return getRuleContext(Create_column_encryption_keyContext.class,0);
		}
		public Create_column_master_keyContext create_column_master_key() {
			return getRuleContext(Create_column_master_keyContext.class,0);
		}
		public Create_credentialContext create_credential() {
			return getRuleContext(Create_credentialContext.class,0);
		}
		public Create_cryptographic_providerContext create_cryptographic_provider() {
			return getRuleContext(Create_cryptographic_providerContext.class,0);
		}
		public Create_databaseContext create_database() {
			return getRuleContext(Create_databaseContext.class,0);
		}
		public Create_db_roleContext create_db_role() {
			return getRuleContext(Create_db_roleContext.class,0);
		}
		public Create_event_notificationContext create_event_notification() {
			return getRuleContext(Create_event_notificationContext.class,0);
		}
		public Create_external_libraryContext create_external_library() {
			return getRuleContext(Create_external_libraryContext.class,0);
		}
		public Create_external_resource_poolContext create_external_resource_pool() {
			return getRuleContext(Create_external_resource_poolContext.class,0);
		}
		public Create_fulltext_catalogContext create_fulltext_catalog() {
			return getRuleContext(Create_fulltext_catalogContext.class,0);
		}
		public Create_fulltext_stoplistContext create_fulltext_stoplist() {
			return getRuleContext(Create_fulltext_stoplistContext.class,0);
		}
		public Create_indexContext create_index() {
			return getRuleContext(Create_indexContext.class,0);
		}
		public Create_login_azure_sqlContext create_login_azure_sql() {
			return getRuleContext(Create_login_azure_sqlContext.class,0);
		}
		public Create_login_pdwContext create_login_pdw() {
			return getRuleContext(Create_login_pdwContext.class,0);
		}
		public Create_login_sql_serverContext create_login_sql_server() {
			return getRuleContext(Create_login_sql_serverContext.class,0);
		}
		public Create_master_key_azure_sqlContext create_master_key_azure_sql() {
			return getRuleContext(Create_master_key_azure_sqlContext.class,0);
		}
		public Create_master_key_sql_serverContext create_master_key_sql_server() {
			return getRuleContext(Create_master_key_sql_serverContext.class,0);
		}
		public Create_or_alter_broker_priorityContext create_or_alter_broker_priority() {
			return getRuleContext(Create_or_alter_broker_priorityContext.class,0);
		}
		public Create_or_alter_functionContext create_or_alter_function() {
			return getRuleContext(Create_or_alter_functionContext.class,0);
		}
		public Create_or_alter_procedureContext create_or_alter_procedure() {
			return getRuleContext(Create_or_alter_procedureContext.class,0);
		}
		public Create_or_alter_triggerContext create_or_alter_trigger() {
			return getRuleContext(Create_or_alter_triggerContext.class,0);
		}
		public Create_remote_service_bindingContext create_remote_service_binding() {
			return getRuleContext(Create_remote_service_bindingContext.class,0);
		}
		public Create_resource_poolContext create_resource_pool() {
			return getRuleContext(Create_resource_poolContext.class,0);
		}
		public Create_routeContext create_route() {
			return getRuleContext(Create_routeContext.class,0);
		}
		public Create_ruleContext create_rule() {
			return getRuleContext(Create_ruleContext.class,0);
		}
		public Create_schemaContext create_schema() {
			return getRuleContext(Create_schemaContext.class,0);
		}
		public Create_schema_azure_sql_dw_and_pdwContext create_schema_azure_sql_dw_and_pdw() {
			return getRuleContext(Create_schema_azure_sql_dw_and_pdwContext.class,0);
		}
		public Create_search_property_listContext create_search_property_list() {
			return getRuleContext(Create_search_property_listContext.class,0);
		}
		public Create_security_policyContext create_security_policy() {
			return getRuleContext(Create_security_policyContext.class,0);
		}
		public Create_sequenceContext create_sequence() {
			return getRuleContext(Create_sequenceContext.class,0);
		}
		public Create_server_auditContext create_server_audit() {
			return getRuleContext(Create_server_auditContext.class,0);
		}
		public Create_server_audit_specificationContext create_server_audit_specification() {
			return getRuleContext(Create_server_audit_specificationContext.class,0);
		}
		public Create_server_roleContext create_server_role() {
			return getRuleContext(Create_server_roleContext.class,0);
		}
		public Create_serviceContext create_service() {
			return getRuleContext(Create_serviceContext.class,0);
		}
		public Create_statisticsContext create_statistics() {
			return getRuleContext(Create_statisticsContext.class,0);
		}
		public Create_symmetric_keyContext create_symmetric_key() {
			return getRuleContext(Create_symmetric_keyContext.class,0);
		}
		public Create_synonymContext create_synonym() {
			return getRuleContext(Create_synonymContext.class,0);
		}
		public Create_tableContext create_table() {
			return getRuleContext(Create_tableContext.class,0);
		}
		public Create_typeContext create_type() {
			return getRuleContext(Create_typeContext.class,0);
		}
		public Create_userContext create_user() {
			return getRuleContext(Create_userContext.class,0);
		}
		public Create_user_azure_sql_dwContext create_user_azure_sql_dw() {
			return getRuleContext(Create_user_azure_sql_dwContext.class,0);
		}
		public Create_viewContext create_view() {
			return getRuleContext(Create_viewContext.class,0);
		}
		public Create_workload_groupContext create_workload_group() {
			return getRuleContext(Create_workload_groupContext.class,0);
		}
		public Create_xml_schema_collectionContext create_xml_schema_collection() {
			return getRuleContext(Create_xml_schema_collectionContext.class,0);
		}
		public Drop_aggregateContext drop_aggregate() {
			return getRuleContext(Drop_aggregateContext.class,0);
		}
		public Drop_application_roleContext drop_application_role() {
			return getRuleContext(Drop_application_roleContext.class,0);
		}
		public Drop_assemblyContext drop_assembly() {
			return getRuleContext(Drop_assemblyContext.class,0);
		}
		public Drop_asymmetric_keyContext drop_asymmetric_key() {
			return getRuleContext(Drop_asymmetric_keyContext.class,0);
		}
		public Drop_availability_groupContext drop_availability_group() {
			return getRuleContext(Drop_availability_groupContext.class,0);
		}
		public Drop_broker_priorityContext drop_broker_priority() {
			return getRuleContext(Drop_broker_priorityContext.class,0);
		}
		public Drop_certificateContext drop_certificate() {
			return getRuleContext(Drop_certificateContext.class,0);
		}
		public Drop_column_encryption_keyContext drop_column_encryption_key() {
			return getRuleContext(Drop_column_encryption_keyContext.class,0);
		}
		public Drop_column_master_keyContext drop_column_master_key() {
			return getRuleContext(Drop_column_master_keyContext.class,0);
		}
		public Drop_contractContext drop_contract() {
			return getRuleContext(Drop_contractContext.class,0);
		}
		public Drop_credentialContext drop_credential() {
			return getRuleContext(Drop_credentialContext.class,0);
		}
		public Drop_cryptograhic_providerContext drop_cryptograhic_provider() {
			return getRuleContext(Drop_cryptograhic_providerContext.class,0);
		}
		public Drop_databaseContext drop_database() {
			return getRuleContext(Drop_databaseContext.class,0);
		}
		public Drop_database_audit_specificationContext drop_database_audit_specification() {
			return getRuleContext(Drop_database_audit_specificationContext.class,0);
		}
		public Drop_database_scoped_credentialContext drop_database_scoped_credential() {
			return getRuleContext(Drop_database_scoped_credentialContext.class,0);
		}
		public Drop_db_roleContext drop_db_role() {
			return getRuleContext(Drop_db_roleContext.class,0);
		}
		public Drop_defaultContext drop_default() {
			return getRuleContext(Drop_defaultContext.class,0);
		}
		public Drop_endpointContext drop_endpoint() {
			return getRuleContext(Drop_endpointContext.class,0);
		}
		public Drop_event_notificationsContext drop_event_notifications() {
			return getRuleContext(Drop_event_notificationsContext.class,0);
		}
		public Drop_event_sessionContext drop_event_session() {
			return getRuleContext(Drop_event_sessionContext.class,0);
		}
		public Drop_external_data_sourceContext drop_external_data_source() {
			return getRuleContext(Drop_external_data_sourceContext.class,0);
		}
		public Drop_external_file_formatContext drop_external_file_format() {
			return getRuleContext(Drop_external_file_formatContext.class,0);
		}
		public Drop_external_libraryContext drop_external_library() {
			return getRuleContext(Drop_external_libraryContext.class,0);
		}
		public Drop_external_resource_poolContext drop_external_resource_pool() {
			return getRuleContext(Drop_external_resource_poolContext.class,0);
		}
		public Drop_external_tableContext drop_external_table() {
			return getRuleContext(Drop_external_tableContext.class,0);
		}
		public Drop_fulltext_catalogContext drop_fulltext_catalog() {
			return getRuleContext(Drop_fulltext_catalogContext.class,0);
		}
		public Drop_fulltext_indexContext drop_fulltext_index() {
			return getRuleContext(Drop_fulltext_indexContext.class,0);
		}
		public Drop_fulltext_stoplistContext drop_fulltext_stoplist() {
			return getRuleContext(Drop_fulltext_stoplistContext.class,0);
		}
		public Drop_functionContext drop_function() {
			return getRuleContext(Drop_functionContext.class,0);
		}
		public Drop_indexContext drop_index() {
			return getRuleContext(Drop_indexContext.class,0);
		}
		public Drop_loginContext drop_login() {
			return getRuleContext(Drop_loginContext.class,0);
		}
		public Drop_master_keyContext drop_master_key() {
			return getRuleContext(Drop_master_keyContext.class,0);
		}
		public Drop_message_typeContext drop_message_type() {
			return getRuleContext(Drop_message_typeContext.class,0);
		}
		public Drop_partition_functionContext drop_partition_function() {
			return getRuleContext(Drop_partition_functionContext.class,0);
		}
		public Drop_partition_schemeContext drop_partition_scheme() {
			return getRuleContext(Drop_partition_schemeContext.class,0);
		}
		public Drop_procedureContext drop_procedure() {
			return getRuleContext(Drop_procedureContext.class,0);
		}
		public Drop_queueContext drop_queue() {
			return getRuleContext(Drop_queueContext.class,0);
		}
		public Drop_remote_service_bindingContext drop_remote_service_binding() {
			return getRuleContext(Drop_remote_service_bindingContext.class,0);
		}
		public Drop_resource_poolContext drop_resource_pool() {
			return getRuleContext(Drop_resource_poolContext.class,0);
		}
		public Drop_routeContext drop_route() {
			return getRuleContext(Drop_routeContext.class,0);
		}
		public Drop_ruleContext drop_rule() {
			return getRuleContext(Drop_ruleContext.class,0);
		}
		public Drop_schemaContext drop_schema() {
			return getRuleContext(Drop_schemaContext.class,0);
		}
		public Drop_search_property_listContext drop_search_property_list() {
			return getRuleContext(Drop_search_property_listContext.class,0);
		}
		public Drop_security_policyContext drop_security_policy() {
			return getRuleContext(Drop_security_policyContext.class,0);
		}
		public Drop_sequenceContext drop_sequence() {
			return getRuleContext(Drop_sequenceContext.class,0);
		}
		public Drop_server_auditContext drop_server_audit() {
			return getRuleContext(Drop_server_auditContext.class,0);
		}
		public Drop_server_audit_specificationContext drop_server_audit_specification() {
			return getRuleContext(Drop_server_audit_specificationContext.class,0);
		}
		public Drop_server_roleContext drop_server_role() {
			return getRuleContext(Drop_server_roleContext.class,0);
		}
		public Drop_serviceContext drop_service() {
			return getRuleContext(Drop_serviceContext.class,0);
		}
		public Drop_signatureContext drop_signature() {
			return getRuleContext(Drop_signatureContext.class,0);
		}
		public Drop_statisticsContext drop_statistics() {
			return getRuleContext(Drop_statisticsContext.class,0);
		}
		public Drop_statistics_name_azure_dw_and_pdwContext drop_statistics_name_azure_dw_and_pdw() {
			return getRuleContext(Drop_statistics_name_azure_dw_and_pdwContext.class,0);
		}
		public Drop_symmetric_keyContext drop_symmetric_key() {
			return getRuleContext(Drop_symmetric_keyContext.class,0);
		}
		public Drop_synonymContext drop_synonym() {
			return getRuleContext(Drop_synonymContext.class,0);
		}
		public Drop_tableContext drop_table() {
			return getRuleContext(Drop_tableContext.class,0);
		}
		public Drop_triggerContext drop_trigger() {
			return getRuleContext(Drop_triggerContext.class,0);
		}
		public Drop_typeContext drop_type() {
			return getRuleContext(Drop_typeContext.class,0);
		}
		public Drop_userContext drop_user() {
			return getRuleContext(Drop_userContext.class,0);
		}
		public Drop_viewContext drop_view() {
			return getRuleContext(Drop_viewContext.class,0);
		}
		public Drop_workload_groupContext drop_workload_group() {
			return getRuleContext(Drop_workload_groupContext.class,0);
		}
		public Drop_xml_schema_collectionContext drop_xml_schema_collection() {
			return getRuleContext(Drop_xml_schema_collectionContext.class,0);
		}
		public Disable_triggerContext disable_trigger() {
			return getRuleContext(Disable_triggerContext.class,0);
		}
		public Enable_triggerContext enable_trigger() {
			return getRuleContext(Enable_triggerContext.class,0);
		}
		public Lock_tableContext lock_table() {
			return getRuleContext(Lock_tableContext.class,0);
		}
		public Truncate_tableContext truncate_table() {
			return getRuleContext(Truncate_tableContext.class,0);
		}
		public Update_statisticsContext update_statistics() {
			return getRuleContext(Update_statisticsContext.class,0);
		}
		public Ddl_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ddl_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDdl_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDdl_clause(this);
		}
	}

	public final Ddl_clauseContext ddl_clause() throws RecognitionException {
		Ddl_clauseContext _localctx = new Ddl_clauseContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_ddl_clause);
		try {
			setState(1168);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,9,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1009);
				alter_application_role();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1010);
				alter_assembly();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1011);
				alter_asymmetric_key();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1012);
				alter_authorization();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1013);
				alter_authorization_for_azure_dw();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1014);
				alter_authorization_for_parallel_dw();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1015);
				alter_authorization_for_sql_database();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1016);
				alter_availability_group();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1017);
				alter_certificate();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1018);
				alter_column_encryption_key();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1019);
				alter_credential();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1020);
				alter_cryptographic_provider();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1021);
				alter_database();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1022);
				alter_db_role();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1023);
				alter_endpoint();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1024);
				create_or_alter_event_session();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1025);
				alter_external_data_source();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1026);
				alter_external_library();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1027);
				alter_external_resource_pool();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1028);
				alter_fulltext_catalog();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1029);
				alter_fulltext_stoplist();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(1030);
				alter_login_azure_sql();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(1031);
				alter_login_azure_sql_dw_and_pdw();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(1032);
				alter_login_sql_server();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(1033);
				alter_master_key_azure_sql();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(1034);
				alter_master_key_sql_server();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(1035);
				alter_message_type();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(1036);
				alter_partition_function();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(1037);
				alter_partition_scheme();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(1038);
				alter_remote_service_binding();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(1039);
				alter_resource_governor();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(1040);
				alter_schema_azure_sql_dw_and_pdw();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(1041);
				alter_schema_sql();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(1042);
				alter_sequence();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(1043);
				alter_server_audit();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(1044);
				alter_server_audit_specification();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(1045);
				alter_server_configuration();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(1046);
				alter_server_role();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(1047);
				alter_server_role_pdw();
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(1048);
				alter_service();
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(1049);
				alter_service_master_key();
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(1050);
				alter_symmetric_key();
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(1051);
				alter_table();
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(1052);
				alter_user();
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(1053);
				alter_user_azure_sql();
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(1054);
				alter_workload_group();
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(1055);
				create_application_role();
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(1056);
				create_assembly();
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(1057);
				create_asymmetric_key();
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(1058);
				create_column_encryption_key();
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(1059);
				create_column_master_key();
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(1060);
				create_credential();
				}
				break;
			case 53:
				enterOuterAlt(_localctx, 53);
				{
				setState(1061);
				create_cryptographic_provider();
				}
				break;
			case 54:
				enterOuterAlt(_localctx, 54);
				{
				setState(1062);
				create_database();
				}
				break;
			case 55:
				enterOuterAlt(_localctx, 55);
				{
				setState(1063);
				create_db_role();
				}
				break;
			case 56:
				enterOuterAlt(_localctx, 56);
				{
				setState(1064);
				create_event_notification();
				}
				break;
			case 57:
				enterOuterAlt(_localctx, 57);
				{
				setState(1065);
				create_external_library();
				}
				break;
			case 58:
				enterOuterAlt(_localctx, 58);
				{
				setState(1066);
				create_external_resource_pool();
				}
				break;
			case 59:
				enterOuterAlt(_localctx, 59);
				{
				setState(1067);
				create_fulltext_catalog();
				}
				break;
			case 60:
				enterOuterAlt(_localctx, 60);
				{
				setState(1068);
				create_fulltext_stoplist();
				}
				break;
			case 61:
				enterOuterAlt(_localctx, 61);
				{
				setState(1069);
				create_index();
				}
				break;
			case 62:
				enterOuterAlt(_localctx, 62);
				{
				setState(1070);
				create_login_azure_sql();
				}
				break;
			case 63:
				enterOuterAlt(_localctx, 63);
				{
				setState(1071);
				create_login_pdw();
				}
				break;
			case 64:
				enterOuterAlt(_localctx, 64);
				{
				setState(1072);
				create_login_sql_server();
				}
				break;
			case 65:
				enterOuterAlt(_localctx, 65);
				{
				setState(1073);
				create_master_key_azure_sql();
				}
				break;
			case 66:
				enterOuterAlt(_localctx, 66);
				{
				setState(1074);
				create_master_key_sql_server();
				}
				break;
			case 67:
				enterOuterAlt(_localctx, 67);
				{
				setState(1075);
				create_or_alter_broker_priority();
				}
				break;
			case 68:
				enterOuterAlt(_localctx, 68);
				{
				setState(1076);
				create_or_alter_function();
				}
				break;
			case 69:
				enterOuterAlt(_localctx, 69);
				{
				setState(1077);
				create_or_alter_procedure();
				}
				break;
			case 70:
				enterOuterAlt(_localctx, 70);
				{
				setState(1078);
				create_or_alter_trigger();
				}
				break;
			case 71:
				enterOuterAlt(_localctx, 71);
				{
				setState(1079);
				create_remote_service_binding();
				}
				break;
			case 72:
				enterOuterAlt(_localctx, 72);
				{
				setState(1080);
				create_resource_pool();
				}
				break;
			case 73:
				enterOuterAlt(_localctx, 73);
				{
				setState(1081);
				create_route();
				}
				break;
			case 74:
				enterOuterAlt(_localctx, 74);
				{
				setState(1082);
				create_rule();
				}
				break;
			case 75:
				enterOuterAlt(_localctx, 75);
				{
				setState(1083);
				create_schema();
				}
				break;
			case 76:
				enterOuterAlt(_localctx, 76);
				{
				setState(1084);
				create_schema_azure_sql_dw_and_pdw();
				}
				break;
			case 77:
				enterOuterAlt(_localctx, 77);
				{
				setState(1085);
				create_search_property_list();
				}
				break;
			case 78:
				enterOuterAlt(_localctx, 78);
				{
				setState(1086);
				create_security_policy();
				}
				break;
			case 79:
				enterOuterAlt(_localctx, 79);
				{
				setState(1087);
				create_sequence();
				}
				break;
			case 80:
				enterOuterAlt(_localctx, 80);
				{
				setState(1088);
				create_server_audit();
				}
				break;
			case 81:
				enterOuterAlt(_localctx, 81);
				{
				setState(1089);
				create_server_audit_specification();
				}
				break;
			case 82:
				enterOuterAlt(_localctx, 82);
				{
				setState(1090);
				create_server_role();
				}
				break;
			case 83:
				enterOuterAlt(_localctx, 83);
				{
				setState(1091);
				create_service();
				}
				break;
			case 84:
				enterOuterAlt(_localctx, 84);
				{
				setState(1092);
				create_statistics();
				}
				break;
			case 85:
				enterOuterAlt(_localctx, 85);
				{
				setState(1093);
				create_symmetric_key();
				}
				break;
			case 86:
				enterOuterAlt(_localctx, 86);
				{
				setState(1094);
				create_synonym();
				}
				break;
			case 87:
				enterOuterAlt(_localctx, 87);
				{
				setState(1095);
				create_table();
				}
				break;
			case 88:
				enterOuterAlt(_localctx, 88);
				{
				setState(1096);
				create_type();
				}
				break;
			case 89:
				enterOuterAlt(_localctx, 89);
				{
				setState(1097);
				create_user();
				}
				break;
			case 90:
				enterOuterAlt(_localctx, 90);
				{
				setState(1098);
				create_user_azure_sql_dw();
				}
				break;
			case 91:
				enterOuterAlt(_localctx, 91);
				{
				setState(1099);
				create_view();
				}
				break;
			case 92:
				enterOuterAlt(_localctx, 92);
				{
				setState(1100);
				create_workload_group();
				}
				break;
			case 93:
				enterOuterAlt(_localctx, 93);
				{
				setState(1101);
				create_xml_schema_collection();
				}
				break;
			case 94:
				enterOuterAlt(_localctx, 94);
				{
				setState(1102);
				drop_aggregate();
				}
				break;
			case 95:
				enterOuterAlt(_localctx, 95);
				{
				setState(1103);
				drop_application_role();
				}
				break;
			case 96:
				enterOuterAlt(_localctx, 96);
				{
				setState(1104);
				drop_assembly();
				}
				break;
			case 97:
				enterOuterAlt(_localctx, 97);
				{
				setState(1105);
				drop_asymmetric_key();
				}
				break;
			case 98:
				enterOuterAlt(_localctx, 98);
				{
				setState(1106);
				drop_availability_group();
				}
				break;
			case 99:
				enterOuterAlt(_localctx, 99);
				{
				setState(1107);
				drop_broker_priority();
				}
				break;
			case 100:
				enterOuterAlt(_localctx, 100);
				{
				setState(1108);
				drop_certificate();
				}
				break;
			case 101:
				enterOuterAlt(_localctx, 101);
				{
				setState(1109);
				drop_column_encryption_key();
				}
				break;
			case 102:
				enterOuterAlt(_localctx, 102);
				{
				setState(1110);
				drop_column_master_key();
				}
				break;
			case 103:
				enterOuterAlt(_localctx, 103);
				{
				setState(1111);
				drop_contract();
				}
				break;
			case 104:
				enterOuterAlt(_localctx, 104);
				{
				setState(1112);
				drop_credential();
				}
				break;
			case 105:
				enterOuterAlt(_localctx, 105);
				{
				setState(1113);
				drop_cryptograhic_provider();
				}
				break;
			case 106:
				enterOuterAlt(_localctx, 106);
				{
				setState(1114);
				drop_database();
				}
				break;
			case 107:
				enterOuterAlt(_localctx, 107);
				{
				setState(1115);
				drop_database_audit_specification();
				}
				break;
			case 108:
				enterOuterAlt(_localctx, 108);
				{
				setState(1116);
				drop_database_scoped_credential();
				}
				break;
			case 109:
				enterOuterAlt(_localctx, 109);
				{
				setState(1117);
				drop_db_role();
				}
				break;
			case 110:
				enterOuterAlt(_localctx, 110);
				{
				setState(1118);
				drop_default();
				}
				break;
			case 111:
				enterOuterAlt(_localctx, 111);
				{
				setState(1119);
				drop_endpoint();
				}
				break;
			case 112:
				enterOuterAlt(_localctx, 112);
				{
				setState(1120);
				drop_event_notifications();
				}
				break;
			case 113:
				enterOuterAlt(_localctx, 113);
				{
				setState(1121);
				drop_event_session();
				}
				break;
			case 114:
				enterOuterAlt(_localctx, 114);
				{
				setState(1122);
				drop_external_data_source();
				}
				break;
			case 115:
				enterOuterAlt(_localctx, 115);
				{
				setState(1123);
				drop_external_file_format();
				}
				break;
			case 116:
				enterOuterAlt(_localctx, 116);
				{
				setState(1124);
				drop_external_library();
				}
				break;
			case 117:
				enterOuterAlt(_localctx, 117);
				{
				setState(1125);
				drop_external_resource_pool();
				}
				break;
			case 118:
				enterOuterAlt(_localctx, 118);
				{
				setState(1126);
				drop_external_table();
				}
				break;
			case 119:
				enterOuterAlt(_localctx, 119);
				{
				setState(1127);
				drop_fulltext_catalog();
				}
				break;
			case 120:
				enterOuterAlt(_localctx, 120);
				{
				setState(1128);
				drop_fulltext_index();
				}
				break;
			case 121:
				enterOuterAlt(_localctx, 121);
				{
				setState(1129);
				drop_fulltext_stoplist();
				}
				break;
			case 122:
				enterOuterAlt(_localctx, 122);
				{
				setState(1130);
				drop_function();
				}
				break;
			case 123:
				enterOuterAlt(_localctx, 123);
				{
				setState(1131);
				drop_index();
				}
				break;
			case 124:
				enterOuterAlt(_localctx, 124);
				{
				setState(1132);
				drop_login();
				}
				break;
			case 125:
				enterOuterAlt(_localctx, 125);
				{
				setState(1133);
				drop_master_key();
				}
				break;
			case 126:
				enterOuterAlt(_localctx, 126);
				{
				setState(1134);
				drop_message_type();
				}
				break;
			case 127:
				enterOuterAlt(_localctx, 127);
				{
				setState(1135);
				drop_partition_function();
				}
				break;
			case 128:
				enterOuterAlt(_localctx, 128);
				{
				setState(1136);
				drop_partition_scheme();
				}
				break;
			case 129:
				enterOuterAlt(_localctx, 129);
				{
				setState(1137);
				drop_procedure();
				}
				break;
			case 130:
				enterOuterAlt(_localctx, 130);
				{
				setState(1138);
				drop_queue();
				}
				break;
			case 131:
				enterOuterAlt(_localctx, 131);
				{
				setState(1139);
				drop_remote_service_binding();
				}
				break;
			case 132:
				enterOuterAlt(_localctx, 132);
				{
				setState(1140);
				drop_resource_pool();
				}
				break;
			case 133:
				enterOuterAlt(_localctx, 133);
				{
				setState(1141);
				drop_route();
				}
				break;
			case 134:
				enterOuterAlt(_localctx, 134);
				{
				setState(1142);
				drop_rule();
				}
				break;
			case 135:
				enterOuterAlt(_localctx, 135);
				{
				setState(1143);
				drop_schema();
				}
				break;
			case 136:
				enterOuterAlt(_localctx, 136);
				{
				setState(1144);
				drop_search_property_list();
				}
				break;
			case 137:
				enterOuterAlt(_localctx, 137);
				{
				setState(1145);
				drop_security_policy();
				}
				break;
			case 138:
				enterOuterAlt(_localctx, 138);
				{
				setState(1146);
				drop_sequence();
				}
				break;
			case 139:
				enterOuterAlt(_localctx, 139);
				{
				setState(1147);
				drop_server_audit();
				}
				break;
			case 140:
				enterOuterAlt(_localctx, 140);
				{
				setState(1148);
				drop_server_audit_specification();
				}
				break;
			case 141:
				enterOuterAlt(_localctx, 141);
				{
				setState(1149);
				drop_server_role();
				}
				break;
			case 142:
				enterOuterAlt(_localctx, 142);
				{
				setState(1150);
				drop_service();
				}
				break;
			case 143:
				enterOuterAlt(_localctx, 143);
				{
				setState(1151);
				drop_signature();
				}
				break;
			case 144:
				enterOuterAlt(_localctx, 144);
				{
				setState(1152);
				drop_statistics();
				}
				break;
			case 145:
				enterOuterAlt(_localctx, 145);
				{
				setState(1153);
				drop_statistics_name_azure_dw_and_pdw();
				}
				break;
			case 146:
				enterOuterAlt(_localctx, 146);
				{
				setState(1154);
				drop_symmetric_key();
				}
				break;
			case 147:
				enterOuterAlt(_localctx, 147);
				{
				setState(1155);
				drop_synonym();
				}
				break;
			case 148:
				enterOuterAlt(_localctx, 148);
				{
				setState(1156);
				drop_table();
				}
				break;
			case 149:
				enterOuterAlt(_localctx, 149);
				{
				setState(1157);
				drop_trigger();
				}
				break;
			case 150:
				enterOuterAlt(_localctx, 150);
				{
				setState(1158);
				drop_type();
				}
				break;
			case 151:
				enterOuterAlt(_localctx, 151);
				{
				setState(1159);
				drop_user();
				}
				break;
			case 152:
				enterOuterAlt(_localctx, 152);
				{
				setState(1160);
				drop_view();
				}
				break;
			case 153:
				enterOuterAlt(_localctx, 153);
				{
				setState(1161);
				drop_workload_group();
				}
				break;
			case 154:
				enterOuterAlt(_localctx, 154);
				{
				setState(1162);
				drop_xml_schema_collection();
				}
				break;
			case 155:
				enterOuterAlt(_localctx, 155);
				{
				setState(1163);
				disable_trigger();
				}
				break;
			case 156:
				enterOuterAlt(_localctx, 156);
				{
				setState(1164);
				enable_trigger();
				}
				break;
			case 157:
				enterOuterAlt(_localctx, 157);
				{
				setState(1165);
				lock_table();
				}
				break;
			case 158:
				enterOuterAlt(_localctx, 158);
				{
				setState(1166);
				truncate_table();
				}
				break;
			case 159:
				enterOuterAlt(_localctx, 159);
				{
				setState(1167);
				update_statistics();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Backup_statementContext extends ParserRuleContext {
		public Backup_databaseContext backup_database() {
			return getRuleContext(Backup_databaseContext.class,0);
		}
		public Backup_logContext backup_log() {
			return getRuleContext(Backup_logContext.class,0);
		}
		public Backup_certificateContext backup_certificate() {
			return getRuleContext(Backup_certificateContext.class,0);
		}
		public Backup_master_keyContext backup_master_key() {
			return getRuleContext(Backup_master_keyContext.class,0);
		}
		public Backup_service_master_keyContext backup_service_master_key() {
			return getRuleContext(Backup_service_master_keyContext.class,0);
		}
		public Backup_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_backup_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterBackup_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitBackup_statement(this);
		}
	}

	public final Backup_statementContext backup_statement() throws RecognitionException {
		Backup_statementContext _localctx = new Backup_statementContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_backup_statement);
		try {
			setState(1175);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,10,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1170);
				backup_database();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1171);
				backup_log();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1172);
				backup_certificate();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1173);
				backup_master_key();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1174);
				backup_service_master_key();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cfl_statementContext extends ParserRuleContext {
		public Block_statementContext block_statement() {
			return getRuleContext(Block_statementContext.class,0);
		}
		public Break_statementContext break_statement() {
			return getRuleContext(Break_statementContext.class,0);
		}
		public Continue_statementContext continue_statement() {
			return getRuleContext(Continue_statementContext.class,0);
		}
		public Goto_statementContext goto_statement() {
			return getRuleContext(Goto_statementContext.class,0);
		}
		public If_statementContext if_statement() {
			return getRuleContext(If_statementContext.class,0);
		}
		public Return_statementContext return_statement() {
			return getRuleContext(Return_statementContext.class,0);
		}
		public Throw_statementContext throw_statement() {
			return getRuleContext(Throw_statementContext.class,0);
		}
		public Try_catch_statementContext try_catch_statement() {
			return getRuleContext(Try_catch_statementContext.class,0);
		}
		public Waitfor_statementContext waitfor_statement() {
			return getRuleContext(Waitfor_statementContext.class,0);
		}
		public While_statementContext while_statement() {
			return getRuleContext(While_statementContext.class,0);
		}
		public Print_statementContext print_statement() {
			return getRuleContext(Print_statementContext.class,0);
		}
		public Raiseerror_statementContext raiseerror_statement() {
			return getRuleContext(Raiseerror_statementContext.class,0);
		}
		public Cfl_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cfl_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCfl_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCfl_statement(this);
		}
	}

	public final Cfl_statementContext cfl_statement() throws RecognitionException {
		Cfl_statementContext _localctx = new Cfl_statementContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_cfl_statement);
		try {
			setState(1189);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,11,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1177);
				block_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1178);
				break_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1179);
				continue_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1180);
				goto_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1181);
				if_statement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1182);
				return_statement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1183);
				throw_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1184);
				try_catch_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1185);
				waitfor_statement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1186);
				while_statement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1187);
				print_statement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1188);
				raiseerror_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Block_statementContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(TSqlParser.BEGIN, 0); }
		public TerminalNode END() { return getToken(TSqlParser.END, 0); }
		public Sql_clausesContext sql_clauses() {
			return getRuleContext(Sql_clausesContext.class,0);
		}
		public Block_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_block_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterBlock_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitBlock_statement(this);
		}
	}

	public final Block_statementContext block_statement() throws RecognitionException {
		Block_statementContext _localctx = new Block_statementContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_block_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1191);
			match(BEGIN);
			setState(1193);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,12,_ctx) ) {
			case 1:
				{
				setState(1192);
				match(SEMI);
				}
				break;
			}
			setState(1196);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,13,_ctx) ) {
			case 1:
				{
				setState(1195);
				sql_clauses();
				}
				break;
			}
			setState(1198);
			match(END);
			setState(1200);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,14,_ctx) ) {
			case 1:
				{
				setState(1199);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Break_statementContext extends ParserRuleContext {
		public TerminalNode BREAK() { return getToken(TSqlParser.BREAK, 0); }
		public Break_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_break_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterBreak_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitBreak_statement(this);
		}
	}

	public final Break_statementContext break_statement() throws RecognitionException {
		Break_statementContext _localctx = new Break_statementContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_break_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1202);
			match(BREAK);
			setState(1204);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,15,_ctx) ) {
			case 1:
				{
				setState(1203);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Continue_statementContext extends ParserRuleContext {
		public TerminalNode CONTINUE() { return getToken(TSqlParser.CONTINUE, 0); }
		public Continue_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_continue_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterContinue_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitContinue_statement(this);
		}
	}

	public final Continue_statementContext continue_statement() throws RecognitionException {
		Continue_statementContext _localctx = new Continue_statementContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_continue_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1206);
			match(CONTINUE);
			setState(1208);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {
			case 1:
				{
				setState(1207);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Goto_statementContext extends ParserRuleContext {
		public TerminalNode GOTO() { return getToken(TSqlParser.GOTO, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Goto_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_goto_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterGoto_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitGoto_statement(this);
		}
	}

	public final Goto_statementContext goto_statement() throws RecognitionException {
		Goto_statementContext _localctx = new Goto_statementContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_goto_statement);
		try {
			setState(1220);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GOTO:
				enterOuterAlt(_localctx, 1);
				{
				setState(1210);
				match(GOTO);
				setState(1211);
				id();
				setState(1213);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,17,_ctx) ) {
				case 1:
					{
					setState(1212);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case START:
			case TARGET:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(1215);
				id();
				setState(1216);
				match(COLON);
				setState(1218);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,18,_ctx) ) {
				case 1:
					{
					setState(1217);
					match(SEMI);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Return_statementContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(TSqlParser.RETURN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterReturn_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitReturn_statement(this);
		}
	}

	public final Return_statementContext return_statement() throws RecognitionException {
		Return_statementContext _localctx = new Return_statementContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_return_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1222);
			match(RETURN);
			setState(1224);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,20,_ctx) ) {
			case 1:
				{
				setState(1223);
				expression(0);
				}
				break;
			}
			setState(1227);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,21,_ctx) ) {
			case 1:
				{
				setState(1226);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class If_statementContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public List<Sql_clauseContext> sql_clause() {
			return getRuleContexts(Sql_clauseContext.class);
		}
		public Sql_clauseContext sql_clause(int i) {
			return getRuleContext(Sql_clauseContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(TSqlParser.ELSE, 0); }
		public If_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_if_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterIf_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitIf_statement(this);
		}
	}

	public final If_statementContext if_statement() throws RecognitionException {
		If_statementContext _localctx = new If_statementContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_if_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1229);
			match(IF);
			setState(1230);
			search_condition();
			setState(1231);
			sql_clause();
			setState(1234);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,22,_ctx) ) {
			case 1:
				{
				setState(1232);
				match(ELSE);
				setState(1233);
				sql_clause();
				}
				break;
			}
			setState(1237);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,23,_ctx) ) {
			case 1:
				{
				setState(1236);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Throw_statementContext extends ParserRuleContext {
		public TerminalNode THROW() { return getToken(TSqlParser.THROW, 0); }
		public Throw_error_numberContext throw_error_number() {
			return getRuleContext(Throw_error_numberContext.class,0);
		}
		public Throw_messageContext throw_message() {
			return getRuleContext(Throw_messageContext.class,0);
		}
		public Throw_stateContext throw_state() {
			return getRuleContext(Throw_stateContext.class,0);
		}
		public Throw_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_throw_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterThrow_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitThrow_statement(this);
		}
	}

	public final Throw_statementContext throw_statement() throws RecognitionException {
		Throw_statementContext _localctx = new Throw_statementContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_throw_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1239);
			match(THROW);
			setState(1246);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,24,_ctx) ) {
			case 1:
				{
				setState(1240);
				throw_error_number();
				setState(1241);
				match(COMMA);
				setState(1242);
				throw_message();
				setState(1243);
				match(COMMA);
				setState(1244);
				throw_state();
				}
				break;
			}
			setState(1249);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,25,_ctx) ) {
			case 1:
				{
				setState(1248);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Throw_error_numberContext extends ParserRuleContext {
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Throw_error_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_throw_error_number; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterThrow_error_number(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitThrow_error_number(this);
		}
	}

	public final Throw_error_numberContext throw_error_number() throws RecognitionException {
		Throw_error_numberContext _localctx = new Throw_error_numberContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_throw_error_number);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1251);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Throw_messageContext extends ParserRuleContext {
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Throw_messageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_throw_message; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterThrow_message(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitThrow_message(this);
		}
	}

	public final Throw_messageContext throw_message() throws RecognitionException {
		Throw_messageContext _localctx = new Throw_messageContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_throw_message);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1253);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Throw_stateContext extends ParserRuleContext {
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Throw_stateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_throw_state; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterThrow_state(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitThrow_state(this);
		}
	}

	public final Throw_stateContext throw_state() throws RecognitionException {
		Throw_stateContext _localctx = new Throw_stateContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_throw_state);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1255);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Try_catch_statementContext extends ParserRuleContext {
		public Sql_clausesContext try_clauses;
		public Sql_clausesContext catch_clauses;
		public List<TerminalNode> BEGIN() { return getTokens(TSqlParser.BEGIN); }
		public TerminalNode BEGIN(int i) {
			return getToken(TSqlParser.BEGIN, i);
		}
		public List<TerminalNode> TRY() { return getTokens(TSqlParser.TRY); }
		public TerminalNode TRY(int i) {
			return getToken(TSqlParser.TRY, i);
		}
		public List<TerminalNode> END() { return getTokens(TSqlParser.END); }
		public TerminalNode END(int i) {
			return getToken(TSqlParser.END, i);
		}
		public List<TerminalNode> CATCH() { return getTokens(TSqlParser.CATCH); }
		public TerminalNode CATCH(int i) {
			return getToken(TSqlParser.CATCH, i);
		}
		public List<Sql_clausesContext> sql_clauses() {
			return getRuleContexts(Sql_clausesContext.class);
		}
		public Sql_clausesContext sql_clauses(int i) {
			return getRuleContext(Sql_clausesContext.class,i);
		}
		public Try_catch_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_try_catch_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTry_catch_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTry_catch_statement(this);
		}
	}

	public final Try_catch_statementContext try_catch_statement() throws RecognitionException {
		Try_catch_statementContext _localctx = new Try_catch_statementContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_try_catch_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1257);
			match(BEGIN);
			setState(1258);
			match(TRY);
			setState(1260);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,26,_ctx) ) {
			case 1:
				{
				setState(1259);
				match(SEMI);
				}
				break;
			}
			setState(1263);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,27,_ctx) ) {
			case 1:
				{
				setState(1262);
				((Try_catch_statementContext)_localctx).try_clauses = sql_clauses();
				}
				break;
			}
			setState(1265);
			match(END);
			setState(1266);
			match(TRY);
			setState(1268);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEMI) {
				{
				setState(1267);
				match(SEMI);
				}
			}

			setState(1270);
			match(BEGIN);
			setState(1271);
			match(CATCH);
			setState(1273);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,29,_ctx) ) {
			case 1:
				{
				setState(1272);
				match(SEMI);
				}
				break;
			}
			setState(1276);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,30,_ctx) ) {
			case 1:
				{
				setState(1275);
				((Try_catch_statementContext)_localctx).catch_clauses = sql_clauses();
				}
				break;
			}
			setState(1278);
			match(END);
			setState(1279);
			match(CATCH);
			setState(1281);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,31,_ctx) ) {
			case 1:
				{
				setState(1280);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Waitfor_statementContext extends ParserRuleContext {
		public TerminalNode WAITFOR() { return getToken(TSqlParser.WAITFOR, 0); }
		public Receive_statementContext receive_statement() {
			return getRuleContext(Receive_statementContext.class,0);
		}
		public TimeContext time() {
			return getRuleContext(TimeContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DELAY() { return getToken(TSqlParser.DELAY, 0); }
		public TerminalNode TIME() { return getToken(TSqlParser.TIME, 0); }
		public TerminalNode TIMEOUT() { return getToken(TSqlParser.TIMEOUT, 0); }
		public Waitfor_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_waitfor_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterWaitfor_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitWaitfor_statement(this);
		}
	}

	public final Waitfor_statementContext waitfor_statement() throws RecognitionException {
		Waitfor_statementContext _localctx = new Waitfor_statementContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_waitfor_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1283);
			match(WAITFOR);
			setState(1285);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,32,_ctx) ) {
			case 1:
				{
				setState(1284);
				receive_statement();
				}
				break;
			}
			setState(1288);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(1287);
				match(COMMA);
				}
			}

			setState(1292);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,34,_ctx) ) {
			case 1:
				{
				setState(1290);
				_la = _input.LA(1);
				if ( !(_la==DELAY || _la==TIME || _la==TIMEOUT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1291);
				time();
				}
				break;
			}
			setState(1295);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,35,_ctx) ) {
			case 1:
				{
				setState(1294);
				expression(0);
				}
				break;
			}
			setState(1298);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,36,_ctx) ) {
			case 1:
				{
				setState(1297);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class While_statementContext extends ParserRuleContext {
		public TerminalNode WHILE() { return getToken(TSqlParser.WHILE, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public Sql_clauseContext sql_clause() {
			return getRuleContext(Sql_clauseContext.class,0);
		}
		public TerminalNode BREAK() { return getToken(TSqlParser.BREAK, 0); }
		public TerminalNode CONTINUE() { return getToken(TSqlParser.CONTINUE, 0); }
		public While_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_while_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterWhile_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitWhile_statement(this);
		}
	}

	public final While_statementContext while_statement() throws RecognitionException {
		While_statementContext _localctx = new While_statementContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_while_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1300);
			match(WHILE);
			setState(1301);
			search_condition();
			setState(1311);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,39,_ctx) ) {
			case 1:
				{
				setState(1302);
				sql_clause();
				}
				break;
			case 2:
				{
				setState(1303);
				match(BREAK);
				setState(1305);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,37,_ctx) ) {
				case 1:
					{
					setState(1304);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				{
				setState(1307);
				match(CONTINUE);
				setState(1309);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,38,_ctx) ) {
				case 1:
					{
					setState(1308);
					match(SEMI);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Print_statementContext extends ParserRuleContext {
		public TerminalNode PRINT() { return getToken(TSqlParser.PRINT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DOUBLE_QUOTE_ID() { return getToken(TSqlParser.DOUBLE_QUOTE_ID, 0); }
		public List<TerminalNode> LOCAL_ID() { return getTokens(TSqlParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(TSqlParser.LOCAL_ID, i);
		}
		public Print_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_print_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterPrint_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitPrint_statement(this);
		}
	}

	public final Print_statementContext print_statement() throws RecognitionException {
		Print_statementContext _localctx = new Print_statementContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_print_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1313);
			match(PRINT);
			setState(1316);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,40,_ctx) ) {
			case 1:
				{
				setState(1314);
				expression(0);
				}
				break;
			case 2:
				{
				setState(1315);
				match(DOUBLE_QUOTE_ID);
				}
				break;
			}
			setState(1322);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1318);
				match(COMMA);
				setState(1319);
				match(LOCAL_ID);
				}
				}
				setState(1324);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1326);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,42,_ctx) ) {
			case 1:
				{
				setState(1325);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Raiseerror_statementContext extends ParserRuleContext {
		public Token msg;
		public Constant_LOCAL_IDContext severity;
		public Constant_LOCAL_IDContext state;
		public Token formatstring;
		public Token argument;
		public TerminalNode RAISERROR() { return getToken(TSqlParser.RAISERROR, 0); }
		public List<Constant_LOCAL_IDContext> constant_LOCAL_ID() {
			return getRuleContexts(Constant_LOCAL_IDContext.class);
		}
		public Constant_LOCAL_IDContext constant_LOCAL_ID(int i) {
			return getRuleContext(Constant_LOCAL_IDContext.class,i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public List<TerminalNode> LOCAL_ID() { return getTokens(TSqlParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(TSqlParser.LOCAL_ID, i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode LOG() { return getToken(TSqlParser.LOG, 0); }
		public TerminalNode SETERROR() { return getToken(TSqlParser.SETERROR, 0); }
		public TerminalNode DOUBLE_QUOTE_ID() { return getToken(TSqlParser.DOUBLE_QUOTE_ID, 0); }
		public Raiseerror_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_raiseerror_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterRaiseerror_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitRaiseerror_statement(this);
		}
	}

	public final Raiseerror_statementContext raiseerror_statement() throws RecognitionException {
		Raiseerror_statementContext _localctx = new Raiseerror_statementContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_raiseerror_statement);
		int _la;
		try {
			setState(1360);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,47,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1328);
				match(RAISERROR);
				setState(1329);
				match(LR_BRACKET);
				setState(1330);
				((Raiseerror_statementContext)_localctx).msg = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 792)) & ~0x3f) == 0 && ((1L << (_la - 792)) & ((1L << (LOCAL_ID - 792)) | (1L << (DECIMAL - 792)) | (1L << (STRING - 792)))) != 0)) ) {
					((Raiseerror_statementContext)_localctx).msg = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1331);
				match(COMMA);
				setState(1332);
				((Raiseerror_statementContext)_localctx).severity = constant_LOCAL_ID();
				setState(1333);
				match(COMMA);
				setState(1334);
				((Raiseerror_statementContext)_localctx).state = constant_LOCAL_ID();
				setState(1339);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1335);
					match(COMMA);
					setState(1336);
					constant_LOCAL_ID();
					}
					}
					setState(1341);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1342);
				match(RR_BRACKET);
				setState(1345);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,44,_ctx) ) {
				case 1:
					{
					setState(1343);
					match(WITH);
					setState(1344);
					_la = _input.LA(1);
					if ( !(_la==LOG || _la==SETERROR) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(1348);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,45,_ctx) ) {
				case 1:
					{
					setState(1347);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1350);
				match(RAISERROR);
				setState(1351);
				match(DECIMAL);
				setState(1352);
				((Raiseerror_statementContext)_localctx).formatstring = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 789)) & ~0x3f) == 0 && ((1L << (_la - 789)) & ((1L << (DOUBLE_QUOTE_ID - 789)) | (1L << (LOCAL_ID - 789)) | (1L << (STRING - 789)))) != 0)) ) {
					((Raiseerror_statementContext)_localctx).formatstring = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1357);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1353);
					match(COMMA);
					setState(1354);
					((Raiseerror_statementContext)_localctx).argument = _input.LT(1);
					_la = _input.LA(1);
					if ( !(((((_la - 792)) & ~0x3f) == 0 && ((1L << (_la - 792)) & ((1L << (LOCAL_ID - 792)) | (1L << (DECIMAL - 792)) | (1L << (STRING - 792)))) != 0)) ) {
						((Raiseerror_statementContext)_localctx).argument = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					setState(1359);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Empty_statementContext extends ParserRuleContext {
		public Empty_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_empty_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterEmpty_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitEmpty_statement(this);
		}
	}

	public final Empty_statementContext empty_statement() throws RecognitionException {
		Empty_statementContext _localctx = new Empty_statementContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_empty_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1362);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Another_statementContext extends ParserRuleContext {
		public Declare_statementContext declare_statement() {
			return getRuleContext(Declare_statementContext.class,0);
		}
		public Cursor_statementContext cursor_statement() {
			return getRuleContext(Cursor_statementContext.class,0);
		}
		public Conversation_statementContext conversation_statement() {
			return getRuleContext(Conversation_statementContext.class,0);
		}
		public Create_contractContext create_contract() {
			return getRuleContext(Create_contractContext.class,0);
		}
		public Create_queueContext create_queue() {
			return getRuleContext(Create_queueContext.class,0);
		}
		public Alter_queueContext alter_queue() {
			return getRuleContext(Alter_queueContext.class,0);
		}
		public Execute_statementContext execute_statement() {
			return getRuleContext(Execute_statementContext.class,0);
		}
		public Message_statementContext message_statement() {
			return getRuleContext(Message_statementContext.class,0);
		}
		public Security_statementContext security_statement() {
			return getRuleContext(Security_statementContext.class,0);
		}
		public Set_statementContext set_statement() {
			return getRuleContext(Set_statementContext.class,0);
		}
		public Transaction_statementContext transaction_statement() {
			return getRuleContext(Transaction_statementContext.class,0);
		}
		public Use_statementContext use_statement() {
			return getRuleContext(Use_statementContext.class,0);
		}
		public Setuser_statementContext setuser_statement() {
			return getRuleContext(Setuser_statementContext.class,0);
		}
		public Another_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_another_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAnother_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAnother_statement(this);
		}
	}

	public final Another_statementContext another_statement() throws RecognitionException {
		Another_statementContext _localctx = new Another_statementContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_another_statement);
		try {
			setState(1377);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,48,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1364);
				declare_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1365);
				cursor_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1366);
				conversation_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1367);
				create_contract();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1368);
				create_queue();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1369);
				alter_queue();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1370);
				execute_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1371);
				message_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1372);
				security_statement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1373);
				set_statement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1374);
				transaction_statement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1375);
				use_statement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1376);
				setuser_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_application_roleContext extends ParserRuleContext {
		public IdContext appliction_role;
		public IdContext new_application_role_name;
		public Token application_role_password;
		public IdContext app_role_default_schema;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode APPLICATION() { return getToken(TSqlParser.APPLICATION, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode NAME() { return getToken(TSqlParser.NAME, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode DEFAULT_SCHEMA() { return getToken(TSqlParser.DEFAULT_SCHEMA, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Alter_application_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_application_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_application_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_application_role(this);
		}
	}

	public final Alter_application_roleContext alter_application_role() throws RecognitionException {
		Alter_application_roleContext _localctx = new Alter_application_roleContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_alter_application_role);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1379);
			match(ALTER);
			setState(1380);
			match(APPLICATION);
			setState(1381);
			match(ROLE);
			setState(1382);
			((Alter_application_roleContext)_localctx).appliction_role = id();
			setState(1383);
			match(WITH);
			setState(1390);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,50,_ctx) ) {
			case 1:
				{
				setState(1385);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1384);
					match(COMMA);
					}
				}

				setState(1387);
				match(NAME);
				setState(1388);
				match(EQUAL);
				setState(1389);
				((Alter_application_roleContext)_localctx).new_application_role_name = id();
				}
				break;
			}
			setState(1398);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,52,_ctx) ) {
			case 1:
				{
				setState(1393);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1392);
					match(COMMA);
					}
				}

				setState(1395);
				match(PASSWORD);
				setState(1396);
				match(EQUAL);
				setState(1397);
				((Alter_application_roleContext)_localctx).application_role_password = match(STRING);
				}
				break;
			}
			setState(1406);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT_SCHEMA || _la==COMMA) {
				{
				setState(1401);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1400);
					match(COMMA);
					}
				}

				setState(1403);
				match(DEFAULT_SCHEMA);
				setState(1404);
				match(EQUAL);
				setState(1405);
				((Alter_application_roleContext)_localctx).app_role_default_schema = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_application_roleContext extends ParserRuleContext {
		public IdContext appliction_role;
		public Token application_role_password;
		public IdContext app_role_default_schema;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode APPLICATION() { return getToken(TSqlParser.APPLICATION, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode DEFAULT_SCHEMA() { return getToken(TSqlParser.DEFAULT_SCHEMA, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Create_application_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_application_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_application_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_application_role(this);
		}
	}

	public final Create_application_roleContext create_application_role() throws RecognitionException {
		Create_application_roleContext _localctx = new Create_application_roleContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_create_application_role);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1408);
			match(CREATE);
			setState(1409);
			match(APPLICATION);
			setState(1410);
			match(ROLE);
			setState(1411);
			((Create_application_roleContext)_localctx).appliction_role = id();
			setState(1412);
			match(WITH);
			setState(1419);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,56,_ctx) ) {
			case 1:
				{
				setState(1414);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1413);
					match(COMMA);
					}
				}

				setState(1416);
				match(PASSWORD);
				setState(1417);
				match(EQUAL);
				setState(1418);
				((Create_application_roleContext)_localctx).application_role_password = match(STRING);
				}
				break;
			}
			setState(1427);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT_SCHEMA || _la==COMMA) {
				{
				setState(1422);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1421);
					match(COMMA);
					}
				}

				setState(1424);
				match(DEFAULT_SCHEMA);
				setState(1425);
				match(EQUAL);
				setState(1426);
				((Create_application_roleContext)_localctx).app_role_default_schema = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_aggregateContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext aggregate_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode AGGREGATE() { return getToken(TSqlParser.AGGREGATE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Drop_aggregateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_aggregate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_aggregate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_aggregate(this);
		}
	}

	public final Drop_aggregateContext drop_aggregate() throws RecognitionException {
		Drop_aggregateContext _localctx = new Drop_aggregateContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_drop_aggregate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1429);
			match(DROP);
			setState(1430);
			match(AGGREGATE);
			setState(1433);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1431);
				match(IF);
				setState(1432);
				match(EXISTS);
				}
			}

			setState(1438);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,60,_ctx) ) {
			case 1:
				{
				setState(1435);
				((Drop_aggregateContext)_localctx).schema_name = id();
				setState(1436);
				match(DOT);
				}
				break;
			}
			setState(1440);
			((Drop_aggregateContext)_localctx).aggregate_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_application_roleContext extends ParserRuleContext {
		public IdContext rolename;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode APPLICATION() { return getToken(TSqlParser.APPLICATION, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_application_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_application_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_application_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_application_role(this);
		}
	}

	public final Drop_application_roleContext drop_application_role() throws RecognitionException {
		Drop_application_roleContext _localctx = new Drop_application_roleContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_drop_application_role);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1442);
			match(DROP);
			setState(1443);
			match(APPLICATION);
			setState(1444);
			match(ROLE);
			setState(1445);
			((Drop_application_roleContext)_localctx).rolename = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assemblyContext extends ParserRuleContext {
		public IdContext assembly_name;
		public Alter_assembly_startContext alter_assembly_start() {
			return getRuleContext(Alter_assembly_startContext.class,0);
		}
		public Alter_assembly_clauseContext alter_assembly_clause() {
			return getRuleContext(Alter_assembly_clauseContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Alter_assemblyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_assembly(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_assembly(this);
		}
	}

	public final Alter_assemblyContext alter_assembly() throws RecognitionException {
		Alter_assemblyContext _localctx = new Alter_assemblyContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_alter_assembly);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1447);
			alter_assembly_start();
			setState(1448);
			((Alter_assemblyContext)_localctx).assembly_name = id();
			setState(1449);
			alter_assembly_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_startContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode ASSEMBLY() { return getToken(TSqlParser.ASSEMBLY, 0); }
		public Alter_assembly_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_start; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_assembly_start(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_assembly_start(this);
		}
	}

	public final Alter_assembly_startContext alter_assembly_start() throws RecognitionException {
		Alter_assembly_startContext _localctx = new Alter_assembly_startContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_alter_assembly_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1451);
			match(ALTER);
			setState(1452);
			match(ASSEMBLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_clauseContext extends ParserRuleContext {
		public Alter_assembly_from_clauseContext alter_assembly_from_clause() {
			return getRuleContext(Alter_assembly_from_clauseContext.class,0);
		}
		public Alter_assembly_with_clauseContext alter_assembly_with_clause() {
			return getRuleContext(Alter_assembly_with_clauseContext.class,0);
		}
		public Alter_assembly_drop_clauseContext alter_assembly_drop_clause() {
			return getRuleContext(Alter_assembly_drop_clauseContext.class,0);
		}
		public Alter_assembly_add_clauseContext alter_assembly_add_clause() {
			return getRuleContext(Alter_assembly_add_clauseContext.class,0);
		}
		public Alter_assembly_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_assembly_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_assembly_clause(this);
		}
	}

	public final Alter_assembly_clauseContext alter_assembly_clause() throws RecognitionException {
		Alter_assembly_clauseContext _localctx = new Alter_assembly_clauseContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_alter_assembly_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1455);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(1454);
				alter_assembly_from_clause();
				}
			}

			setState(1458);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,62,_ctx) ) {
			case 1:
				{
				setState(1457);
				alter_assembly_with_clause();
				}
				break;
			}
			setState(1461);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,63,_ctx) ) {
			case 1:
				{
				setState(1460);
				alter_assembly_drop_clause();
				}
				break;
			}
			setState(1464);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ADD) {
				{
				setState(1463);
				alter_assembly_add_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_from_clauseContext extends ParserRuleContext {
		public Alter_assembly_from_clause_startContext alter_assembly_from_clause_start() {
			return getRuleContext(Alter_assembly_from_clause_startContext.class,0);
		}
		public Client_assembly_specifierContext client_assembly_specifier() {
			return getRuleContext(Client_assembly_specifierContext.class,0);
		}
		public Alter_assembly_file_bitsContext alter_assembly_file_bits() {
			return getRuleContext(Alter_assembly_file_bitsContext.class,0);
		}
		public Alter_assembly_from_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_from_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_assembly_from_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_assembly_from_clause(this);
		}
	}

	public final Alter_assembly_from_clauseContext alter_assembly_from_clause() throws RecognitionException {
		Alter_assembly_from_clauseContext _localctx = new Alter_assembly_from_clauseContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_alter_assembly_from_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1466);
			alter_assembly_from_clause_start();
			setState(1469);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOUBLE_BACK_SLASH:
			case DISK_DRIVE:
			case STRING:
				{
				setState(1467);
				client_assembly_specifier();
				}
				break;
			case AS:
				{
				setState(1468);
				alter_assembly_file_bits();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_from_clause_startContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public Alter_assembly_from_clause_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_from_clause_start; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_assembly_from_clause_start(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_assembly_from_clause_start(this);
		}
	}

	public final Alter_assembly_from_clause_startContext alter_assembly_from_clause_start() throws RecognitionException {
		Alter_assembly_from_clause_startContext _localctx = new Alter_assembly_from_clause_startContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_alter_assembly_from_clause_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1471);
			match(FROM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_drop_clauseContext extends ParserRuleContext {
		public Alter_assembly_dropContext alter_assembly_drop() {
			return getRuleContext(Alter_assembly_dropContext.class,0);
		}
		public Alter_assembly_drop_multiple_filesContext alter_assembly_drop_multiple_files() {
			return getRuleContext(Alter_assembly_drop_multiple_filesContext.class,0);
		}
		public Alter_assembly_drop_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_drop_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_assembly_drop_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_assembly_drop_clause(this);
		}
	}

	public final Alter_assembly_drop_clauseContext alter_assembly_drop_clause() throws RecognitionException {
		Alter_assembly_drop_clauseContext _localctx = new Alter_assembly_drop_clauseContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_alter_assembly_drop_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1473);
			alter_assembly_drop();
			setState(1474);
			alter_assembly_drop_multiple_files();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_drop_multiple_filesContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(TSqlParser.ALL, 0); }
		public Multiple_local_filesContext multiple_local_files() {
			return getRuleContext(Multiple_local_filesContext.class,0);
		}
		public Alter_assembly_drop_multiple_filesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_drop_multiple_files; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_assembly_drop_multiple_files(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_assembly_drop_multiple_files(this);
		}
	}

	public final Alter_assembly_drop_multiple_filesContext alter_assembly_drop_multiple_files() throws RecognitionException {
		Alter_assembly_drop_multiple_filesContext _localctx = new Alter_assembly_drop_multiple_filesContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_alter_assembly_drop_multiple_files);
		try {
			setState(1478);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1476);
				match(ALL);
				}
				break;
			case DISK_DRIVE:
			case SINGLE_QUOTE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1477);
				multiple_local_files();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_dropContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public Alter_assembly_dropContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_drop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_assembly_drop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_assembly_drop(this);
		}
	}

	public final Alter_assembly_dropContext alter_assembly_drop() throws RecognitionException {
		Alter_assembly_dropContext _localctx = new Alter_assembly_dropContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_alter_assembly_drop);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1480);
			match(DROP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_add_clauseContext extends ParserRuleContext {
		public Alter_asssembly_add_clause_startContext alter_asssembly_add_clause_start() {
			return getRuleContext(Alter_asssembly_add_clause_startContext.class,0);
		}
		public Alter_assembly_client_file_clauseContext alter_assembly_client_file_clause() {
			return getRuleContext(Alter_assembly_client_file_clauseContext.class,0);
		}
		public Alter_assembly_add_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_add_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_assembly_add_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_assembly_add_clause(this);
		}
	}

	public final Alter_assembly_add_clauseContext alter_assembly_add_clause() throws RecognitionException {
		Alter_assembly_add_clauseContext _localctx = new Alter_assembly_add_clauseContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_alter_assembly_add_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1482);
			alter_asssembly_add_clause_start();
			setState(1483);
			alter_assembly_client_file_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_asssembly_add_clause_startContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public TerminalNode FILE() { return getToken(TSqlParser.FILE, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public Alter_asssembly_add_clause_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_asssembly_add_clause_start; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_asssembly_add_clause_start(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_asssembly_add_clause_start(this);
		}
	}

	public final Alter_asssembly_add_clause_startContext alter_asssembly_add_clause_start() throws RecognitionException {
		Alter_asssembly_add_clause_startContext _localctx = new Alter_asssembly_add_clause_startContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_alter_asssembly_add_clause_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1485);
			match(ADD);
			setState(1486);
			match(FILE);
			setState(1487);
			match(FROM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_client_file_clauseContext extends ParserRuleContext {
		public Alter_assembly_file_nameContext alter_assembly_file_name() {
			return getRuleContext(Alter_assembly_file_nameContext.class,0);
		}
		public Alter_assembly_asContext alter_assembly_as() {
			return getRuleContext(Alter_assembly_asContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Alter_assembly_client_file_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_client_file_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_assembly_client_file_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_assembly_client_file_clause(this);
		}
	}

	public final Alter_assembly_client_file_clauseContext alter_assembly_client_file_clause() throws RecognitionException {
		Alter_assembly_client_file_clauseContext _localctx = new Alter_assembly_client_file_clauseContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_alter_assembly_client_file_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1489);
			alter_assembly_file_name();
			setState(1493);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(1490);
				alter_assembly_as();
				setState(1491);
				id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_file_nameContext extends ParserRuleContext {
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Alter_assembly_file_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_file_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_assembly_file_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_assembly_file_name(this);
		}
	}

	public final Alter_assembly_file_nameContext alter_assembly_file_name() throws RecognitionException {
		Alter_assembly_file_nameContext _localctx = new Alter_assembly_file_nameContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_alter_assembly_file_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1495);
			match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_file_bitsContext extends ParserRuleContext {
		public Alter_assembly_asContext alter_assembly_as() {
			return getRuleContext(Alter_assembly_asContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Alter_assembly_file_bitsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_file_bits; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_assembly_file_bits(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_assembly_file_bits(this);
		}
	}

	public final Alter_assembly_file_bitsContext alter_assembly_file_bits() throws RecognitionException {
		Alter_assembly_file_bitsContext _localctx = new Alter_assembly_file_bitsContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_alter_assembly_file_bits);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1497);
			alter_assembly_as();
			setState(1498);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_asContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public Alter_assembly_asContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_as; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_assembly_as(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_assembly_as(this);
		}
	}

	public final Alter_assembly_asContext alter_assembly_as() throws RecognitionException {
		Alter_assembly_asContext _localctx = new Alter_assembly_asContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_alter_assembly_as);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1500);
			match(AS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_with_clauseContext extends ParserRuleContext {
		public Alter_assembly_withContext alter_assembly_with() {
			return getRuleContext(Alter_assembly_withContext.class,0);
		}
		public Assembly_optionContext assembly_option() {
			return getRuleContext(Assembly_optionContext.class,0);
		}
		public Alter_assembly_with_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_with_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_assembly_with_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_assembly_with_clause(this);
		}
	}

	public final Alter_assembly_with_clauseContext alter_assembly_with_clause() throws RecognitionException {
		Alter_assembly_with_clauseContext _localctx = new Alter_assembly_with_clauseContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_alter_assembly_with_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1502);
			alter_assembly_with();
			setState(1503);
			assembly_option(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_withContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public Alter_assembly_withContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_with; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_assembly_with(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_assembly_with(this);
		}
	}

	public final Alter_assembly_withContext alter_assembly_with() throws RecognitionException {
		Alter_assembly_withContext _localctx = new Alter_assembly_withContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_alter_assembly_with);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1505);
			match(WITH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Client_assembly_specifierContext extends ParserRuleContext {
		public Network_file_shareContext network_file_share() {
			return getRuleContext(Network_file_shareContext.class,0);
		}
		public Local_fileContext local_file() {
			return getRuleContext(Local_fileContext.class,0);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Client_assembly_specifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_client_assembly_specifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterClient_assembly_specifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitClient_assembly_specifier(this);
		}
	}

	public final Client_assembly_specifierContext client_assembly_specifier() throws RecognitionException {
		Client_assembly_specifierContext _localctx = new Client_assembly_specifierContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_client_assembly_specifier);
		try {
			setState(1510);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOUBLE_BACK_SLASH:
				enterOuterAlt(_localctx, 1);
				{
				setState(1507);
				network_file_share();
				}
				break;
			case DISK_DRIVE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1508);
				local_file();
				}
				break;
			case STRING:
				enterOuterAlt(_localctx, 3);
				{
				setState(1509);
				match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assembly_optionContext extends ParserRuleContext {
		public TerminalNode PERMISSION_SET() { return getToken(TSqlParser.PERMISSION_SET, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode SAFE() { return getToken(TSqlParser.SAFE, 0); }
		public TerminalNode EXTERNAL_ACCESS() { return getToken(TSqlParser.EXTERNAL_ACCESS, 0); }
		public TerminalNode UNSAFE() { return getToken(TSqlParser.UNSAFE, 0); }
		public TerminalNode VISIBILITY() { return getToken(TSqlParser.VISIBILITY, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public TerminalNode UNCHECKED() { return getToken(TSqlParser.UNCHECKED, 0); }
		public TerminalNode DATA() { return getToken(TSqlParser.DATA, 0); }
		public Assembly_optionContext assembly_option() {
			return getRuleContext(Assembly_optionContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public Assembly_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assembly_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAssembly_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAssembly_option(this);
		}
	}

	public final Assembly_optionContext assembly_option() throws RecognitionException {
		return assembly_option(0);
	}

	private Assembly_optionContext assembly_option(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Assembly_optionContext _localctx = new Assembly_optionContext(_ctx, _parentState);
		Assembly_optionContext _prevctx = _localctx;
		int _startState = 92;
		enterRecursionRule(_localctx, 92, RULE_assembly_option, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1521);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PERMISSION_SET:
				{
				setState(1513);
				match(PERMISSION_SET);
				setState(1514);
				match(EQUAL);
				setState(1515);
				_la = _input.LA(1);
				if ( !(_la==EXTERNAL_ACCESS || _la==SAFE || _la==UNSAFE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case VISIBILITY:
				{
				setState(1516);
				match(VISIBILITY);
				setState(1517);
				match(EQUAL);
				setState(1518);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case UNCHECKED:
				{
				setState(1519);
				match(UNCHECKED);
				setState(1520);
				match(DATA);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(1527);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,70,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Assembly_optionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_assembly_option);
					setState(1523);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(1524);
					match(COMMA);
					}
					} 
				}
				setState(1529);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,70,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Network_file_shareContext extends ParserRuleContext {
		public Network_file_startContext network_file_start() {
			return getRuleContext(Network_file_startContext.class,0);
		}
		public Network_computerContext network_computer() {
			return getRuleContext(Network_computerContext.class,0);
		}
		public File_pathContext file_path() {
			return getRuleContext(File_pathContext.class,0);
		}
		public Network_file_shareContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_network_file_share; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterNetwork_file_share(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitNetwork_file_share(this);
		}
	}

	public final Network_file_shareContext network_file_share() throws RecognitionException {
		Network_file_shareContext _localctx = new Network_file_shareContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_network_file_share);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1530);
			network_file_start();
			setState(1531);
			network_computer();
			setState(1532);
			file_path();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Network_computerContext extends ParserRuleContext {
		public IdContext computer_name;
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Network_computerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_network_computer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterNetwork_computer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitNetwork_computer(this);
		}
	}

	public final Network_computerContext network_computer() throws RecognitionException {
		Network_computerContext _localctx = new Network_computerContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_network_computer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1534);
			((Network_computerContext)_localctx).computer_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Network_file_startContext extends ParserRuleContext {
		public TerminalNode DOUBLE_BACK_SLASH() { return getToken(TSqlParser.DOUBLE_BACK_SLASH, 0); }
		public Network_file_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_network_file_start; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterNetwork_file_start(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitNetwork_file_start(this);
		}
	}

	public final Network_file_startContext network_file_start() throws RecognitionException {
		Network_file_startContext _localctx = new Network_file_startContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_network_file_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1536);
			match(DOUBLE_BACK_SLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_pathContext extends ParserRuleContext {
		public File_directory_path_separatorContext file_directory_path_separator() {
			return getRuleContext(File_directory_path_separatorContext.class,0);
		}
		public File_pathContext file_path() {
			return getRuleContext(File_pathContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public File_pathContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_path; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterFile_path(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitFile_path(this);
		}
	}

	public final File_pathContext file_path() throws RecognitionException {
		File_pathContext _localctx = new File_pathContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_file_path);
		try {
			setState(1542);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BACKSLASH:
				enterOuterAlt(_localctx, 1);
				{
				setState(1538);
				file_directory_path_separator();
				setState(1539);
				file_path();
				}
				break;
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case START:
			case TARGET:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(1541);
				id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_directory_path_separatorContext extends ParserRuleContext {
		public File_directory_path_separatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_directory_path_separator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterFile_directory_path_separator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitFile_directory_path_separator(this);
		}
	}

	public final File_directory_path_separatorContext file_directory_path_separator() throws RecognitionException {
		File_directory_path_separatorContext _localctx = new File_directory_path_separatorContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_file_directory_path_separator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1544);
			match(BACKSLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Local_fileContext extends ParserRuleContext {
		public Local_driveContext local_drive() {
			return getRuleContext(Local_driveContext.class,0);
		}
		public File_pathContext file_path() {
			return getRuleContext(File_pathContext.class,0);
		}
		public Local_fileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_local_file; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterLocal_file(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitLocal_file(this);
		}
	}

	public final Local_fileContext local_file() throws RecognitionException {
		Local_fileContext _localctx = new Local_fileContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_local_file);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1546);
			local_drive();
			setState(1547);
			file_path();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Local_driveContext extends ParserRuleContext {
		public TerminalNode DISK_DRIVE() { return getToken(TSqlParser.DISK_DRIVE, 0); }
		public Local_driveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_local_drive; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterLocal_drive(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitLocal_drive(this);
		}
	}

	public final Local_driveContext local_drive() throws RecognitionException {
		Local_driveContext _localctx = new Local_driveContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_local_drive);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1549);
			match(DISK_DRIVE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiple_local_filesContext extends ParserRuleContext {
		public Multiple_local_file_startContext multiple_local_file_start() {
			return getRuleContext(Multiple_local_file_startContext.class,0);
		}
		public Local_fileContext local_file() {
			return getRuleContext(Local_fileContext.class,0);
		}
		public TerminalNode SINGLE_QUOTE() { return getToken(TSqlParser.SINGLE_QUOTE, 0); }
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public Multiple_local_filesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiple_local_files; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterMultiple_local_files(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitMultiple_local_files(this);
		}
	}

	public final Multiple_local_filesContext multiple_local_files() throws RecognitionException {
		Multiple_local_filesContext _localctx = new Multiple_local_filesContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_multiple_local_files);
		try {
			setState(1557);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SINGLE_QUOTE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1551);
				multiple_local_file_start();
				setState(1552);
				local_file();
				setState(1553);
				match(SINGLE_QUOTE);
				setState(1554);
				match(COMMA);
				}
				break;
			case DISK_DRIVE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1556);
				local_file();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiple_local_file_startContext extends ParserRuleContext {
		public TerminalNode SINGLE_QUOTE() { return getToken(TSqlParser.SINGLE_QUOTE, 0); }
		public Multiple_local_file_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiple_local_file_start; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterMultiple_local_file_start(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitMultiple_local_file_start(this);
		}
	}

	public final Multiple_local_file_startContext multiple_local_file_start() throws RecognitionException {
		Multiple_local_file_startContext _localctx = new Multiple_local_file_startContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_multiple_local_file_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1559);
			match(SINGLE_QUOTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_assemblyContext extends ParserRuleContext {
		public IdContext assembly_name;
		public IdContext owner_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode ASSEMBLY() { return getToken(TSqlParser.ASSEMBLY, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode PERMISSION_SET() { return getToken(TSqlParser.PERMISSION_SET, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public List<TerminalNode> BINARY() { return getTokens(TSqlParser.BINARY); }
		public TerminalNode BINARY(int i) {
			return getToken(TSqlParser.BINARY, i);
		}
		public TerminalNode SAFE() { return getToken(TSqlParser.SAFE, 0); }
		public TerminalNode EXTERNAL_ACCESS() { return getToken(TSqlParser.EXTERNAL_ACCESS, 0); }
		public TerminalNode UNSAFE() { return getToken(TSqlParser.UNSAFE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Create_assemblyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_assembly; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_assembly(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_assembly(this);
		}
	}

	public final Create_assemblyContext create_assembly() throws RecognitionException {
		Create_assemblyContext _localctx = new Create_assemblyContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_create_assembly);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1561);
			match(CREATE);
			setState(1562);
			match(ASSEMBLY);
			setState(1563);
			((Create_assemblyContext)_localctx).assembly_name = id();
			setState(1566);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(1564);
				match(AUTHORIZATION);
				setState(1565);
				((Create_assemblyContext)_localctx).owner_name = id();
				}
			}

			setState(1568);
			match(FROM);
			setState(1573); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(1570);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1569);
						match(COMMA);
						}
					}

					setState(1572);
					_la = _input.LA(1);
					if ( !(_la==STRING || _la==BINARY) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1575); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,75,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(1581);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,76,_ctx) ) {
			case 1:
				{
				setState(1577);
				match(WITH);
				setState(1578);
				match(PERMISSION_SET);
				setState(1579);
				match(EQUAL);
				setState(1580);
				_la = _input.LA(1);
				if ( !(_la==EXTERNAL_ACCESS || _la==SAFE || _la==UNSAFE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_assemblyContext extends ParserRuleContext {
		public IdContext assembly_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode ASSEMBLY() { return getToken(TSqlParser.ASSEMBLY, 0); }
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode NO() { return getToken(TSqlParser.NO, 0); }
		public TerminalNode DEPENDENTS() { return getToken(TSqlParser.DEPENDENTS, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Drop_assemblyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_assembly; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_assembly(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_assembly(this);
		}
	}

	public final Drop_assemblyContext drop_assembly() throws RecognitionException {
		Drop_assemblyContext _localctx = new Drop_assemblyContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_drop_assembly);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1583);
			match(DROP);
			setState(1584);
			match(ASSEMBLY);
			setState(1587);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1585);
				match(IF);
				setState(1586);
				match(EXISTS);
				}
			}

			setState(1593); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(1590);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1589);
						match(COMMA);
						}
					}

					setState(1592);
					((Drop_assemblyContext)_localctx).assembly_name = id();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1595); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,79,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(1600);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,80,_ctx) ) {
			case 1:
				{
				setState(1597);
				match(WITH);
				setState(1598);
				match(NO);
				setState(1599);
				match(DEPENDENTS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_asymmetric_keyContext extends ParserRuleContext {
		public IdContext Asym_Key_Name;
		public Alter_asymmetric_key_startContext alter_asymmetric_key_start() {
			return getRuleContext(Alter_asymmetric_key_startContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Asymmetric_key_optionContext asymmetric_key_option() {
			return getRuleContext(Asymmetric_key_optionContext.class,0);
		}
		public TerminalNode REMOVE() { return getToken(TSqlParser.REMOVE, 0); }
		public TerminalNode PRIVATE() { return getToken(TSqlParser.PRIVATE, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public Alter_asymmetric_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_asymmetric_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_asymmetric_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_asymmetric_key(this);
		}
	}

	public final Alter_asymmetric_keyContext alter_asymmetric_key() throws RecognitionException {
		Alter_asymmetric_keyContext _localctx = new Alter_asymmetric_keyContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_alter_asymmetric_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1602);
			alter_asymmetric_key_start();
			setState(1603);
			((Alter_asymmetric_keyContext)_localctx).Asym_Key_Name = id();
			setState(1608);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				{
				setState(1604);
				asymmetric_key_option();
				}
				break;
			case REMOVE:
				{
				setState(1605);
				match(REMOVE);
				setState(1606);
				match(PRIVATE);
				setState(1607);
				match(KEY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_asymmetric_key_startContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(TSqlParser.ASYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public Alter_asymmetric_key_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_asymmetric_key_start; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_asymmetric_key_start(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_asymmetric_key_start(this);
		}
	}

	public final Alter_asymmetric_key_startContext alter_asymmetric_key_start() throws RecognitionException {
		Alter_asymmetric_key_startContext _localctx = new Alter_asymmetric_key_startContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_alter_asymmetric_key_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1610);
			match(ALTER);
			setState(1611);
			match(ASYMMETRIC);
			setState(1612);
			match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Asymmetric_key_optionContext extends ParserRuleContext {
		public Asymmetric_key_option_startContext asymmetric_key_option_start() {
			return getRuleContext(Asymmetric_key_option_startContext.class,0);
		}
		public List<Asymmetric_key_password_change_optionContext> asymmetric_key_password_change_option() {
			return getRuleContexts(Asymmetric_key_password_change_optionContext.class);
		}
		public Asymmetric_key_password_change_optionContext asymmetric_key_password_change_option(int i) {
			return getRuleContext(Asymmetric_key_password_change_optionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public Asymmetric_key_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asymmetric_key_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAsymmetric_key_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAsymmetric_key_option(this);
		}
	}

	public final Asymmetric_key_optionContext asymmetric_key_option() throws RecognitionException {
		Asymmetric_key_optionContext _localctx = new Asymmetric_key_optionContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_asymmetric_key_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1614);
			asymmetric_key_option_start();
			setState(1615);
			asymmetric_key_password_change_option();
			setState(1618);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(1616);
				match(COMMA);
				setState(1617);
				asymmetric_key_password_change_option();
				}
			}

			setState(1620);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Asymmetric_key_option_startContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode PRIVATE() { return getToken(TSqlParser.PRIVATE, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public Asymmetric_key_option_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asymmetric_key_option_start; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAsymmetric_key_option_start(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAsymmetric_key_option_start(this);
		}
	}

	public final Asymmetric_key_option_startContext asymmetric_key_option_start() throws RecognitionException {
		Asymmetric_key_option_startContext _localctx = new Asymmetric_key_option_startContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_asymmetric_key_option_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1622);
			match(WITH);
			setState(1623);
			match(PRIVATE);
			setState(1624);
			match(KEY);
			setState(1625);
			match(LR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Asymmetric_key_password_change_optionContext extends ParserRuleContext {
		public TerminalNode DECRYPTION() { return getToken(TSqlParser.DECRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public Asymmetric_key_password_change_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asymmetric_key_password_change_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAsymmetric_key_password_change_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAsymmetric_key_password_change_option(this);
		}
	}

	public final Asymmetric_key_password_change_optionContext asymmetric_key_password_change_option() throws RecognitionException {
		Asymmetric_key_password_change_optionContext _localctx = new Asymmetric_key_password_change_optionContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_asymmetric_key_password_change_option);
		try {
			setState(1637);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DECRYPTION:
				enterOuterAlt(_localctx, 1);
				{
				setState(1627);
				match(DECRYPTION);
				setState(1628);
				match(BY);
				setState(1629);
				match(PASSWORD);
				setState(1630);
				match(EQUAL);
				setState(1631);
				match(STRING);
				}
				break;
			case ENCRYPTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(1632);
				match(ENCRYPTION);
				setState(1633);
				match(BY);
				setState(1634);
				match(PASSWORD);
				setState(1635);
				match(EQUAL);
				setState(1636);
				match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_asymmetric_keyContext extends ParserRuleContext {
		public IdContext Asym_Key_Nam;
		public IdContext database_principal_name;
		public IdContext Assembly_Name;
		public IdContext Provider_Name;
		public Token provider_key_name;
		public Token asymmetric_key_password;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(TSqlParser.ASYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode FILE() { return getToken(TSqlParser.FILE, 0); }
		public TerminalNode EXECUTABLE_FILE() { return getToken(TSqlParser.EXECUTABLE_FILE, 0); }
		public TerminalNode ASSEMBLY() { return getToken(TSqlParser.ASSEMBLY, 0); }
		public TerminalNode PROVIDER() { return getToken(TSqlParser.PROVIDER, 0); }
		public TerminalNode ALGORITHM() { return getToken(TSqlParser.ALGORITHM, 0); }
		public TerminalNode PROVIDER_KEY_NAME() { return getToken(TSqlParser.PROVIDER_KEY_NAME, 0); }
		public TerminalNode CREATION_DISPOSITION() { return getToken(TSqlParser.CREATION_DISPOSITION, 0); }
		public TerminalNode RSA_4096() { return getToken(TSqlParser.RSA_4096, 0); }
		public TerminalNode RSA_3072() { return getToken(TSqlParser.RSA_3072, 0); }
		public TerminalNode RSA_2048() { return getToken(TSqlParser.RSA_2048, 0); }
		public TerminalNode RSA_1024() { return getToken(TSqlParser.RSA_1024, 0); }
		public TerminalNode RSA_512() { return getToken(TSqlParser.RSA_512, 0); }
		public TerminalNode CREATE_NEW() { return getToken(TSqlParser.CREATE_NEW, 0); }
		public TerminalNode OPEN_EXISTING() { return getToken(TSqlParser.OPEN_EXISTING, 0); }
		public Create_asymmetric_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_asymmetric_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_asymmetric_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_asymmetric_key(this);
		}
	}

	public final Create_asymmetric_keyContext create_asymmetric_key() throws RecognitionException {
		Create_asymmetric_keyContext _localctx = new Create_asymmetric_keyContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_create_asymmetric_key);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1639);
			match(CREATE);
			setState(1640);
			match(ASYMMETRIC);
			setState(1641);
			match(KEY);
			setState(1642);
			((Create_asymmetric_keyContext)_localctx).Asym_Key_Nam = id();
			setState(1645);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(1643);
				match(AUTHORIZATION);
				setState(1644);
				((Create_asymmetric_keyContext)_localctx).database_principal_name = id();
				}
			}

			setState(1660);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(1647);
				match(FROM);
				setState(1658);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FILE:
					{
					setState(1648);
					match(FILE);
					setState(1649);
					match(EQUAL);
					setState(1650);
					match(STRING);
					}
					break;
				case EXECUTABLE_FILE:
					{
					setState(1651);
					match(EXECUTABLE_FILE);
					setState(1652);
					match(EQUAL);
					setState(1653);
					match(STRING);
					}
					break;
				case ASSEMBLY:
					{
					setState(1654);
					match(ASSEMBLY);
					setState(1655);
					((Create_asymmetric_keyContext)_localctx).Assembly_Name = id();
					}
					break;
				case PROVIDER:
					{
					setState(1656);
					match(PROVIDER);
					setState(1657);
					((Create_asymmetric_keyContext)_localctx).Provider_Name = id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(1674);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,88,_ctx) ) {
			case 1:
				{
				setState(1662);
				match(WITH);
				setState(1672);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALGORITHM:
					{
					setState(1663);
					match(ALGORITHM);
					setState(1664);
					match(EQUAL);
					setState(1665);
					_la = _input.LA(1);
					if ( !(((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & ((1L << (RSA_512 - 290)) | (1L << (RSA_1024 - 290)) | (1L << (RSA_2048 - 290)) | (1L << (RSA_3072 - 290)) | (1L << (RSA_4096 - 290)))) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case PROVIDER_KEY_NAME:
					{
					setState(1666);
					match(PROVIDER_KEY_NAME);
					setState(1667);
					match(EQUAL);
					setState(1668);
					((Create_asymmetric_keyContext)_localctx).provider_key_name = match(STRING);
					}
					break;
				case CREATION_DISPOSITION:
					{
					setState(1669);
					match(CREATION_DISPOSITION);
					setState(1670);
					match(EQUAL);
					setState(1671);
					_la = _input.LA(1);
					if ( !(_la==CREATE_NEW || _la==OPEN_EXISTING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			setState(1681);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,89,_ctx) ) {
			case 1:
				{
				setState(1676);
				match(ENCRYPTION);
				setState(1677);
				match(BY);
				setState(1678);
				match(PASSWORD);
				setState(1679);
				match(EQUAL);
				setState(1680);
				((Create_asymmetric_keyContext)_localctx).asymmetric_key_password = match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_asymmetric_keyContext extends ParserRuleContext {
		public IdContext key_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(TSqlParser.ASYMMETRIC, 0); }
		public List<TerminalNode> KEY() { return getTokens(TSqlParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(TSqlParser.KEY, i);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode REMOVE() { return getToken(TSqlParser.REMOVE, 0); }
		public TerminalNode PROVIDER() { return getToken(TSqlParser.PROVIDER, 0); }
		public Drop_asymmetric_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_asymmetric_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_asymmetric_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_asymmetric_key(this);
		}
	}

	public final Drop_asymmetric_keyContext drop_asymmetric_key() throws RecognitionException {
		Drop_asymmetric_keyContext _localctx = new Drop_asymmetric_keyContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_drop_asymmetric_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1683);
			match(DROP);
			setState(1684);
			match(ASYMMETRIC);
			setState(1685);
			match(KEY);
			setState(1686);
			((Drop_asymmetric_keyContext)_localctx).key_name = id();
			setState(1690);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,90,_ctx) ) {
			case 1:
				{
				setState(1687);
				match(REMOVE);
				setState(1688);
				match(PROVIDER);
				setState(1689);
				match(KEY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_authorizationContext extends ParserRuleContext {
		public Entity_nameContext entity;
		public Alter_authorization_startContext alter_authorization_start() {
			return getRuleContext(Alter_authorization_startContext.class,0);
		}
		public Entity_toContext entity_to() {
			return getRuleContext(Entity_toContext.class,0);
		}
		public Authorization_granteeContext authorization_grantee() {
			return getRuleContext(Authorization_granteeContext.class,0);
		}
		public Entity_nameContext entity_name() {
			return getRuleContext(Entity_nameContext.class,0);
		}
		public Class_typeContext class_type() {
			return getRuleContext(Class_typeContext.class,0);
		}
		public Colon_colonContext colon_colon() {
			return getRuleContext(Colon_colonContext.class,0);
		}
		public Alter_authorizationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_authorization; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_authorization(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_authorization(this);
		}
	}

	public final Alter_authorizationContext alter_authorization() throws RecognitionException {
		Alter_authorizationContext _localctx = new Alter_authorizationContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_alter_authorization);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1692);
			alter_authorization_start();
			setState(1696);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,91,_ctx) ) {
			case 1:
				{
				setState(1693);
				class_type();
				setState(1694);
				colon_colon();
				}
				break;
			}
			setState(1698);
			((Alter_authorizationContext)_localctx).entity = entity_name();
			setState(1699);
			entity_to();
			setState(1700);
			authorization_grantee();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Authorization_granteeContext extends ParserRuleContext {
		public IdContext principal_name;
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(TSqlParser.SCHEMA, 0); }
		public TerminalNode OWNER() { return getToken(TSqlParser.OWNER, 0); }
		public Authorization_granteeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_authorization_grantee; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAuthorization_grantee(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAuthorization_grantee(this);
		}
	}

	public final Authorization_granteeContext authorization_grantee() throws RecognitionException {
		Authorization_granteeContext _localctx = new Authorization_granteeContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_authorization_grantee);
		try {
			setState(1705);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case START:
			case TARGET:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(1702);
				((Authorization_granteeContext)_localctx).principal_name = id();
				}
				break;
			case SCHEMA:
				enterOuterAlt(_localctx, 2);
				{
				setState(1703);
				match(SCHEMA);
				setState(1704);
				match(OWNER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Entity_toContext extends ParserRuleContext {
		public TerminalNode TO() { return getToken(TSqlParser.TO, 0); }
		public Entity_toContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_entity_to; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterEntity_to(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitEntity_to(this);
		}
	}

	public final Entity_toContext entity_to() throws RecognitionException {
		Entity_toContext _localctx = new Entity_toContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_entity_to);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1707);
			match(TO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Colon_colonContext extends ParserRuleContext {
		public List<TerminalNode> COLON() { return getTokens(TSqlParser.COLON); }
		public TerminalNode COLON(int i) {
			return getToken(TSqlParser.COLON, i);
		}
		public Colon_colonContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colon_colon; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterColon_colon(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitColon_colon(this);
		}
	}

	public final Colon_colonContext colon_colon() throws RecognitionException {
		Colon_colonContext _localctx = new Colon_colonContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_colon_colon);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1709);
			match(COLON);
			setState(1710);
			match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_authorization_startContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public Alter_authorization_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_authorization_start; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_authorization_start(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_authorization_start(this);
		}
	}

	public final Alter_authorization_startContext alter_authorization_start() throws RecognitionException {
		Alter_authorization_startContext _localctx = new Alter_authorization_startContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_alter_authorization_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1712);
			match(ALTER);
			setState(1713);
			match(AUTHORIZATION);
			setState(1714);
			match(ON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_authorization_for_sql_databaseContext extends ParserRuleContext {
		public Entity_nameContext entity;
		public Alter_authorization_startContext alter_authorization_start() {
			return getRuleContext(Alter_authorization_startContext.class,0);
		}
		public Entity_toContext entity_to() {
			return getRuleContext(Entity_toContext.class,0);
		}
		public Authorization_granteeContext authorization_grantee() {
			return getRuleContext(Authorization_granteeContext.class,0);
		}
		public Entity_nameContext entity_name() {
			return getRuleContext(Entity_nameContext.class,0);
		}
		public Class_type_for_sql_databaseContext class_type_for_sql_database() {
			return getRuleContext(Class_type_for_sql_databaseContext.class,0);
		}
		public Colon_colonContext colon_colon() {
			return getRuleContext(Colon_colonContext.class,0);
		}
		public Alter_authorization_for_sql_databaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_authorization_for_sql_database; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_authorization_for_sql_database(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_authorization_for_sql_database(this);
		}
	}

	public final Alter_authorization_for_sql_databaseContext alter_authorization_for_sql_database() throws RecognitionException {
		Alter_authorization_for_sql_databaseContext _localctx = new Alter_authorization_for_sql_databaseContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_alter_authorization_for_sql_database);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1716);
			alter_authorization_start();
			setState(1720);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,93,_ctx) ) {
			case 1:
				{
				setState(1717);
				class_type_for_sql_database();
				setState(1718);
				colon_colon();
				}
				break;
			}
			setState(1722);
			((Alter_authorization_for_sql_databaseContext)_localctx).entity = entity_name();
			setState(1723);
			entity_to();
			setState(1724);
			authorization_grantee();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_authorization_for_azure_dwContext extends ParserRuleContext {
		public Entity_name_for_azure_dwContext entity;
		public Alter_authorization_startContext alter_authorization_start() {
			return getRuleContext(Alter_authorization_startContext.class,0);
		}
		public Entity_toContext entity_to() {
			return getRuleContext(Entity_toContext.class,0);
		}
		public Authorization_granteeContext authorization_grantee() {
			return getRuleContext(Authorization_granteeContext.class,0);
		}
		public Entity_name_for_azure_dwContext entity_name_for_azure_dw() {
			return getRuleContext(Entity_name_for_azure_dwContext.class,0);
		}
		public Class_type_for_azure_dwContext class_type_for_azure_dw() {
			return getRuleContext(Class_type_for_azure_dwContext.class,0);
		}
		public Colon_colonContext colon_colon() {
			return getRuleContext(Colon_colonContext.class,0);
		}
		public Alter_authorization_for_azure_dwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_authorization_for_azure_dw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_authorization_for_azure_dw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_authorization_for_azure_dw(this);
		}
	}

	public final Alter_authorization_for_azure_dwContext alter_authorization_for_azure_dw() throws RecognitionException {
		Alter_authorization_for_azure_dwContext _localctx = new Alter_authorization_for_azure_dwContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_alter_authorization_for_azure_dw);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1726);
			alter_authorization_start();
			setState(1730);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,94,_ctx) ) {
			case 1:
				{
				setState(1727);
				class_type_for_azure_dw();
				setState(1728);
				colon_colon();
				}
				break;
			}
			setState(1732);
			((Alter_authorization_for_azure_dwContext)_localctx).entity = entity_name_for_azure_dw();
			setState(1733);
			entity_to();
			setState(1734);
			authorization_grantee();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_authorization_for_parallel_dwContext extends ParserRuleContext {
		public Entity_name_for_parallel_dwContext entity;
		public Alter_authorization_startContext alter_authorization_start() {
			return getRuleContext(Alter_authorization_startContext.class,0);
		}
		public Entity_toContext entity_to() {
			return getRuleContext(Entity_toContext.class,0);
		}
		public Authorization_granteeContext authorization_grantee() {
			return getRuleContext(Authorization_granteeContext.class,0);
		}
		public Entity_name_for_parallel_dwContext entity_name_for_parallel_dw() {
			return getRuleContext(Entity_name_for_parallel_dwContext.class,0);
		}
		public Class_type_for_parallel_dwContext class_type_for_parallel_dw() {
			return getRuleContext(Class_type_for_parallel_dwContext.class,0);
		}
		public Colon_colonContext colon_colon() {
			return getRuleContext(Colon_colonContext.class,0);
		}
		public Alter_authorization_for_parallel_dwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_authorization_for_parallel_dw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_authorization_for_parallel_dw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_authorization_for_parallel_dw(this);
		}
	}

	public final Alter_authorization_for_parallel_dwContext alter_authorization_for_parallel_dw() throws RecognitionException {
		Alter_authorization_for_parallel_dwContext _localctx = new Alter_authorization_for_parallel_dwContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_alter_authorization_for_parallel_dw);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1736);
			alter_authorization_start();
			setState(1740);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,95,_ctx) ) {
			case 1:
				{
				setState(1737);
				class_type_for_parallel_dw();
				setState(1738);
				colon_colon();
				}
				break;
			}
			setState(1742);
			((Alter_authorization_for_parallel_dwContext)_localctx).entity = entity_name_for_parallel_dw();
			setState(1743);
			entity_to();
			setState(1744);
			authorization_grantee();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Class_typeContext extends ParserRuleContext {
		public TerminalNode OBJECT() { return getToken(TSqlParser.OBJECT, 0); }
		public TerminalNode ASSEMBLY() { return getToken(TSqlParser.ASSEMBLY, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(TSqlParser.ASYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode AVAILABILITY() { return getToken(TSqlParser.AVAILABILITY, 0); }
		public TerminalNode GROUP() { return getToken(TSqlParser.GROUP, 0); }
		public TerminalNode CERTIFICATE() { return getToken(TSqlParser.CERTIFICATE, 0); }
		public TerminalNode CONTRACT() { return getToken(TSqlParser.CONTRACT, 0); }
		public TerminalNode TYPE() { return getToken(TSqlParser.TYPE, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode ENDPOINT() { return getToken(TSqlParser.ENDPOINT, 0); }
		public TerminalNode FULLTEXT() { return getToken(TSqlParser.FULLTEXT, 0); }
		public TerminalNode CATALOG() { return getToken(TSqlParser.CATALOG, 0); }
		public TerminalNode STOPLIST() { return getToken(TSqlParser.STOPLIST, 0); }
		public TerminalNode MESSAGE() { return getToken(TSqlParser.MESSAGE, 0); }
		public TerminalNode REMOTE() { return getToken(TSqlParser.REMOTE, 0); }
		public TerminalNode SERVICE() { return getToken(TSqlParser.SERVICE, 0); }
		public TerminalNode BINDING() { return getToken(TSqlParser.BINDING, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public TerminalNode ROUTE() { return getToken(TSqlParser.ROUTE, 0); }
		public TerminalNode SCHEMA() { return getToken(TSqlParser.SCHEMA, 0); }
		public TerminalNode SEARCH() { return getToken(TSqlParser.SEARCH, 0); }
		public TerminalNode PROPERTY() { return getToken(TSqlParser.PROPERTY, 0); }
		public TerminalNode LIST() { return getToken(TSqlParser.LIST, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode SYMMETRIC() { return getToken(TSqlParser.SYMMETRIC, 0); }
		public TerminalNode XML() { return getToken(TSqlParser.XML, 0); }
		public TerminalNode COLLECTION() { return getToken(TSqlParser.COLLECTION, 0); }
		public Class_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_class_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterClass_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitClass_type(this);
		}
	}

	public final Class_typeContext class_type() throws RecognitionException {
		Class_typeContext _localctx = new Class_typeContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_class_type);
		try {
			setState(1780);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,96,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1746);
				match(OBJECT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1747);
				match(ASSEMBLY);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1748);
				match(ASYMMETRIC);
				setState(1749);
				match(KEY);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1750);
				match(AVAILABILITY);
				setState(1751);
				match(GROUP);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1752);
				match(CERTIFICATE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1753);
				match(CONTRACT);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1754);
				match(TYPE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1755);
				match(DATABASE);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1756);
				match(ENDPOINT);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1757);
				match(FULLTEXT);
				setState(1758);
				match(CATALOG);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1759);
				match(FULLTEXT);
				setState(1760);
				match(STOPLIST);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1761);
				match(MESSAGE);
				setState(1762);
				match(TYPE);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1763);
				match(REMOTE);
				setState(1764);
				match(SERVICE);
				setState(1765);
				match(BINDING);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1766);
				match(ROLE);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1767);
				match(ROUTE);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1768);
				match(SCHEMA);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1769);
				match(SEARCH);
				setState(1770);
				match(PROPERTY);
				setState(1771);
				match(LIST);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1772);
				match(SERVER);
				setState(1773);
				match(ROLE);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1774);
				match(SERVICE);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1775);
				match(SYMMETRIC);
				setState(1776);
				match(KEY);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1777);
				match(XML);
				setState(1778);
				match(SCHEMA);
				setState(1779);
				match(COLLECTION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Class_type_for_sql_databaseContext extends ParserRuleContext {
		public TerminalNode OBJECT() { return getToken(TSqlParser.OBJECT, 0); }
		public TerminalNode ASSEMBLY() { return getToken(TSqlParser.ASSEMBLY, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(TSqlParser.ASYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode CERTIFICATE() { return getToken(TSqlParser.CERTIFICATE, 0); }
		public TerminalNode TYPE() { return getToken(TSqlParser.TYPE, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode FULLTEXT() { return getToken(TSqlParser.FULLTEXT, 0); }
		public TerminalNode CATALOG() { return getToken(TSqlParser.CATALOG, 0); }
		public TerminalNode STOPLIST() { return getToken(TSqlParser.STOPLIST, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public TerminalNode SCHEMA() { return getToken(TSqlParser.SCHEMA, 0); }
		public TerminalNode SEARCH() { return getToken(TSqlParser.SEARCH, 0); }
		public TerminalNode PROPERTY() { return getToken(TSqlParser.PROPERTY, 0); }
		public TerminalNode LIST() { return getToken(TSqlParser.LIST, 0); }
		public TerminalNode SYMMETRIC() { return getToken(TSqlParser.SYMMETRIC, 0); }
		public TerminalNode XML() { return getToken(TSqlParser.XML, 0); }
		public TerminalNode COLLECTION() { return getToken(TSqlParser.COLLECTION, 0); }
		public Class_type_for_sql_databaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_class_type_for_sql_database; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterClass_type_for_sql_database(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitClass_type_for_sql_database(this);
		}
	}

	public final Class_type_for_sql_databaseContext class_type_for_sql_database() throws RecognitionException {
		Class_type_for_sql_databaseContext _localctx = new Class_type_for_sql_databaseContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_class_type_for_sql_database);
		try {
			setState(1803);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,97,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1782);
				match(OBJECT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1783);
				match(ASSEMBLY);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1784);
				match(ASYMMETRIC);
				setState(1785);
				match(KEY);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1786);
				match(CERTIFICATE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1787);
				match(TYPE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1788);
				match(DATABASE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1789);
				match(FULLTEXT);
				setState(1790);
				match(CATALOG);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1791);
				match(FULLTEXT);
				setState(1792);
				match(STOPLIST);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1793);
				match(ROLE);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1794);
				match(SCHEMA);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1795);
				match(SEARCH);
				setState(1796);
				match(PROPERTY);
				setState(1797);
				match(LIST);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1798);
				match(SYMMETRIC);
				setState(1799);
				match(KEY);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1800);
				match(XML);
				setState(1801);
				match(SCHEMA);
				setState(1802);
				match(COLLECTION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Class_type_for_azure_dwContext extends ParserRuleContext {
		public TerminalNode SCHEMA() { return getToken(TSqlParser.SCHEMA, 0); }
		public TerminalNode OBJECT() { return getToken(TSqlParser.OBJECT, 0); }
		public Class_type_for_azure_dwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_class_type_for_azure_dw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterClass_type_for_azure_dw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitClass_type_for_azure_dw(this);
		}
	}

	public final Class_type_for_azure_dwContext class_type_for_azure_dw() throws RecognitionException {
		Class_type_for_azure_dwContext _localctx = new Class_type_for_azure_dwContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_class_type_for_azure_dw);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1805);
			_la = _input.LA(1);
			if ( !(_la==SCHEMA || _la==OBJECT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Class_type_for_parallel_dwContext extends ParserRuleContext {
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(TSqlParser.SCHEMA, 0); }
		public TerminalNode OBJECT() { return getToken(TSqlParser.OBJECT, 0); }
		public Class_type_for_parallel_dwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_class_type_for_parallel_dw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterClass_type_for_parallel_dw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitClass_type_for_parallel_dw(this);
		}
	}

	public final Class_type_for_parallel_dwContext class_type_for_parallel_dw() throws RecognitionException {
		Class_type_for_parallel_dwContext _localctx = new Class_type_for_parallel_dwContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_class_type_for_parallel_dw);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1807);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA || _la==OBJECT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_availability_groupContext extends ParserRuleContext {
		public IdContext group_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode AVAILABILITY() { return getToken(TSqlParser.AVAILABILITY, 0); }
		public TerminalNode GROUP() { return getToken(TSqlParser.GROUP, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_availability_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_availability_group; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_availability_group(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_availability_group(this);
		}
	}

	public final Drop_availability_groupContext drop_availability_group() throws RecognitionException {
		Drop_availability_groupContext _localctx = new Drop_availability_groupContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_drop_availability_group);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1809);
			match(DROP);
			setState(1810);
			match(AVAILABILITY);
			setState(1811);
			match(GROUP);
			setState(1812);
			((Drop_availability_groupContext)_localctx).group_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_availability_groupContext extends ParserRuleContext {
		public Alter_availability_group_startContext alter_availability_group_start() {
			return getRuleContext(Alter_availability_group_startContext.class,0);
		}
		public Alter_availability_group_optionsContext alter_availability_group_options() {
			return getRuleContext(Alter_availability_group_optionsContext.class,0);
		}
		public Alter_availability_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_availability_group; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_availability_group(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_availability_group(this);
		}
	}

	public final Alter_availability_groupContext alter_availability_group() throws RecognitionException {
		Alter_availability_groupContext _localctx = new Alter_availability_groupContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_alter_availability_group);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1814);
			alter_availability_group_start();
			setState(1815);
			alter_availability_group_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_availability_group_startContext extends ParserRuleContext {
		public IdContext group_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode AVAILABILITY() { return getToken(TSqlParser.AVAILABILITY, 0); }
		public TerminalNode GROUP() { return getToken(TSqlParser.GROUP, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Alter_availability_group_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_availability_group_start; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_availability_group_start(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_availability_group_start(this);
		}
	}

	public final Alter_availability_group_startContext alter_availability_group_start() throws RecognitionException {
		Alter_availability_group_startContext _localctx = new Alter_availability_group_startContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_alter_availability_group_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1817);
			match(ALTER);
			setState(1818);
			match(AVAILABILITY);
			setState(1819);
			match(GROUP);
			setState(1820);
			((Alter_availability_group_startContext)_localctx).group_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_availability_group_optionsContext extends ParserRuleContext {
		public Token milliseconds;
		public IdContext database_name;
		public Token server_instance;
		public Token session_timeout;
		public Token ag_name;
		public Token ag_name_modified;
		public Token listener_name;
		public TerminalNode SET() { return getToken(TSqlParser.SET, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public TerminalNode AUTOMATED_BACKUP_PREFERENCE() { return getToken(TSqlParser.AUTOMATED_BACKUP_PREFERENCE, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode FAILURE_CONDITION_LEVEL() { return getToken(TSqlParser.FAILURE_CONDITION_LEVEL, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode HEALTH_CHECK_TIMEOUT() { return getToken(TSqlParser.HEALTH_CHECK_TIMEOUT, 0); }
		public TerminalNode DB_FAILOVER() { return getToken(TSqlParser.DB_FAILOVER, 0); }
		public TerminalNode REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT() { return getToken(TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, 0); }
		public TerminalNode PRIMARY() { return getToken(TSqlParser.PRIMARY, 0); }
		public TerminalNode SECONDARY_ONLY() { return getToken(TSqlParser.SECONDARY_ONLY, 0); }
		public TerminalNode SECONDARY() { return getToken(TSqlParser.SECONDARY, 0); }
		public TerminalNode NONE() { return getToken(TSqlParser.NONE, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode REMOVE() { return getToken(TSqlParser.REMOVE, 0); }
		public TerminalNode REPLICA() { return getToken(TSqlParser.REPLICA, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public List<TerminalNode> WITH() { return getTokens(TSqlParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(TSqlParser.WITH, i);
		}
		public TerminalNode ENDPOINT_URL() { return getToken(TSqlParser.ENDPOINT_URL, 0); }
		public List<TerminalNode> AVAILABILITY_MODE() { return getTokens(TSqlParser.AVAILABILITY_MODE); }
		public TerminalNode AVAILABILITY_MODE(int i) {
			return getToken(TSqlParser.AVAILABILITY_MODE, i);
		}
		public List<TerminalNode> FAILOVER_MODE() { return getTokens(TSqlParser.FAILOVER_MODE); }
		public TerminalNode FAILOVER_MODE(int i) {
			return getToken(TSqlParser.FAILOVER_MODE, i);
		}
		public List<TerminalNode> SEEDING_MODE() { return getTokens(TSqlParser.SEEDING_MODE); }
		public TerminalNode SEEDING_MODE(int i) {
			return getToken(TSqlParser.SEEDING_MODE, i);
		}
		public TerminalNode BACKUP_PRIORITY() { return getToken(TSqlParser.BACKUP_PRIORITY, 0); }
		public TerminalNode PRIMARY_ROLE() { return getToken(TSqlParser.PRIMARY_ROLE, 0); }
		public List<TerminalNode> ALLOW_CONNECTIONS() { return getTokens(TSqlParser.ALLOW_CONNECTIONS); }
		public TerminalNode ALLOW_CONNECTIONS(int i) {
			return getToken(TSqlParser.ALLOW_CONNECTIONS, i);
		}
		public TerminalNode SECONDARY_ROLE() { return getToken(TSqlParser.SECONDARY_ROLE, 0); }
		public List<TerminalNode> SYNCHRONOUS_COMMIT() { return getTokens(TSqlParser.SYNCHRONOUS_COMMIT); }
		public TerminalNode SYNCHRONOUS_COMMIT(int i) {
			return getToken(TSqlParser.SYNCHRONOUS_COMMIT, i);
		}
		public List<TerminalNode> ASYNCHRONOUS_COMMIT() { return getTokens(TSqlParser.ASYNCHRONOUS_COMMIT); }
		public TerminalNode ASYNCHRONOUS_COMMIT(int i) {
			return getToken(TSqlParser.ASYNCHRONOUS_COMMIT, i);
		}
		public List<TerminalNode> AUTOMATIC() { return getTokens(TSqlParser.AUTOMATIC); }
		public TerminalNode AUTOMATIC(int i) {
			return getToken(TSqlParser.AUTOMATIC, i);
		}
		public List<TerminalNode> MANUAL() { return getTokens(TSqlParser.MANUAL); }
		public TerminalNode MANUAL(int i) {
			return getToken(TSqlParser.MANUAL, i);
		}
		public TerminalNode READ_WRITE() { return getToken(TSqlParser.READ_WRITE, 0); }
		public TerminalNode ALL() { return getToken(TSqlParser.ALL, 0); }
		public TerminalNode READ_ONLY() { return getToken(TSqlParser.READ_ONLY, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode READ_ONLY_ROUTING_LIST() { return getToken(TSqlParser.READ_ONLY_ROUTING_LIST, 0); }
		public TerminalNode NO() { return getToken(TSqlParser.NO, 0); }
		public TerminalNode SESSION_TIMEOUT() { return getToken(TSqlParser.SESSION_TIMEOUT, 0); }
		public TerminalNode MODIFY() { return getToken(TSqlParser.MODIFY, 0); }
		public TerminalNode JOIN() { return getToken(TSqlParser.JOIN, 0); }
		public TerminalNode AVAILABILITY() { return getToken(TSqlParser.AVAILABILITY, 0); }
		public TerminalNode GROUP() { return getToken(TSqlParser.GROUP, 0); }
		public List<TerminalNode> LISTENER_URL() { return getTokens(TSqlParser.LISTENER_URL); }
		public TerminalNode LISTENER_URL(int i) {
			return getToken(TSqlParser.LISTENER_URL, i);
		}
		public TerminalNode GRANT() { return getToken(TSqlParser.GRANT, 0); }
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode ANY() { return getToken(TSqlParser.ANY, 0); }
		public TerminalNode DENY() { return getToken(TSqlParser.DENY, 0); }
		public TerminalNode FAILOVER() { return getToken(TSqlParser.FAILOVER, 0); }
		public TerminalNode FORCE_FAILOVER_ALLOW_DATA_LOSS() { return getToken(TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, 0); }
		public TerminalNode LISTENER() { return getToken(TSqlParser.LISTENER, 0); }
		public TerminalNode DHCP() { return getToken(TSqlParser.DHCP, 0); }
		public TerminalNode IP() { return getToken(TSqlParser.IP, 0); }
		public List<TerminalNode> IPV4_ADDR() { return getTokens(TSqlParser.IPV4_ADDR); }
		public TerminalNode IPV4_ADDR(int i) {
			return getToken(TSqlParser.IPV4_ADDR, i);
		}
		public TerminalNode PORT() { return getToken(TSqlParser.PORT, 0); }
		public List<TerminalNode> IPV6_ADDR() { return getTokens(TSqlParser.IPV6_ADDR); }
		public TerminalNode IPV6_ADDR(int i) {
			return getToken(TSqlParser.IPV6_ADDR, i);
		}
		public TerminalNode RESTART() { return getToken(TSqlParser.RESTART, 0); }
		public TerminalNode OFFLINE() { return getToken(TSqlParser.OFFLINE, 0); }
		public TerminalNode DTC_SUPPORT() { return getToken(TSqlParser.DTC_SUPPORT, 0); }
		public TerminalNode PER_DB() { return getToken(TSqlParser.PER_DB, 0); }
		public Alter_availability_group_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_availability_group_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_availability_group_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_availability_group_options(this);
		}
	}

	public final Alter_availability_group_optionsContext alter_availability_group_options() throws RecognitionException {
		Alter_availability_group_optionsContext _localctx = new Alter_availability_group_optionsContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_alter_availability_group_options);
		int _la;
		try {
			int _alt;
			setState(2172);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,141,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1822);
				match(SET);
				setState(1823);
				match(LR_BRACKET);
				{
				setState(1839);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AUTOMATED_BACKUP_PREFERENCE:
					{
					setState(1824);
					match(AUTOMATED_BACKUP_PREFERENCE);
					setState(1825);
					match(EQUAL);
					setState(1826);
					_la = _input.LA(1);
					if ( !(_la==NONE || _la==PRIMARY || _la==SECONDARY || _la==SECONDARY_ONLY) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case FAILURE_CONDITION_LEVEL:
					{
					setState(1827);
					match(FAILURE_CONDITION_LEVEL);
					setState(1828);
					match(EQUAL);
					setState(1829);
					match(DECIMAL);
					}
					break;
				case HEALTH_CHECK_TIMEOUT:
					{
					setState(1830);
					match(HEALTH_CHECK_TIMEOUT);
					setState(1831);
					match(EQUAL);
					setState(1832);
					((Alter_availability_group_optionsContext)_localctx).milliseconds = match(DECIMAL);
					}
					break;
				case DB_FAILOVER:
					{
					setState(1833);
					match(DB_FAILOVER);
					setState(1834);
					match(EQUAL);
					setState(1835);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					{
					setState(1836);
					match(REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT);
					setState(1837);
					match(EQUAL);
					setState(1838);
					match(DECIMAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1841);
				match(RR_BRACKET);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1842);
				match(ADD);
				setState(1843);
				match(DATABASE);
				setState(1844);
				((Alter_availability_group_optionsContext)_localctx).database_name = id();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1845);
				match(REMOVE);
				setState(1846);
				match(DATABASE);
				setState(1847);
				((Alter_availability_group_optionsContext)_localctx).database_name = id();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1848);
				match(ADD);
				setState(1849);
				match(REPLICA);
				setState(1850);
				match(ON);
				setState(1851);
				((Alter_availability_group_optionsContext)_localctx).server_instance = match(STRING);
				{
				setState(1852);
				match(WITH);
				setState(1853);
				match(LR_BRACKET);
				{
				setState(1857);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENDPOINT_URL) {
					{
					setState(1854);
					match(ENDPOINT_URL);
					setState(1855);
					match(EQUAL);
					setState(1856);
					match(STRING);
					}
				}

				setState(1865);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,101,_ctx) ) {
				case 1:
					{
					setState(1860);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1859);
						match(COMMA);
						}
					}

					setState(1862);
					match(AVAILABILITY_MODE);
					setState(1863);
					match(EQUAL);
					setState(1864);
					_la = _input.LA(1);
					if ( !(_la==ASYNCHRONOUS_COMMIT || _la==SYNCHRONOUS_COMMIT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(1873);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,103,_ctx) ) {
				case 1:
					{
					setState(1868);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1867);
						match(COMMA);
						}
					}

					setState(1870);
					match(FAILOVER_MODE);
					setState(1871);
					match(EQUAL);
					setState(1872);
					_la = _input.LA(1);
					if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(1881);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,105,_ctx) ) {
				case 1:
					{
					setState(1876);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1875);
						match(COMMA);
						}
					}

					setState(1878);
					match(SEEDING_MODE);
					setState(1879);
					match(EQUAL);
					setState(1880);
					_la = _input.LA(1);
					if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(1889);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,107,_ctx) ) {
				case 1:
					{
					setState(1884);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1883);
						match(COMMA);
						}
					}

					setState(1886);
					match(BACKUP_PRIORITY);
					setState(1887);
					match(EQUAL);
					setState(1888);
					match(DECIMAL);
					}
					break;
				}
				setState(1900);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,109,_ctx) ) {
				case 1:
					{
					setState(1892);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1891);
						match(COMMA);
						}
					}

					setState(1894);
					match(PRIMARY_ROLE);
					setState(1895);
					match(LR_BRACKET);
					setState(1896);
					match(ALLOW_CONNECTIONS);
					setState(1897);
					match(EQUAL);
					setState(1898);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==READ_WRITE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1899);
					match(RR_BRACKET);
					}
					break;
				}
				setState(1911);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SECONDARY_ROLE || _la==COMMA) {
					{
					setState(1903);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1902);
						match(COMMA);
						}
					}

					setState(1905);
					match(SECONDARY_ROLE);
					setState(1906);
					match(LR_BRACKET);
					setState(1907);
					match(ALLOW_CONNECTIONS);
					setState(1908);
					match(EQUAL);
					{
					setState(1909);
					match(READ_ONLY);
					}
					setState(1910);
					match(RR_BRACKET);
					}
				}

				}
				}
				setState(1913);
				match(RR_BRACKET);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1914);
				match(SECONDARY_ROLE);
				setState(1915);
				match(LR_BRACKET);
				setState(1924);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALLOW_CONNECTIONS:
					{
					setState(1916);
					match(ALLOW_CONNECTIONS);
					setState(1917);
					match(EQUAL);
					setState(1918);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==NO || _la==READ_ONLY) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case READ_ONLY_ROUTING_LIST:
					{
					setState(1919);
					match(READ_ONLY_ROUTING_LIST);
					setState(1920);
					match(EQUAL);
					{
					setState(1921);
					match(LR_BRACKET);
					{
					{
					setState(1922);
					match(STRING);
					}
					}
					setState(1923);
					match(RR_BRACKET);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1926);
				match(PRIMARY_ROLE);
				setState(1927);
				match(LR_BRACKET);
				setState(1950);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALLOW_CONNECTIONS:
					{
					setState(1928);
					match(ALLOW_CONNECTIONS);
					setState(1929);
					match(EQUAL);
					setState(1930);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==NO || _la==READ_ONLY) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case READ_ONLY_ROUTING_LIST:
					{
					setState(1931);
					match(READ_ONLY_ROUTING_LIST);
					setState(1932);
					match(EQUAL);
					{
					setState(1933);
					match(LR_BRACKET);
					setState(1944);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case STRING:
					case RR_BRACKET:
					case COMMA:
						{
						setState(1940);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==STRING || _la==COMMA) {
							{
							{
							setState(1935);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(1934);
								match(COMMA);
								}
							}

							setState(1937);
							match(STRING);
							}
							}
							setState(1942);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						break;
					case NONE:
						{
						setState(1943);
						match(NONE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(1946);
					match(RR_BRACKET);
					}
					}
					break;
				case SESSION_TIMEOUT:
					{
					setState(1947);
					match(SESSION_TIMEOUT);
					setState(1948);
					match(EQUAL);
					setState(1949);
					((Alter_availability_group_optionsContext)_localctx).session_timeout = match(DECIMAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1952);
				match(MODIFY);
				setState(1953);
				match(REPLICA);
				setState(1954);
				match(ON);
				setState(1955);
				((Alter_availability_group_optionsContext)_localctx).server_instance = match(STRING);
				setState(2013);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WITH:
					{
					setState(1956);
					match(WITH);
					setState(1957);
					match(LR_BRACKET);
					setState(1973);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ENDPOINT_URL:
						{
						setState(1958);
						match(ENDPOINT_URL);
						setState(1959);
						match(EQUAL);
						setState(1960);
						match(STRING);
						}
						break;
					case AVAILABILITY_MODE:
						{
						setState(1961);
						match(AVAILABILITY_MODE);
						setState(1962);
						match(EQUAL);
						setState(1963);
						_la = _input.LA(1);
						if ( !(_la==ASYNCHRONOUS_COMMIT || _la==SYNCHRONOUS_COMMIT) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case FAILOVER_MODE:
						{
						setState(1964);
						match(FAILOVER_MODE);
						setState(1965);
						match(EQUAL);
						setState(1966);
						_la = _input.LA(1);
						if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case SEEDING_MODE:
						{
						setState(1967);
						match(SEEDING_MODE);
						setState(1968);
						match(EQUAL);
						setState(1969);
						_la = _input.LA(1);
						if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case BACKUP_PRIORITY:
						{
						setState(1970);
						match(BACKUP_PRIORITY);
						setState(1971);
						match(EQUAL);
						setState(1972);
						match(DECIMAL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case SECONDARY_ROLE:
					{
					setState(1975);
					match(SECONDARY_ROLE);
					setState(1976);
					match(LR_BRACKET);
					setState(1985);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ALLOW_CONNECTIONS:
						{
						setState(1977);
						match(ALLOW_CONNECTIONS);
						setState(1978);
						match(EQUAL);
						setState(1979);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==NO || _la==READ_ONLY) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case READ_ONLY_ROUTING_LIST:
						{
						setState(1980);
						match(READ_ONLY_ROUTING_LIST);
						setState(1981);
						match(EQUAL);
						{
						setState(1982);
						match(LR_BRACKET);
						{
						{
						setState(1983);
						match(STRING);
						}
						}
						setState(1984);
						match(RR_BRACKET);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case PRIMARY_ROLE:
					{
					setState(1987);
					match(PRIMARY_ROLE);
					setState(1988);
					match(LR_BRACKET);
					setState(2011);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ALLOW_CONNECTIONS:
						{
						setState(1989);
						match(ALLOW_CONNECTIONS);
						setState(1990);
						match(EQUAL);
						setState(1991);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==NO || _la==READ_ONLY) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case READ_ONLY_ROUTING_LIST:
						{
						setState(1992);
						match(READ_ONLY_ROUTING_LIST);
						setState(1993);
						match(EQUAL);
						{
						setState(1994);
						match(LR_BRACKET);
						setState(2005);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case STRING:
						case RR_BRACKET:
						case COMMA:
							{
							setState(2001);
							_errHandler.sync(this);
							_la = _input.LA(1);
							while (_la==STRING || _la==COMMA) {
								{
								{
								setState(1996);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(1995);
									match(COMMA);
									}
								}

								setState(1998);
								match(STRING);
								}
								}
								setState(2003);
								_errHandler.sync(this);
								_la = _input.LA(1);
							}
							}
							break;
						case NONE:
							{
							setState(2004);
							match(NONE);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(2007);
						match(RR_BRACKET);
						}
						}
						break;
					case SESSION_TIMEOUT:
						{
						setState(2008);
						match(SESSION_TIMEOUT);
						setState(2009);
						match(EQUAL);
						setState(2010);
						((Alter_availability_group_optionsContext)_localctx).session_timeout = match(DECIMAL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2015);
				match(RR_BRACKET);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2016);
				match(REMOVE);
				setState(2017);
				match(REPLICA);
				setState(2018);
				match(ON);
				setState(2019);
				match(STRING);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2020);
				match(JOIN);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2021);
				match(JOIN);
				setState(2022);
				match(AVAILABILITY);
				setState(2023);
				match(GROUP);
				setState(2024);
				match(ON);
				setState(2047); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2026);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2025);
							match(COMMA);
							}
						}

						setState(2028);
						((Alter_availability_group_optionsContext)_localctx).ag_name = match(STRING);
						setState(2029);
						match(WITH);
						setState(2030);
						match(LR_BRACKET);
						{
						setState(2031);
						match(LISTENER_URL);
						setState(2032);
						match(EQUAL);
						setState(2033);
						match(STRING);
						setState(2034);
						match(COMMA);
						setState(2035);
						match(AVAILABILITY_MODE);
						setState(2036);
						match(EQUAL);
						setState(2037);
						_la = _input.LA(1);
						if ( !(_la==ASYNCHRONOUS_COMMIT || _la==SYNCHRONOUS_COMMIT) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(2038);
						match(COMMA);
						setState(2039);
						match(FAILOVER_MODE);
						setState(2040);
						match(EQUAL);
						setState(2041);
						match(MANUAL);
						setState(2042);
						match(COMMA);
						setState(2043);
						match(SEEDING_MODE);
						setState(2044);
						match(EQUAL);
						setState(2045);
						_la = _input.LA(1);
						if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(2046);
						match(RR_BRACKET);
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2049); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,125,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2051);
				match(MODIFY);
				setState(2052);
				match(AVAILABILITY);
				setState(2053);
				match(GROUP);
				setState(2054);
				match(ON);
				setState(2089); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2056);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2055);
							match(COMMA);
							}
						}

						setState(2058);
						((Alter_availability_group_optionsContext)_localctx).ag_name_modified = match(STRING);
						setState(2059);
						match(WITH);
						setState(2060);
						match(LR_BRACKET);
						{
						setState(2061);
						match(LISTENER_URL);
						setState(2062);
						match(EQUAL);
						setState(2063);
						match(STRING);
						setState(2070);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,128,_ctx) ) {
						case 1:
							{
							setState(2065);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(2064);
								match(COMMA);
								}
							}

							setState(2067);
							match(AVAILABILITY_MODE);
							setState(2068);
							match(EQUAL);
							setState(2069);
							_la = _input.LA(1);
							if ( !(_la==ASYNCHRONOUS_COMMIT || _la==SYNCHRONOUS_COMMIT) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						}
						setState(2078);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,130,_ctx) ) {
						case 1:
							{
							setState(2073);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(2072);
								match(COMMA);
								}
							}

							setState(2075);
							match(FAILOVER_MODE);
							setState(2076);
							match(EQUAL);
							setState(2077);
							match(MANUAL);
							}
							break;
						}
						setState(2086);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==SEEDING_MODE || _la==COMMA) {
							{
							setState(2081);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(2080);
								match(COMMA);
								}
							}

							setState(2083);
							match(SEEDING_MODE);
							setState(2084);
							match(EQUAL);
							setState(2085);
							_la = _input.LA(1);
							if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
						}

						setState(2088);
						match(RR_BRACKET);
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2091); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,133,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2093);
				match(GRANT);
				setState(2094);
				match(CREATE);
				setState(2095);
				match(ANY);
				setState(2096);
				match(DATABASE);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2097);
				match(DENY);
				setState(2098);
				match(CREATE);
				setState(2099);
				match(ANY);
				setState(2100);
				match(DATABASE);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2101);
				match(FAILOVER);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(2102);
				match(FORCE_FAILOVER_ALLOW_DATA_LOSS);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(2103);
				match(ADD);
				setState(2104);
				match(LISTENER);
				setState(2105);
				((Alter_availability_group_optionsContext)_localctx).listener_name = match(STRING);
				setState(2106);
				match(LR_BRACKET);
				setState(2140);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,138,_ctx) ) {
				case 1:
					{
					setState(2107);
					match(WITH);
					setState(2108);
					match(DHCP);
					{
					setState(2109);
					match(ON);
					setState(2110);
					match(LR_BRACKET);
					{
					setState(2111);
					match(IPV4_ADDR);
					setState(2112);
					match(IPV4_ADDR);
					}
					setState(2114);
					match(RR_BRACKET);
					}
					}
					break;
				case 2:
					{
					setState(2115);
					match(WITH);
					setState(2116);
					match(IP);
					setState(2117);
					match(LR_BRACKET);
					{
					setState(2129); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(2119);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2118);
							match(COMMA);
							}
						}

						setState(2121);
						match(LR_BRACKET);
						setState(2126);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case IPV4_ADDR:
							{
							setState(2122);
							match(IPV4_ADDR);
							setState(2123);
							match(COMMA);
							setState(2124);
							match(IPV4_ADDR);
							}
							break;
						case IPV6_ADDR:
							{
							setState(2125);
							match(IPV6_ADDR);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(2128);
						match(RR_BRACKET);
						}
						}
						setState(2131); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==LR_BRACKET || _la==COMMA );
					setState(2133);
					match(RR_BRACKET);
					setState(2138);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2134);
						match(COMMA);
						setState(2135);
						match(PORT);
						setState(2136);
						match(EQUAL);
						setState(2137);
						match(DECIMAL);
						}
					}

					}
					}
					break;
				}
				setState(2142);
				match(RR_BRACKET);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(2143);
				match(MODIFY);
				setState(2144);
				match(LISTENER);
				setState(2157);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ADD:
					{
					setState(2145);
					match(ADD);
					setState(2146);
					match(IP);
					setState(2147);
					match(LR_BRACKET);
					setState(2151);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case IPV4_ADDR:
						{
						setState(2148);
						match(IPV4_ADDR);
						setState(2149);
						match(IPV4_ADDR);
						}
						break;
					case IPV6_ADDR:
						{
						setState(2150);
						match(IPV6_ADDR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2153);
					match(RR_BRACKET);
					}
					break;
				case PORT:
					{
					setState(2154);
					match(PORT);
					setState(2155);
					match(EQUAL);
					setState(2156);
					match(DECIMAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(2159);
				match(RESTART);
				setState(2160);
				match(LISTENER);
				setState(2161);
				match(STRING);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(2162);
				match(REMOVE);
				setState(2163);
				match(LISTENER);
				setState(2164);
				match(STRING);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(2165);
				match(OFFLINE);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(2166);
				match(WITH);
				setState(2167);
				match(LR_BRACKET);
				setState(2168);
				match(DTC_SUPPORT);
				setState(2169);
				match(EQUAL);
				setState(2170);
				match(PER_DB);
				setState(2171);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_alter_broker_priorityContext extends ParserRuleContext {
		public IdContext ConversationPriorityName;
		public Token RemoteServiceName;
		public Token PriorityValue;
		public TerminalNode BROKER() { return getToken(TSqlParser.BROKER, 0); }
		public TerminalNode PRIORITY() { return getToken(TSqlParser.PRIORITY, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode CONVERSATION() { return getToken(TSqlParser.CONVERSATION, 0); }
		public TerminalNode SET() { return getToken(TSqlParser.SET, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode CONTRACT_NAME() { return getToken(TSqlParser.CONTRACT_NAME, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode LOCAL_SERVICE_NAME() { return getToken(TSqlParser.LOCAL_SERVICE_NAME, 0); }
		public TerminalNode REMOTE_SERVICE_NAME() { return getToken(TSqlParser.REMOTE_SERVICE_NAME, 0); }
		public TerminalNode PRIORITY_LEVEL() { return getToken(TSqlParser.PRIORITY_LEVEL, 0); }
		public List<TerminalNode> ANY() { return getTokens(TSqlParser.ANY); }
		public TerminalNode ANY(int i) {
			return getToken(TSqlParser.ANY, i);
		}
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode DOUBLE_FORWARD_SLASH() { return getToken(TSqlParser.DOUBLE_FORWARD_SLASH, 0); }
		public Create_or_alter_broker_priorityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_alter_broker_priority; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_or_alter_broker_priority(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_or_alter_broker_priority(this);
		}
	}

	public final Create_or_alter_broker_priorityContext create_or_alter_broker_priority() throws RecognitionException {
		Create_or_alter_broker_priorityContext _localctx = new Create_or_alter_broker_priorityContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_create_or_alter_broker_priority);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2174);
			_la = _input.LA(1);
			if ( !(_la==ALTER || _la==CREATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2175);
			match(BROKER);
			setState(2176);
			match(PRIORITY);
			setState(2177);
			((Create_or_alter_broker_priorityContext)_localctx).ConversationPriorityName = id();
			setState(2178);
			match(FOR);
			setState(2179);
			match(CONVERSATION);
			setState(2180);
			match(SET);
			setState(2181);
			match(LR_BRACKET);
			setState(2191);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONTRACT_NAME) {
				{
				setState(2182);
				match(CONTRACT_NAME);
				setState(2183);
				match(EQUAL);
				setState(2186);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SID:
				case SOURCE:
				case STATE:
				case START:
				case TARGET:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					{
					setState(2184);
					id();
					}
					}
					break;
				case ANY:
					{
					setState(2185);
					match(ANY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2189);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2188);
					match(COMMA);
					}
				}

				}
			}

			setState(2205);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL_SERVICE_NAME) {
				{
				setState(2193);
				match(LOCAL_SERVICE_NAME);
				setState(2194);
				match(EQUAL);
				setState(2200);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CALLED:
				case DATA_COMPRESSION:
				case DOUBLE_FORWARD_SLASH:
				case EVENTDATA:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SID:
				case SOURCE:
				case STATE:
				case START:
				case TARGET:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(2196);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOUBLE_FORWARD_SLASH) {
						{
						setState(2195);
						match(DOUBLE_FORWARD_SLASH);
						}
					}

					setState(2198);
					id();
					}
					break;
				case ANY:
					{
					setState(2199);
					match(ANY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2203);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2202);
					match(COMMA);
					}
				}

				}
			}

			setState(2216);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REMOTE_SERVICE_NAME) {
				{
				setState(2207);
				match(REMOTE_SERVICE_NAME);
				setState(2208);
				match(EQUAL);
				setState(2211);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING:
					{
					setState(2209);
					((Create_or_alter_broker_priorityContext)_localctx).RemoteServiceName = match(STRING);
					}
					break;
				case ANY:
					{
					setState(2210);
					match(ANY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2214);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2213);
					match(COMMA);
					}
				}

				}
			}

			setState(2224);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PRIORITY_LEVEL) {
				{
				setState(2218);
				match(PRIORITY_LEVEL);
				setState(2219);
				match(EQUAL);
				setState(2222);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DECIMAL:
					{
					setState(2220);
					((Create_or_alter_broker_priorityContext)_localctx).PriorityValue = match(DECIMAL);
					}
					break;
				case DEFAULT:
					{
					setState(2221);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(2226);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_broker_priorityContext extends ParserRuleContext {
		public IdContext ConversationPriorityName;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode BROKER() { return getToken(TSqlParser.BROKER, 0); }
		public TerminalNode PRIORITY() { return getToken(TSqlParser.PRIORITY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_broker_priorityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_broker_priority; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_broker_priority(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_broker_priority(this);
		}
	}

	public final Drop_broker_priorityContext drop_broker_priority() throws RecognitionException {
		Drop_broker_priorityContext _localctx = new Drop_broker_priorityContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_drop_broker_priority);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2228);
			match(DROP);
			setState(2229);
			match(BROKER);
			setState(2230);
			match(PRIORITY);
			setState(2231);
			((Drop_broker_priorityContext)_localctx).ConversationPriorityName = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_certificateContext extends ParserRuleContext {
		public IdContext certificate_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode CERTIFICATE() { return getToken(TSqlParser.CERTIFICATE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode REMOVE() { return getToken(TSqlParser.REMOVE, 0); }
		public TerminalNode PRIVATE_KEY() { return getToken(TSqlParser.PRIVATE_KEY, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode PRIVATE() { return getToken(TSqlParser.PRIVATE, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode ACTIVE() { return getToken(TSqlParser.ACTIVE, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode BEGIN_DIALOG() { return getToken(TSqlParser.BEGIN_DIALOG, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public List<TerminalNode> FILE() { return getTokens(TSqlParser.FILE); }
		public TerminalNode FILE(int i) {
			return getToken(TSqlParser.FILE, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public List<TerminalNode> DECRYPTION() { return getTokens(TSqlParser.DECRYPTION); }
		public TerminalNode DECRYPTION(int i) {
			return getToken(TSqlParser.DECRYPTION, i);
		}
		public List<TerminalNode> BY() { return getTokens(TSqlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(TSqlParser.BY, i);
		}
		public List<TerminalNode> PASSWORD() { return getTokens(TSqlParser.PASSWORD); }
		public TerminalNode PASSWORD(int i) {
			return getToken(TSqlParser.PASSWORD, i);
		}
		public List<TerminalNode> ENCRYPTION() { return getTokens(TSqlParser.ENCRYPTION); }
		public TerminalNode ENCRYPTION(int i) {
			return getToken(TSqlParser.ENCRYPTION, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Alter_certificateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_certificate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_certificate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_certificate(this);
		}
	}

	public final Alter_certificateContext alter_certificate() throws RecognitionException {
		Alter_certificateContext _localctx = new Alter_certificateContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_alter_certificate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2233);
			match(ALTER);
			setState(2234);
			match(CERTIFICATE);
			setState(2235);
			((Alter_certificateContext)_localctx).certificate_name = id();
			setState(2275);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,159,_ctx) ) {
			case 1:
				{
				setState(2236);
				match(REMOVE);
				setState(2237);
				match(PRIVATE_KEY);
				}
				break;
			case 2:
				{
				setState(2238);
				match(WITH);
				setState(2239);
				match(PRIVATE);
				setState(2240);
				match(KEY);
				setState(2241);
				match(LR_BRACKET);
				setState(2264); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(2264);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case FILE:
						{
						setState(2242);
						match(FILE);
						setState(2243);
						match(EQUAL);
						setState(2244);
						match(STRING);
						setState(2246);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2245);
							match(COMMA);
							}
						}

						}
						break;
					case DECRYPTION:
						{
						setState(2248);
						match(DECRYPTION);
						setState(2249);
						match(BY);
						setState(2250);
						match(PASSWORD);
						setState(2251);
						match(EQUAL);
						setState(2252);
						match(STRING);
						setState(2254);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2253);
							match(COMMA);
							}
						}

						}
						break;
					case ENCRYPTION:
						{
						setState(2256);
						match(ENCRYPTION);
						setState(2257);
						match(BY);
						setState(2258);
						match(PASSWORD);
						setState(2259);
						match(EQUAL);
						setState(2260);
						match(STRING);
						setState(2262);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2261);
							match(COMMA);
							}
						}

						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(2266); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==FILE || _la==DECRYPTION || _la==ENCRYPTION );
				setState(2268);
				match(RR_BRACKET);
				}
				break;
			case 3:
				{
				setState(2269);
				match(WITH);
				setState(2270);
				match(ACTIVE);
				setState(2271);
				match(FOR);
				setState(2272);
				match(BEGIN_DIALOG);
				setState(2273);
				match(EQUAL);
				setState(2274);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_column_encryption_keyContext extends ParserRuleContext {
		public IdContext column_encryption_key;
		public IdContext column_master_key_name;
		public Token algorithm_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode COLUMN() { return getToken(TSqlParser.COLUMN, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode VALUE() { return getToken(TSqlParser.VALUE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode COLUMN_MASTER_KEY() { return getToken(TSqlParser.COLUMN_MASTER_KEY, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode ALGORITHM() { return getToken(TSqlParser.ALGORITHM, 0); }
		public TerminalNode ENCRYPTED_VALUE() { return getToken(TSqlParser.ENCRYPTED_VALUE, 0); }
		public TerminalNode BINARY() { return getToken(TSqlParser.BINARY, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Alter_column_encryption_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_column_encryption_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_column_encryption_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_column_encryption_key(this);
		}
	}

	public final Alter_column_encryption_keyContext alter_column_encryption_key() throws RecognitionException {
		Alter_column_encryption_keyContext _localctx = new Alter_column_encryption_keyContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_alter_column_encryption_key);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2277);
			match(ALTER);
			setState(2278);
			match(COLUMN);
			setState(2279);
			match(ENCRYPTION);
			setState(2280);
			match(KEY);
			setState(2281);
			((Alter_column_encryption_keyContext)_localctx).column_encryption_key = id();
			setState(2282);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2283);
			match(VALUE);
			setState(2284);
			match(LR_BRACKET);
			setState(2285);
			match(COLUMN_MASTER_KEY);
			setState(2286);
			match(EQUAL);
			setState(2287);
			((Alter_column_encryption_keyContext)_localctx).column_master_key_name = id();
			setState(2296);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(2288);
				match(COMMA);
				setState(2289);
				match(ALGORITHM);
				setState(2290);
				match(EQUAL);
				setState(2291);
				((Alter_column_encryption_keyContext)_localctx).algorithm_name = match(STRING);
				setState(2292);
				match(COMMA);
				setState(2293);
				match(ENCRYPTED_VALUE);
				setState(2294);
				match(EQUAL);
				setState(2295);
				match(BINARY);
				}
			}

			setState(2298);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_column_encryption_keyContext extends ParserRuleContext {
		public IdContext column_encryption_key;
		public IdContext column_master_key_name;
		public Token algorithm_name;
		public Token encrypted_value;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode COLUMN() { return getToken(TSqlParser.COLUMN, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode VALUES() { return getToken(TSqlParser.VALUES, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> COLUMN_MASTER_KEY() { return getTokens(TSqlParser.COLUMN_MASTER_KEY); }
		public TerminalNode COLUMN_MASTER_KEY(int i) {
			return getToken(TSqlParser.COLUMN_MASTER_KEY, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<TerminalNode> ALGORITHM() { return getTokens(TSqlParser.ALGORITHM); }
		public TerminalNode ALGORITHM(int i) {
			return getToken(TSqlParser.ALGORITHM, i);
		}
		public List<TerminalNode> ENCRYPTED_VALUE() { return getTokens(TSqlParser.ENCRYPTED_VALUE); }
		public TerminalNode ENCRYPTED_VALUE(int i) {
			return getToken(TSqlParser.ENCRYPTED_VALUE, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public List<TerminalNode> BINARY() { return getTokens(TSqlParser.BINARY); }
		public TerminalNode BINARY(int i) {
			return getToken(TSqlParser.BINARY, i);
		}
		public Create_column_encryption_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_column_encryption_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_column_encryption_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_column_encryption_key(this);
		}
	}

	public final Create_column_encryption_keyContext create_column_encryption_key() throws RecognitionException {
		Create_column_encryption_keyContext _localctx = new Create_column_encryption_keyContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_create_column_encryption_key);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2300);
			match(CREATE);
			setState(2301);
			match(COLUMN);
			setState(2302);
			match(ENCRYPTION);
			setState(2303);
			match(KEY);
			setState(2304);
			((Create_column_encryption_keyContext)_localctx).column_encryption_key = id();
			setState(2305);
			match(WITH);
			setState(2306);
			match(VALUES);
			setState(2326); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2307);
					match(LR_BRACKET);
					setState(2309);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2308);
						match(COMMA);
						}
					}

					setState(2311);
					match(COLUMN_MASTER_KEY);
					setState(2312);
					match(EQUAL);
					setState(2313);
					((Create_column_encryption_keyContext)_localctx).column_master_key_name = id();
					setState(2314);
					match(COMMA);
					setState(2315);
					match(ALGORITHM);
					setState(2316);
					match(EQUAL);
					setState(2317);
					((Create_column_encryption_keyContext)_localctx).algorithm_name = match(STRING);
					setState(2318);
					match(COMMA);
					setState(2319);
					match(ENCRYPTED_VALUE);
					setState(2320);
					match(EQUAL);
					setState(2321);
					((Create_column_encryption_keyContext)_localctx).encrypted_value = match(BINARY);
					setState(2322);
					match(RR_BRACKET);
					setState(2324);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2323);
						match(COMMA);
						}
					}

					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2328); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,163,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_certificateContext extends ParserRuleContext {
		public IdContext certificate_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode CERTIFICATE() { return getToken(TSqlParser.CERTIFICATE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_certificateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_certificate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_certificate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_certificate(this);
		}
	}

	public final Drop_certificateContext drop_certificate() throws RecognitionException {
		Drop_certificateContext _localctx = new Drop_certificateContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_drop_certificate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2330);
			match(DROP);
			setState(2331);
			match(CERTIFICATE);
			setState(2332);
			((Drop_certificateContext)_localctx).certificate_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_column_encryption_keyContext extends ParserRuleContext {
		public IdContext key_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode COLUMN() { return getToken(TSqlParser.COLUMN, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_column_encryption_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_column_encryption_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_column_encryption_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_column_encryption_key(this);
		}
	}

	public final Drop_column_encryption_keyContext drop_column_encryption_key() throws RecognitionException {
		Drop_column_encryption_keyContext _localctx = new Drop_column_encryption_keyContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_drop_column_encryption_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2334);
			match(DROP);
			setState(2335);
			match(COLUMN);
			setState(2336);
			match(ENCRYPTION);
			setState(2337);
			match(KEY);
			setState(2338);
			((Drop_column_encryption_keyContext)_localctx).key_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_column_master_keyContext extends ParserRuleContext {
		public IdContext key_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode COLUMN() { return getToken(TSqlParser.COLUMN, 0); }
		public TerminalNode MASTER() { return getToken(TSqlParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_column_master_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_column_master_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_column_master_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_column_master_key(this);
		}
	}

	public final Drop_column_master_keyContext drop_column_master_key() throws RecognitionException {
		Drop_column_master_keyContext _localctx = new Drop_column_master_keyContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_drop_column_master_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2340);
			match(DROP);
			setState(2341);
			match(COLUMN);
			setState(2342);
			match(MASTER);
			setState(2343);
			match(KEY);
			setState(2344);
			((Drop_column_master_keyContext)_localctx).key_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_contractContext extends ParserRuleContext {
		public IdContext dropped_contract_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode CONTRACT() { return getToken(TSqlParser.CONTRACT, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_contractContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_contract; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_contract(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_contract(this);
		}
	}

	public final Drop_contractContext drop_contract() throws RecognitionException {
		Drop_contractContext _localctx = new Drop_contractContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_drop_contract);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2346);
			match(DROP);
			setState(2347);
			match(CONTRACT);
			setState(2348);
			((Drop_contractContext)_localctx).dropped_contract_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_credentialContext extends ParserRuleContext {
		public IdContext credential_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode CREDENTIAL() { return getToken(TSqlParser.CREDENTIAL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_credentialContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_credential; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_credential(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_credential(this);
		}
	}

	public final Drop_credentialContext drop_credential() throws RecognitionException {
		Drop_credentialContext _localctx = new Drop_credentialContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_drop_credential);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2350);
			match(DROP);
			setState(2351);
			match(CREDENTIAL);
			setState(2352);
			((Drop_credentialContext)_localctx).credential_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_cryptograhic_providerContext extends ParserRuleContext {
		public IdContext provider_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode CRYPTOGRAPHIC() { return getToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		public TerminalNode PROVIDER() { return getToken(TSqlParser.PROVIDER, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_cryptograhic_providerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_cryptograhic_provider; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_cryptograhic_provider(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_cryptograhic_provider(this);
		}
	}

	public final Drop_cryptograhic_providerContext drop_cryptograhic_provider() throws RecognitionException {
		Drop_cryptograhic_providerContext _localctx = new Drop_cryptograhic_providerContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_drop_cryptograhic_provider);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2354);
			match(DROP);
			setState(2355);
			match(CRYPTOGRAPHIC);
			setState(2356);
			match(PROVIDER);
			setState(2357);
			((Drop_cryptograhic_providerContext)_localctx).provider_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_databaseContext extends ParserRuleContext {
		public IdContext database_name_or_database_snapshot_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Drop_databaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_database; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_database(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_database(this);
		}
	}

	public final Drop_databaseContext drop_database() throws RecognitionException {
		Drop_databaseContext _localctx = new Drop_databaseContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_drop_database);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2359);
			match(DROP);
			setState(2360);
			match(DATABASE);
			setState(2363);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2361);
				match(IF);
				setState(2362);
				match(EXISTS);
				}
			}

			setState(2369); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2366);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2365);
						match(COMMA);
						}
					}

					setState(2368);
					((Drop_databaseContext)_localctx).database_name_or_database_snapshot_name = id();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2371); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,166,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_database_audit_specificationContext extends ParserRuleContext {
		public IdContext audit_specification_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode AUDIT() { return getToken(TSqlParser.AUDIT, 0); }
		public TerminalNode SPECIFICATION() { return getToken(TSqlParser.SPECIFICATION, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_database_audit_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_database_audit_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_database_audit_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_database_audit_specification(this);
		}
	}

	public final Drop_database_audit_specificationContext drop_database_audit_specification() throws RecognitionException {
		Drop_database_audit_specificationContext _localctx = new Drop_database_audit_specificationContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_drop_database_audit_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2373);
			match(DROP);
			setState(2374);
			match(DATABASE);
			setState(2375);
			match(AUDIT);
			setState(2376);
			match(SPECIFICATION);
			setState(2377);
			((Drop_database_audit_specificationContext)_localctx).audit_specification_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_database_scoped_credentialContext extends ParserRuleContext {
		public IdContext credential_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode SCOPED() { return getToken(TSqlParser.SCOPED, 0); }
		public TerminalNode CREDENTIAL() { return getToken(TSqlParser.CREDENTIAL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_database_scoped_credentialContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_database_scoped_credential; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_database_scoped_credential(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_database_scoped_credential(this);
		}
	}

	public final Drop_database_scoped_credentialContext drop_database_scoped_credential() throws RecognitionException {
		Drop_database_scoped_credentialContext _localctx = new Drop_database_scoped_credentialContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_drop_database_scoped_credential);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2379);
			match(DROP);
			setState(2380);
			match(DATABASE);
			setState(2381);
			match(SCOPED);
			setState(2382);
			match(CREDENTIAL);
			setState(2383);
			((Drop_database_scoped_credentialContext)_localctx).credential_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_defaultContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext default_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Drop_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_default; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_default(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_default(this);
		}
	}

	public final Drop_defaultContext drop_default() throws RecognitionException {
		Drop_defaultContext _localctx = new Drop_defaultContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_drop_default);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2385);
			match(DROP);
			setState(2386);
			match(DEFAULT);
			setState(2389);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2387);
				match(IF);
				setState(2388);
				match(EXISTS);
				}
			}

			{
			setState(2392);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(2391);
				match(COMMA);
				}
			}

			setState(2397);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,169,_ctx) ) {
			case 1:
				{
				setState(2394);
				((Drop_defaultContext)_localctx).schema_name = id();
				setState(2395);
				match(DOT);
				}
				break;
			}
			setState(2399);
			((Drop_defaultContext)_localctx).default_name = id();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_endpointContext extends ParserRuleContext {
		public IdContext endPointName;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode ENDPOINT() { return getToken(TSqlParser.ENDPOINT, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_endpointContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_endpoint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_endpoint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_endpoint(this);
		}
	}

	public final Drop_endpointContext drop_endpoint() throws RecognitionException {
		Drop_endpointContext _localctx = new Drop_endpointContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_drop_endpoint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2401);
			match(DROP);
			setState(2402);
			match(ENDPOINT);
			setState(2403);
			((Drop_endpointContext)_localctx).endPointName = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_external_data_sourceContext extends ParserRuleContext {
		public IdContext external_data_source_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode EXTERNAL() { return getToken(TSqlParser.EXTERNAL, 0); }
		public TerminalNode DATA() { return getToken(TSqlParser.DATA, 0); }
		public TerminalNode SOURCE() { return getToken(TSqlParser.SOURCE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_external_data_sourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_external_data_source; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_external_data_source(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_external_data_source(this);
		}
	}

	public final Drop_external_data_sourceContext drop_external_data_source() throws RecognitionException {
		Drop_external_data_sourceContext _localctx = new Drop_external_data_sourceContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_drop_external_data_source);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2405);
			match(DROP);
			setState(2406);
			match(EXTERNAL);
			setState(2407);
			match(DATA);
			setState(2408);
			match(SOURCE);
			setState(2409);
			((Drop_external_data_sourceContext)_localctx).external_data_source_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_external_file_formatContext extends ParserRuleContext {
		public IdContext external_file_format_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode EXTERNAL() { return getToken(TSqlParser.EXTERNAL, 0); }
		public TerminalNode FILE() { return getToken(TSqlParser.FILE, 0); }
		public TerminalNode FORMAT() { return getToken(TSqlParser.FORMAT, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_external_file_formatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_external_file_format; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_external_file_format(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_external_file_format(this);
		}
	}

	public final Drop_external_file_formatContext drop_external_file_format() throws RecognitionException {
		Drop_external_file_formatContext _localctx = new Drop_external_file_formatContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_drop_external_file_format);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2411);
			match(DROP);
			setState(2412);
			match(EXTERNAL);
			setState(2413);
			match(FILE);
			setState(2414);
			match(FORMAT);
			setState(2415);
			((Drop_external_file_formatContext)_localctx).external_file_format_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_external_libraryContext extends ParserRuleContext {
		public IdContext library_name;
		public IdContext owner_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode EXTERNAL() { return getToken(TSqlParser.EXTERNAL, 0); }
		public TerminalNode LIBRARY() { return getToken(TSqlParser.LIBRARY, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public Drop_external_libraryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_external_library; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_external_library(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_external_library(this);
		}
	}

	public final Drop_external_libraryContext drop_external_library() throws RecognitionException {
		Drop_external_libraryContext _localctx = new Drop_external_libraryContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_drop_external_library);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2417);
			match(DROP);
			setState(2418);
			match(EXTERNAL);
			setState(2419);
			match(LIBRARY);
			setState(2420);
			((Drop_external_libraryContext)_localctx).library_name = id();
			setState(2423);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(2421);
				match(AUTHORIZATION);
				setState(2422);
				((Drop_external_libraryContext)_localctx).owner_name = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_external_resource_poolContext extends ParserRuleContext {
		public IdContext pool_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode EXTERNAL() { return getToken(TSqlParser.EXTERNAL, 0); }
		public TerminalNode RESOURCE() { return getToken(TSqlParser.RESOURCE, 0); }
		public TerminalNode POOL() { return getToken(TSqlParser.POOL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_external_resource_poolContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_external_resource_pool; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_external_resource_pool(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_external_resource_pool(this);
		}
	}

	public final Drop_external_resource_poolContext drop_external_resource_pool() throws RecognitionException {
		Drop_external_resource_poolContext _localctx = new Drop_external_resource_poolContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_drop_external_resource_pool);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2425);
			match(DROP);
			setState(2426);
			match(EXTERNAL);
			setState(2427);
			match(RESOURCE);
			setState(2428);
			match(POOL);
			setState(2429);
			((Drop_external_resource_poolContext)_localctx).pool_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_external_tableContext extends ParserRuleContext {
		public IdContext database_name;
		public IdContext schema_name;
		public IdContext table;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode EXTERNAL() { return getToken(TSqlParser.EXTERNAL, 0); }
		public TerminalNode TABLE() { return getToken(TSqlParser.TABLE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(TSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSqlParser.DOT, i);
		}
		public Drop_external_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_external_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_external_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_external_table(this);
		}
	}

	public final Drop_external_tableContext drop_external_table() throws RecognitionException {
		Drop_external_tableContext _localctx = new Drop_external_tableContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_drop_external_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2431);
			match(DROP);
			setState(2432);
			match(EXTERNAL);
			setState(2433);
			match(TABLE);
			setState(2437);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,171,_ctx) ) {
			case 1:
				{
				setState(2434);
				((Drop_external_tableContext)_localctx).database_name = id();
				setState(2435);
				match(DOT);
				}
				break;
			}
			setState(2442);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,172,_ctx) ) {
			case 1:
				{
				setState(2439);
				((Drop_external_tableContext)_localctx).schema_name = id();
				setState(2440);
				match(DOT);
				}
				break;
			}
			setState(2444);
			((Drop_external_tableContext)_localctx).table = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_event_notificationsContext extends ParserRuleContext {
		public IdContext notification_name;
		public IdContext queue_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode EVENT() { return getToken(TSqlParser.EVENT, 0); }
		public TerminalNode NOTIFICATION() { return getToken(TSqlParser.NOTIFICATION, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode QUEUE() { return getToken(TSqlParser.QUEUE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Drop_event_notificationsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_event_notifications; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_event_notifications(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_event_notifications(this);
		}
	}

	public final Drop_event_notificationsContext drop_event_notifications() throws RecognitionException {
		Drop_event_notificationsContext _localctx = new Drop_event_notificationsContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_drop_event_notifications);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2446);
			match(DROP);
			setState(2447);
			match(EVENT);
			setState(2448);
			match(NOTIFICATION);
			setState(2453); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2450);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2449);
					match(COMMA);
					}
				}

				setState(2452);
				((Drop_event_notificationsContext)_localctx).notification_name = id();
				}
				}
				setState(2455); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (EVENTDATA - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & ((1L << (INIT - 158)) | (1L << (KEY - 158)) | (1L << (MASTER - 158)) | (1L << (MAX_MEMORY - 158)))) != 0) || ((((_la - 225)) & ~0x3f) == 0 && ((1L << (_la - 225)) & ((1L << (OFFSETS - 225)) | (1L << (PAGE - 225)) | (1L << (PUBLIC - 225)) | (1L << (R - 225)) | (1L << (RAW - 225)) | (1L << (RETURN - 225)) | (1L << (RETURNS - 225)) | (1L << (ROWCOUNT - 225)))) != 0) || ((((_la - 295)) & ~0x3f) == 0 && ((1L << (_la - 295)) & ((1L << (SAFETY - 295)) | (1L << (SERVER - 295)) | (1L << (SID - 295)) | (1L << (SOURCE - 295)) | (1L << (STATE - 295)) | (1L << (START - 295)) | (1L << (TARGET - 295)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (ABSOLUTE - 383)) | (1L << (ACCENT_SENSITIVITY - 383)) | (1L << (ACTION - 383)) | (1L << (ACTIVATION - 383)) | (1L << (ACTIVE - 383)) | (1L << (ADDRESS - 383)) | (1L << (AES_128 - 383)) | (1L << (AES_192 - 383)) | (1L << (AES_256 - 383)) | (1L << (AFFINITY - 383)) | (1L << (AFTER - 383)) | (1L << (AGGREGATE - 383)) | (1L << (ALGORITHM - 383)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 383)) | (1L << (ALLOWED - 383)) | (1L << (ANSI_NULL_DEFAULT - 383)) | (1L << (ANSI_NULLS - 383)) | (1L << (ANSI_PADDING - 383)) | (1L << (ANSI_WARNINGS - 383)) | (1L << (APPLICATION_LOG - 383)) | (1L << (APPLY - 383)) | (1L << (ARITHABORT - 383)) | (1L << (ASSEMBLY - 383)) | (1L << (AUDIT - 383)) | (1L << (AUDIT_GUID - 383)) | (1L << (AUTO - 383)) | (1L << (AUTO_CLEANUP - 383)) | (1L << (AUTO_CLOSE - 383)) | (1L << (AUTO_CREATE_STATISTICS - 383)) | (1L << (AUTO_SHRINK - 383)) | (1L << (AUTO_UPDATE_STATISTICS - 383)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 383)) | (1L << (AVAILABILITY - 383)) | (1L << (AVG - 383)) | (1L << (BACKUP_PRIORITY - 383)) | (1L << (BEGIN_DIALOG - 383)) | (1L << (BIGINT - 383)) | (1L << (BINARY_BASE64 - 383)) | (1L << (BINARY_CHECKSUM - 383)) | (1L << (BINDING - 383)) | (1L << (BLOB_STORAGE - 383)) | (1L << (BROKER - 383)) | (1L << (BROKER_INSTANCE - 383)) | (1L << (BULK_LOGGED - 383)) | (1L << (CALLER - 383)) | (1L << (CAP_CPU_PERCENT - 383)) | (1L << (CAST - 383)) | (1L << (CATALOG - 383)) | (1L << (CATCH - 383)) | (1L << (CHANGE_RETENTION - 383)) | (1L << (CHANGE_TRACKING - 383)) | (1L << (CHECKSUM - 383)) | (1L << (CHECKSUM_AGG - 383)) | (1L << (CLEANUP - 383)) | (1L << (COLLECTION - 383)) | (1L << (COLUMN_MASTER_KEY - 383)) | (1L << (COMMITTED - 383)) | (1L << (COMPATIBILITY_LEVEL - 383)) | (1L << (CONCAT - 383)) | (1L << (CONCAT_NULL_YIELDS_NULL - 383)) | (1L << (CONTENT - 383)) | (1L << (CONTROL - 383)) | (1L << (COOKIE - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (COUNT - 447)) | (1L << (COUNT_BIG - 447)) | (1L << (COUNTER - 447)) | (1L << (CPU - 447)) | (1L << (CREATE_NEW - 447)) | (1L << (CREATION_DISPOSITION - 447)) | (1L << (CREDENTIAL - 447)) | (1L << (CRYPTOGRAPHIC - 447)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 447)) | (1L << (CURSOR_DEFAULT - 447)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 447)) | (1L << (DATEADD - 447)) | (1L << (DATEDIFF - 447)) | (1L << (DATENAME - 447)) | (1L << (DATEPART - 447)) | (1L << (DAYS - 447)) | (1L << (DB_CHAINING - 447)) | (1L << (DB_FAILOVER - 447)) | (1L << (DECRYPTION - 447)) | (1L << (DEFAULT_DOUBLE_QUOTE - 447)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1L << (DEFAULT_LANGUAGE - 447)) | (1L << (DELAY - 447)) | (1L << (DELAYED_DURABILITY - 447)) | (1L << (DELETED - 447)) | (1L << (DENSE_RANK - 447)) | (1L << (DEPENDENTS - 447)) | (1L << (DES - 447)) | (1L << (DESCRIPTION - 447)) | (1L << (DESX - 447)) | (1L << (DHCP - 447)) | (1L << (DIALOG - 447)) | (1L << (DIRECTORY_NAME - 447)) | (1L << (DISABLE - 447)) | (1L << (DISABLE_BROKER - 447)) | (1L << (DISABLED - 447)) | (1L << (DISK_DRIVE - 447)) | (1L << (DOCUMENT - 447)) | (1L << (DYNAMIC - 447)) | (1L << (EMERGENCY - 447)) | (1L << (EMPTY - 447)) | (1L << (ENABLE - 447)) | (1L << (ENABLE_BROKER - 447)) | (1L << (ENCRYPTED_VALUE - 447)) | (1L << (ENCRYPTION - 447)) | (1L << (ENDPOINT_URL - 447)) | (1L << (ERROR_BROKER_CONVERSATIONS - 447)) | (1L << (EXCLUSIVE - 447)) | (1L << (EXECUTABLE - 447)) | (1L << (EXIST - 447)) | (1L << (EXPAND - 447)) | (1L << (EXPIRY_DATE - 447)) | (1L << (EXPLICIT - 447)) | (1L << (FAIL_OPERATION - 447)) | (1L << (FAILOVER_MODE - 447)) | (1L << (FAILURE - 447)) | (1L << (FAILURE_CONDITION_LEVEL - 447)) | (1L << (FAST - 447)) | (1L << (FAST_FORWARD - 447)) | (1L << (FILEGROUP - 447)) | (1L << (FILEGROWTH - 447)) | (1L << (FILEPATH - 447)) | (1L << (FILESTREAM - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (FILTER - 511)) | (1L << (FIRST - 511)) | (1L << (FIRST_VALUE - 511)) | (1L << (FOLLOWING - 511)) | (1L << (FORCE - 511)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1L << (FORCED - 511)) | (1L << (FORMAT - 511)) | (1L << (FORWARD_ONLY - 511)) | (1L << (FULLSCAN - 511)) | (1L << (FULLTEXT - 511)) | (1L << (GB - 511)) | (1L << (GETDATE - 511)) | (1L << (GETUTCDATE - 511)) | (1L << (GLOBAL - 511)) | (1L << (GO - 511)) | (1L << (GROUP_MAX_REQUESTS - 511)) | (1L << (GROUPING - 511)) | (1L << (GROUPING_ID - 511)) | (1L << (HADR - 511)) | (1L << (HASH - 511)) | (1L << (HEALTH_CHECK_TIMEOUT - 511)) | (1L << (HIGH - 511)) | (1L << (HONOR_BROKER_PRIORITY - 511)) | (1L << (HOURS - 511)) | (1L << (IDENTITY_VALUE - 511)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1L << (IMMEDIATE - 511)) | (1L << (IMPERSONATE - 511)) | (1L << (IMPORTANCE - 511)) | (1L << (INCREMENTAL - 511)) | (1L << (INITIATOR - 511)) | (1L << (INPUT - 511)) | (1L << (INSENSITIVE - 511)) | (1L << (INSERTED - 511)) | (1L << (INT - 511)) | (1L << (IP - 511)) | (1L << (ISOLATION - 511)) | (1L << (KB - 511)) | (1L << (KEEP - 511)) | (1L << (KEEPFIXED - 511)) | (1L << (KEY_SOURCE - 511)) | (1L << (KEYS - 511)) | (1L << (KEYSET - 511)) | (1L << (LAG - 511)) | (1L << (LAST - 511)) | (1L << (LAST_VALUE - 511)) | (1L << (LEAD - 511)) | (1L << (LEVEL - 511)) | (1L << (LIST - 511)) | (1L << (LISTENER - 511)) | (1L << (LISTENER_URL - 511)) | (1L << (LOB_COMPACTION - 511)) | (1L << (LOCAL - 511)) | (1L << (LOCATION - 511)) | (1L << (LOCK - 511)) | (1L << (LOCK_ESCALATION - 511)) | (1L << (LOGIN - 511)) | (1L << (LOOP - 511)) | (1L << (LOW - 511)) | (1L << (MANUAL - 511)) | (1L << (MARK - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (MATERIALIZED - 575)) | (1L << (MAX - 575)) | (1L << (MAX_CPU_PERCENT - 575)) | (1L << (MAX_DOP - 575)) | (1L << (MAX_FILES - 575)) | (1L << (MAX_IOPS_PER_VOLUME - 575)) | (1L << (MAX_MEMORY_PERCENT - 575)) | (1L << (MAX_PROCESSES - 575)) | (1L << (MAX_QUEUE_READERS - 575)) | (1L << (MAX_ROLLOVER_FILES - 575)) | (1L << (MAXDOP - 575)) | (1L << (MAXRECURSION - 575)) | (1L << (MAXSIZE - 575)) | (1L << (MB - 575)) | (1L << (MEDIUM - 575)) | (1L << (MEMORY_OPTIMIZED_DATA - 575)) | (1L << (MESSAGE - 575)) | (1L << (MIN - 575)) | (1L << (MIN_ACTIVE_ROWVERSION - 575)) | (1L << (MIN_CPU_PERCENT - 575)) | (1L << (MIN_IOPS_PER_VOLUME - 575)) | (1L << (MIN_MEMORY_PERCENT - 575)) | (1L << (MINUTES - 575)) | (1L << (MIRROR_ADDRESS - 575)) | (1L << (MIXED_PAGE_ALLOCATION - 575)) | (1L << (MODE - 575)) | (1L << (MODIFY - 575)) | (1L << (MOVE - 575)) | (1L << (MULTI_USER - 575)) | (1L << (NAME - 575)) | (1L << (NESTED_TRIGGERS - 575)) | (1L << (NEW_ACCOUNT - 575)) | (1L << (NEW_BROKER - 575)) | (1L << (NEW_PASSWORD - 575)) | (1L << (NEXT - 575)) | (1L << (NO - 575)) | (1L << (NO_TRUNCATE - 575)) | (1L << (NO_WAIT - 575)) | (1L << (NOCOUNT - 575)) | (1L << (NODES - 575)) | (1L << (NOEXPAND - 575)) | (1L << (NON_TRANSACTED_ACCESS - 575)) | (1L << (NORECOMPUTE - 575)) | (1L << (NORECOVERY - 575)) | (1L << (NOWAIT - 575)) | (1L << (NTILE - 575)) | (1L << (NUMANODE - 575)) | (1L << (NUMBER - 575)) | (1L << (NUMERIC_ROUNDABORT - 575)) | (1L << (OBJECT - 575)) | (1L << (OFFLINE - 575)) | (1L << (OFFSET - 575)) | (1L << (OLD_ACCOUNT - 575)) | (1L << (ONLINE - 575)) | (1L << (ONLY - 575)) | (1L << (OPEN_EXISTING - 575)) | (1L << (OPTIMISTIC - 575)) | (1L << (OPTIMIZE - 575)) | (1L << (OUT - 575)) | (1L << (OUTPUT - 575)) | (1L << (OWNER - 575)) | (1L << (PAGE_VERIFY - 575)) | (1L << (PARAMETERIZATION - 575)) | (1L << (PARTITION - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (PARTITIONS - 639)) | (1L << (PARTNER - 639)) | (1L << (PATH - 639)) | (1L << (POISON_MESSAGE_HANDLING - 639)) | (1L << (POOL - 639)) | (1L << (PORT - 639)) | (1L << (PRECEDING - 639)) | (1L << (PRIMARY_ROLE - 639)) | (1L << (PRIOR - 639)) | (1L << (PRIORITY - 639)) | (1L << (PRIORITY_LEVEL - 639)) | (1L << (PRIVATE - 639)) | (1L << (PRIVATE_KEY - 639)) | (1L << (PRIVILEGES - 639)) | (1L << (PROCEDURE_NAME - 639)) | (1L << (PROPERTY - 639)) | (1L << (PROVIDER - 639)) | (1L << (PROVIDER_KEY_NAME - 639)) | (1L << (QUERY - 639)) | (1L << (QUEUE - 639)) | (1L << (QUEUE_DELAY - 639)) | (1L << (QUOTED_IDENTIFIER - 639)) | (1L << (RANGE - 639)) | (1L << (RANK - 639)) | (1L << (RC2 - 639)) | (1L << (RC4 - 639)) | (1L << (RC4_128 - 639)) | (1L << (READ_COMMITTED_SNAPSHOT - 639)) | (1L << (READ_ONLY - 639)) | (1L << (READ_ONLY_ROUTING_LIST - 639)) | (1L << (READ_WRITE - 639)) | (1L << (READONLY - 639)) | (1L << (REBUILD - 639)) | (1L << (RECEIVE - 639)) | (1L << (RECOMPILE - 639)) | (1L << (RECOVERY - 639)) | (1L << (RECURSIVE_TRIGGERS - 639)) | (1L << (RELATIVE - 639)) | (1L << (REMOTE - 639)) | (1L << (REMOTE_SERVICE_NAME - 639)) | (1L << (REMOVE - 639)) | (1L << (REORGANIZE - 639)) | (1L << (REPEATABLE - 639)) | (1L << (REPLICA - 639)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 639)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 639)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 639)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 639)) | (1L << (RESERVE_DISK_SPACE - 639)) | (1L << (RESOURCE - 639)) | (1L << (RESOURCE_MANAGER_LOCATION - 639)) | (1L << (RESTRICTED_USER - 639)) | (1L << (RETENTION - 639)) | (1L << (ROBUST - 639)) | (1L << (ROOT - 639)) | (1L << (ROUTE - 639)) | (1L << (ROW - 639)) | (1L << (ROW_NUMBER - 639)) | (1L << (ROWGUID - 639)) | (1L << (ROWS - 639)) | (1L << (SAMPLE - 639)) | (1L << (SCHEMABINDING - 639)) | (1L << (SCOPED - 639)) | (1L << (SCROLL - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (SCROLL_LOCKS - 703)) | (1L << (SEARCH - 703)) | (1L << (SECONDARY - 703)) | (1L << (SECONDARY_ONLY - 703)) | (1L << (SECONDARY_ROLE - 703)) | (1L << (SECONDS - 703)) | (1L << (SECRET - 703)) | (1L << (SECURITY_LOG - 703)) | (1L << (SEEDING_MODE - 703)) | (1L << (SELF - 703)) | (1L << (SEMI_SENSITIVE - 703)) | (1L << (SEND - 703)) | (1L << (SENT - 703)) | (1L << (SERIALIZABLE - 703)) | (1L << (SESSION_TIMEOUT - 703)) | (1L << (SETERROR - 703)) | (1L << (SHARE - 703)) | (1L << (SHOWPLAN - 703)) | (1L << (SIGNATURE - 703)) | (1L << (SIMPLE - 703)) | (1L << (SINGLE_USER - 703)) | (1L << (SIZE - 703)) | (1L << (SMALLINT - 703)) | (1L << (SNAPSHOT - 703)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 703)) | (1L << (STANDBY - 703)) | (1L << (START_DATE - 703)) | (1L << (STATIC - 703)) | (1L << (STATS_STREAM - 703)) | (1L << (STATUS - 703)) | (1L << (STDEV - 703)) | (1L << (STDEVP - 703)) | (1L << (STOPLIST - 703)) | (1L << (STUFF - 703)) | (1L << (SUBJECT - 703)) | (1L << (SUM - 703)) | (1L << (SUSPEND - 703)) | (1L << (SYMMETRIC - 703)) | (1L << (SYNCHRONOUS_COMMIT - 703)) | (1L << (SYNONYM - 703)) | (1L << (TAKE - 703)) | (1L << (TARGET_RECOVERY_TIME - 703)) | (1L << (TB - 703)) | (1L << (TEXTIMAGE_ON - 703)) | (1L << (THROW - 703)) | (1L << (TIES - 703)) | (1L << (TIME - 703)) | (1L << (TIMEOUT - 703)) | (1L << (TIMER - 703)) | (1L << (TINYINT - 703)) | (1L << (TORN_PAGE_DETECTION - 703)) | (1L << (TRANSFORM_NOISE_WORDS - 703)) | (1L << (TRIPLE_DES - 703)) | (1L << (TRIPLE_DES_3KEY - 703)) | (1L << (TRUSTWORTHY - 703)) | (1L << (TRY - 703)) | (1L << (TSQL - 703)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 703)) | (1L << (TYPE - 703)) | (1L << (TYPE_WARNING - 703)) | (1L << (UNBOUNDED - 703)) | (1L << (UNCOMMITTED - 703)) | (1L << (UNKNOWN - 703)) | (1L << (UNLIMITED - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (USING - 767)) | (1L << (VALID_XML - 767)) | (1L << (VALIDATION - 767)) | (1L << (VALUE - 767)) | (1L << (VAR - 767)) | (1L << (VARP - 767)) | (1L << (VIEW_METADATA - 767)) | (1L << (VIEWS - 767)) | (1L << (WAIT - 767)) | (1L << (WELL_FORMED_XML - 767)) | (1L << (WORK - 767)) | (1L << (WORKLOAD - 767)) | (1L << (XML - 767)) | (1L << (XMLNAMESPACES - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)) | (1L << (COMMA - 767)))) != 0) );
			setState(2457);
			match(ON);
			setState(2462);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SERVER:
				{
				setState(2458);
				match(SERVER);
				}
				break;
			case DATABASE:
				{
				setState(2459);
				match(DATABASE);
				}
				break;
			case QUEUE:
				{
				setState(2460);
				match(QUEUE);
				setState(2461);
				((Drop_event_notificationsContext)_localctx).queue_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_event_sessionContext extends ParserRuleContext {
		public IdContext event_session_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode EVENT() { return getToken(TSqlParser.EVENT, 0); }
		public TerminalNode SESSION() { return getToken(TSqlParser.SESSION, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_event_sessionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_event_session; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_event_session(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_event_session(this);
		}
	}

	public final Drop_event_sessionContext drop_event_session() throws RecognitionException {
		Drop_event_sessionContext _localctx = new Drop_event_sessionContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_drop_event_session);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2464);
			match(DROP);
			setState(2465);
			match(EVENT);
			setState(2466);
			match(SESSION);
			setState(2467);
			((Drop_event_sessionContext)_localctx).event_session_name = id();
			setState(2468);
			match(ON);
			setState(2469);
			match(SERVER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_fulltext_catalogContext extends ParserRuleContext {
		public IdContext catalog_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode FULLTEXT() { return getToken(TSqlParser.FULLTEXT, 0); }
		public TerminalNode CATALOG() { return getToken(TSqlParser.CATALOG, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_fulltext_catalogContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_fulltext_catalog; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_fulltext_catalog(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_fulltext_catalog(this);
		}
	}

	public final Drop_fulltext_catalogContext drop_fulltext_catalog() throws RecognitionException {
		Drop_fulltext_catalogContext _localctx = new Drop_fulltext_catalogContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_drop_fulltext_catalog);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2471);
			match(DROP);
			setState(2472);
			match(FULLTEXT);
			setState(2473);
			match(CATALOG);
			setState(2474);
			((Drop_fulltext_catalogContext)_localctx).catalog_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_fulltext_indexContext extends ParserRuleContext {
		public IdContext schema;
		public IdContext table;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode FULLTEXT() { return getToken(TSqlParser.FULLTEXT, 0); }
		public TerminalNode INDEX() { return getToken(TSqlParser.INDEX, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Drop_fulltext_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_fulltext_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_fulltext_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_fulltext_index(this);
		}
	}

	public final Drop_fulltext_indexContext drop_fulltext_index() throws RecognitionException {
		Drop_fulltext_indexContext _localctx = new Drop_fulltext_indexContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_drop_fulltext_index);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2476);
			match(DROP);
			setState(2477);
			match(FULLTEXT);
			setState(2478);
			match(INDEX);
			setState(2479);
			match(ON);
			setState(2483);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,176,_ctx) ) {
			case 1:
				{
				setState(2480);
				((Drop_fulltext_indexContext)_localctx).schema = id();
				setState(2481);
				match(DOT);
				}
				break;
			}
			setState(2485);
			((Drop_fulltext_indexContext)_localctx).table = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_fulltext_stoplistContext extends ParserRuleContext {
		public IdContext stoplist_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode FULLTEXT() { return getToken(TSqlParser.FULLTEXT, 0); }
		public TerminalNode STOPLIST() { return getToken(TSqlParser.STOPLIST, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_fulltext_stoplistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_fulltext_stoplist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_fulltext_stoplist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_fulltext_stoplist(this);
		}
	}

	public final Drop_fulltext_stoplistContext drop_fulltext_stoplist() throws RecognitionException {
		Drop_fulltext_stoplistContext _localctx = new Drop_fulltext_stoplistContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_drop_fulltext_stoplist);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2487);
			match(DROP);
			setState(2488);
			match(FULLTEXT);
			setState(2489);
			match(STOPLIST);
			setState(2490);
			((Drop_fulltext_stoplistContext)_localctx).stoplist_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_loginContext extends ParserRuleContext {
		public IdContext login_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode LOGIN() { return getToken(TSqlParser.LOGIN, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_loginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_login; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_login(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_login(this);
		}
	}

	public final Drop_loginContext drop_login() throws RecognitionException {
		Drop_loginContext _localctx = new Drop_loginContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_drop_login);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2492);
			match(DROP);
			setState(2493);
			match(LOGIN);
			setState(2494);
			((Drop_loginContext)_localctx).login_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_master_keyContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode MASTER() { return getToken(TSqlParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public Drop_master_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_master_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_master_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_master_key(this);
		}
	}

	public final Drop_master_keyContext drop_master_key() throws RecognitionException {
		Drop_master_keyContext _localctx = new Drop_master_keyContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_drop_master_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2496);
			match(DROP);
			setState(2497);
			match(MASTER);
			setState(2498);
			match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_message_typeContext extends ParserRuleContext {
		public IdContext message_type_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode MESSAGE() { return getToken(TSqlParser.MESSAGE, 0); }
		public TerminalNode TYPE() { return getToken(TSqlParser.TYPE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_message_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_message_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_message_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_message_type(this);
		}
	}

	public final Drop_message_typeContext drop_message_type() throws RecognitionException {
		Drop_message_typeContext _localctx = new Drop_message_typeContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_drop_message_type);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2500);
			match(DROP);
			setState(2501);
			match(MESSAGE);
			setState(2502);
			match(TYPE);
			setState(2503);
			((Drop_message_typeContext)_localctx).message_type_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_partition_functionContext extends ParserRuleContext {
		public IdContext partition_function_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode PARTITION() { return getToken(TSqlParser.PARTITION, 0); }
		public TerminalNode FUNCTION() { return getToken(TSqlParser.FUNCTION, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_partition_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_partition_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_partition_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_partition_function(this);
		}
	}

	public final Drop_partition_functionContext drop_partition_function() throws RecognitionException {
		Drop_partition_functionContext _localctx = new Drop_partition_functionContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_drop_partition_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2505);
			match(DROP);
			setState(2506);
			match(PARTITION);
			setState(2507);
			match(FUNCTION);
			setState(2508);
			((Drop_partition_functionContext)_localctx).partition_function_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_partition_schemeContext extends ParserRuleContext {
		public IdContext partition_scheme_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode PARTITION() { return getToken(TSqlParser.PARTITION, 0); }
		public TerminalNode SCHEME() { return getToken(TSqlParser.SCHEME, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_partition_schemeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_partition_scheme; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_partition_scheme(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_partition_scheme(this);
		}
	}

	public final Drop_partition_schemeContext drop_partition_scheme() throws RecognitionException {
		Drop_partition_schemeContext _localctx = new Drop_partition_schemeContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_drop_partition_scheme);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2510);
			match(DROP);
			setState(2511);
			match(PARTITION);
			setState(2512);
			match(SCHEME);
			setState(2513);
			((Drop_partition_schemeContext)_localctx).partition_scheme_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_queueContext extends ParserRuleContext {
		public IdContext database_name;
		public IdContext schema_name;
		public IdContext queue_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode QUEUE() { return getToken(TSqlParser.QUEUE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(TSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSqlParser.DOT, i);
		}
		public Drop_queueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_queue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_queue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_queue(this);
		}
	}

	public final Drop_queueContext drop_queue() throws RecognitionException {
		Drop_queueContext _localctx = new Drop_queueContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_drop_queue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2515);
			match(DROP);
			setState(2516);
			match(QUEUE);
			setState(2520);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,177,_ctx) ) {
			case 1:
				{
				setState(2517);
				((Drop_queueContext)_localctx).database_name = id();
				setState(2518);
				match(DOT);
				}
				break;
			}
			setState(2525);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,178,_ctx) ) {
			case 1:
				{
				setState(2522);
				((Drop_queueContext)_localctx).schema_name = id();
				setState(2523);
				match(DOT);
				}
				break;
			}
			setState(2527);
			((Drop_queueContext)_localctx).queue_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_remote_service_bindingContext extends ParserRuleContext {
		public IdContext binding_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode REMOTE() { return getToken(TSqlParser.REMOTE, 0); }
		public TerminalNode SERVICE() { return getToken(TSqlParser.SERVICE, 0); }
		public TerminalNode BINDING() { return getToken(TSqlParser.BINDING, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_remote_service_bindingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_remote_service_binding; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_remote_service_binding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_remote_service_binding(this);
		}
	}

	public final Drop_remote_service_bindingContext drop_remote_service_binding() throws RecognitionException {
		Drop_remote_service_bindingContext _localctx = new Drop_remote_service_bindingContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_drop_remote_service_binding);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2529);
			match(DROP);
			setState(2530);
			match(REMOTE);
			setState(2531);
			match(SERVICE);
			setState(2532);
			match(BINDING);
			setState(2533);
			((Drop_remote_service_bindingContext)_localctx).binding_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_resource_poolContext extends ParserRuleContext {
		public IdContext pool_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode RESOURCE() { return getToken(TSqlParser.RESOURCE, 0); }
		public TerminalNode POOL() { return getToken(TSqlParser.POOL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_resource_poolContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_resource_pool; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_resource_pool(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_resource_pool(this);
		}
	}

	public final Drop_resource_poolContext drop_resource_pool() throws RecognitionException {
		Drop_resource_poolContext _localctx = new Drop_resource_poolContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_drop_resource_pool);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2535);
			match(DROP);
			setState(2536);
			match(RESOURCE);
			setState(2537);
			match(POOL);
			setState(2538);
			((Drop_resource_poolContext)_localctx).pool_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_db_roleContext extends ParserRuleContext {
		public IdContext role_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public Drop_db_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_db_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_db_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_db_role(this);
		}
	}

	public final Drop_db_roleContext drop_db_role() throws RecognitionException {
		Drop_db_roleContext _localctx = new Drop_db_roleContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_drop_db_role);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2540);
			match(DROP);
			setState(2541);
			match(ROLE);
			setState(2544);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2542);
				match(IF);
				setState(2543);
				match(EXISTS);
				}
			}

			setState(2546);
			((Drop_db_roleContext)_localctx).role_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_routeContext extends ParserRuleContext {
		public IdContext route_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode ROUTE() { return getToken(TSqlParser.ROUTE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_routeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_route; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_route(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_route(this);
		}
	}

	public final Drop_routeContext drop_route() throws RecognitionException {
		Drop_routeContext _localctx = new Drop_routeContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_drop_route);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2548);
			match(DROP);
			setState(2549);
			match(ROUTE);
			setState(2550);
			((Drop_routeContext)_localctx).route_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_ruleContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext rule_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode RULE() { return getToken(TSqlParser.RULE, 0); }
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Drop_ruleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_rule; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_rule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_rule(this);
		}
	}

	public final Drop_ruleContext drop_rule() throws RecognitionException {
		Drop_ruleContext _localctx = new Drop_ruleContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_drop_rule);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2552);
			match(DROP);
			setState(2553);
			match(RULE);
			setState(2556);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,180,_ctx) ) {
			case 1:
				{
				setState(2554);
				match(IF);
				setState(2555);
				match(EXISTS);
				}
				break;
			}
			setState(2567);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,183,_ctx) ) {
			case 1:
				{
				setState(2559);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2558);
					match(COMMA);
					}
				}

				setState(2564);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,182,_ctx) ) {
				case 1:
					{
					setState(2561);
					((Drop_ruleContext)_localctx).schema_name = id();
					setState(2562);
					match(DOT);
					}
					break;
				}
				setState(2566);
				((Drop_ruleContext)_localctx).rule_name = id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_schemaContext extends ParserRuleContext {
		public IdContext schema_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode SCHEMA() { return getToken(TSqlParser.SCHEMA, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public Drop_schemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_schema; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_schema(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_schema(this);
		}
	}

	public final Drop_schemaContext drop_schema() throws RecognitionException {
		Drop_schemaContext _localctx = new Drop_schemaContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_drop_schema);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2569);
			match(DROP);
			setState(2570);
			match(SCHEMA);
			setState(2573);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2571);
				match(IF);
				setState(2572);
				match(EXISTS);
				}
			}

			setState(2575);
			((Drop_schemaContext)_localctx).schema_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_search_property_listContext extends ParserRuleContext {
		public IdContext property_list_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode SEARCH() { return getToken(TSqlParser.SEARCH, 0); }
		public TerminalNode PROPERTY() { return getToken(TSqlParser.PROPERTY, 0); }
		public TerminalNode LIST() { return getToken(TSqlParser.LIST, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_search_property_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_search_property_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_search_property_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_search_property_list(this);
		}
	}

	public final Drop_search_property_listContext drop_search_property_list() throws RecognitionException {
		Drop_search_property_listContext _localctx = new Drop_search_property_listContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_drop_search_property_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2577);
			match(DROP);
			setState(2578);
			match(SEARCH);
			setState(2579);
			match(PROPERTY);
			setState(2580);
			match(LIST);
			setState(2581);
			((Drop_search_property_listContext)_localctx).property_list_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_security_policyContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext security_policy_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode SECURITY() { return getToken(TSqlParser.SECURITY, 0); }
		public TerminalNode POLICY() { return getToken(TSqlParser.POLICY, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Drop_security_policyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_security_policy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_security_policy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_security_policy(this);
		}
	}

	public final Drop_security_policyContext drop_security_policy() throws RecognitionException {
		Drop_security_policyContext _localctx = new Drop_security_policyContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_drop_security_policy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2583);
			match(DROP);
			setState(2584);
			match(SECURITY);
			setState(2585);
			match(POLICY);
			setState(2588);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2586);
				match(IF);
				setState(2587);
				match(EXISTS);
				}
			}

			setState(2593);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,186,_ctx) ) {
			case 1:
				{
				setState(2590);
				((Drop_security_policyContext)_localctx).schema_name = id();
				setState(2591);
				match(DOT);
				}
				break;
			}
			setState(2595);
			((Drop_security_policyContext)_localctx).security_policy_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_sequenceContext extends ParserRuleContext {
		public IdContext database_name;
		public IdContext schema_name;
		public IdContext sequence_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode SEQUENCE() { return getToken(TSqlParser.SEQUENCE, 0); }
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public List<TerminalNode> DOT() { return getTokens(TSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSqlParser.DOT, i);
		}
		public Drop_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_sequence(this);
		}
	}

	public final Drop_sequenceContext drop_sequence() throws RecognitionException {
		Drop_sequenceContext _localctx = new Drop_sequenceContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_drop_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2597);
			match(DROP);
			setState(2598);
			match(SEQUENCE);
			setState(2601);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,187,_ctx) ) {
			case 1:
				{
				setState(2599);
				match(IF);
				setState(2600);
				match(EXISTS);
				}
				break;
			}
			setState(2617);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,191,_ctx) ) {
			case 1:
				{
				setState(2604);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2603);
					match(COMMA);
					}
				}

				setState(2609);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,189,_ctx) ) {
				case 1:
					{
					setState(2606);
					((Drop_sequenceContext)_localctx).database_name = id();
					setState(2607);
					match(DOT);
					}
					break;
				}
				setState(2614);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,190,_ctx) ) {
				case 1:
					{
					setState(2611);
					((Drop_sequenceContext)_localctx).schema_name = id();
					setState(2612);
					match(DOT);
					}
					break;
				}
				setState(2616);
				((Drop_sequenceContext)_localctx).sequence_name = id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_server_auditContext extends ParserRuleContext {
		public IdContext audit_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode AUDIT() { return getToken(TSqlParser.AUDIT, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_server_auditContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_server_audit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_server_audit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_server_audit(this);
		}
	}

	public final Drop_server_auditContext drop_server_audit() throws RecognitionException {
		Drop_server_auditContext _localctx = new Drop_server_auditContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_drop_server_audit);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2619);
			match(DROP);
			setState(2620);
			match(SERVER);
			setState(2621);
			match(AUDIT);
			setState(2622);
			((Drop_server_auditContext)_localctx).audit_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_server_audit_specificationContext extends ParserRuleContext {
		public IdContext audit_specification_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode AUDIT() { return getToken(TSqlParser.AUDIT, 0); }
		public TerminalNode SPECIFICATION() { return getToken(TSqlParser.SPECIFICATION, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_server_audit_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_server_audit_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_server_audit_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_server_audit_specification(this);
		}
	}

	public final Drop_server_audit_specificationContext drop_server_audit_specification() throws RecognitionException {
		Drop_server_audit_specificationContext _localctx = new Drop_server_audit_specificationContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_drop_server_audit_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2624);
			match(DROP);
			setState(2625);
			match(SERVER);
			setState(2626);
			match(AUDIT);
			setState(2627);
			match(SPECIFICATION);
			setState(2628);
			((Drop_server_audit_specificationContext)_localctx).audit_specification_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_server_roleContext extends ParserRuleContext {
		public IdContext role_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_server_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_server_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_server_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_server_role(this);
		}
	}

	public final Drop_server_roleContext drop_server_role() throws RecognitionException {
		Drop_server_roleContext _localctx = new Drop_server_roleContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_drop_server_role);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2630);
			match(DROP);
			setState(2631);
			match(SERVER);
			setState(2632);
			match(ROLE);
			setState(2633);
			((Drop_server_roleContext)_localctx).role_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_serviceContext extends ParserRuleContext {
		public IdContext dropped_service_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode SERVICE() { return getToken(TSqlParser.SERVICE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_serviceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_service; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_service(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_service(this);
		}
	}

	public final Drop_serviceContext drop_service() throws RecognitionException {
		Drop_serviceContext _localctx = new Drop_serviceContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_drop_service);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2635);
			match(DROP);
			setState(2636);
			match(SERVICE);
			setState(2637);
			((Drop_serviceContext)_localctx).dropped_service_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_signatureContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext module_name;
		public IdContext cert_name;
		public IdContext Asym_key_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode SIGNATURE() { return getToken(TSqlParser.SIGNATURE, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode COUNTER() { return getToken(TSqlParser.COUNTER, 0); }
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public List<TerminalNode> CERTIFICATE() { return getTokens(TSqlParser.CERTIFICATE); }
		public TerminalNode CERTIFICATE(int i) {
			return getToken(TSqlParser.CERTIFICATE, i);
		}
		public List<TerminalNode> ASYMMETRIC() { return getTokens(TSqlParser.ASYMMETRIC); }
		public TerminalNode ASYMMETRIC(int i) {
			return getToken(TSqlParser.ASYMMETRIC, i);
		}
		public List<TerminalNode> KEY() { return getTokens(TSqlParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(TSqlParser.KEY, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Drop_signatureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_signature; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_signature(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_signature(this);
		}
	}

	public final Drop_signatureContext drop_signature() throws RecognitionException {
		Drop_signatureContext _localctx = new Drop_signatureContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_drop_signature);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2639);
			match(DROP);
			setState(2641);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COUNTER) {
				{
				setState(2640);
				match(COUNTER);
				}
			}

			setState(2643);
			match(SIGNATURE);
			setState(2644);
			match(FROM);
			setState(2648);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,193,_ctx) ) {
			case 1:
				{
				setState(2645);
				((Drop_signatureContext)_localctx).schema_name = id();
				setState(2646);
				match(DOT);
				}
				break;
			}
			setState(2650);
			((Drop_signatureContext)_localctx).module_name = id();
			setState(2651);
			match(BY);
			setState(2663); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(2663);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,196,_ctx) ) {
				case 1:
					{
					setState(2653);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2652);
						match(COMMA);
						}
					}

					setState(2655);
					match(CERTIFICATE);
					setState(2656);
					((Drop_signatureContext)_localctx).cert_name = id();
					}
					break;
				case 2:
					{
					setState(2658);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2657);
						match(COMMA);
						}
					}

					setState(2660);
					match(ASYMMETRIC);
					setState(2661);
					match(KEY);
					setState(2662);
					((Drop_signatureContext)_localctx).Asym_key_name = id();
					}
					break;
				}
				}
				setState(2665); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==ASYMMETRIC || _la==CERTIFICATE || _la==COMMA );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_statistics_name_azure_dw_and_pdwContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext object_name;
		public IdContext statistics_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode STATISTICS() { return getToken(TSqlParser.STATISTICS, 0); }
		public List<TerminalNode> DOT() { return getTokens(TSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSqlParser.DOT, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Drop_statistics_name_azure_dw_and_pdwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_statistics_name_azure_dw_and_pdw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_statistics_name_azure_dw_and_pdw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_statistics_name_azure_dw_and_pdw(this);
		}
	}

	public final Drop_statistics_name_azure_dw_and_pdwContext drop_statistics_name_azure_dw_and_pdw() throws RecognitionException {
		Drop_statistics_name_azure_dw_and_pdwContext _localctx = new Drop_statistics_name_azure_dw_and_pdwContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_drop_statistics_name_azure_dw_and_pdw);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2667);
			match(DROP);
			setState(2668);
			match(STATISTICS);
			setState(2672);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,198,_ctx) ) {
			case 1:
				{
				setState(2669);
				((Drop_statistics_name_azure_dw_and_pdwContext)_localctx).schema_name = id();
				setState(2670);
				match(DOT);
				}
				break;
			}
			setState(2674);
			((Drop_statistics_name_azure_dw_and_pdwContext)_localctx).object_name = id();
			setState(2675);
			match(DOT);
			setState(2676);
			((Drop_statistics_name_azure_dw_and_pdwContext)_localctx).statistics_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_symmetric_keyContext extends ParserRuleContext {
		public IdContext symmetric_key_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode SYMMETRIC() { return getToken(TSqlParser.SYMMETRIC, 0); }
		public List<TerminalNode> KEY() { return getTokens(TSqlParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(TSqlParser.KEY, i);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode REMOVE() { return getToken(TSqlParser.REMOVE, 0); }
		public TerminalNode PROVIDER() { return getToken(TSqlParser.PROVIDER, 0); }
		public Drop_symmetric_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_symmetric_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_symmetric_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_symmetric_key(this);
		}
	}

	public final Drop_symmetric_keyContext drop_symmetric_key() throws RecognitionException {
		Drop_symmetric_keyContext _localctx = new Drop_symmetric_keyContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_drop_symmetric_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2678);
			match(DROP);
			setState(2679);
			match(SYMMETRIC);
			setState(2680);
			match(KEY);
			setState(2681);
			((Drop_symmetric_keyContext)_localctx).symmetric_key_name = id();
			setState(2685);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,199,_ctx) ) {
			case 1:
				{
				setState(2682);
				match(REMOVE);
				setState(2683);
				match(PROVIDER);
				setState(2684);
				match(KEY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_synonymContext extends ParserRuleContext {
		public IdContext schema;
		public IdContext synonym_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode SYNONYM() { return getToken(TSqlParser.SYNONYM, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Drop_synonymContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_synonym; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_synonym(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_synonym(this);
		}
	}

	public final Drop_synonymContext drop_synonym() throws RecognitionException {
		Drop_synonymContext _localctx = new Drop_synonymContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_drop_synonym);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2687);
			match(DROP);
			setState(2688);
			match(SYNONYM);
			setState(2691);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2689);
				match(IF);
				setState(2690);
				match(EXISTS);
				}
			}

			setState(2696);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,201,_ctx) ) {
			case 1:
				{
				setState(2693);
				((Drop_synonymContext)_localctx).schema = id();
				setState(2694);
				match(DOT);
				}
				break;
			}
			setState(2698);
			((Drop_synonymContext)_localctx).synonym_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_userContext extends ParserRuleContext {
		public IdContext user_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode USER() { return getToken(TSqlParser.USER, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public Drop_userContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_user; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_user(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_user(this);
		}
	}

	public final Drop_userContext drop_user() throws RecognitionException {
		Drop_userContext _localctx = new Drop_userContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_drop_user);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2700);
			match(DROP);
			setState(2701);
			match(USER);
			setState(2704);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2702);
				match(IF);
				setState(2703);
				match(EXISTS);
				}
			}

			setState(2706);
			((Drop_userContext)_localctx).user_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_workload_groupContext extends ParserRuleContext {
		public IdContext group_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode WORKLOAD() { return getToken(TSqlParser.WORKLOAD, 0); }
		public TerminalNode GROUP() { return getToken(TSqlParser.GROUP, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_workload_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_workload_group; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_workload_group(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_workload_group(this);
		}
	}

	public final Drop_workload_groupContext drop_workload_group() throws RecognitionException {
		Drop_workload_groupContext _localctx = new Drop_workload_groupContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_drop_workload_group);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2708);
			match(DROP);
			setState(2709);
			match(WORKLOAD);
			setState(2710);
			match(GROUP);
			setState(2711);
			((Drop_workload_groupContext)_localctx).group_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_xml_schema_collectionContext extends ParserRuleContext {
		public IdContext relational_schema;
		public IdContext sql_identifier;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode XML() { return getToken(TSqlParser.XML, 0); }
		public TerminalNode SCHEMA() { return getToken(TSqlParser.SCHEMA, 0); }
		public TerminalNode COLLECTION() { return getToken(TSqlParser.COLLECTION, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Drop_xml_schema_collectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_xml_schema_collection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_xml_schema_collection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_xml_schema_collection(this);
		}
	}

	public final Drop_xml_schema_collectionContext drop_xml_schema_collection() throws RecognitionException {
		Drop_xml_schema_collectionContext _localctx = new Drop_xml_schema_collectionContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_drop_xml_schema_collection);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2713);
			match(DROP);
			setState(2714);
			match(XML);
			setState(2715);
			match(SCHEMA);
			setState(2716);
			match(COLLECTION);
			setState(2720);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,203,_ctx) ) {
			case 1:
				{
				setState(2717);
				((Drop_xml_schema_collectionContext)_localctx).relational_schema = id();
				setState(2718);
				match(DOT);
				}
				break;
			}
			setState(2722);
			((Drop_xml_schema_collectionContext)_localctx).sql_identifier = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Disable_triggerContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext trigger_name;
		public IdContext schema_id;
		public IdContext object_name;
		public TerminalNode DISABLE() { return getToken(TSqlParser.DISABLE, 0); }
		public TerminalNode TRIGGER() { return getToken(TSqlParser.TRIGGER, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public List<TerminalNode> ALL() { return getTokens(TSqlParser.ALL); }
		public TerminalNode ALL(int i) {
			return getToken(TSqlParser.ALL, i);
		}
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(TSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSqlParser.DOT, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Disable_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_disable_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDisable_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDisable_trigger(this);
		}
	}

	public final Disable_triggerContext disable_trigger() throws RecognitionException {
		Disable_triggerContext _localctx = new Disable_triggerContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_disable_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2724);
			match(DISABLE);
			setState(2725);
			match(TRIGGER);
			setState(2740);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case START:
			case TARGET:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
			case COMMA:
				{
				setState(2735); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2727);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2726);
						match(COMMA);
						}
					}

					setState(2732);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,205,_ctx) ) {
					case 1:
						{
						setState(2729);
						((Disable_triggerContext)_localctx).schema_name = id();
						setState(2730);
						match(DOT);
						}
						break;
					}
					setState(2734);
					((Disable_triggerContext)_localctx).trigger_name = id();
					}
					}
					setState(2737); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (EVENTDATA - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & ((1L << (INIT - 158)) | (1L << (KEY - 158)) | (1L << (MASTER - 158)) | (1L << (MAX_MEMORY - 158)))) != 0) || ((((_la - 225)) & ~0x3f) == 0 && ((1L << (_la - 225)) & ((1L << (OFFSETS - 225)) | (1L << (PAGE - 225)) | (1L << (PUBLIC - 225)) | (1L << (R - 225)) | (1L << (RAW - 225)) | (1L << (RETURN - 225)) | (1L << (RETURNS - 225)) | (1L << (ROWCOUNT - 225)))) != 0) || ((((_la - 295)) & ~0x3f) == 0 && ((1L << (_la - 295)) & ((1L << (SAFETY - 295)) | (1L << (SERVER - 295)) | (1L << (SID - 295)) | (1L << (SOURCE - 295)) | (1L << (STATE - 295)) | (1L << (START - 295)) | (1L << (TARGET - 295)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (ABSOLUTE - 383)) | (1L << (ACCENT_SENSITIVITY - 383)) | (1L << (ACTION - 383)) | (1L << (ACTIVATION - 383)) | (1L << (ACTIVE - 383)) | (1L << (ADDRESS - 383)) | (1L << (AES_128 - 383)) | (1L << (AES_192 - 383)) | (1L << (AES_256 - 383)) | (1L << (AFFINITY - 383)) | (1L << (AFTER - 383)) | (1L << (AGGREGATE - 383)) | (1L << (ALGORITHM - 383)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 383)) | (1L << (ALLOWED - 383)) | (1L << (ANSI_NULL_DEFAULT - 383)) | (1L << (ANSI_NULLS - 383)) | (1L << (ANSI_PADDING - 383)) | (1L << (ANSI_WARNINGS - 383)) | (1L << (APPLICATION_LOG - 383)) | (1L << (APPLY - 383)) | (1L << (ARITHABORT - 383)) | (1L << (ASSEMBLY - 383)) | (1L << (AUDIT - 383)) | (1L << (AUDIT_GUID - 383)) | (1L << (AUTO - 383)) | (1L << (AUTO_CLEANUP - 383)) | (1L << (AUTO_CLOSE - 383)) | (1L << (AUTO_CREATE_STATISTICS - 383)) | (1L << (AUTO_SHRINK - 383)) | (1L << (AUTO_UPDATE_STATISTICS - 383)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 383)) | (1L << (AVAILABILITY - 383)) | (1L << (AVG - 383)) | (1L << (BACKUP_PRIORITY - 383)) | (1L << (BEGIN_DIALOG - 383)) | (1L << (BIGINT - 383)) | (1L << (BINARY_BASE64 - 383)) | (1L << (BINARY_CHECKSUM - 383)) | (1L << (BINDING - 383)) | (1L << (BLOB_STORAGE - 383)) | (1L << (BROKER - 383)) | (1L << (BROKER_INSTANCE - 383)) | (1L << (BULK_LOGGED - 383)) | (1L << (CALLER - 383)) | (1L << (CAP_CPU_PERCENT - 383)) | (1L << (CAST - 383)) | (1L << (CATALOG - 383)) | (1L << (CATCH - 383)) | (1L << (CHANGE_RETENTION - 383)) | (1L << (CHANGE_TRACKING - 383)) | (1L << (CHECKSUM - 383)) | (1L << (CHECKSUM_AGG - 383)) | (1L << (CLEANUP - 383)) | (1L << (COLLECTION - 383)) | (1L << (COLUMN_MASTER_KEY - 383)) | (1L << (COMMITTED - 383)) | (1L << (COMPATIBILITY_LEVEL - 383)) | (1L << (CONCAT - 383)) | (1L << (CONCAT_NULL_YIELDS_NULL - 383)) | (1L << (CONTENT - 383)) | (1L << (CONTROL - 383)) | (1L << (COOKIE - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (COUNT - 447)) | (1L << (COUNT_BIG - 447)) | (1L << (COUNTER - 447)) | (1L << (CPU - 447)) | (1L << (CREATE_NEW - 447)) | (1L << (CREATION_DISPOSITION - 447)) | (1L << (CREDENTIAL - 447)) | (1L << (CRYPTOGRAPHIC - 447)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 447)) | (1L << (CURSOR_DEFAULT - 447)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 447)) | (1L << (DATEADD - 447)) | (1L << (DATEDIFF - 447)) | (1L << (DATENAME - 447)) | (1L << (DATEPART - 447)) | (1L << (DAYS - 447)) | (1L << (DB_CHAINING - 447)) | (1L << (DB_FAILOVER - 447)) | (1L << (DECRYPTION - 447)) | (1L << (DEFAULT_DOUBLE_QUOTE - 447)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1L << (DEFAULT_LANGUAGE - 447)) | (1L << (DELAY - 447)) | (1L << (DELAYED_DURABILITY - 447)) | (1L << (DELETED - 447)) | (1L << (DENSE_RANK - 447)) | (1L << (DEPENDENTS - 447)) | (1L << (DES - 447)) | (1L << (DESCRIPTION - 447)) | (1L << (DESX - 447)) | (1L << (DHCP - 447)) | (1L << (DIALOG - 447)) | (1L << (DIRECTORY_NAME - 447)) | (1L << (DISABLE - 447)) | (1L << (DISABLE_BROKER - 447)) | (1L << (DISABLED - 447)) | (1L << (DISK_DRIVE - 447)) | (1L << (DOCUMENT - 447)) | (1L << (DYNAMIC - 447)) | (1L << (EMERGENCY - 447)) | (1L << (EMPTY - 447)) | (1L << (ENABLE - 447)) | (1L << (ENABLE_BROKER - 447)) | (1L << (ENCRYPTED_VALUE - 447)) | (1L << (ENCRYPTION - 447)) | (1L << (ENDPOINT_URL - 447)) | (1L << (ERROR_BROKER_CONVERSATIONS - 447)) | (1L << (EXCLUSIVE - 447)) | (1L << (EXECUTABLE - 447)) | (1L << (EXIST - 447)) | (1L << (EXPAND - 447)) | (1L << (EXPIRY_DATE - 447)) | (1L << (EXPLICIT - 447)) | (1L << (FAIL_OPERATION - 447)) | (1L << (FAILOVER_MODE - 447)) | (1L << (FAILURE - 447)) | (1L << (FAILURE_CONDITION_LEVEL - 447)) | (1L << (FAST - 447)) | (1L << (FAST_FORWARD - 447)) | (1L << (FILEGROUP - 447)) | (1L << (FILEGROWTH - 447)) | (1L << (FILEPATH - 447)) | (1L << (FILESTREAM - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (FILTER - 511)) | (1L << (FIRST - 511)) | (1L << (FIRST_VALUE - 511)) | (1L << (FOLLOWING - 511)) | (1L << (FORCE - 511)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1L << (FORCED - 511)) | (1L << (FORMAT - 511)) | (1L << (FORWARD_ONLY - 511)) | (1L << (FULLSCAN - 511)) | (1L << (FULLTEXT - 511)) | (1L << (GB - 511)) | (1L << (GETDATE - 511)) | (1L << (GETUTCDATE - 511)) | (1L << (GLOBAL - 511)) | (1L << (GO - 511)) | (1L << (GROUP_MAX_REQUESTS - 511)) | (1L << (GROUPING - 511)) | (1L << (GROUPING_ID - 511)) | (1L << (HADR - 511)) | (1L << (HASH - 511)) | (1L << (HEALTH_CHECK_TIMEOUT - 511)) | (1L << (HIGH - 511)) | (1L << (HONOR_BROKER_PRIORITY - 511)) | (1L << (HOURS - 511)) | (1L << (IDENTITY_VALUE - 511)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1L << (IMMEDIATE - 511)) | (1L << (IMPERSONATE - 511)) | (1L << (IMPORTANCE - 511)) | (1L << (INCREMENTAL - 511)) | (1L << (INITIATOR - 511)) | (1L << (INPUT - 511)) | (1L << (INSENSITIVE - 511)) | (1L << (INSERTED - 511)) | (1L << (INT - 511)) | (1L << (IP - 511)) | (1L << (ISOLATION - 511)) | (1L << (KB - 511)) | (1L << (KEEP - 511)) | (1L << (KEEPFIXED - 511)) | (1L << (KEY_SOURCE - 511)) | (1L << (KEYS - 511)) | (1L << (KEYSET - 511)) | (1L << (LAG - 511)) | (1L << (LAST - 511)) | (1L << (LAST_VALUE - 511)) | (1L << (LEAD - 511)) | (1L << (LEVEL - 511)) | (1L << (LIST - 511)) | (1L << (LISTENER - 511)) | (1L << (LISTENER_URL - 511)) | (1L << (LOB_COMPACTION - 511)) | (1L << (LOCAL - 511)) | (1L << (LOCATION - 511)) | (1L << (LOCK - 511)) | (1L << (LOCK_ESCALATION - 511)) | (1L << (LOGIN - 511)) | (1L << (LOOP - 511)) | (1L << (LOW - 511)) | (1L << (MANUAL - 511)) | (1L << (MARK - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (MATERIALIZED - 575)) | (1L << (MAX - 575)) | (1L << (MAX_CPU_PERCENT - 575)) | (1L << (MAX_DOP - 575)) | (1L << (MAX_FILES - 575)) | (1L << (MAX_IOPS_PER_VOLUME - 575)) | (1L << (MAX_MEMORY_PERCENT - 575)) | (1L << (MAX_PROCESSES - 575)) | (1L << (MAX_QUEUE_READERS - 575)) | (1L << (MAX_ROLLOVER_FILES - 575)) | (1L << (MAXDOP - 575)) | (1L << (MAXRECURSION - 575)) | (1L << (MAXSIZE - 575)) | (1L << (MB - 575)) | (1L << (MEDIUM - 575)) | (1L << (MEMORY_OPTIMIZED_DATA - 575)) | (1L << (MESSAGE - 575)) | (1L << (MIN - 575)) | (1L << (MIN_ACTIVE_ROWVERSION - 575)) | (1L << (MIN_CPU_PERCENT - 575)) | (1L << (MIN_IOPS_PER_VOLUME - 575)) | (1L << (MIN_MEMORY_PERCENT - 575)) | (1L << (MINUTES - 575)) | (1L << (MIRROR_ADDRESS - 575)) | (1L << (MIXED_PAGE_ALLOCATION - 575)) | (1L << (MODE - 575)) | (1L << (MODIFY - 575)) | (1L << (MOVE - 575)) | (1L << (MULTI_USER - 575)) | (1L << (NAME - 575)) | (1L << (NESTED_TRIGGERS - 575)) | (1L << (NEW_ACCOUNT - 575)) | (1L << (NEW_BROKER - 575)) | (1L << (NEW_PASSWORD - 575)) | (1L << (NEXT - 575)) | (1L << (NO - 575)) | (1L << (NO_TRUNCATE - 575)) | (1L << (NO_WAIT - 575)) | (1L << (NOCOUNT - 575)) | (1L << (NODES - 575)) | (1L << (NOEXPAND - 575)) | (1L << (NON_TRANSACTED_ACCESS - 575)) | (1L << (NORECOMPUTE - 575)) | (1L << (NORECOVERY - 575)) | (1L << (NOWAIT - 575)) | (1L << (NTILE - 575)) | (1L << (NUMANODE - 575)) | (1L << (NUMBER - 575)) | (1L << (NUMERIC_ROUNDABORT - 575)) | (1L << (OBJECT - 575)) | (1L << (OFFLINE - 575)) | (1L << (OFFSET - 575)) | (1L << (OLD_ACCOUNT - 575)) | (1L << (ONLINE - 575)) | (1L << (ONLY - 575)) | (1L << (OPEN_EXISTING - 575)) | (1L << (OPTIMISTIC - 575)) | (1L << (OPTIMIZE - 575)) | (1L << (OUT - 575)) | (1L << (OUTPUT - 575)) | (1L << (OWNER - 575)) | (1L << (PAGE_VERIFY - 575)) | (1L << (PARAMETERIZATION - 575)) | (1L << (PARTITION - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (PARTITIONS - 639)) | (1L << (PARTNER - 639)) | (1L << (PATH - 639)) | (1L << (POISON_MESSAGE_HANDLING - 639)) | (1L << (POOL - 639)) | (1L << (PORT - 639)) | (1L << (PRECEDING - 639)) | (1L << (PRIMARY_ROLE - 639)) | (1L << (PRIOR - 639)) | (1L << (PRIORITY - 639)) | (1L << (PRIORITY_LEVEL - 639)) | (1L << (PRIVATE - 639)) | (1L << (PRIVATE_KEY - 639)) | (1L << (PRIVILEGES - 639)) | (1L << (PROCEDURE_NAME - 639)) | (1L << (PROPERTY - 639)) | (1L << (PROVIDER - 639)) | (1L << (PROVIDER_KEY_NAME - 639)) | (1L << (QUERY - 639)) | (1L << (QUEUE - 639)) | (1L << (QUEUE_DELAY - 639)) | (1L << (QUOTED_IDENTIFIER - 639)) | (1L << (RANGE - 639)) | (1L << (RANK - 639)) | (1L << (RC2 - 639)) | (1L << (RC4 - 639)) | (1L << (RC4_128 - 639)) | (1L << (READ_COMMITTED_SNAPSHOT - 639)) | (1L << (READ_ONLY - 639)) | (1L << (READ_ONLY_ROUTING_LIST - 639)) | (1L << (READ_WRITE - 639)) | (1L << (READONLY - 639)) | (1L << (REBUILD - 639)) | (1L << (RECEIVE - 639)) | (1L << (RECOMPILE - 639)) | (1L << (RECOVERY - 639)) | (1L << (RECURSIVE_TRIGGERS - 639)) | (1L << (RELATIVE - 639)) | (1L << (REMOTE - 639)) | (1L << (REMOTE_SERVICE_NAME - 639)) | (1L << (REMOVE - 639)) | (1L << (REORGANIZE - 639)) | (1L << (REPEATABLE - 639)) | (1L << (REPLICA - 639)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 639)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 639)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 639)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 639)) | (1L << (RESERVE_DISK_SPACE - 639)) | (1L << (RESOURCE - 639)) | (1L << (RESOURCE_MANAGER_LOCATION - 639)) | (1L << (RESTRICTED_USER - 639)) | (1L << (RETENTION - 639)) | (1L << (ROBUST - 639)) | (1L << (ROOT - 639)) | (1L << (ROUTE - 639)) | (1L << (ROW - 639)) | (1L << (ROW_NUMBER - 639)) | (1L << (ROWGUID - 639)) | (1L << (ROWS - 639)) | (1L << (SAMPLE - 639)) | (1L << (SCHEMABINDING - 639)) | (1L << (SCOPED - 639)) | (1L << (SCROLL - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (SCROLL_LOCKS - 703)) | (1L << (SEARCH - 703)) | (1L << (SECONDARY - 703)) | (1L << (SECONDARY_ONLY - 703)) | (1L << (SECONDARY_ROLE - 703)) | (1L << (SECONDS - 703)) | (1L << (SECRET - 703)) | (1L << (SECURITY_LOG - 703)) | (1L << (SEEDING_MODE - 703)) | (1L << (SELF - 703)) | (1L << (SEMI_SENSITIVE - 703)) | (1L << (SEND - 703)) | (1L << (SENT - 703)) | (1L << (SERIALIZABLE - 703)) | (1L << (SESSION_TIMEOUT - 703)) | (1L << (SETERROR - 703)) | (1L << (SHARE - 703)) | (1L << (SHOWPLAN - 703)) | (1L << (SIGNATURE - 703)) | (1L << (SIMPLE - 703)) | (1L << (SINGLE_USER - 703)) | (1L << (SIZE - 703)) | (1L << (SMALLINT - 703)) | (1L << (SNAPSHOT - 703)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 703)) | (1L << (STANDBY - 703)) | (1L << (START_DATE - 703)) | (1L << (STATIC - 703)) | (1L << (STATS_STREAM - 703)) | (1L << (STATUS - 703)) | (1L << (STDEV - 703)) | (1L << (STDEVP - 703)) | (1L << (STOPLIST - 703)) | (1L << (STUFF - 703)) | (1L << (SUBJECT - 703)) | (1L << (SUM - 703)) | (1L << (SUSPEND - 703)) | (1L << (SYMMETRIC - 703)) | (1L << (SYNCHRONOUS_COMMIT - 703)) | (1L << (SYNONYM - 703)) | (1L << (TAKE - 703)) | (1L << (TARGET_RECOVERY_TIME - 703)) | (1L << (TB - 703)) | (1L << (TEXTIMAGE_ON - 703)) | (1L << (THROW - 703)) | (1L << (TIES - 703)) | (1L << (TIME - 703)) | (1L << (TIMEOUT - 703)) | (1L << (TIMER - 703)) | (1L << (TINYINT - 703)) | (1L << (TORN_PAGE_DETECTION - 703)) | (1L << (TRANSFORM_NOISE_WORDS - 703)) | (1L << (TRIPLE_DES - 703)) | (1L << (TRIPLE_DES_3KEY - 703)) | (1L << (TRUSTWORTHY - 703)) | (1L << (TRY - 703)) | (1L << (TSQL - 703)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 703)) | (1L << (TYPE - 703)) | (1L << (TYPE_WARNING - 703)) | (1L << (UNBOUNDED - 703)) | (1L << (UNCOMMITTED - 703)) | (1L << (UNKNOWN - 703)) | (1L << (UNLIMITED - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (USING - 767)) | (1L << (VALID_XML - 767)) | (1L << (VALIDATION - 767)) | (1L << (VALUE - 767)) | (1L << (VAR - 767)) | (1L << (VARP - 767)) | (1L << (VIEW_METADATA - 767)) | (1L << (VIEWS - 767)) | (1L << (WAIT - 767)) | (1L << (WELL_FORMED_XML - 767)) | (1L << (WORK - 767)) | (1L << (WORKLOAD - 767)) | (1L << (XML - 767)) | (1L << (XMLNAMESPACES - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)) | (1L << (COMMA - 767)))) != 0) );
				}
				break;
			case ALL:
				{
				setState(2739);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2742);
			match(ON);
			setState(2752);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case START:
			case TARGET:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				setState(2746);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,208,_ctx) ) {
				case 1:
					{
					setState(2743);
					((Disable_triggerContext)_localctx).schema_id = id();
					setState(2744);
					match(DOT);
					}
					break;
				}
				setState(2748);
				((Disable_triggerContext)_localctx).object_name = id();
				}
				break;
			case DATABASE:
				{
				setState(2749);
				match(DATABASE);
				}
				break;
			case ALL:
				{
				setState(2750);
				match(ALL);
				setState(2751);
				match(SERVER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Enable_triggerContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext trigger_name;
		public IdContext schema_id;
		public IdContext object_name;
		public TerminalNode ENABLE() { return getToken(TSqlParser.ENABLE, 0); }
		public TerminalNode TRIGGER() { return getToken(TSqlParser.TRIGGER, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public List<TerminalNode> ALL() { return getTokens(TSqlParser.ALL); }
		public TerminalNode ALL(int i) {
			return getToken(TSqlParser.ALL, i);
		}
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(TSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSqlParser.DOT, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Enable_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enable_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterEnable_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitEnable_trigger(this);
		}
	}

	public final Enable_triggerContext enable_trigger() throws RecognitionException {
		Enable_triggerContext _localctx = new Enable_triggerContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_enable_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2754);
			match(ENABLE);
			setState(2755);
			match(TRIGGER);
			setState(2770);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case START:
			case TARGET:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
			case COMMA:
				{
				setState(2765); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2757);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2756);
						match(COMMA);
						}
					}

					setState(2762);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,211,_ctx) ) {
					case 1:
						{
						setState(2759);
						((Enable_triggerContext)_localctx).schema_name = id();
						setState(2760);
						match(DOT);
						}
						break;
					}
					setState(2764);
					((Enable_triggerContext)_localctx).trigger_name = id();
					}
					}
					setState(2767); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (EVENTDATA - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & ((1L << (INIT - 158)) | (1L << (KEY - 158)) | (1L << (MASTER - 158)) | (1L << (MAX_MEMORY - 158)))) != 0) || ((((_la - 225)) & ~0x3f) == 0 && ((1L << (_la - 225)) & ((1L << (OFFSETS - 225)) | (1L << (PAGE - 225)) | (1L << (PUBLIC - 225)) | (1L << (R - 225)) | (1L << (RAW - 225)) | (1L << (RETURN - 225)) | (1L << (RETURNS - 225)) | (1L << (ROWCOUNT - 225)))) != 0) || ((((_la - 295)) & ~0x3f) == 0 && ((1L << (_la - 295)) & ((1L << (SAFETY - 295)) | (1L << (SERVER - 295)) | (1L << (SID - 295)) | (1L << (SOURCE - 295)) | (1L << (STATE - 295)) | (1L << (START - 295)) | (1L << (TARGET - 295)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (ABSOLUTE - 383)) | (1L << (ACCENT_SENSITIVITY - 383)) | (1L << (ACTION - 383)) | (1L << (ACTIVATION - 383)) | (1L << (ACTIVE - 383)) | (1L << (ADDRESS - 383)) | (1L << (AES_128 - 383)) | (1L << (AES_192 - 383)) | (1L << (AES_256 - 383)) | (1L << (AFFINITY - 383)) | (1L << (AFTER - 383)) | (1L << (AGGREGATE - 383)) | (1L << (ALGORITHM - 383)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 383)) | (1L << (ALLOWED - 383)) | (1L << (ANSI_NULL_DEFAULT - 383)) | (1L << (ANSI_NULLS - 383)) | (1L << (ANSI_PADDING - 383)) | (1L << (ANSI_WARNINGS - 383)) | (1L << (APPLICATION_LOG - 383)) | (1L << (APPLY - 383)) | (1L << (ARITHABORT - 383)) | (1L << (ASSEMBLY - 383)) | (1L << (AUDIT - 383)) | (1L << (AUDIT_GUID - 383)) | (1L << (AUTO - 383)) | (1L << (AUTO_CLEANUP - 383)) | (1L << (AUTO_CLOSE - 383)) | (1L << (AUTO_CREATE_STATISTICS - 383)) | (1L << (AUTO_SHRINK - 383)) | (1L << (AUTO_UPDATE_STATISTICS - 383)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 383)) | (1L << (AVAILABILITY - 383)) | (1L << (AVG - 383)) | (1L << (BACKUP_PRIORITY - 383)) | (1L << (BEGIN_DIALOG - 383)) | (1L << (BIGINT - 383)) | (1L << (BINARY_BASE64 - 383)) | (1L << (BINARY_CHECKSUM - 383)) | (1L << (BINDING - 383)) | (1L << (BLOB_STORAGE - 383)) | (1L << (BROKER - 383)) | (1L << (BROKER_INSTANCE - 383)) | (1L << (BULK_LOGGED - 383)) | (1L << (CALLER - 383)) | (1L << (CAP_CPU_PERCENT - 383)) | (1L << (CAST - 383)) | (1L << (CATALOG - 383)) | (1L << (CATCH - 383)) | (1L << (CHANGE_RETENTION - 383)) | (1L << (CHANGE_TRACKING - 383)) | (1L << (CHECKSUM - 383)) | (1L << (CHECKSUM_AGG - 383)) | (1L << (CLEANUP - 383)) | (1L << (COLLECTION - 383)) | (1L << (COLUMN_MASTER_KEY - 383)) | (1L << (COMMITTED - 383)) | (1L << (COMPATIBILITY_LEVEL - 383)) | (1L << (CONCAT - 383)) | (1L << (CONCAT_NULL_YIELDS_NULL - 383)) | (1L << (CONTENT - 383)) | (1L << (CONTROL - 383)) | (1L << (COOKIE - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (COUNT - 447)) | (1L << (COUNT_BIG - 447)) | (1L << (COUNTER - 447)) | (1L << (CPU - 447)) | (1L << (CREATE_NEW - 447)) | (1L << (CREATION_DISPOSITION - 447)) | (1L << (CREDENTIAL - 447)) | (1L << (CRYPTOGRAPHIC - 447)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 447)) | (1L << (CURSOR_DEFAULT - 447)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 447)) | (1L << (DATEADD - 447)) | (1L << (DATEDIFF - 447)) | (1L << (DATENAME - 447)) | (1L << (DATEPART - 447)) | (1L << (DAYS - 447)) | (1L << (DB_CHAINING - 447)) | (1L << (DB_FAILOVER - 447)) | (1L << (DECRYPTION - 447)) | (1L << (DEFAULT_DOUBLE_QUOTE - 447)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1L << (DEFAULT_LANGUAGE - 447)) | (1L << (DELAY - 447)) | (1L << (DELAYED_DURABILITY - 447)) | (1L << (DELETED - 447)) | (1L << (DENSE_RANK - 447)) | (1L << (DEPENDENTS - 447)) | (1L << (DES - 447)) | (1L << (DESCRIPTION - 447)) | (1L << (DESX - 447)) | (1L << (DHCP - 447)) | (1L << (DIALOG - 447)) | (1L << (DIRECTORY_NAME - 447)) | (1L << (DISABLE - 447)) | (1L << (DISABLE_BROKER - 447)) | (1L << (DISABLED - 447)) | (1L << (DISK_DRIVE - 447)) | (1L << (DOCUMENT - 447)) | (1L << (DYNAMIC - 447)) | (1L << (EMERGENCY - 447)) | (1L << (EMPTY - 447)) | (1L << (ENABLE - 447)) | (1L << (ENABLE_BROKER - 447)) | (1L << (ENCRYPTED_VALUE - 447)) | (1L << (ENCRYPTION - 447)) | (1L << (ENDPOINT_URL - 447)) | (1L << (ERROR_BROKER_CONVERSATIONS - 447)) | (1L << (EXCLUSIVE - 447)) | (1L << (EXECUTABLE - 447)) | (1L << (EXIST - 447)) | (1L << (EXPAND - 447)) | (1L << (EXPIRY_DATE - 447)) | (1L << (EXPLICIT - 447)) | (1L << (FAIL_OPERATION - 447)) | (1L << (FAILOVER_MODE - 447)) | (1L << (FAILURE - 447)) | (1L << (FAILURE_CONDITION_LEVEL - 447)) | (1L << (FAST - 447)) | (1L << (FAST_FORWARD - 447)) | (1L << (FILEGROUP - 447)) | (1L << (FILEGROWTH - 447)) | (1L << (FILEPATH - 447)) | (1L << (FILESTREAM - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (FILTER - 511)) | (1L << (FIRST - 511)) | (1L << (FIRST_VALUE - 511)) | (1L << (FOLLOWING - 511)) | (1L << (FORCE - 511)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1L << (FORCED - 511)) | (1L << (FORMAT - 511)) | (1L << (FORWARD_ONLY - 511)) | (1L << (FULLSCAN - 511)) | (1L << (FULLTEXT - 511)) | (1L << (GB - 511)) | (1L << (GETDATE - 511)) | (1L << (GETUTCDATE - 511)) | (1L << (GLOBAL - 511)) | (1L << (GO - 511)) | (1L << (GROUP_MAX_REQUESTS - 511)) | (1L << (GROUPING - 511)) | (1L << (GROUPING_ID - 511)) | (1L << (HADR - 511)) | (1L << (HASH - 511)) | (1L << (HEALTH_CHECK_TIMEOUT - 511)) | (1L << (HIGH - 511)) | (1L << (HONOR_BROKER_PRIORITY - 511)) | (1L << (HOURS - 511)) | (1L << (IDENTITY_VALUE - 511)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1L << (IMMEDIATE - 511)) | (1L << (IMPERSONATE - 511)) | (1L << (IMPORTANCE - 511)) | (1L << (INCREMENTAL - 511)) | (1L << (INITIATOR - 511)) | (1L << (INPUT - 511)) | (1L << (INSENSITIVE - 511)) | (1L << (INSERTED - 511)) | (1L << (INT - 511)) | (1L << (IP - 511)) | (1L << (ISOLATION - 511)) | (1L << (KB - 511)) | (1L << (KEEP - 511)) | (1L << (KEEPFIXED - 511)) | (1L << (KEY_SOURCE - 511)) | (1L << (KEYS - 511)) | (1L << (KEYSET - 511)) | (1L << (LAG - 511)) | (1L << (LAST - 511)) | (1L << (LAST_VALUE - 511)) | (1L << (LEAD - 511)) | (1L << (LEVEL - 511)) | (1L << (LIST - 511)) | (1L << (LISTENER - 511)) | (1L << (LISTENER_URL - 511)) | (1L << (LOB_COMPACTION - 511)) | (1L << (LOCAL - 511)) | (1L << (LOCATION - 511)) | (1L << (LOCK - 511)) | (1L << (LOCK_ESCALATION - 511)) | (1L << (LOGIN - 511)) | (1L << (LOOP - 511)) | (1L << (LOW - 511)) | (1L << (MANUAL - 511)) | (1L << (MARK - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (MATERIALIZED - 575)) | (1L << (MAX - 575)) | (1L << (MAX_CPU_PERCENT - 575)) | (1L << (MAX_DOP - 575)) | (1L << (MAX_FILES - 575)) | (1L << (MAX_IOPS_PER_VOLUME - 575)) | (1L << (MAX_MEMORY_PERCENT - 575)) | (1L << (MAX_PROCESSES - 575)) | (1L << (MAX_QUEUE_READERS - 575)) | (1L << (MAX_ROLLOVER_FILES - 575)) | (1L << (MAXDOP - 575)) | (1L << (MAXRECURSION - 575)) | (1L << (MAXSIZE - 575)) | (1L << (MB - 575)) | (1L << (MEDIUM - 575)) | (1L << (MEMORY_OPTIMIZED_DATA - 575)) | (1L << (MESSAGE - 575)) | (1L << (MIN - 575)) | (1L << (MIN_ACTIVE_ROWVERSION - 575)) | (1L << (MIN_CPU_PERCENT - 575)) | (1L << (MIN_IOPS_PER_VOLUME - 575)) | (1L << (MIN_MEMORY_PERCENT - 575)) | (1L << (MINUTES - 575)) | (1L << (MIRROR_ADDRESS - 575)) | (1L << (MIXED_PAGE_ALLOCATION - 575)) | (1L << (MODE - 575)) | (1L << (MODIFY - 575)) | (1L << (MOVE - 575)) | (1L << (MULTI_USER - 575)) | (1L << (NAME - 575)) | (1L << (NESTED_TRIGGERS - 575)) | (1L << (NEW_ACCOUNT - 575)) | (1L << (NEW_BROKER - 575)) | (1L << (NEW_PASSWORD - 575)) | (1L << (NEXT - 575)) | (1L << (NO - 575)) | (1L << (NO_TRUNCATE - 575)) | (1L << (NO_WAIT - 575)) | (1L << (NOCOUNT - 575)) | (1L << (NODES - 575)) | (1L << (NOEXPAND - 575)) | (1L << (NON_TRANSACTED_ACCESS - 575)) | (1L << (NORECOMPUTE - 575)) | (1L << (NORECOVERY - 575)) | (1L << (NOWAIT - 575)) | (1L << (NTILE - 575)) | (1L << (NUMANODE - 575)) | (1L << (NUMBER - 575)) | (1L << (NUMERIC_ROUNDABORT - 575)) | (1L << (OBJECT - 575)) | (1L << (OFFLINE - 575)) | (1L << (OFFSET - 575)) | (1L << (OLD_ACCOUNT - 575)) | (1L << (ONLINE - 575)) | (1L << (ONLY - 575)) | (1L << (OPEN_EXISTING - 575)) | (1L << (OPTIMISTIC - 575)) | (1L << (OPTIMIZE - 575)) | (1L << (OUT - 575)) | (1L << (OUTPUT - 575)) | (1L << (OWNER - 575)) | (1L << (PAGE_VERIFY - 575)) | (1L << (PARAMETERIZATION - 575)) | (1L << (PARTITION - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (PARTITIONS - 639)) | (1L << (PARTNER - 639)) | (1L << (PATH - 639)) | (1L << (POISON_MESSAGE_HANDLING - 639)) | (1L << (POOL - 639)) | (1L << (PORT - 639)) | (1L << (PRECEDING - 639)) | (1L << (PRIMARY_ROLE - 639)) | (1L << (PRIOR - 639)) | (1L << (PRIORITY - 639)) | (1L << (PRIORITY_LEVEL - 639)) | (1L << (PRIVATE - 639)) | (1L << (PRIVATE_KEY - 639)) | (1L << (PRIVILEGES - 639)) | (1L << (PROCEDURE_NAME - 639)) | (1L << (PROPERTY - 639)) | (1L << (PROVIDER - 639)) | (1L << (PROVIDER_KEY_NAME - 639)) | (1L << (QUERY - 639)) | (1L << (QUEUE - 639)) | (1L << (QUEUE_DELAY - 639)) | (1L << (QUOTED_IDENTIFIER - 639)) | (1L << (RANGE - 639)) | (1L << (RANK - 639)) | (1L << (RC2 - 639)) | (1L << (RC4 - 639)) | (1L << (RC4_128 - 639)) | (1L << (READ_COMMITTED_SNAPSHOT - 639)) | (1L << (READ_ONLY - 639)) | (1L << (READ_ONLY_ROUTING_LIST - 639)) | (1L << (READ_WRITE - 639)) | (1L << (READONLY - 639)) | (1L << (REBUILD - 639)) | (1L << (RECEIVE - 639)) | (1L << (RECOMPILE - 639)) | (1L << (RECOVERY - 639)) | (1L << (RECURSIVE_TRIGGERS - 639)) | (1L << (RELATIVE - 639)) | (1L << (REMOTE - 639)) | (1L << (REMOTE_SERVICE_NAME - 639)) | (1L << (REMOVE - 639)) | (1L << (REORGANIZE - 639)) | (1L << (REPEATABLE - 639)) | (1L << (REPLICA - 639)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 639)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 639)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 639)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 639)) | (1L << (RESERVE_DISK_SPACE - 639)) | (1L << (RESOURCE - 639)) | (1L << (RESOURCE_MANAGER_LOCATION - 639)) | (1L << (RESTRICTED_USER - 639)) | (1L << (RETENTION - 639)) | (1L << (ROBUST - 639)) | (1L << (ROOT - 639)) | (1L << (ROUTE - 639)) | (1L << (ROW - 639)) | (1L << (ROW_NUMBER - 639)) | (1L << (ROWGUID - 639)) | (1L << (ROWS - 639)) | (1L << (SAMPLE - 639)) | (1L << (SCHEMABINDING - 639)) | (1L << (SCOPED - 639)) | (1L << (SCROLL - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (SCROLL_LOCKS - 703)) | (1L << (SEARCH - 703)) | (1L << (SECONDARY - 703)) | (1L << (SECONDARY_ONLY - 703)) | (1L << (SECONDARY_ROLE - 703)) | (1L << (SECONDS - 703)) | (1L << (SECRET - 703)) | (1L << (SECURITY_LOG - 703)) | (1L << (SEEDING_MODE - 703)) | (1L << (SELF - 703)) | (1L << (SEMI_SENSITIVE - 703)) | (1L << (SEND - 703)) | (1L << (SENT - 703)) | (1L << (SERIALIZABLE - 703)) | (1L << (SESSION_TIMEOUT - 703)) | (1L << (SETERROR - 703)) | (1L << (SHARE - 703)) | (1L << (SHOWPLAN - 703)) | (1L << (SIGNATURE - 703)) | (1L << (SIMPLE - 703)) | (1L << (SINGLE_USER - 703)) | (1L << (SIZE - 703)) | (1L << (SMALLINT - 703)) | (1L << (SNAPSHOT - 703)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 703)) | (1L << (STANDBY - 703)) | (1L << (START_DATE - 703)) | (1L << (STATIC - 703)) | (1L << (STATS_STREAM - 703)) | (1L << (STATUS - 703)) | (1L << (STDEV - 703)) | (1L << (STDEVP - 703)) | (1L << (STOPLIST - 703)) | (1L << (STUFF - 703)) | (1L << (SUBJECT - 703)) | (1L << (SUM - 703)) | (1L << (SUSPEND - 703)) | (1L << (SYMMETRIC - 703)) | (1L << (SYNCHRONOUS_COMMIT - 703)) | (1L << (SYNONYM - 703)) | (1L << (TAKE - 703)) | (1L << (TARGET_RECOVERY_TIME - 703)) | (1L << (TB - 703)) | (1L << (TEXTIMAGE_ON - 703)) | (1L << (THROW - 703)) | (1L << (TIES - 703)) | (1L << (TIME - 703)) | (1L << (TIMEOUT - 703)) | (1L << (TIMER - 703)) | (1L << (TINYINT - 703)) | (1L << (TORN_PAGE_DETECTION - 703)) | (1L << (TRANSFORM_NOISE_WORDS - 703)) | (1L << (TRIPLE_DES - 703)) | (1L << (TRIPLE_DES_3KEY - 703)) | (1L << (TRUSTWORTHY - 703)) | (1L << (TRY - 703)) | (1L << (TSQL - 703)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 703)) | (1L << (TYPE - 703)) | (1L << (TYPE_WARNING - 703)) | (1L << (UNBOUNDED - 703)) | (1L << (UNCOMMITTED - 703)) | (1L << (UNKNOWN - 703)) | (1L << (UNLIMITED - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (USING - 767)) | (1L << (VALID_XML - 767)) | (1L << (VALIDATION - 767)) | (1L << (VALUE - 767)) | (1L << (VAR - 767)) | (1L << (VARP - 767)) | (1L << (VIEW_METADATA - 767)) | (1L << (VIEWS - 767)) | (1L << (WAIT - 767)) | (1L << (WELL_FORMED_XML - 767)) | (1L << (WORK - 767)) | (1L << (WORKLOAD - 767)) | (1L << (XML - 767)) | (1L << (XMLNAMESPACES - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)) | (1L << (COMMA - 767)))) != 0) );
				}
				break;
			case ALL:
				{
				setState(2769);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2772);
			match(ON);
			setState(2782);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case START:
			case TARGET:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				setState(2776);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,214,_ctx) ) {
				case 1:
					{
					setState(2773);
					((Enable_triggerContext)_localctx).schema_id = id();
					setState(2774);
					match(DOT);
					}
					break;
				}
				setState(2778);
				((Enable_triggerContext)_localctx).object_name = id();
				}
				break;
			case DATABASE:
				{
				setState(2779);
				match(DATABASE);
				}
				break;
			case ALL:
				{
				setState(2780);
				match(ALL);
				setState(2781);
				match(SERVER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_tableContext extends ParserRuleContext {
		public Token seconds;
		public TerminalNode LOCK() { return getToken(TSqlParser.LOCK, 0); }
		public TerminalNode TABLE() { return getToken(TSqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(TSqlParser.IN, 0); }
		public TerminalNode MODE() { return getToken(TSqlParser.MODE, 0); }
		public TerminalNode SHARE() { return getToken(TSqlParser.SHARE, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(TSqlParser.EXCLUSIVE, 0); }
		public TerminalNode WAIT() { return getToken(TSqlParser.WAIT, 0); }
		public TerminalNode NOWAIT() { return getToken(TSqlParser.NOWAIT, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public Lock_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterLock_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitLock_table(this);
		}
	}

	public final Lock_tableContext lock_table() throws RecognitionException {
		Lock_tableContext _localctx = new Lock_tableContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_lock_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2784);
			match(LOCK);
			setState(2785);
			match(TABLE);
			setState(2786);
			table_name();
			setState(2787);
			match(IN);
			setState(2788);
			_la = _input.LA(1);
			if ( !(_la==EXCLUSIVE || _la==SHARE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2789);
			match(MODE);
			setState(2793);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,216,_ctx) ) {
			case 1:
				{
				setState(2790);
				match(WAIT);
				setState(2791);
				((Lock_tableContext)_localctx).seconds = match(DECIMAL);
				}
				break;
			case 2:
				{
				setState(2792);
				match(NOWAIT);
				}
				break;
			}
			setState(2796);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,217,_ctx) ) {
			case 1:
				{
				setState(2795);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Truncate_tableContext extends ParserRuleContext {
		public TerminalNode TRUNCATE() { return getToken(TSqlParser.TRUNCATE, 0); }
		public TerminalNode TABLE() { return getToken(TSqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public TerminalNode PARTITIONS() { return getToken(TSqlParser.PARTITIONS, 0); }
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public List<TerminalNode> TO() { return getTokens(TSqlParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(TSqlParser.TO, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Truncate_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncate_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTruncate_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTruncate_table(this);
		}
	}

	public final Truncate_tableContext truncate_table() throws RecognitionException {
		Truncate_tableContext _localctx = new Truncate_tableContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_truncate_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2798);
			match(TRUNCATE);
			setState(2799);
			match(TABLE);
			setState(2800);
			table_name();
			setState(2820);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,221,_ctx) ) {
			case 1:
				{
				setState(2801);
				match(WITH);
				setState(2802);
				match(LR_BRACKET);
				setState(2803);
				match(PARTITIONS);
				setState(2804);
				match(LR_BRACKET);
				setState(2814); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2806);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2805);
						match(COMMA);
						}
					}

					setState(2812);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,219,_ctx) ) {
					case 1:
						{
						setState(2808);
						match(DECIMAL);
						}
						break;
					case 2:
						{
						setState(2809);
						match(DECIMAL);
						setState(2810);
						match(TO);
						setState(2811);
						match(DECIMAL);
						}
						break;
					}
					}
					}
					setState(2816); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==DECIMAL || _la==COMMA );
				setState(2818);
				match(RR_BRACKET);
				setState(2819);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_column_master_keyContext extends ParserRuleContext {
		public IdContext key_name;
		public Token key_store_provider_name;
		public Token key_path;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode COLUMN() { return getToken(TSqlParser.COLUMN, 0); }
		public TerminalNode MASTER() { return getToken(TSqlParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode KEY_STORE_PROVIDER_NAME() { return getToken(TSqlParser.KEY_STORE_PROVIDER_NAME, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public TerminalNode KEY_PATH() { return getToken(TSqlParser.KEY_PATH, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public Create_column_master_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_column_master_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_column_master_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_column_master_key(this);
		}
	}

	public final Create_column_master_keyContext create_column_master_key() throws RecognitionException {
		Create_column_master_keyContext _localctx = new Create_column_master_keyContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_create_column_master_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2822);
			match(CREATE);
			setState(2823);
			match(COLUMN);
			setState(2824);
			match(MASTER);
			setState(2825);
			match(KEY);
			setState(2826);
			((Create_column_master_keyContext)_localctx).key_name = id();
			setState(2827);
			match(WITH);
			setState(2828);
			match(LR_BRACKET);
			setState(2829);
			match(KEY_STORE_PROVIDER_NAME);
			setState(2830);
			match(EQUAL);
			setState(2831);
			((Create_column_master_keyContext)_localctx).key_store_provider_name = match(STRING);
			setState(2832);
			match(COMMA);
			setState(2833);
			match(KEY_PATH);
			setState(2834);
			match(EQUAL);
			setState(2835);
			((Create_column_master_keyContext)_localctx).key_path = match(STRING);
			setState(2836);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_credentialContext extends ParserRuleContext {
		public IdContext credential_name;
		public Token identity_name;
		public Token secret;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode CREDENTIAL() { return getToken(TSqlParser.CREDENTIAL, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode IDENTITY() { return getToken(TSqlParser.IDENTITY, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public TerminalNode SECRET() { return getToken(TSqlParser.SECRET, 0); }
		public Alter_credentialContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_credential; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_credential(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_credential(this);
		}
	}

	public final Alter_credentialContext alter_credential() throws RecognitionException {
		Alter_credentialContext _localctx = new Alter_credentialContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_alter_credential);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2838);
			match(ALTER);
			setState(2839);
			match(CREDENTIAL);
			setState(2840);
			((Alter_credentialContext)_localctx).credential_name = id();
			setState(2841);
			match(WITH);
			setState(2842);
			match(IDENTITY);
			setState(2843);
			match(EQUAL);
			setState(2844);
			((Alter_credentialContext)_localctx).identity_name = match(STRING);
			setState(2849);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(2845);
				match(COMMA);
				setState(2846);
				match(SECRET);
				setState(2847);
				match(EQUAL);
				setState(2848);
				((Alter_credentialContext)_localctx).secret = match(STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_credentialContext extends ParserRuleContext {
		public IdContext credential_name;
		public Token identity_name;
		public Token secret;
		public IdContext cryptographic_provider_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode CREDENTIAL() { return getToken(TSqlParser.CREDENTIAL, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode IDENTITY() { return getToken(TSqlParser.IDENTITY, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public TerminalNode SECRET() { return getToken(TSqlParser.SECRET, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode CRYPTOGRAPHIC() { return getToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		public TerminalNode PROVIDER() { return getToken(TSqlParser.PROVIDER, 0); }
		public Create_credentialContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_credential; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_credential(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_credential(this);
		}
	}

	public final Create_credentialContext create_credential() throws RecognitionException {
		Create_credentialContext _localctx = new Create_credentialContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_create_credential);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2851);
			match(CREATE);
			setState(2852);
			match(CREDENTIAL);
			setState(2853);
			((Create_credentialContext)_localctx).credential_name = id();
			setState(2854);
			match(WITH);
			setState(2855);
			match(IDENTITY);
			setState(2856);
			match(EQUAL);
			setState(2857);
			((Create_credentialContext)_localctx).identity_name = match(STRING);
			setState(2862);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(2858);
				match(COMMA);
				setState(2859);
				match(SECRET);
				setState(2860);
				match(EQUAL);
				setState(2861);
				((Create_credentialContext)_localctx).secret = match(STRING);
				}
			}

			setState(2868);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(2864);
				match(FOR);
				setState(2865);
				match(CRYPTOGRAPHIC);
				setState(2866);
				match(PROVIDER);
				setState(2867);
				((Create_credentialContext)_localctx).cryptographic_provider_name = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_cryptographic_providerContext extends ParserRuleContext {
		public IdContext provider_name;
		public Token crypto_provider_ddl_file;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode CRYPTOGRAPHIC() { return getToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		public TerminalNode PROVIDER() { return getToken(TSqlParser.PROVIDER, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public TerminalNode FILE() { return getToken(TSqlParser.FILE, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode ENABLE() { return getToken(TSqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(TSqlParser.DISABLE, 0); }
		public Alter_cryptographic_providerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_cryptographic_provider; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_cryptographic_provider(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_cryptographic_provider(this);
		}
	}

	public final Alter_cryptographic_providerContext alter_cryptographic_provider() throws RecognitionException {
		Alter_cryptographic_providerContext _localctx = new Alter_cryptographic_providerContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_alter_cryptographic_provider);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2870);
			match(ALTER);
			setState(2871);
			match(CRYPTOGRAPHIC);
			setState(2872);
			match(PROVIDER);
			setState(2873);
			((Alter_cryptographic_providerContext)_localctx).provider_name = id();
			setState(2878);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(2874);
				match(FROM);
				setState(2875);
				match(FILE);
				setState(2876);
				match(EQUAL);
				setState(2877);
				((Alter_cryptographic_providerContext)_localctx).crypto_provider_ddl_file = match(STRING);
				}
			}

			setState(2881);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,226,_ctx) ) {
			case 1:
				{
				setState(2880);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_cryptographic_providerContext extends ParserRuleContext {
		public IdContext provider_name;
		public Token path_of_DLL;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode CRYPTOGRAPHIC() { return getToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		public TerminalNode PROVIDER() { return getToken(TSqlParser.PROVIDER, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public TerminalNode FILE() { return getToken(TSqlParser.FILE, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Create_cryptographic_providerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_cryptographic_provider; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_cryptographic_provider(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_cryptographic_provider(this);
		}
	}

	public final Create_cryptographic_providerContext create_cryptographic_provider() throws RecognitionException {
		Create_cryptographic_providerContext _localctx = new Create_cryptographic_providerContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_create_cryptographic_provider);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2883);
			match(CREATE);
			setState(2884);
			match(CRYPTOGRAPHIC);
			setState(2885);
			match(PROVIDER);
			setState(2886);
			((Create_cryptographic_providerContext)_localctx).provider_name = id();
			setState(2887);
			match(FROM);
			setState(2888);
			match(FILE);
			setState(2889);
			match(EQUAL);
			setState(2890);
			((Create_cryptographic_providerContext)_localctx).path_of_DLL = match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_event_notificationContext extends ParserRuleContext {
		public IdContext event_notification_name;
		public IdContext queue_name;
		public IdContext event_type_or_group;
		public Token broker_service;
		public Token broker_service_specifier_or_current_database;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode EVENT() { return getToken(TSqlParser.EVENT, 0); }
		public TerminalNode NOTIFICATION() { return getToken(TSqlParser.NOTIFICATION, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode TO() { return getToken(TSqlParser.TO, 0); }
		public TerminalNode SERVICE() { return getToken(TSqlParser.SERVICE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode QUEUE() { return getToken(TSqlParser.QUEUE, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode FAN_IN() { return getToken(TSqlParser.FAN_IN, 0); }
		public Create_event_notificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_event_notification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_event_notification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_event_notification(this);
		}
	}

	public final Create_event_notificationContext create_event_notification() throws RecognitionException {
		Create_event_notificationContext _localctx = new Create_event_notificationContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_create_event_notification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2892);
			match(CREATE);
			setState(2893);
			match(EVENT);
			setState(2894);
			match(NOTIFICATION);
			setState(2895);
			((Create_event_notificationContext)_localctx).event_notification_name = id();
			setState(2896);
			match(ON);
			setState(2901);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SERVER:
				{
				setState(2897);
				match(SERVER);
				}
				break;
			case DATABASE:
				{
				setState(2898);
				match(DATABASE);
				}
				break;
			case QUEUE:
				{
				setState(2899);
				match(QUEUE);
				setState(2900);
				((Create_event_notificationContext)_localctx).queue_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2905);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2903);
				match(WITH);
				setState(2904);
				match(FAN_IN);
				}
			}

			setState(2907);
			match(FOR);
			setState(2912); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2909);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2908);
					match(COMMA);
					}
				}

				setState(2911);
				((Create_event_notificationContext)_localctx).event_type_or_group = id();
				}
				}
				setState(2914); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (EVENTDATA - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & ((1L << (INIT - 158)) | (1L << (KEY - 158)) | (1L << (MASTER - 158)) | (1L << (MAX_MEMORY - 158)))) != 0) || ((((_la - 225)) & ~0x3f) == 0 && ((1L << (_la - 225)) & ((1L << (OFFSETS - 225)) | (1L << (PAGE - 225)) | (1L << (PUBLIC - 225)) | (1L << (R - 225)) | (1L << (RAW - 225)) | (1L << (RETURN - 225)) | (1L << (RETURNS - 225)) | (1L << (ROWCOUNT - 225)))) != 0) || ((((_la - 295)) & ~0x3f) == 0 && ((1L << (_la - 295)) & ((1L << (SAFETY - 295)) | (1L << (SERVER - 295)) | (1L << (SID - 295)) | (1L << (SOURCE - 295)) | (1L << (STATE - 295)) | (1L << (START - 295)) | (1L << (TARGET - 295)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (ABSOLUTE - 383)) | (1L << (ACCENT_SENSITIVITY - 383)) | (1L << (ACTION - 383)) | (1L << (ACTIVATION - 383)) | (1L << (ACTIVE - 383)) | (1L << (ADDRESS - 383)) | (1L << (AES_128 - 383)) | (1L << (AES_192 - 383)) | (1L << (AES_256 - 383)) | (1L << (AFFINITY - 383)) | (1L << (AFTER - 383)) | (1L << (AGGREGATE - 383)) | (1L << (ALGORITHM - 383)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 383)) | (1L << (ALLOWED - 383)) | (1L << (ANSI_NULL_DEFAULT - 383)) | (1L << (ANSI_NULLS - 383)) | (1L << (ANSI_PADDING - 383)) | (1L << (ANSI_WARNINGS - 383)) | (1L << (APPLICATION_LOG - 383)) | (1L << (APPLY - 383)) | (1L << (ARITHABORT - 383)) | (1L << (ASSEMBLY - 383)) | (1L << (AUDIT - 383)) | (1L << (AUDIT_GUID - 383)) | (1L << (AUTO - 383)) | (1L << (AUTO_CLEANUP - 383)) | (1L << (AUTO_CLOSE - 383)) | (1L << (AUTO_CREATE_STATISTICS - 383)) | (1L << (AUTO_SHRINK - 383)) | (1L << (AUTO_UPDATE_STATISTICS - 383)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 383)) | (1L << (AVAILABILITY - 383)) | (1L << (AVG - 383)) | (1L << (BACKUP_PRIORITY - 383)) | (1L << (BEGIN_DIALOG - 383)) | (1L << (BIGINT - 383)) | (1L << (BINARY_BASE64 - 383)) | (1L << (BINARY_CHECKSUM - 383)) | (1L << (BINDING - 383)) | (1L << (BLOB_STORAGE - 383)) | (1L << (BROKER - 383)) | (1L << (BROKER_INSTANCE - 383)) | (1L << (BULK_LOGGED - 383)) | (1L << (CALLER - 383)) | (1L << (CAP_CPU_PERCENT - 383)) | (1L << (CAST - 383)) | (1L << (CATALOG - 383)) | (1L << (CATCH - 383)) | (1L << (CHANGE_RETENTION - 383)) | (1L << (CHANGE_TRACKING - 383)) | (1L << (CHECKSUM - 383)) | (1L << (CHECKSUM_AGG - 383)) | (1L << (CLEANUP - 383)) | (1L << (COLLECTION - 383)) | (1L << (COLUMN_MASTER_KEY - 383)) | (1L << (COMMITTED - 383)) | (1L << (COMPATIBILITY_LEVEL - 383)) | (1L << (CONCAT - 383)) | (1L << (CONCAT_NULL_YIELDS_NULL - 383)) | (1L << (CONTENT - 383)) | (1L << (CONTROL - 383)) | (1L << (COOKIE - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (COUNT - 447)) | (1L << (COUNT_BIG - 447)) | (1L << (COUNTER - 447)) | (1L << (CPU - 447)) | (1L << (CREATE_NEW - 447)) | (1L << (CREATION_DISPOSITION - 447)) | (1L << (CREDENTIAL - 447)) | (1L << (CRYPTOGRAPHIC - 447)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 447)) | (1L << (CURSOR_DEFAULT - 447)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 447)) | (1L << (DATEADD - 447)) | (1L << (DATEDIFF - 447)) | (1L << (DATENAME - 447)) | (1L << (DATEPART - 447)) | (1L << (DAYS - 447)) | (1L << (DB_CHAINING - 447)) | (1L << (DB_FAILOVER - 447)) | (1L << (DECRYPTION - 447)) | (1L << (DEFAULT_DOUBLE_QUOTE - 447)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1L << (DEFAULT_LANGUAGE - 447)) | (1L << (DELAY - 447)) | (1L << (DELAYED_DURABILITY - 447)) | (1L << (DELETED - 447)) | (1L << (DENSE_RANK - 447)) | (1L << (DEPENDENTS - 447)) | (1L << (DES - 447)) | (1L << (DESCRIPTION - 447)) | (1L << (DESX - 447)) | (1L << (DHCP - 447)) | (1L << (DIALOG - 447)) | (1L << (DIRECTORY_NAME - 447)) | (1L << (DISABLE - 447)) | (1L << (DISABLE_BROKER - 447)) | (1L << (DISABLED - 447)) | (1L << (DISK_DRIVE - 447)) | (1L << (DOCUMENT - 447)) | (1L << (DYNAMIC - 447)) | (1L << (EMERGENCY - 447)) | (1L << (EMPTY - 447)) | (1L << (ENABLE - 447)) | (1L << (ENABLE_BROKER - 447)) | (1L << (ENCRYPTED_VALUE - 447)) | (1L << (ENCRYPTION - 447)) | (1L << (ENDPOINT_URL - 447)) | (1L << (ERROR_BROKER_CONVERSATIONS - 447)) | (1L << (EXCLUSIVE - 447)) | (1L << (EXECUTABLE - 447)) | (1L << (EXIST - 447)) | (1L << (EXPAND - 447)) | (1L << (EXPIRY_DATE - 447)) | (1L << (EXPLICIT - 447)) | (1L << (FAIL_OPERATION - 447)) | (1L << (FAILOVER_MODE - 447)) | (1L << (FAILURE - 447)) | (1L << (FAILURE_CONDITION_LEVEL - 447)) | (1L << (FAST - 447)) | (1L << (FAST_FORWARD - 447)) | (1L << (FILEGROUP - 447)) | (1L << (FILEGROWTH - 447)) | (1L << (FILEPATH - 447)) | (1L << (FILESTREAM - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (FILTER - 511)) | (1L << (FIRST - 511)) | (1L << (FIRST_VALUE - 511)) | (1L << (FOLLOWING - 511)) | (1L << (FORCE - 511)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1L << (FORCED - 511)) | (1L << (FORMAT - 511)) | (1L << (FORWARD_ONLY - 511)) | (1L << (FULLSCAN - 511)) | (1L << (FULLTEXT - 511)) | (1L << (GB - 511)) | (1L << (GETDATE - 511)) | (1L << (GETUTCDATE - 511)) | (1L << (GLOBAL - 511)) | (1L << (GO - 511)) | (1L << (GROUP_MAX_REQUESTS - 511)) | (1L << (GROUPING - 511)) | (1L << (GROUPING_ID - 511)) | (1L << (HADR - 511)) | (1L << (HASH - 511)) | (1L << (HEALTH_CHECK_TIMEOUT - 511)) | (1L << (HIGH - 511)) | (1L << (HONOR_BROKER_PRIORITY - 511)) | (1L << (HOURS - 511)) | (1L << (IDENTITY_VALUE - 511)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1L << (IMMEDIATE - 511)) | (1L << (IMPERSONATE - 511)) | (1L << (IMPORTANCE - 511)) | (1L << (INCREMENTAL - 511)) | (1L << (INITIATOR - 511)) | (1L << (INPUT - 511)) | (1L << (INSENSITIVE - 511)) | (1L << (INSERTED - 511)) | (1L << (INT - 511)) | (1L << (IP - 511)) | (1L << (ISOLATION - 511)) | (1L << (KB - 511)) | (1L << (KEEP - 511)) | (1L << (KEEPFIXED - 511)) | (1L << (KEY_SOURCE - 511)) | (1L << (KEYS - 511)) | (1L << (KEYSET - 511)) | (1L << (LAG - 511)) | (1L << (LAST - 511)) | (1L << (LAST_VALUE - 511)) | (1L << (LEAD - 511)) | (1L << (LEVEL - 511)) | (1L << (LIST - 511)) | (1L << (LISTENER - 511)) | (1L << (LISTENER_URL - 511)) | (1L << (LOB_COMPACTION - 511)) | (1L << (LOCAL - 511)) | (1L << (LOCATION - 511)) | (1L << (LOCK - 511)) | (1L << (LOCK_ESCALATION - 511)) | (1L << (LOGIN - 511)) | (1L << (LOOP - 511)) | (1L << (LOW - 511)) | (1L << (MANUAL - 511)) | (1L << (MARK - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (MATERIALIZED - 575)) | (1L << (MAX - 575)) | (1L << (MAX_CPU_PERCENT - 575)) | (1L << (MAX_DOP - 575)) | (1L << (MAX_FILES - 575)) | (1L << (MAX_IOPS_PER_VOLUME - 575)) | (1L << (MAX_MEMORY_PERCENT - 575)) | (1L << (MAX_PROCESSES - 575)) | (1L << (MAX_QUEUE_READERS - 575)) | (1L << (MAX_ROLLOVER_FILES - 575)) | (1L << (MAXDOP - 575)) | (1L << (MAXRECURSION - 575)) | (1L << (MAXSIZE - 575)) | (1L << (MB - 575)) | (1L << (MEDIUM - 575)) | (1L << (MEMORY_OPTIMIZED_DATA - 575)) | (1L << (MESSAGE - 575)) | (1L << (MIN - 575)) | (1L << (MIN_ACTIVE_ROWVERSION - 575)) | (1L << (MIN_CPU_PERCENT - 575)) | (1L << (MIN_IOPS_PER_VOLUME - 575)) | (1L << (MIN_MEMORY_PERCENT - 575)) | (1L << (MINUTES - 575)) | (1L << (MIRROR_ADDRESS - 575)) | (1L << (MIXED_PAGE_ALLOCATION - 575)) | (1L << (MODE - 575)) | (1L << (MODIFY - 575)) | (1L << (MOVE - 575)) | (1L << (MULTI_USER - 575)) | (1L << (NAME - 575)) | (1L << (NESTED_TRIGGERS - 575)) | (1L << (NEW_ACCOUNT - 575)) | (1L << (NEW_BROKER - 575)) | (1L << (NEW_PASSWORD - 575)) | (1L << (NEXT - 575)) | (1L << (NO - 575)) | (1L << (NO_TRUNCATE - 575)) | (1L << (NO_WAIT - 575)) | (1L << (NOCOUNT - 575)) | (1L << (NODES - 575)) | (1L << (NOEXPAND - 575)) | (1L << (NON_TRANSACTED_ACCESS - 575)) | (1L << (NORECOMPUTE - 575)) | (1L << (NORECOVERY - 575)) | (1L << (NOWAIT - 575)) | (1L << (NTILE - 575)) | (1L << (NUMANODE - 575)) | (1L << (NUMBER - 575)) | (1L << (NUMERIC_ROUNDABORT - 575)) | (1L << (OBJECT - 575)) | (1L << (OFFLINE - 575)) | (1L << (OFFSET - 575)) | (1L << (OLD_ACCOUNT - 575)) | (1L << (ONLINE - 575)) | (1L << (ONLY - 575)) | (1L << (OPEN_EXISTING - 575)) | (1L << (OPTIMISTIC - 575)) | (1L << (OPTIMIZE - 575)) | (1L << (OUT - 575)) | (1L << (OUTPUT - 575)) | (1L << (OWNER - 575)) | (1L << (PAGE_VERIFY - 575)) | (1L << (PARAMETERIZATION - 575)) | (1L << (PARTITION - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (PARTITIONS - 639)) | (1L << (PARTNER - 639)) | (1L << (PATH - 639)) | (1L << (POISON_MESSAGE_HANDLING - 639)) | (1L << (POOL - 639)) | (1L << (PORT - 639)) | (1L << (PRECEDING - 639)) | (1L << (PRIMARY_ROLE - 639)) | (1L << (PRIOR - 639)) | (1L << (PRIORITY - 639)) | (1L << (PRIORITY_LEVEL - 639)) | (1L << (PRIVATE - 639)) | (1L << (PRIVATE_KEY - 639)) | (1L << (PRIVILEGES - 639)) | (1L << (PROCEDURE_NAME - 639)) | (1L << (PROPERTY - 639)) | (1L << (PROVIDER - 639)) | (1L << (PROVIDER_KEY_NAME - 639)) | (1L << (QUERY - 639)) | (1L << (QUEUE - 639)) | (1L << (QUEUE_DELAY - 639)) | (1L << (QUOTED_IDENTIFIER - 639)) | (1L << (RANGE - 639)) | (1L << (RANK - 639)) | (1L << (RC2 - 639)) | (1L << (RC4 - 639)) | (1L << (RC4_128 - 639)) | (1L << (READ_COMMITTED_SNAPSHOT - 639)) | (1L << (READ_ONLY - 639)) | (1L << (READ_ONLY_ROUTING_LIST - 639)) | (1L << (READ_WRITE - 639)) | (1L << (READONLY - 639)) | (1L << (REBUILD - 639)) | (1L << (RECEIVE - 639)) | (1L << (RECOMPILE - 639)) | (1L << (RECOVERY - 639)) | (1L << (RECURSIVE_TRIGGERS - 639)) | (1L << (RELATIVE - 639)) | (1L << (REMOTE - 639)) | (1L << (REMOTE_SERVICE_NAME - 639)) | (1L << (REMOVE - 639)) | (1L << (REORGANIZE - 639)) | (1L << (REPEATABLE - 639)) | (1L << (REPLICA - 639)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 639)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 639)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 639)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 639)) | (1L << (RESERVE_DISK_SPACE - 639)) | (1L << (RESOURCE - 639)) | (1L << (RESOURCE_MANAGER_LOCATION - 639)) | (1L << (RESTRICTED_USER - 639)) | (1L << (RETENTION - 639)) | (1L << (ROBUST - 639)) | (1L << (ROOT - 639)) | (1L << (ROUTE - 639)) | (1L << (ROW - 639)) | (1L << (ROW_NUMBER - 639)) | (1L << (ROWGUID - 639)) | (1L << (ROWS - 639)) | (1L << (SAMPLE - 639)) | (1L << (SCHEMABINDING - 639)) | (1L << (SCOPED - 639)) | (1L << (SCROLL - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (SCROLL_LOCKS - 703)) | (1L << (SEARCH - 703)) | (1L << (SECONDARY - 703)) | (1L << (SECONDARY_ONLY - 703)) | (1L << (SECONDARY_ROLE - 703)) | (1L << (SECONDS - 703)) | (1L << (SECRET - 703)) | (1L << (SECURITY_LOG - 703)) | (1L << (SEEDING_MODE - 703)) | (1L << (SELF - 703)) | (1L << (SEMI_SENSITIVE - 703)) | (1L << (SEND - 703)) | (1L << (SENT - 703)) | (1L << (SERIALIZABLE - 703)) | (1L << (SESSION_TIMEOUT - 703)) | (1L << (SETERROR - 703)) | (1L << (SHARE - 703)) | (1L << (SHOWPLAN - 703)) | (1L << (SIGNATURE - 703)) | (1L << (SIMPLE - 703)) | (1L << (SINGLE_USER - 703)) | (1L << (SIZE - 703)) | (1L << (SMALLINT - 703)) | (1L << (SNAPSHOT - 703)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 703)) | (1L << (STANDBY - 703)) | (1L << (START_DATE - 703)) | (1L << (STATIC - 703)) | (1L << (STATS_STREAM - 703)) | (1L << (STATUS - 703)) | (1L << (STDEV - 703)) | (1L << (STDEVP - 703)) | (1L << (STOPLIST - 703)) | (1L << (STUFF - 703)) | (1L << (SUBJECT - 703)) | (1L << (SUM - 703)) | (1L << (SUSPEND - 703)) | (1L << (SYMMETRIC - 703)) | (1L << (SYNCHRONOUS_COMMIT - 703)) | (1L << (SYNONYM - 703)) | (1L << (TAKE - 703)) | (1L << (TARGET_RECOVERY_TIME - 703)) | (1L << (TB - 703)) | (1L << (TEXTIMAGE_ON - 703)) | (1L << (THROW - 703)) | (1L << (TIES - 703)) | (1L << (TIME - 703)) | (1L << (TIMEOUT - 703)) | (1L << (TIMER - 703)) | (1L << (TINYINT - 703)) | (1L << (TORN_PAGE_DETECTION - 703)) | (1L << (TRANSFORM_NOISE_WORDS - 703)) | (1L << (TRIPLE_DES - 703)) | (1L << (TRIPLE_DES_3KEY - 703)) | (1L << (TRUSTWORTHY - 703)) | (1L << (TRY - 703)) | (1L << (TSQL - 703)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 703)) | (1L << (TYPE - 703)) | (1L << (TYPE_WARNING - 703)) | (1L << (UNBOUNDED - 703)) | (1L << (UNCOMMITTED - 703)) | (1L << (UNKNOWN - 703)) | (1L << (UNLIMITED - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (USING - 767)) | (1L << (VALID_XML - 767)) | (1L << (VALIDATION - 767)) | (1L << (VALUE - 767)) | (1L << (VAR - 767)) | (1L << (VARP - 767)) | (1L << (VIEW_METADATA - 767)) | (1L << (VIEWS - 767)) | (1L << (WAIT - 767)) | (1L << (WELL_FORMED_XML - 767)) | (1L << (WORK - 767)) | (1L << (WORKLOAD - 767)) | (1L << (XML - 767)) | (1L << (XMLNAMESPACES - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)) | (1L << (COMMA - 767)))) != 0) );
			setState(2916);
			match(TO);
			setState(2917);
			match(SERVICE);
			setState(2918);
			((Create_event_notificationContext)_localctx).broker_service = match(STRING);
			setState(2919);
			match(COMMA);
			setState(2920);
			((Create_event_notificationContext)_localctx).broker_service_specifier_or_current_database = match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_alter_event_sessionContext extends ParserRuleContext {
		public IdContext event_session_name;
		public IdContext event_module_guid;
		public IdContext event_package_name;
		public IdContext event_name;
		public IdContext event_customizable_attributue;
		public IdContext action_name;
		public IdContext target_name;
		public IdContext target_parameter_name;
		public Token max_memory;
		public Token max_dispatch_latency_seconds;
		public Token max_event_size;
		public List<TerminalNode> EVENT() { return getTokens(TSqlParser.EVENT); }
		public TerminalNode EVENT(int i) {
			return getToken(TSqlParser.EVENT, i);
		}
		public TerminalNode SESSION() { return getToken(TSqlParser.SESSION, 0); }
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> ADD() { return getTokens(TSqlParser.ADD); }
		public TerminalNode ADD(int i) {
			return getToken(TSqlParser.ADD, i);
		}
		public List<TerminalNode> DROP() { return getTokens(TSqlParser.DROP); }
		public TerminalNode DROP(int i) {
			return getToken(TSqlParser.DROP, i);
		}
		public List<TerminalNode> DOT() { return getTokens(TSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSqlParser.DOT, i);
		}
		public List<TerminalNode> TARGET() { return getTokens(TSqlParser.TARGET); }
		public TerminalNode TARGET(int i) {
			return getToken(TSqlParser.TARGET, i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public TerminalNode STATE() { return getToken(TSqlParser.STATE, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode START() { return getToken(TSqlParser.START, 0); }
		public TerminalNode STOP() { return getToken(TSqlParser.STOP, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<TerminalNode> SET() { return getTokens(TSqlParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(TSqlParser.SET, i);
		}
		public TerminalNode MAX_MEMORY() { return getToken(TSqlParser.MAX_MEMORY, 0); }
		public TerminalNode EVENT_RETENTION_MODE() { return getToken(TSqlParser.EVENT_RETENTION_MODE, 0); }
		public TerminalNode MAX_DISPATCH_LATENCY() { return getToken(TSqlParser.MAX_DISPATCH_LATENCY, 0); }
		public TerminalNode MAX_EVENT_SIZE() { return getToken(TSqlParser.MAX_EVENT_SIZE, 0); }
		public TerminalNode MEMORY_PARTITION_MODE() { return getToken(TSqlParser.MEMORY_PARTITION_MODE, 0); }
		public TerminalNode TRACK_CAUSALITY() { return getToken(TSqlParser.TRACK_CAUSALITY, 0); }
		public TerminalNode STARTUP_STATE() { return getToken(TSqlParser.STARTUP_STATE, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public List<TerminalNode> KB() { return getTokens(TSqlParser.KB); }
		public TerminalNode KB(int i) {
			return getToken(TSqlParser.KB, i);
		}
		public List<TerminalNode> MB() { return getTokens(TSqlParser.MB); }
		public TerminalNode MB(int i) {
			return getToken(TSqlParser.MB, i);
		}
		public TerminalNode ALLOW_SINGLE_EVENT_LOSS() { return getToken(TSqlParser.ALLOW_SINGLE_EVENT_LOSS, 0); }
		public TerminalNode ALLOW_MULTIPLE_EVENT_LOSS() { return getToken(TSqlParser.ALLOW_MULTIPLE_EVENT_LOSS, 0); }
		public TerminalNode NO_EVENT_LOSS() { return getToken(TSqlParser.NO_EVENT_LOSS, 0); }
		public TerminalNode NONE() { return getToken(TSqlParser.NONE, 0); }
		public TerminalNode PER_NODE() { return getToken(TSqlParser.PER_NODE, 0); }
		public TerminalNode PER_CPU() { return getToken(TSqlParser.PER_CPU, 0); }
		public List<TerminalNode> OFF() { return getTokens(TSqlParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(TSqlParser.OFF, i);
		}
		public TerminalNode SECONDS() { return getToken(TSqlParser.SECONDS, 0); }
		public TerminalNode INFINITE() { return getToken(TSqlParser.INFINITE, 0); }
		public List<TerminalNode> ACTION() { return getTokens(TSqlParser.ACTION); }
		public TerminalNode ACTION(int i) {
			return getToken(TSqlParser.ACTION, i);
		}
		public List<TerminalNode> WHERE() { return getTokens(TSqlParser.WHERE); }
		public TerminalNode WHERE(int i) {
			return getToken(TSqlParser.WHERE, i);
		}
		public List<Event_session_predicate_expressionContext> event_session_predicate_expression() {
			return getRuleContexts(Event_session_predicate_expressionContext.class);
		}
		public Event_session_predicate_expressionContext event_session_predicate_expression(int i) {
			return getRuleContext(Event_session_predicate_expressionContext.class,i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public Create_or_alter_event_sessionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_alter_event_session; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_or_alter_event_session(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_or_alter_event_session(this);
		}
	}

	public final Create_or_alter_event_sessionContext create_or_alter_event_session() throws RecognitionException {
		Create_or_alter_event_sessionContext _localctx = new Create_or_alter_event_sessionContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_create_or_alter_event_session);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2922);
			_la = _input.LA(1);
			if ( !(_la==ALTER || _la==CREATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2923);
			match(EVENT);
			setState(2924);
			match(SESSION);
			setState(2925);
			((Create_or_alter_event_sessionContext)_localctx).event_session_name = id();
			setState(2926);
			match(ON);
			setState(2927);
			match(SERVER);
			setState(2995);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,242,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2929);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2928);
						match(COMMA);
						}
					}

					setState(2931);
					match(ADD);
					setState(2932);
					match(EVENT);
					{
					setState(2936);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,232,_ctx) ) {
					case 1:
						{
						setState(2933);
						((Create_or_alter_event_sessionContext)_localctx).event_module_guid = id();
						setState(2934);
						match(DOT);
						}
						break;
					}
					setState(2938);
					((Create_or_alter_event_sessionContext)_localctx).event_package_name = id();
					setState(2939);
					match(DOT);
					setState(2940);
					((Create_or_alter_event_sessionContext)_localctx).event_name = id();
					}
					setState(2990);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,241,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(2942);
							match(LR_BRACKET);
							setState(2956);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==SET) {
								{
								setState(2943);
								match(SET);
								setState(2953);
								_errHandler.sync(this);
								_alt = getInterpreter().adaptivePredict(_input,234,_ctx);
								while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
									if ( _alt==1 ) {
										{
										{
										setState(2945);
										_errHandler.sync(this);
										_la = _input.LA(1);
										if (_la==COMMA) {
											{
											setState(2944);
											match(COMMA);
											}
										}

										setState(2947);
										((Create_or_alter_event_sessionContext)_localctx).event_customizable_attributue = id();
										setState(2948);
										match(EQUAL);
										setState(2949);
										_la = _input.LA(1);
										if ( !(_la==DECIMAL || _la==STRING) ) {
										_errHandler.recoverInline(this);
										}
										else {
											if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
											_errHandler.reportMatch(this);
											consume();
										}
										}
										} 
									}
									setState(2955);
									_errHandler.sync(this);
									_alt = getInterpreter().adaptivePredict(_input,234,_ctx);
								}
								}
							}

							setState(2978); 
							_errHandler.sync(this);
							_la = _input.LA(1);
							do {
								{
								{
								setState(2958);
								match(ACTION);
								setState(2959);
								match(LR_BRACKET);
								setState(2972); 
								_errHandler.sync(this);
								_la = _input.LA(1);
								do {
									{
									{
									setState(2961);
									_errHandler.sync(this);
									_la = _input.LA(1);
									if (_la==COMMA) {
										{
										setState(2960);
										match(COMMA);
										}
									}

									setState(2966);
									_errHandler.sync(this);
									switch ( getInterpreter().adaptivePredict(_input,237,_ctx) ) {
									case 1:
										{
										setState(2963);
										((Create_or_alter_event_sessionContext)_localctx).event_module_guid = id();
										setState(2964);
										match(DOT);
										}
										break;
									}
									setState(2968);
									((Create_or_alter_event_sessionContext)_localctx).event_package_name = id();
									setState(2969);
									match(DOT);
									setState(2970);
									((Create_or_alter_event_sessionContext)_localctx).action_name = id();
									}
									}
									setState(2974); 
									_errHandler.sync(this);
									_la = _input.LA(1);
								} while ( _la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (EVENTDATA - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & ((1L << (INIT - 158)) | (1L << (KEY - 158)) | (1L << (MASTER - 158)) | (1L << (MAX_MEMORY - 158)))) != 0) || ((((_la - 225)) & ~0x3f) == 0 && ((1L << (_la - 225)) & ((1L << (OFFSETS - 225)) | (1L << (PAGE - 225)) | (1L << (PUBLIC - 225)) | (1L << (R - 225)) | (1L << (RAW - 225)) | (1L << (RETURN - 225)) | (1L << (RETURNS - 225)) | (1L << (ROWCOUNT - 225)))) != 0) || ((((_la - 295)) & ~0x3f) == 0 && ((1L << (_la - 295)) & ((1L << (SAFETY - 295)) | (1L << (SERVER - 295)) | (1L << (SID - 295)) | (1L << (SOURCE - 295)) | (1L << (STATE - 295)) | (1L << (START - 295)) | (1L << (TARGET - 295)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (ABSOLUTE - 383)) | (1L << (ACCENT_SENSITIVITY - 383)) | (1L << (ACTION - 383)) | (1L << (ACTIVATION - 383)) | (1L << (ACTIVE - 383)) | (1L << (ADDRESS - 383)) | (1L << (AES_128 - 383)) | (1L << (AES_192 - 383)) | (1L << (AES_256 - 383)) | (1L << (AFFINITY - 383)) | (1L << (AFTER - 383)) | (1L << (AGGREGATE - 383)) | (1L << (ALGORITHM - 383)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 383)) | (1L << (ALLOWED - 383)) | (1L << (ANSI_NULL_DEFAULT - 383)) | (1L << (ANSI_NULLS - 383)) | (1L << (ANSI_PADDING - 383)) | (1L << (ANSI_WARNINGS - 383)) | (1L << (APPLICATION_LOG - 383)) | (1L << (APPLY - 383)) | (1L << (ARITHABORT - 383)) | (1L << (ASSEMBLY - 383)) | (1L << (AUDIT - 383)) | (1L << (AUDIT_GUID - 383)) | (1L << (AUTO - 383)) | (1L << (AUTO_CLEANUP - 383)) | (1L << (AUTO_CLOSE - 383)) | (1L << (AUTO_CREATE_STATISTICS - 383)) | (1L << (AUTO_SHRINK - 383)) | (1L << (AUTO_UPDATE_STATISTICS - 383)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 383)) | (1L << (AVAILABILITY - 383)) | (1L << (AVG - 383)) | (1L << (BACKUP_PRIORITY - 383)) | (1L << (BEGIN_DIALOG - 383)) | (1L << (BIGINT - 383)) | (1L << (BINARY_BASE64 - 383)) | (1L << (BINARY_CHECKSUM - 383)) | (1L << (BINDING - 383)) | (1L << (BLOB_STORAGE - 383)) | (1L << (BROKER - 383)) | (1L << (BROKER_INSTANCE - 383)) | (1L << (BULK_LOGGED - 383)) | (1L << (CALLER - 383)) | (1L << (CAP_CPU_PERCENT - 383)) | (1L << (CAST - 383)) | (1L << (CATALOG - 383)) | (1L << (CATCH - 383)) | (1L << (CHANGE_RETENTION - 383)) | (1L << (CHANGE_TRACKING - 383)) | (1L << (CHECKSUM - 383)) | (1L << (CHECKSUM_AGG - 383)) | (1L << (CLEANUP - 383)) | (1L << (COLLECTION - 383)) | (1L << (COLUMN_MASTER_KEY - 383)) | (1L << (COMMITTED - 383)) | (1L << (COMPATIBILITY_LEVEL - 383)) | (1L << (CONCAT - 383)) | (1L << (CONCAT_NULL_YIELDS_NULL - 383)) | (1L << (CONTENT - 383)) | (1L << (CONTROL - 383)) | (1L << (COOKIE - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (COUNT - 447)) | (1L << (COUNT_BIG - 447)) | (1L << (COUNTER - 447)) | (1L << (CPU - 447)) | (1L << (CREATE_NEW - 447)) | (1L << (CREATION_DISPOSITION - 447)) | (1L << (CREDENTIAL - 447)) | (1L << (CRYPTOGRAPHIC - 447)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 447)) | (1L << (CURSOR_DEFAULT - 447)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 447)) | (1L << (DATEADD - 447)) | (1L << (DATEDIFF - 447)) | (1L << (DATENAME - 447)) | (1L << (DATEPART - 447)) | (1L << (DAYS - 447)) | (1L << (DB_CHAINING - 447)) | (1L << (DB_FAILOVER - 447)) | (1L << (DECRYPTION - 447)) | (1L << (DEFAULT_DOUBLE_QUOTE - 447)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1L << (DEFAULT_LANGUAGE - 447)) | (1L << (DELAY - 447)) | (1L << (DELAYED_DURABILITY - 447)) | (1L << (DELETED - 447)) | (1L << (DENSE_RANK - 447)) | (1L << (DEPENDENTS - 447)) | (1L << (DES - 447)) | (1L << (DESCRIPTION - 447)) | (1L << (DESX - 447)) | (1L << (DHCP - 447)) | (1L << (DIALOG - 447)) | (1L << (DIRECTORY_NAME - 447)) | (1L << (DISABLE - 447)) | (1L << (DISABLE_BROKER - 447)) | (1L << (DISABLED - 447)) | (1L << (DISK_DRIVE - 447)) | (1L << (DOCUMENT - 447)) | (1L << (DYNAMIC - 447)) | (1L << (EMERGENCY - 447)) | (1L << (EMPTY - 447)) | (1L << (ENABLE - 447)) | (1L << (ENABLE_BROKER - 447)) | (1L << (ENCRYPTED_VALUE - 447)) | (1L << (ENCRYPTION - 447)) | (1L << (ENDPOINT_URL - 447)) | (1L << (ERROR_BROKER_CONVERSATIONS - 447)) | (1L << (EXCLUSIVE - 447)) | (1L << (EXECUTABLE - 447)) | (1L << (EXIST - 447)) | (1L << (EXPAND - 447)) | (1L << (EXPIRY_DATE - 447)) | (1L << (EXPLICIT - 447)) | (1L << (FAIL_OPERATION - 447)) | (1L << (FAILOVER_MODE - 447)) | (1L << (FAILURE - 447)) | (1L << (FAILURE_CONDITION_LEVEL - 447)) | (1L << (FAST - 447)) | (1L << (FAST_FORWARD - 447)) | (1L << (FILEGROUP - 447)) | (1L << (FILEGROWTH - 447)) | (1L << (FILEPATH - 447)) | (1L << (FILESTREAM - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (FILTER - 511)) | (1L << (FIRST - 511)) | (1L << (FIRST_VALUE - 511)) | (1L << (FOLLOWING - 511)) | (1L << (FORCE - 511)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1L << (FORCED - 511)) | (1L << (FORMAT - 511)) | (1L << (FORWARD_ONLY - 511)) | (1L << (FULLSCAN - 511)) | (1L << (FULLTEXT - 511)) | (1L << (GB - 511)) | (1L << (GETDATE - 511)) | (1L << (GETUTCDATE - 511)) | (1L << (GLOBAL - 511)) | (1L << (GO - 511)) | (1L << (GROUP_MAX_REQUESTS - 511)) | (1L << (GROUPING - 511)) | (1L << (GROUPING_ID - 511)) | (1L << (HADR - 511)) | (1L << (HASH - 511)) | (1L << (HEALTH_CHECK_TIMEOUT - 511)) | (1L << (HIGH - 511)) | (1L << (HONOR_BROKER_PRIORITY - 511)) | (1L << (HOURS - 511)) | (1L << (IDENTITY_VALUE - 511)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1L << (IMMEDIATE - 511)) | (1L << (IMPERSONATE - 511)) | (1L << (IMPORTANCE - 511)) | (1L << (INCREMENTAL - 511)) | (1L << (INITIATOR - 511)) | (1L << (INPUT - 511)) | (1L << (INSENSITIVE - 511)) | (1L << (INSERTED - 511)) | (1L << (INT - 511)) | (1L << (IP - 511)) | (1L << (ISOLATION - 511)) | (1L << (KB - 511)) | (1L << (KEEP - 511)) | (1L << (KEEPFIXED - 511)) | (1L << (KEY_SOURCE - 511)) | (1L << (KEYS - 511)) | (1L << (KEYSET - 511)) | (1L << (LAG - 511)) | (1L << (LAST - 511)) | (1L << (LAST_VALUE - 511)) | (1L << (LEAD - 511)) | (1L << (LEVEL - 511)) | (1L << (LIST - 511)) | (1L << (LISTENER - 511)) | (1L << (LISTENER_URL - 511)) | (1L << (LOB_COMPACTION - 511)) | (1L << (LOCAL - 511)) | (1L << (LOCATION - 511)) | (1L << (LOCK - 511)) | (1L << (LOCK_ESCALATION - 511)) | (1L << (LOGIN - 511)) | (1L << (LOOP - 511)) | (1L << (LOW - 511)) | (1L << (MANUAL - 511)) | (1L << (MARK - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (MATERIALIZED - 575)) | (1L << (MAX - 575)) | (1L << (MAX_CPU_PERCENT - 575)) | (1L << (MAX_DOP - 575)) | (1L << (MAX_FILES - 575)) | (1L << (MAX_IOPS_PER_VOLUME - 575)) | (1L << (MAX_MEMORY_PERCENT - 575)) | (1L << (MAX_PROCESSES - 575)) | (1L << (MAX_QUEUE_READERS - 575)) | (1L << (MAX_ROLLOVER_FILES - 575)) | (1L << (MAXDOP - 575)) | (1L << (MAXRECURSION - 575)) | (1L << (MAXSIZE - 575)) | (1L << (MB - 575)) | (1L << (MEDIUM - 575)) | (1L << (MEMORY_OPTIMIZED_DATA - 575)) | (1L << (MESSAGE - 575)) | (1L << (MIN - 575)) | (1L << (MIN_ACTIVE_ROWVERSION - 575)) | (1L << (MIN_CPU_PERCENT - 575)) | (1L << (MIN_IOPS_PER_VOLUME - 575)) | (1L << (MIN_MEMORY_PERCENT - 575)) | (1L << (MINUTES - 575)) | (1L << (MIRROR_ADDRESS - 575)) | (1L << (MIXED_PAGE_ALLOCATION - 575)) | (1L << (MODE - 575)) | (1L << (MODIFY - 575)) | (1L << (MOVE - 575)) | (1L << (MULTI_USER - 575)) | (1L << (NAME - 575)) | (1L << (NESTED_TRIGGERS - 575)) | (1L << (NEW_ACCOUNT - 575)) | (1L << (NEW_BROKER - 575)) | (1L << (NEW_PASSWORD - 575)) | (1L << (NEXT - 575)) | (1L << (NO - 575)) | (1L << (NO_TRUNCATE - 575)) | (1L << (NO_WAIT - 575)) | (1L << (NOCOUNT - 575)) | (1L << (NODES - 575)) | (1L << (NOEXPAND - 575)) | (1L << (NON_TRANSACTED_ACCESS - 575)) | (1L << (NORECOMPUTE - 575)) | (1L << (NORECOVERY - 575)) | (1L << (NOWAIT - 575)) | (1L << (NTILE - 575)) | (1L << (NUMANODE - 575)) | (1L << (NUMBER - 575)) | (1L << (NUMERIC_ROUNDABORT - 575)) | (1L << (OBJECT - 575)) | (1L << (OFFLINE - 575)) | (1L << (OFFSET - 575)) | (1L << (OLD_ACCOUNT - 575)) | (1L << (ONLINE - 575)) | (1L << (ONLY - 575)) | (1L << (OPEN_EXISTING - 575)) | (1L << (OPTIMISTIC - 575)) | (1L << (OPTIMIZE - 575)) | (1L << (OUT - 575)) | (1L << (OUTPUT - 575)) | (1L << (OWNER - 575)) | (1L << (PAGE_VERIFY - 575)) | (1L << (PARAMETERIZATION - 575)) | (1L << (PARTITION - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (PARTITIONS - 639)) | (1L << (PARTNER - 639)) | (1L << (PATH - 639)) | (1L << (POISON_MESSAGE_HANDLING - 639)) | (1L << (POOL - 639)) | (1L << (PORT - 639)) | (1L << (PRECEDING - 639)) | (1L << (PRIMARY_ROLE - 639)) | (1L << (PRIOR - 639)) | (1L << (PRIORITY - 639)) | (1L << (PRIORITY_LEVEL - 639)) | (1L << (PRIVATE - 639)) | (1L << (PRIVATE_KEY - 639)) | (1L << (PRIVILEGES - 639)) | (1L << (PROCEDURE_NAME - 639)) | (1L << (PROPERTY - 639)) | (1L << (PROVIDER - 639)) | (1L << (PROVIDER_KEY_NAME - 639)) | (1L << (QUERY - 639)) | (1L << (QUEUE - 639)) | (1L << (QUEUE_DELAY - 639)) | (1L << (QUOTED_IDENTIFIER - 639)) | (1L << (RANGE - 639)) | (1L << (RANK - 639)) | (1L << (RC2 - 639)) | (1L << (RC4 - 639)) | (1L << (RC4_128 - 639)) | (1L << (READ_COMMITTED_SNAPSHOT - 639)) | (1L << (READ_ONLY - 639)) | (1L << (READ_ONLY_ROUTING_LIST - 639)) | (1L << (READ_WRITE - 639)) | (1L << (READONLY - 639)) | (1L << (REBUILD - 639)) | (1L << (RECEIVE - 639)) | (1L << (RECOMPILE - 639)) | (1L << (RECOVERY - 639)) | (1L << (RECURSIVE_TRIGGERS - 639)) | (1L << (RELATIVE - 639)) | (1L << (REMOTE - 639)) | (1L << (REMOTE_SERVICE_NAME - 639)) | (1L << (REMOVE - 639)) | (1L << (REORGANIZE - 639)) | (1L << (REPEATABLE - 639)) | (1L << (REPLICA - 639)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 639)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 639)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 639)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 639)) | (1L << (RESERVE_DISK_SPACE - 639)) | (1L << (RESOURCE - 639)) | (1L << (RESOURCE_MANAGER_LOCATION - 639)) | (1L << (RESTRICTED_USER - 639)) | (1L << (RETENTION - 639)) | (1L << (ROBUST - 639)) | (1L << (ROOT - 639)) | (1L << (ROUTE - 639)) | (1L << (ROW - 639)) | (1L << (ROW_NUMBER - 639)) | (1L << (ROWGUID - 639)) | (1L << (ROWS - 639)) | (1L << (SAMPLE - 639)) | (1L << (SCHEMABINDING - 639)) | (1L << (SCOPED - 639)) | (1L << (SCROLL - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (SCROLL_LOCKS - 703)) | (1L << (SEARCH - 703)) | (1L << (SECONDARY - 703)) | (1L << (SECONDARY_ONLY - 703)) | (1L << (SECONDARY_ROLE - 703)) | (1L << (SECONDS - 703)) | (1L << (SECRET - 703)) | (1L << (SECURITY_LOG - 703)) | (1L << (SEEDING_MODE - 703)) | (1L << (SELF - 703)) | (1L << (SEMI_SENSITIVE - 703)) | (1L << (SEND - 703)) | (1L << (SENT - 703)) | (1L << (SERIALIZABLE - 703)) | (1L << (SESSION_TIMEOUT - 703)) | (1L << (SETERROR - 703)) | (1L << (SHARE - 703)) | (1L << (SHOWPLAN - 703)) | (1L << (SIGNATURE - 703)) | (1L << (SIMPLE - 703)) | (1L << (SINGLE_USER - 703)) | (1L << (SIZE - 703)) | (1L << (SMALLINT - 703)) | (1L << (SNAPSHOT - 703)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 703)) | (1L << (STANDBY - 703)) | (1L << (START_DATE - 703)) | (1L << (STATIC - 703)) | (1L << (STATS_STREAM - 703)) | (1L << (STATUS - 703)) | (1L << (STDEV - 703)) | (1L << (STDEVP - 703)) | (1L << (STOPLIST - 703)) | (1L << (STUFF - 703)) | (1L << (SUBJECT - 703)) | (1L << (SUM - 703)) | (1L << (SUSPEND - 703)) | (1L << (SYMMETRIC - 703)) | (1L << (SYNCHRONOUS_COMMIT - 703)) | (1L << (SYNONYM - 703)) | (1L << (TAKE - 703)) | (1L << (TARGET_RECOVERY_TIME - 703)) | (1L << (TB - 703)) | (1L << (TEXTIMAGE_ON - 703)) | (1L << (THROW - 703)) | (1L << (TIES - 703)) | (1L << (TIME - 703)) | (1L << (TIMEOUT - 703)) | (1L << (TIMER - 703)) | (1L << (TINYINT - 703)) | (1L << (TORN_PAGE_DETECTION - 703)) | (1L << (TRANSFORM_NOISE_WORDS - 703)) | (1L << (TRIPLE_DES - 703)) | (1L << (TRIPLE_DES_3KEY - 703)) | (1L << (TRUSTWORTHY - 703)) | (1L << (TRY - 703)) | (1L << (TSQL - 703)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 703)) | (1L << (TYPE - 703)) | (1L << (TYPE_WARNING - 703)) | (1L << (UNBOUNDED - 703)) | (1L << (UNCOMMITTED - 703)) | (1L << (UNKNOWN - 703)) | (1L << (UNLIMITED - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (USING - 767)) | (1L << (VALID_XML - 767)) | (1L << (VALIDATION - 767)) | (1L << (VALUE - 767)) | (1L << (VAR - 767)) | (1L << (VARP - 767)) | (1L << (VIEW_METADATA - 767)) | (1L << (VIEWS - 767)) | (1L << (WAIT - 767)) | (1L << (WELL_FORMED_XML - 767)) | (1L << (WORK - 767)) | (1L << (WORKLOAD - 767)) | (1L << (XML - 767)) | (1L << (XMLNAMESPACES - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)) | (1L << (COMMA - 767)))) != 0) );
								setState(2976);
								match(RR_BRACKET);
								}
								}
								setState(2980); 
								_errHandler.sync(this);
								_la = _input.LA(1);
							} while ( _la==ACTION );
							setState(2984);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==WHERE) {
								{
								setState(2982);
								match(WHERE);
								setState(2983);
								event_session_predicate_expression();
								}
							}

							setState(2986);
							match(RR_BRACKET);
							}
							} 
						}
						setState(2992);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,241,_ctx);
					}
					}
					} 
				}
				setState(2997);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,242,_ctx);
			}
			setState(3014);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,245,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2999);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2998);
						match(COMMA);
						}
					}

					setState(3001);
					match(DROP);
					setState(3002);
					match(EVENT);
					setState(3006);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,244,_ctx) ) {
					case 1:
						{
						setState(3003);
						((Create_or_alter_event_sessionContext)_localctx).event_module_guid = id();
						setState(3004);
						match(DOT);
						}
						break;
					}
					setState(3008);
					((Create_or_alter_event_sessionContext)_localctx).event_package_name = id();
					setState(3009);
					match(DOT);
					setState(3010);
					((Create_or_alter_event_sessionContext)_localctx).event_name = id();
					}
					} 
				}
				setState(3016);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,245,_ctx);
			}
			setState(3058);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ADD) {
				{
				{
				{
				setState(3017);
				match(ADD);
				setState(3018);
				match(TARGET);
				setState(3022);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,246,_ctx) ) {
				case 1:
					{
					setState(3019);
					((Create_or_alter_event_sessionContext)_localctx).event_module_guid = id();
					setState(3020);
					match(DOT);
					}
					break;
				}
				setState(3024);
				((Create_or_alter_event_sessionContext)_localctx).event_package_name = id();
				setState(3025);
				match(DOT);
				setState(3026);
				((Create_or_alter_event_sessionContext)_localctx).target_name = id();
				}
				setState(3053);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,252,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3028);
						match(LR_BRACKET);
						setState(3029);
						match(SET);
						setState(3045); 
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
							{
							setState(3031);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(3030);
								match(COMMA);
								}
							}

							setState(3033);
							((Create_or_alter_event_sessionContext)_localctx).target_parameter_name = id();
							setState(3034);
							match(EQUAL);
							setState(3043);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case DECIMAL:
							case LR_BRACKET:
								{
								setState(3036);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==LR_BRACKET) {
									{
									setState(3035);
									match(LR_BRACKET);
									}
								}

								setState(3038);
								match(DECIMAL);
								setState(3040);
								_errHandler.sync(this);
								switch ( getInterpreter().adaptivePredict(_input,249,_ctx) ) {
								case 1:
									{
									setState(3039);
									match(RR_BRACKET);
									}
									break;
								}
								}
								break;
							case STRING:
								{
								setState(3042);
								match(STRING);
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							}
							setState(3047); 
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while ( _la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (EVENTDATA - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & ((1L << (INIT - 158)) | (1L << (KEY - 158)) | (1L << (MASTER - 158)) | (1L << (MAX_MEMORY - 158)))) != 0) || ((((_la - 225)) & ~0x3f) == 0 && ((1L << (_la - 225)) & ((1L << (OFFSETS - 225)) | (1L << (PAGE - 225)) | (1L << (PUBLIC - 225)) | (1L << (R - 225)) | (1L << (RAW - 225)) | (1L << (RETURN - 225)) | (1L << (RETURNS - 225)) | (1L << (ROWCOUNT - 225)))) != 0) || ((((_la - 295)) & ~0x3f) == 0 && ((1L << (_la - 295)) & ((1L << (SAFETY - 295)) | (1L << (SERVER - 295)) | (1L << (SID - 295)) | (1L << (SOURCE - 295)) | (1L << (STATE - 295)) | (1L << (START - 295)) | (1L << (TARGET - 295)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (ABSOLUTE - 383)) | (1L << (ACCENT_SENSITIVITY - 383)) | (1L << (ACTION - 383)) | (1L << (ACTIVATION - 383)) | (1L << (ACTIVE - 383)) | (1L << (ADDRESS - 383)) | (1L << (AES_128 - 383)) | (1L << (AES_192 - 383)) | (1L << (AES_256 - 383)) | (1L << (AFFINITY - 383)) | (1L << (AFTER - 383)) | (1L << (AGGREGATE - 383)) | (1L << (ALGORITHM - 383)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 383)) | (1L << (ALLOWED - 383)) | (1L << (ANSI_NULL_DEFAULT - 383)) | (1L << (ANSI_NULLS - 383)) | (1L << (ANSI_PADDING - 383)) | (1L << (ANSI_WARNINGS - 383)) | (1L << (APPLICATION_LOG - 383)) | (1L << (APPLY - 383)) | (1L << (ARITHABORT - 383)) | (1L << (ASSEMBLY - 383)) | (1L << (AUDIT - 383)) | (1L << (AUDIT_GUID - 383)) | (1L << (AUTO - 383)) | (1L << (AUTO_CLEANUP - 383)) | (1L << (AUTO_CLOSE - 383)) | (1L << (AUTO_CREATE_STATISTICS - 383)) | (1L << (AUTO_SHRINK - 383)) | (1L << (AUTO_UPDATE_STATISTICS - 383)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 383)) | (1L << (AVAILABILITY - 383)) | (1L << (AVG - 383)) | (1L << (BACKUP_PRIORITY - 383)) | (1L << (BEGIN_DIALOG - 383)) | (1L << (BIGINT - 383)) | (1L << (BINARY_BASE64 - 383)) | (1L << (BINARY_CHECKSUM - 383)) | (1L << (BINDING - 383)) | (1L << (BLOB_STORAGE - 383)) | (1L << (BROKER - 383)) | (1L << (BROKER_INSTANCE - 383)) | (1L << (BULK_LOGGED - 383)) | (1L << (CALLER - 383)) | (1L << (CAP_CPU_PERCENT - 383)) | (1L << (CAST - 383)) | (1L << (CATALOG - 383)) | (1L << (CATCH - 383)) | (1L << (CHANGE_RETENTION - 383)) | (1L << (CHANGE_TRACKING - 383)) | (1L << (CHECKSUM - 383)) | (1L << (CHECKSUM_AGG - 383)) | (1L << (CLEANUP - 383)) | (1L << (COLLECTION - 383)) | (1L << (COLUMN_MASTER_KEY - 383)) | (1L << (COMMITTED - 383)) | (1L << (COMPATIBILITY_LEVEL - 383)) | (1L << (CONCAT - 383)) | (1L << (CONCAT_NULL_YIELDS_NULL - 383)) | (1L << (CONTENT - 383)) | (1L << (CONTROL - 383)) | (1L << (COOKIE - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (COUNT - 447)) | (1L << (COUNT_BIG - 447)) | (1L << (COUNTER - 447)) | (1L << (CPU - 447)) | (1L << (CREATE_NEW - 447)) | (1L << (CREATION_DISPOSITION - 447)) | (1L << (CREDENTIAL - 447)) | (1L << (CRYPTOGRAPHIC - 447)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 447)) | (1L << (CURSOR_DEFAULT - 447)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 447)) | (1L << (DATEADD - 447)) | (1L << (DATEDIFF - 447)) | (1L << (DATENAME - 447)) | (1L << (DATEPART - 447)) | (1L << (DAYS - 447)) | (1L << (DB_CHAINING - 447)) | (1L << (DB_FAILOVER - 447)) | (1L << (DECRYPTION - 447)) | (1L << (DEFAULT_DOUBLE_QUOTE - 447)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1L << (DEFAULT_LANGUAGE - 447)) | (1L << (DELAY - 447)) | (1L << (DELAYED_DURABILITY - 447)) | (1L << (DELETED - 447)) | (1L << (DENSE_RANK - 447)) | (1L << (DEPENDENTS - 447)) | (1L << (DES - 447)) | (1L << (DESCRIPTION - 447)) | (1L << (DESX - 447)) | (1L << (DHCP - 447)) | (1L << (DIALOG - 447)) | (1L << (DIRECTORY_NAME - 447)) | (1L << (DISABLE - 447)) | (1L << (DISABLE_BROKER - 447)) | (1L << (DISABLED - 447)) | (1L << (DISK_DRIVE - 447)) | (1L << (DOCUMENT - 447)) | (1L << (DYNAMIC - 447)) | (1L << (EMERGENCY - 447)) | (1L << (EMPTY - 447)) | (1L << (ENABLE - 447)) | (1L << (ENABLE_BROKER - 447)) | (1L << (ENCRYPTED_VALUE - 447)) | (1L << (ENCRYPTION - 447)) | (1L << (ENDPOINT_URL - 447)) | (1L << (ERROR_BROKER_CONVERSATIONS - 447)) | (1L << (EXCLUSIVE - 447)) | (1L << (EXECUTABLE - 447)) | (1L << (EXIST - 447)) | (1L << (EXPAND - 447)) | (1L << (EXPIRY_DATE - 447)) | (1L << (EXPLICIT - 447)) | (1L << (FAIL_OPERATION - 447)) | (1L << (FAILOVER_MODE - 447)) | (1L << (FAILURE - 447)) | (1L << (FAILURE_CONDITION_LEVEL - 447)) | (1L << (FAST - 447)) | (1L << (FAST_FORWARD - 447)) | (1L << (FILEGROUP - 447)) | (1L << (FILEGROWTH - 447)) | (1L << (FILEPATH - 447)) | (1L << (FILESTREAM - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (FILTER - 511)) | (1L << (FIRST - 511)) | (1L << (FIRST_VALUE - 511)) | (1L << (FOLLOWING - 511)) | (1L << (FORCE - 511)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1L << (FORCED - 511)) | (1L << (FORMAT - 511)) | (1L << (FORWARD_ONLY - 511)) | (1L << (FULLSCAN - 511)) | (1L << (FULLTEXT - 511)) | (1L << (GB - 511)) | (1L << (GETDATE - 511)) | (1L << (GETUTCDATE - 511)) | (1L << (GLOBAL - 511)) | (1L << (GO - 511)) | (1L << (GROUP_MAX_REQUESTS - 511)) | (1L << (GROUPING - 511)) | (1L << (GROUPING_ID - 511)) | (1L << (HADR - 511)) | (1L << (HASH - 511)) | (1L << (HEALTH_CHECK_TIMEOUT - 511)) | (1L << (HIGH - 511)) | (1L << (HONOR_BROKER_PRIORITY - 511)) | (1L << (HOURS - 511)) | (1L << (IDENTITY_VALUE - 511)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1L << (IMMEDIATE - 511)) | (1L << (IMPERSONATE - 511)) | (1L << (IMPORTANCE - 511)) | (1L << (INCREMENTAL - 511)) | (1L << (INITIATOR - 511)) | (1L << (INPUT - 511)) | (1L << (INSENSITIVE - 511)) | (1L << (INSERTED - 511)) | (1L << (INT - 511)) | (1L << (IP - 511)) | (1L << (ISOLATION - 511)) | (1L << (KB - 511)) | (1L << (KEEP - 511)) | (1L << (KEEPFIXED - 511)) | (1L << (KEY_SOURCE - 511)) | (1L << (KEYS - 511)) | (1L << (KEYSET - 511)) | (1L << (LAG - 511)) | (1L << (LAST - 511)) | (1L << (LAST_VALUE - 511)) | (1L << (LEAD - 511)) | (1L << (LEVEL - 511)) | (1L << (LIST - 511)) | (1L << (LISTENER - 511)) | (1L << (LISTENER_URL - 511)) | (1L << (LOB_COMPACTION - 511)) | (1L << (LOCAL - 511)) | (1L << (LOCATION - 511)) | (1L << (LOCK - 511)) | (1L << (LOCK_ESCALATION - 511)) | (1L << (LOGIN - 511)) | (1L << (LOOP - 511)) | (1L << (LOW - 511)) | (1L << (MANUAL - 511)) | (1L << (MARK - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (MATERIALIZED - 575)) | (1L << (MAX - 575)) | (1L << (MAX_CPU_PERCENT - 575)) | (1L << (MAX_DOP - 575)) | (1L << (MAX_FILES - 575)) | (1L << (MAX_IOPS_PER_VOLUME - 575)) | (1L << (MAX_MEMORY_PERCENT - 575)) | (1L << (MAX_PROCESSES - 575)) | (1L << (MAX_QUEUE_READERS - 575)) | (1L << (MAX_ROLLOVER_FILES - 575)) | (1L << (MAXDOP - 575)) | (1L << (MAXRECURSION - 575)) | (1L << (MAXSIZE - 575)) | (1L << (MB - 575)) | (1L << (MEDIUM - 575)) | (1L << (MEMORY_OPTIMIZED_DATA - 575)) | (1L << (MESSAGE - 575)) | (1L << (MIN - 575)) | (1L << (MIN_ACTIVE_ROWVERSION - 575)) | (1L << (MIN_CPU_PERCENT - 575)) | (1L << (MIN_IOPS_PER_VOLUME - 575)) | (1L << (MIN_MEMORY_PERCENT - 575)) | (1L << (MINUTES - 575)) | (1L << (MIRROR_ADDRESS - 575)) | (1L << (MIXED_PAGE_ALLOCATION - 575)) | (1L << (MODE - 575)) | (1L << (MODIFY - 575)) | (1L << (MOVE - 575)) | (1L << (MULTI_USER - 575)) | (1L << (NAME - 575)) | (1L << (NESTED_TRIGGERS - 575)) | (1L << (NEW_ACCOUNT - 575)) | (1L << (NEW_BROKER - 575)) | (1L << (NEW_PASSWORD - 575)) | (1L << (NEXT - 575)) | (1L << (NO - 575)) | (1L << (NO_TRUNCATE - 575)) | (1L << (NO_WAIT - 575)) | (1L << (NOCOUNT - 575)) | (1L << (NODES - 575)) | (1L << (NOEXPAND - 575)) | (1L << (NON_TRANSACTED_ACCESS - 575)) | (1L << (NORECOMPUTE - 575)) | (1L << (NORECOVERY - 575)) | (1L << (NOWAIT - 575)) | (1L << (NTILE - 575)) | (1L << (NUMANODE - 575)) | (1L << (NUMBER - 575)) | (1L << (NUMERIC_ROUNDABORT - 575)) | (1L << (OBJECT - 575)) | (1L << (OFFLINE - 575)) | (1L << (OFFSET - 575)) | (1L << (OLD_ACCOUNT - 575)) | (1L << (ONLINE - 575)) | (1L << (ONLY - 575)) | (1L << (OPEN_EXISTING - 575)) | (1L << (OPTIMISTIC - 575)) | (1L << (OPTIMIZE - 575)) | (1L << (OUT - 575)) | (1L << (OUTPUT - 575)) | (1L << (OWNER - 575)) | (1L << (PAGE_VERIFY - 575)) | (1L << (PARAMETERIZATION - 575)) | (1L << (PARTITION - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (PARTITIONS - 639)) | (1L << (PARTNER - 639)) | (1L << (PATH - 639)) | (1L << (POISON_MESSAGE_HANDLING - 639)) | (1L << (POOL - 639)) | (1L << (PORT - 639)) | (1L << (PRECEDING - 639)) | (1L << (PRIMARY_ROLE - 639)) | (1L << (PRIOR - 639)) | (1L << (PRIORITY - 639)) | (1L << (PRIORITY_LEVEL - 639)) | (1L << (PRIVATE - 639)) | (1L << (PRIVATE_KEY - 639)) | (1L << (PRIVILEGES - 639)) | (1L << (PROCEDURE_NAME - 639)) | (1L << (PROPERTY - 639)) | (1L << (PROVIDER - 639)) | (1L << (PROVIDER_KEY_NAME - 639)) | (1L << (QUERY - 639)) | (1L << (QUEUE - 639)) | (1L << (QUEUE_DELAY - 639)) | (1L << (QUOTED_IDENTIFIER - 639)) | (1L << (RANGE - 639)) | (1L << (RANK - 639)) | (1L << (RC2 - 639)) | (1L << (RC4 - 639)) | (1L << (RC4_128 - 639)) | (1L << (READ_COMMITTED_SNAPSHOT - 639)) | (1L << (READ_ONLY - 639)) | (1L << (READ_ONLY_ROUTING_LIST - 639)) | (1L << (READ_WRITE - 639)) | (1L << (READONLY - 639)) | (1L << (REBUILD - 639)) | (1L << (RECEIVE - 639)) | (1L << (RECOMPILE - 639)) | (1L << (RECOVERY - 639)) | (1L << (RECURSIVE_TRIGGERS - 639)) | (1L << (RELATIVE - 639)) | (1L << (REMOTE - 639)) | (1L << (REMOTE_SERVICE_NAME - 639)) | (1L << (REMOVE - 639)) | (1L << (REORGANIZE - 639)) | (1L << (REPEATABLE - 639)) | (1L << (REPLICA - 639)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 639)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 639)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 639)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 639)) | (1L << (RESERVE_DISK_SPACE - 639)) | (1L << (RESOURCE - 639)) | (1L << (RESOURCE_MANAGER_LOCATION - 639)) | (1L << (RESTRICTED_USER - 639)) | (1L << (RETENTION - 639)) | (1L << (ROBUST - 639)) | (1L << (ROOT - 639)) | (1L << (ROUTE - 639)) | (1L << (ROW - 639)) | (1L << (ROW_NUMBER - 639)) | (1L << (ROWGUID - 639)) | (1L << (ROWS - 639)) | (1L << (SAMPLE - 639)) | (1L << (SCHEMABINDING - 639)) | (1L << (SCOPED - 639)) | (1L << (SCROLL - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (SCROLL_LOCKS - 703)) | (1L << (SEARCH - 703)) | (1L << (SECONDARY - 703)) | (1L << (SECONDARY_ONLY - 703)) | (1L << (SECONDARY_ROLE - 703)) | (1L << (SECONDS - 703)) | (1L << (SECRET - 703)) | (1L << (SECURITY_LOG - 703)) | (1L << (SEEDING_MODE - 703)) | (1L << (SELF - 703)) | (1L << (SEMI_SENSITIVE - 703)) | (1L << (SEND - 703)) | (1L << (SENT - 703)) | (1L << (SERIALIZABLE - 703)) | (1L << (SESSION_TIMEOUT - 703)) | (1L << (SETERROR - 703)) | (1L << (SHARE - 703)) | (1L << (SHOWPLAN - 703)) | (1L << (SIGNATURE - 703)) | (1L << (SIMPLE - 703)) | (1L << (SINGLE_USER - 703)) | (1L << (SIZE - 703)) | (1L << (SMALLINT - 703)) | (1L << (SNAPSHOT - 703)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 703)) | (1L << (STANDBY - 703)) | (1L << (START_DATE - 703)) | (1L << (STATIC - 703)) | (1L << (STATS_STREAM - 703)) | (1L << (STATUS - 703)) | (1L << (STDEV - 703)) | (1L << (STDEVP - 703)) | (1L << (STOPLIST - 703)) | (1L << (STUFF - 703)) | (1L << (SUBJECT - 703)) | (1L << (SUM - 703)) | (1L << (SUSPEND - 703)) | (1L << (SYMMETRIC - 703)) | (1L << (SYNCHRONOUS_COMMIT - 703)) | (1L << (SYNONYM - 703)) | (1L << (TAKE - 703)) | (1L << (TARGET_RECOVERY_TIME - 703)) | (1L << (TB - 703)) | (1L << (TEXTIMAGE_ON - 703)) | (1L << (THROW - 703)) | (1L << (TIES - 703)) | (1L << (TIME - 703)) | (1L << (TIMEOUT - 703)) | (1L << (TIMER - 703)) | (1L << (TINYINT - 703)) | (1L << (TORN_PAGE_DETECTION - 703)) | (1L << (TRANSFORM_NOISE_WORDS - 703)) | (1L << (TRIPLE_DES - 703)) | (1L << (TRIPLE_DES_3KEY - 703)) | (1L << (TRUSTWORTHY - 703)) | (1L << (TRY - 703)) | (1L << (TSQL - 703)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 703)) | (1L << (TYPE - 703)) | (1L << (TYPE_WARNING - 703)) | (1L << (UNBOUNDED - 703)) | (1L << (UNCOMMITTED - 703)) | (1L << (UNKNOWN - 703)) | (1L << (UNLIMITED - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (USING - 767)) | (1L << (VALID_XML - 767)) | (1L << (VALIDATION - 767)) | (1L << (VALUE - 767)) | (1L << (VAR - 767)) | (1L << (VARP - 767)) | (1L << (VIEW_METADATA - 767)) | (1L << (VIEWS - 767)) | (1L << (WAIT - 767)) | (1L << (WELL_FORMED_XML - 767)) | (1L << (WORK - 767)) | (1L << (WORKLOAD - 767)) | (1L << (XML - 767)) | (1L << (XMLNAMESPACES - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)) | (1L << (COMMA - 767)))) != 0) );
						setState(3049);
						match(RR_BRACKET);
						}
						} 
					}
					setState(3055);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,252,_ctx);
				}
				}
				}
				setState(3060);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3074);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,255,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3061);
					match(DROP);
					setState(3062);
					match(TARGET);
					setState(3066);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,254,_ctx) ) {
					case 1:
						{
						setState(3063);
						((Create_or_alter_event_sessionContext)_localctx).event_module_guid = id();
						setState(3064);
						match(DOT);
						}
						break;
					}
					setState(3068);
					((Create_or_alter_event_sessionContext)_localctx).event_package_name = id();
					setState(3069);
					match(DOT);
					setState(3070);
					((Create_or_alter_event_sessionContext)_localctx).target_name = id();
					}
					} 
				}
				setState(3076);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,255,_ctx);
			}
			setState(3142);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,271,_ctx) ) {
			case 1:
				{
				setState(3077);
				match(WITH);
				setState(3078);
				match(LR_BRACKET);
				setState(3086);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,257,_ctx) ) {
				case 1:
					{
					setState(3080);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3079);
						match(COMMA);
						}
					}

					setState(3082);
					match(MAX_MEMORY);
					setState(3083);
					match(EQUAL);
					setState(3084);
					((Create_or_alter_event_sessionContext)_localctx).max_memory = match(DECIMAL);
					setState(3085);
					_la = _input.LA(1);
					if ( !(_la==KB || _la==MB) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(3094);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,259,_ctx) ) {
				case 1:
					{
					setState(3089);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3088);
						match(COMMA);
						}
					}

					setState(3091);
					match(EVENT_RETENTION_MODE);
					setState(3092);
					match(EQUAL);
					setState(3093);
					_la = _input.LA(1);
					if ( !(_la==ALLOW_MULTIPLE_EVENT_LOSS || _la==ALLOW_SINGLE_EVENT_LOSS || _la==NO_EVENT_LOSS) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(3106);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,262,_ctx) ) {
				case 1:
					{
					setState(3097);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3096);
						match(COMMA);
						}
					}

					setState(3099);
					match(MAX_DISPATCH_LATENCY);
					setState(3100);
					match(EQUAL);
					setState(3104);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case DECIMAL:
						{
						setState(3101);
						((Create_or_alter_event_sessionContext)_localctx).max_dispatch_latency_seconds = match(DECIMAL);
						setState(3102);
						match(SECONDS);
						}
						break;
					case INFINITE:
						{
						setState(3103);
						match(INFINITE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				setState(3115);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,264,_ctx) ) {
				case 1:
					{
					setState(3109);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3108);
						match(COMMA);
						}
					}

					setState(3111);
					match(MAX_EVENT_SIZE);
					setState(3112);
					match(EQUAL);
					setState(3113);
					((Create_or_alter_event_sessionContext)_localctx).max_event_size = match(DECIMAL);
					setState(3114);
					_la = _input.LA(1);
					if ( !(_la==KB || _la==MB) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(3123);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,266,_ctx) ) {
				case 1:
					{
					setState(3118);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3117);
						match(COMMA);
						}
					}

					setState(3120);
					match(MEMORY_PARTITION_MODE);
					setState(3121);
					match(EQUAL);
					setState(3122);
					_la = _input.LA(1);
					if ( !(((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (NONE - 211)) | (1L << (PER_CPU - 211)) | (1L << (PER_NODE - 211)))) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(3131);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,268,_ctx) ) {
				case 1:
					{
					setState(3126);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3125);
						match(COMMA);
						}
					}

					setState(3128);
					match(TRACK_CAUSALITY);
					setState(3129);
					match(EQUAL);
					setState(3130);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(3139);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STARTUP_STATE || _la==COMMA) {
					{
					setState(3134);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3133);
						match(COMMA);
						}
					}

					setState(3136);
					match(STARTUP_STATE);
					setState(3137);
					match(EQUAL);
					setState(3138);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(3141);
				match(RR_BRACKET);
				}
				break;
			}
			setState(3147);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,272,_ctx) ) {
			case 1:
				{
				setState(3144);
				match(STATE);
				setState(3145);
				match(EQUAL);
				setState(3146);
				_la = _input.LA(1);
				if ( !(_la==START || _la==STOP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Event_session_predicate_expressionContext extends ParserRuleContext {
		public List<Event_session_predicate_factorContext> event_session_predicate_factor() {
			return getRuleContexts(Event_session_predicate_factorContext.class);
		}
		public Event_session_predicate_factorContext event_session_predicate_factor(int i) {
			return getRuleContext(Event_session_predicate_factorContext.class,i);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<Event_session_predicate_expressionContext> event_session_predicate_expression() {
			return getRuleContexts(Event_session_predicate_expressionContext.class);
		}
		public Event_session_predicate_expressionContext event_session_predicate_expression(int i) {
			return getRuleContext(Event_session_predicate_expressionContext.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<TerminalNode> NOT() { return getTokens(TSqlParser.NOT); }
		public TerminalNode NOT(int i) {
			return getToken(TSqlParser.NOT, i);
		}
		public List<TerminalNode> AND() { return getTokens(TSqlParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(TSqlParser.AND, i);
		}
		public List<TerminalNode> OR() { return getTokens(TSqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(TSqlParser.OR, i);
		}
		public Event_session_predicate_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event_session_predicate_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterEvent_session_predicate_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitEvent_session_predicate_expression(this);
		}
	}

	public final Event_session_predicate_expressionContext event_session_predicate_expression() throws RecognitionException {
		Event_session_predicate_expressionContext _localctx = new Event_session_predicate_expressionContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_event_session_predicate_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3165); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3150);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3149);
					match(COMMA);
					}
				}

				setState(3153);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AND || _la==OR) {
					{
					setState(3152);
					_la = _input.LA(1);
					if ( !(_la==AND || _la==OR) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(3156);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(3155);
					match(NOT);
					}
				}

				setState(3163);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,276,_ctx) ) {
				case 1:
					{
					setState(3158);
					event_session_predicate_factor();
					}
					break;
				case 2:
					{
					setState(3159);
					match(LR_BRACKET);
					setState(3160);
					event_session_predicate_expression();
					setState(3161);
					match(RR_BRACKET);
					}
					break;
				}
				}
				}
				setState(3167); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==AND || _la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (EVENTDATA - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & ((1L << (INIT - 158)) | (1L << (KEY - 158)) | (1L << (MASTER - 158)) | (1L << (MAX_MEMORY - 158)) | (1L << (NOT - 158)))) != 0) || ((((_la - 225)) & ~0x3f) == 0 && ((1L << (_la - 225)) & ((1L << (OFFSETS - 225)) | (1L << (OR - 225)) | (1L << (PAGE - 225)) | (1L << (PUBLIC - 225)) | (1L << (R - 225)) | (1L << (RAW - 225)) | (1L << (RETURN - 225)) | (1L << (RETURNS - 225)) | (1L << (ROWCOUNT - 225)))) != 0) || ((((_la - 295)) & ~0x3f) == 0 && ((1L << (_la - 295)) & ((1L << (SAFETY - 295)) | (1L << (SERVER - 295)) | (1L << (SID - 295)) | (1L << (SOURCE - 295)) | (1L << (STATE - 295)) | (1L << (START - 295)) | (1L << (TARGET - 295)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (ABSOLUTE - 383)) | (1L << (ACCENT_SENSITIVITY - 383)) | (1L << (ACTION - 383)) | (1L << (ACTIVATION - 383)) | (1L << (ACTIVE - 383)) | (1L << (ADDRESS - 383)) | (1L << (AES_128 - 383)) | (1L << (AES_192 - 383)) | (1L << (AES_256 - 383)) | (1L << (AFFINITY - 383)) | (1L << (AFTER - 383)) | (1L << (AGGREGATE - 383)) | (1L << (ALGORITHM - 383)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 383)) | (1L << (ALLOWED - 383)) | (1L << (ANSI_NULL_DEFAULT - 383)) | (1L << (ANSI_NULLS - 383)) | (1L << (ANSI_PADDING - 383)) | (1L << (ANSI_WARNINGS - 383)) | (1L << (APPLICATION_LOG - 383)) | (1L << (APPLY - 383)) | (1L << (ARITHABORT - 383)) | (1L << (ASSEMBLY - 383)) | (1L << (AUDIT - 383)) | (1L << (AUDIT_GUID - 383)) | (1L << (AUTO - 383)) | (1L << (AUTO_CLEANUP - 383)) | (1L << (AUTO_CLOSE - 383)) | (1L << (AUTO_CREATE_STATISTICS - 383)) | (1L << (AUTO_SHRINK - 383)) | (1L << (AUTO_UPDATE_STATISTICS - 383)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 383)) | (1L << (AVAILABILITY - 383)) | (1L << (AVG - 383)) | (1L << (BACKUP_PRIORITY - 383)) | (1L << (BEGIN_DIALOG - 383)) | (1L << (BIGINT - 383)) | (1L << (BINARY_BASE64 - 383)) | (1L << (BINARY_CHECKSUM - 383)) | (1L << (BINDING - 383)) | (1L << (BLOB_STORAGE - 383)) | (1L << (BROKER - 383)) | (1L << (BROKER_INSTANCE - 383)) | (1L << (BULK_LOGGED - 383)) | (1L << (CALLER - 383)) | (1L << (CAP_CPU_PERCENT - 383)) | (1L << (CAST - 383)) | (1L << (CATALOG - 383)) | (1L << (CATCH - 383)) | (1L << (CHANGE_RETENTION - 383)) | (1L << (CHANGE_TRACKING - 383)) | (1L << (CHECKSUM - 383)) | (1L << (CHECKSUM_AGG - 383)) | (1L << (CLEANUP - 383)) | (1L << (COLLECTION - 383)) | (1L << (COLUMN_MASTER_KEY - 383)) | (1L << (COMMITTED - 383)) | (1L << (COMPATIBILITY_LEVEL - 383)) | (1L << (CONCAT - 383)) | (1L << (CONCAT_NULL_YIELDS_NULL - 383)) | (1L << (CONTENT - 383)) | (1L << (CONTROL - 383)) | (1L << (COOKIE - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (COUNT - 447)) | (1L << (COUNT_BIG - 447)) | (1L << (COUNTER - 447)) | (1L << (CPU - 447)) | (1L << (CREATE_NEW - 447)) | (1L << (CREATION_DISPOSITION - 447)) | (1L << (CREDENTIAL - 447)) | (1L << (CRYPTOGRAPHIC - 447)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 447)) | (1L << (CURSOR_DEFAULT - 447)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 447)) | (1L << (DATEADD - 447)) | (1L << (DATEDIFF - 447)) | (1L << (DATENAME - 447)) | (1L << (DATEPART - 447)) | (1L << (DAYS - 447)) | (1L << (DB_CHAINING - 447)) | (1L << (DB_FAILOVER - 447)) | (1L << (DECRYPTION - 447)) | (1L << (DEFAULT_DOUBLE_QUOTE - 447)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1L << (DEFAULT_LANGUAGE - 447)) | (1L << (DELAY - 447)) | (1L << (DELAYED_DURABILITY - 447)) | (1L << (DELETED - 447)) | (1L << (DENSE_RANK - 447)) | (1L << (DEPENDENTS - 447)) | (1L << (DES - 447)) | (1L << (DESCRIPTION - 447)) | (1L << (DESX - 447)) | (1L << (DHCP - 447)) | (1L << (DIALOG - 447)) | (1L << (DIRECTORY_NAME - 447)) | (1L << (DISABLE - 447)) | (1L << (DISABLE_BROKER - 447)) | (1L << (DISABLED - 447)) | (1L << (DISK_DRIVE - 447)) | (1L << (DOCUMENT - 447)) | (1L << (DYNAMIC - 447)) | (1L << (EMERGENCY - 447)) | (1L << (EMPTY - 447)) | (1L << (ENABLE - 447)) | (1L << (ENABLE_BROKER - 447)) | (1L << (ENCRYPTED_VALUE - 447)) | (1L << (ENCRYPTION - 447)) | (1L << (ENDPOINT_URL - 447)) | (1L << (ERROR_BROKER_CONVERSATIONS - 447)) | (1L << (EXCLUSIVE - 447)) | (1L << (EXECUTABLE - 447)) | (1L << (EXIST - 447)) | (1L << (EXPAND - 447)) | (1L << (EXPIRY_DATE - 447)) | (1L << (EXPLICIT - 447)) | (1L << (FAIL_OPERATION - 447)) | (1L << (FAILOVER_MODE - 447)) | (1L << (FAILURE - 447)) | (1L << (FAILURE_CONDITION_LEVEL - 447)) | (1L << (FAST - 447)) | (1L << (FAST_FORWARD - 447)) | (1L << (FILEGROUP - 447)) | (1L << (FILEGROWTH - 447)) | (1L << (FILEPATH - 447)) | (1L << (FILESTREAM - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (FILTER - 511)) | (1L << (FIRST - 511)) | (1L << (FIRST_VALUE - 511)) | (1L << (FOLLOWING - 511)) | (1L << (FORCE - 511)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1L << (FORCED - 511)) | (1L << (FORMAT - 511)) | (1L << (FORWARD_ONLY - 511)) | (1L << (FULLSCAN - 511)) | (1L << (FULLTEXT - 511)) | (1L << (GB - 511)) | (1L << (GETDATE - 511)) | (1L << (GETUTCDATE - 511)) | (1L << (GLOBAL - 511)) | (1L << (GO - 511)) | (1L << (GROUP_MAX_REQUESTS - 511)) | (1L << (GROUPING - 511)) | (1L << (GROUPING_ID - 511)) | (1L << (HADR - 511)) | (1L << (HASH - 511)) | (1L << (HEALTH_CHECK_TIMEOUT - 511)) | (1L << (HIGH - 511)) | (1L << (HONOR_BROKER_PRIORITY - 511)) | (1L << (HOURS - 511)) | (1L << (IDENTITY_VALUE - 511)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1L << (IMMEDIATE - 511)) | (1L << (IMPERSONATE - 511)) | (1L << (IMPORTANCE - 511)) | (1L << (INCREMENTAL - 511)) | (1L << (INITIATOR - 511)) | (1L << (INPUT - 511)) | (1L << (INSENSITIVE - 511)) | (1L << (INSERTED - 511)) | (1L << (INT - 511)) | (1L << (IP - 511)) | (1L << (ISOLATION - 511)) | (1L << (KB - 511)) | (1L << (KEEP - 511)) | (1L << (KEEPFIXED - 511)) | (1L << (KEY_SOURCE - 511)) | (1L << (KEYS - 511)) | (1L << (KEYSET - 511)) | (1L << (LAG - 511)) | (1L << (LAST - 511)) | (1L << (LAST_VALUE - 511)) | (1L << (LEAD - 511)) | (1L << (LEVEL - 511)) | (1L << (LIST - 511)) | (1L << (LISTENER - 511)) | (1L << (LISTENER_URL - 511)) | (1L << (LOB_COMPACTION - 511)) | (1L << (LOCAL - 511)) | (1L << (LOCATION - 511)) | (1L << (LOCK - 511)) | (1L << (LOCK_ESCALATION - 511)) | (1L << (LOGIN - 511)) | (1L << (LOOP - 511)) | (1L << (LOW - 511)) | (1L << (MANUAL - 511)) | (1L << (MARK - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (MATERIALIZED - 575)) | (1L << (MAX - 575)) | (1L << (MAX_CPU_PERCENT - 575)) | (1L << (MAX_DOP - 575)) | (1L << (MAX_FILES - 575)) | (1L << (MAX_IOPS_PER_VOLUME - 575)) | (1L << (MAX_MEMORY_PERCENT - 575)) | (1L << (MAX_PROCESSES - 575)) | (1L << (MAX_QUEUE_READERS - 575)) | (1L << (MAX_ROLLOVER_FILES - 575)) | (1L << (MAXDOP - 575)) | (1L << (MAXRECURSION - 575)) | (1L << (MAXSIZE - 575)) | (1L << (MB - 575)) | (1L << (MEDIUM - 575)) | (1L << (MEMORY_OPTIMIZED_DATA - 575)) | (1L << (MESSAGE - 575)) | (1L << (MIN - 575)) | (1L << (MIN_ACTIVE_ROWVERSION - 575)) | (1L << (MIN_CPU_PERCENT - 575)) | (1L << (MIN_IOPS_PER_VOLUME - 575)) | (1L << (MIN_MEMORY_PERCENT - 575)) | (1L << (MINUTES - 575)) | (1L << (MIRROR_ADDRESS - 575)) | (1L << (MIXED_PAGE_ALLOCATION - 575)) | (1L << (MODE - 575)) | (1L << (MODIFY - 575)) | (1L << (MOVE - 575)) | (1L << (MULTI_USER - 575)) | (1L << (NAME - 575)) | (1L << (NESTED_TRIGGERS - 575)) | (1L << (NEW_ACCOUNT - 575)) | (1L << (NEW_BROKER - 575)) | (1L << (NEW_PASSWORD - 575)) | (1L << (NEXT - 575)) | (1L << (NO - 575)) | (1L << (NO_TRUNCATE - 575)) | (1L << (NO_WAIT - 575)) | (1L << (NOCOUNT - 575)) | (1L << (NODES - 575)) | (1L << (NOEXPAND - 575)) | (1L << (NON_TRANSACTED_ACCESS - 575)) | (1L << (NORECOMPUTE - 575)) | (1L << (NORECOVERY - 575)) | (1L << (NOWAIT - 575)) | (1L << (NTILE - 575)) | (1L << (NUMANODE - 575)) | (1L << (NUMBER - 575)) | (1L << (NUMERIC_ROUNDABORT - 575)) | (1L << (OBJECT - 575)) | (1L << (OFFLINE - 575)) | (1L << (OFFSET - 575)) | (1L << (OLD_ACCOUNT - 575)) | (1L << (ONLINE - 575)) | (1L << (ONLY - 575)) | (1L << (OPEN_EXISTING - 575)) | (1L << (OPTIMISTIC - 575)) | (1L << (OPTIMIZE - 575)) | (1L << (OUT - 575)) | (1L << (OUTPUT - 575)) | (1L << (OWNER - 575)) | (1L << (PAGE_VERIFY - 575)) | (1L << (PARAMETERIZATION - 575)) | (1L << (PARTITION - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (PARTITIONS - 639)) | (1L << (PARTNER - 639)) | (1L << (PATH - 639)) | (1L << (POISON_MESSAGE_HANDLING - 639)) | (1L << (POOL - 639)) | (1L << (PORT - 639)) | (1L << (PRECEDING - 639)) | (1L << (PRIMARY_ROLE - 639)) | (1L << (PRIOR - 639)) | (1L << (PRIORITY - 639)) | (1L << (PRIORITY_LEVEL - 639)) | (1L << (PRIVATE - 639)) | (1L << (PRIVATE_KEY - 639)) | (1L << (PRIVILEGES - 639)) | (1L << (PROCEDURE_NAME - 639)) | (1L << (PROPERTY - 639)) | (1L << (PROVIDER - 639)) | (1L << (PROVIDER_KEY_NAME - 639)) | (1L << (QUERY - 639)) | (1L << (QUEUE - 639)) | (1L << (QUEUE_DELAY - 639)) | (1L << (QUOTED_IDENTIFIER - 639)) | (1L << (RANGE - 639)) | (1L << (RANK - 639)) | (1L << (RC2 - 639)) | (1L << (RC4 - 639)) | (1L << (RC4_128 - 639)) | (1L << (READ_COMMITTED_SNAPSHOT - 639)) | (1L << (READ_ONLY - 639)) | (1L << (READ_ONLY_ROUTING_LIST - 639)) | (1L << (READ_WRITE - 639)) | (1L << (READONLY - 639)) | (1L << (REBUILD - 639)) | (1L << (RECEIVE - 639)) | (1L << (RECOMPILE - 639)) | (1L << (RECOVERY - 639)) | (1L << (RECURSIVE_TRIGGERS - 639)) | (1L << (RELATIVE - 639)) | (1L << (REMOTE - 639)) | (1L << (REMOTE_SERVICE_NAME - 639)) | (1L << (REMOVE - 639)) | (1L << (REORGANIZE - 639)) | (1L << (REPEATABLE - 639)) | (1L << (REPLICA - 639)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 639)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 639)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 639)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 639)) | (1L << (RESERVE_DISK_SPACE - 639)) | (1L << (RESOURCE - 639)) | (1L << (RESOURCE_MANAGER_LOCATION - 639)) | (1L << (RESTRICTED_USER - 639)) | (1L << (RETENTION - 639)) | (1L << (ROBUST - 639)) | (1L << (ROOT - 639)) | (1L << (ROUTE - 639)) | (1L << (ROW - 639)) | (1L << (ROW_NUMBER - 639)) | (1L << (ROWGUID - 639)) | (1L << (ROWS - 639)) | (1L << (SAMPLE - 639)) | (1L << (SCHEMABINDING - 639)) | (1L << (SCOPED - 639)) | (1L << (SCROLL - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (SCROLL_LOCKS - 703)) | (1L << (SEARCH - 703)) | (1L << (SECONDARY - 703)) | (1L << (SECONDARY_ONLY - 703)) | (1L << (SECONDARY_ROLE - 703)) | (1L << (SECONDS - 703)) | (1L << (SECRET - 703)) | (1L << (SECURITY_LOG - 703)) | (1L << (SEEDING_MODE - 703)) | (1L << (SELF - 703)) | (1L << (SEMI_SENSITIVE - 703)) | (1L << (SEND - 703)) | (1L << (SENT - 703)) | (1L << (SERIALIZABLE - 703)) | (1L << (SESSION_TIMEOUT - 703)) | (1L << (SETERROR - 703)) | (1L << (SHARE - 703)) | (1L << (SHOWPLAN - 703)) | (1L << (SIGNATURE - 703)) | (1L << (SIMPLE - 703)) | (1L << (SINGLE_USER - 703)) | (1L << (SIZE - 703)) | (1L << (SMALLINT - 703)) | (1L << (SNAPSHOT - 703)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 703)) | (1L << (STANDBY - 703)) | (1L << (START_DATE - 703)) | (1L << (STATIC - 703)) | (1L << (STATS_STREAM - 703)) | (1L << (STATUS - 703)) | (1L << (STDEV - 703)) | (1L << (STDEVP - 703)) | (1L << (STOPLIST - 703)) | (1L << (STUFF - 703)) | (1L << (SUBJECT - 703)) | (1L << (SUM - 703)) | (1L << (SUSPEND - 703)) | (1L << (SYMMETRIC - 703)) | (1L << (SYNCHRONOUS_COMMIT - 703)) | (1L << (SYNONYM - 703)) | (1L << (TAKE - 703)) | (1L << (TARGET_RECOVERY_TIME - 703)) | (1L << (TB - 703)) | (1L << (TEXTIMAGE_ON - 703)) | (1L << (THROW - 703)) | (1L << (TIES - 703)) | (1L << (TIME - 703)) | (1L << (TIMEOUT - 703)) | (1L << (TIMER - 703)) | (1L << (TINYINT - 703)) | (1L << (TORN_PAGE_DETECTION - 703)) | (1L << (TRANSFORM_NOISE_WORDS - 703)) | (1L << (TRIPLE_DES - 703)) | (1L << (TRIPLE_DES_3KEY - 703)) | (1L << (TRUSTWORTHY - 703)) | (1L << (TRY - 703)) | (1L << (TSQL - 703)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 703)) | (1L << (TYPE - 703)) | (1L << (TYPE_WARNING - 703)) | (1L << (UNBOUNDED - 703)) | (1L << (UNCOMMITTED - 703)) | (1L << (UNKNOWN - 703)) | (1L << (UNLIMITED - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (USING - 767)) | (1L << (VALID_XML - 767)) | (1L << (VALIDATION - 767)) | (1L << (VALUE - 767)) | (1L << (VAR - 767)) | (1L << (VARP - 767)) | (1L << (VIEW_METADATA - 767)) | (1L << (VIEWS - 767)) | (1L << (WAIT - 767)) | (1L << (WELL_FORMED_XML - 767)) | (1L << (WORK - 767)) | (1L << (WORKLOAD - 767)) | (1L << (XML - 767)) | (1L << (XMLNAMESPACES - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)) | (1L << (LR_BRACKET - 767)) | (1L << (COMMA - 767)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Event_session_predicate_factorContext extends ParserRuleContext {
		public Event_session_predicate_leafContext event_session_predicate_leaf() {
			return getRuleContext(Event_session_predicate_leafContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public Event_session_predicate_expressionContext event_session_predicate_expression() {
			return getRuleContext(Event_session_predicate_expressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public Event_session_predicate_factorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event_session_predicate_factor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterEvent_session_predicate_factor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitEvent_session_predicate_factor(this);
		}
	}

	public final Event_session_predicate_factorContext event_session_predicate_factor() throws RecognitionException {
		Event_session_predicate_factorContext _localctx = new Event_session_predicate_factorContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_event_session_predicate_factor);
		try {
			setState(3174);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case START:
			case TARGET:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(3169);
				event_session_predicate_leaf();
				}
				break;
			case LR_BRACKET:
				enterOuterAlt(_localctx, 2);
				{
				setState(3170);
				match(LR_BRACKET);
				setState(3171);
				event_session_predicate_expression();
				setState(3172);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Event_session_predicate_leafContext extends ParserRuleContext {
		public IdContext event_field_name;
		public IdContext event_module_guid;
		public IdContext event_package_name;
		public IdContext predicate_source_name;
		public IdContext predicate_compare_name;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode GREATER() { return getToken(TSqlParser.GREATER, 0); }
		public TerminalNode LESS() { return getToken(TSqlParser.LESS, 0); }
		public List<TerminalNode> DOT() { return getTokens(TSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSqlParser.DOT, i);
		}
		public TerminalNode EXCLAMATION() { return getToken(TSqlParser.EXCLAMATION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public Event_session_predicate_leafContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event_session_predicate_leaf; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterEvent_session_predicate_leaf(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitEvent_session_predicate_leaf(this);
		}
	}

	public final Event_session_predicate_leafContext event_session_predicate_leaf() throws RecognitionException {
		Event_session_predicate_leafContext _localctx = new Event_session_predicate_leafContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_event_session_predicate_leaf);
		int _la;
		try {
			setState(3232);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,286,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3204);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,282,_ctx) ) {
				case 1:
					{
					setState(3176);
					((Event_session_predicate_leafContext)_localctx).event_field_name = id();
					}
					break;
				case 2:
					{
					setState(3187);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,280,_ctx) ) {
					case 1:
						{
						setState(3177);
						((Event_session_predicate_leafContext)_localctx).event_field_name = id();
						}
						break;
					case 2:
						{
						{
						setState(3181);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,279,_ctx) ) {
						case 1:
							{
							setState(3178);
							((Event_session_predicate_leafContext)_localctx).event_module_guid = id();
							setState(3179);
							match(DOT);
							}
							break;
						}
						setState(3183);
						((Event_session_predicate_leafContext)_localctx).event_package_name = id();
						setState(3184);
						match(DOT);
						setState(3185);
						((Event_session_predicate_leafContext)_localctx).predicate_source_name = id();
						}
						}
						break;
					}
					setState(3200);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,281,_ctx) ) {
					case 1:
						{
						setState(3189);
						match(EQUAL);
						}
						break;
					case 2:
						{
						{
						setState(3190);
						match(LESS);
						setState(3191);
						match(GREATER);
						}
						}
						break;
					case 3:
						{
						{
						setState(3192);
						match(EXCLAMATION);
						setState(3193);
						match(EQUAL);
						}
						}
						break;
					case 4:
						{
						setState(3194);
						match(GREATER);
						}
						break;
					case 5:
						{
						{
						setState(3195);
						match(GREATER);
						setState(3196);
						match(EQUAL);
						}
						}
						break;
					case 6:
						{
						setState(3197);
						match(LESS);
						}
						break;
					case 7:
						{
						setState(3198);
						match(LESS);
						setState(3199);
						match(EQUAL);
						}
						break;
					}
					setState(3202);
					_la = _input.LA(1);
					if ( !(_la==DECIMAL || _la==STRING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3209);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,283,_ctx) ) {
				case 1:
					{
					setState(3206);
					((Event_session_predicate_leafContext)_localctx).event_module_guid = id();
					setState(3207);
					match(DOT);
					}
					break;
				}
				setState(3211);
				((Event_session_predicate_leafContext)_localctx).event_package_name = id();
				setState(3212);
				match(DOT);
				setState(3213);
				((Event_session_predicate_leafContext)_localctx).predicate_compare_name = id();
				setState(3214);
				match(LR_BRACKET);
				setState(3228);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,285,_ctx) ) {
				case 1:
					{
					setState(3215);
					((Event_session_predicate_leafContext)_localctx).event_field_name = id();
					}
					break;
				case 2:
					{
					{
					setState(3219);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,284,_ctx) ) {
					case 1:
						{
						setState(3216);
						((Event_session_predicate_leafContext)_localctx).event_module_guid = id();
						setState(3217);
						match(DOT);
						}
						break;
					}
					setState(3221);
					((Event_session_predicate_leafContext)_localctx).event_package_name = id();
					setState(3222);
					match(DOT);
					setState(3223);
					((Event_session_predicate_leafContext)_localctx).predicate_source_name = id();
					}
					setState(3225);
					match(COMMA);
					setState(3226);
					_la = _input.LA(1);
					if ( !(_la==DECIMAL || _la==STRING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(3230);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_external_data_sourceContext extends ParserRuleContext {
		public IdContext data_source_name;
		public Token location;
		public Token resource_manager_location;
		public IdContext credential_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode EXTERNAL() { return getToken(TSqlParser.EXTERNAL, 0); }
		public TerminalNode DATA() { return getToken(TSqlParser.DATA, 0); }
		public TerminalNode SOURCE() { return getToken(TSqlParser.SOURCE, 0); }
		public TerminalNode SET() { return getToken(TSqlParser.SET, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> LOCATION() { return getTokens(TSqlParser.LOCATION); }
		public TerminalNode LOCATION(int i) {
			return getToken(TSqlParser.LOCATION, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public List<TerminalNode> RESOURCE_MANAGER_LOCATION() { return getTokens(TSqlParser.RESOURCE_MANAGER_LOCATION); }
		public TerminalNode RESOURCE_MANAGER_LOCATION(int i) {
			return getToken(TSqlParser.RESOURCE_MANAGER_LOCATION, i);
		}
		public List<TerminalNode> CREDENTIAL() { return getTokens(TSqlParser.CREDENTIAL); }
		public TerminalNode CREDENTIAL(int i) {
			return getToken(TSqlParser.CREDENTIAL, i);
		}
		public List<TerminalNode> QUOTED_URL() { return getTokens(TSqlParser.QUOTED_URL); }
		public TerminalNode QUOTED_URL(int i) {
			return getToken(TSqlParser.QUOTED_URL, i);
		}
		public List<TerminalNode> QUOTED_HOST_AND_PORT() { return getTokens(TSqlParser.QUOTED_HOST_AND_PORT); }
		public TerminalNode QUOTED_HOST_AND_PORT(int i) {
			return getToken(TSqlParser.QUOTED_HOST_AND_PORT, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode TYPE() { return getToken(TSqlParser.TYPE, 0); }
		public TerminalNode BLOB_STORAGE() { return getToken(TSqlParser.BLOB_STORAGE, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Alter_external_data_sourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_external_data_source; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_external_data_source(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_external_data_source(this);
		}
	}

	public final Alter_external_data_sourceContext alter_external_data_source() throws RecognitionException {
		Alter_external_data_sourceContext _localctx = new Alter_external_data_sourceContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_alter_external_data_source);
		int _la;
		try {
			int _alt;
			setState(3281);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,292,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3234);
				match(ALTER);
				setState(3235);
				match(EXTERNAL);
				setState(3236);
				match(DATA);
				setState(3237);
				match(SOURCE);
				setState(3238);
				((Alter_external_data_sourceContext)_localctx).data_source_name = id();
				setState(3239);
				match(SET);
				setState(3255); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						setState(3255);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case LOCATION:
							{
							setState(3240);
							match(LOCATION);
							setState(3241);
							match(EQUAL);
							setState(3242);
							((Alter_external_data_sourceContext)_localctx).location = _input.LT(1);
							_la = _input.LA(1);
							if ( !(_la==QUOTED_URL || _la==QUOTED_HOST_AND_PORT) ) {
								((Alter_external_data_sourceContext)_localctx).location = (Token)_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							setState(3244);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(3243);
								match(COMMA);
								}
							}

							}
							break;
						case RESOURCE_MANAGER_LOCATION:
							{
							setState(3246);
							match(RESOURCE_MANAGER_LOCATION);
							setState(3247);
							match(EQUAL);
							setState(3248);
							((Alter_external_data_sourceContext)_localctx).resource_manager_location = _input.LT(1);
							_la = _input.LA(1);
							if ( !(_la==QUOTED_URL || _la==QUOTED_HOST_AND_PORT) ) {
								((Alter_external_data_sourceContext)_localctx).resource_manager_location = (Token)_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							setState(3250);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(3249);
								match(COMMA);
								}
							}

							}
							break;
						case CREDENTIAL:
							{
							setState(3252);
							match(CREDENTIAL);
							setState(3253);
							match(EQUAL);
							setState(3254);
							((Alter_external_data_sourceContext)_localctx).credential_name = id();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3257); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,290,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3259);
				match(ALTER);
				setState(3260);
				match(EXTERNAL);
				setState(3261);
				match(DATA);
				setState(3262);
				match(SOURCE);
				setState(3263);
				((Alter_external_data_sourceContext)_localctx).data_source_name = id();
				setState(3264);
				match(WITH);
				setState(3265);
				match(LR_BRACKET);
				setState(3266);
				match(TYPE);
				setState(3267);
				match(EQUAL);
				setState(3268);
				match(BLOB_STORAGE);
				setState(3269);
				match(COMMA);
				setState(3270);
				match(LOCATION);
				setState(3271);
				match(EQUAL);
				setState(3272);
				((Alter_external_data_sourceContext)_localctx).location = match(STRING);
				setState(3277);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3273);
					match(COMMA);
					setState(3274);
					match(CREDENTIAL);
					setState(3275);
					match(EQUAL);
					setState(3276);
					((Alter_external_data_sourceContext)_localctx).credential_name = id();
					}
				}

				setState(3279);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_external_libraryContext extends ParserRuleContext {
		public IdContext library_name;
		public IdContext owner_name;
		public Token client_library;
		public IdContext external_data_source_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode EXTERNAL() { return getToken(TSqlParser.EXTERNAL, 0); }
		public TerminalNode LIBRARY() { return getToken(TSqlParser.LIBRARY, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode SET() { return getToken(TSqlParser.SET, 0); }
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode CONTENT() { return getToken(TSqlParser.CONTENT, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode BINARY() { return getToken(TSqlParser.BINARY, 0); }
		public TerminalNode NONE() { return getToken(TSqlParser.NONE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode PLATFORM() { return getToken(TSqlParser.PLATFORM, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public List<TerminalNode> LANGUAGE() { return getTokens(TSqlParser.LANGUAGE); }
		public TerminalNode LANGUAGE(int i) {
			return getToken(TSqlParser.LANGUAGE, i);
		}
		public List<TerminalNode> DATA_SOURCE() { return getTokens(TSqlParser.DATA_SOURCE); }
		public TerminalNode DATA_SOURCE(int i) {
			return getToken(TSqlParser.DATA_SOURCE, i);
		}
		public List<TerminalNode> R() { return getTokens(TSqlParser.R); }
		public TerminalNode R(int i) {
			return getToken(TSqlParser.R, i);
		}
		public List<TerminalNode> PYTHON() { return getTokens(TSqlParser.PYTHON); }
		public TerminalNode PYTHON(int i) {
			return getToken(TSqlParser.PYTHON, i);
		}
		public TerminalNode WINDOWS() { return getToken(TSqlParser.WINDOWS, 0); }
		public TerminalNode LINUX() { return getToken(TSqlParser.LINUX, 0); }
		public Alter_external_libraryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_external_library; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_external_library(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_external_library(this);
		}
	}

	public final Alter_external_libraryContext alter_external_library() throws RecognitionException {
		Alter_external_libraryContext _localctx = new Alter_external_libraryContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_alter_external_library);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3283);
			match(ALTER);
			setState(3284);
			match(EXTERNAL);
			setState(3285);
			match(LIBRARY);
			setState(3286);
			((Alter_external_libraryContext)_localctx).library_name = id();
			setState(3289);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(3287);
				match(AUTHORIZATION);
				setState(3288);
				((Alter_external_libraryContext)_localctx).owner_name = id();
				}
			}

			setState(3291);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==SET) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			{
			setState(3292);
			match(LR_BRACKET);
			setState(3293);
			match(CONTENT);
			setState(3294);
			match(EQUAL);
			setState(3298);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING:
				{
				setState(3295);
				((Alter_external_libraryContext)_localctx).client_library = match(STRING);
				}
				break;
			case BINARY:
				{
				setState(3296);
				match(BINARY);
				}
				break;
			case NONE:
				{
				setState(3297);
				match(NONE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			{
			setState(3300);
			match(COMMA);
			setState(3301);
			match(PLATFORM);
			setState(3302);
			match(EQUAL);
			setState(3304);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LINUX || _la==WINDOWS) {
				{
				setState(3303);
				_la = _input.LA(1);
				if ( !(_la==LINUX || _la==WINDOWS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3306);
			match(RR_BRACKET);
			}
			setState(3308);
			match(WITH);
			setState(3318); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(3318);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LANGUAGE:
				case COMMA:
					{
					setState(3310);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3309);
						match(COMMA);
						}
					}

					setState(3312);
					match(LANGUAGE);
					setState(3313);
					match(EQUAL);
					setState(3314);
					_la = _input.LA(1);
					if ( !(_la==PYTHON || _la==R) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case DATA_SOURCE:
					{
					setState(3315);
					match(DATA_SOURCE);
					setState(3316);
					match(EQUAL);
					setState(3317);
					((Alter_external_libraryContext)_localctx).external_data_source_name = id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(3320); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==DATA_SOURCE || _la==LANGUAGE || _la==COMMA );
			setState(3322);
			match(RR_BRACKET);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_external_libraryContext extends ParserRuleContext {
		public IdContext library_name;
		public IdContext owner_name;
		public Token client_library;
		public IdContext external_data_source_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode EXTERNAL() { return getToken(TSqlParser.EXTERNAL, 0); }
		public TerminalNode LIBRARY() { return getToken(TSqlParser.LIBRARY, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public TerminalNode BINARY() { return getToken(TSqlParser.BINARY, 0); }
		public TerminalNode NONE() { return getToken(TSqlParser.NONE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode CONTENT() { return getToken(TSqlParser.CONTENT, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode PLATFORM() { return getToken(TSqlParser.PLATFORM, 0); }
		public List<TerminalNode> LANGUAGE() { return getTokens(TSqlParser.LANGUAGE); }
		public TerminalNode LANGUAGE(int i) {
			return getToken(TSqlParser.LANGUAGE, i);
		}
		public List<TerminalNode> DATA_SOURCE() { return getTokens(TSqlParser.DATA_SOURCE); }
		public TerminalNode DATA_SOURCE(int i) {
			return getToken(TSqlParser.DATA_SOURCE, i);
		}
		public List<TerminalNode> R() { return getTokens(TSqlParser.R); }
		public TerminalNode R(int i) {
			return getToken(TSqlParser.R, i);
		}
		public List<TerminalNode> PYTHON() { return getTokens(TSqlParser.PYTHON); }
		public TerminalNode PYTHON(int i) {
			return getToken(TSqlParser.PYTHON, i);
		}
		public TerminalNode WINDOWS() { return getToken(TSqlParser.WINDOWS, 0); }
		public TerminalNode LINUX() { return getToken(TSqlParser.LINUX, 0); }
		public Create_external_libraryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_external_library; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_external_library(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_external_library(this);
		}
	}

	public final Create_external_libraryContext create_external_library() throws RecognitionException {
		Create_external_libraryContext _localctx = new Create_external_libraryContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_create_external_library);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3324);
			match(CREATE);
			setState(3325);
			match(EXTERNAL);
			setState(3326);
			match(LIBRARY);
			setState(3327);
			((Create_external_libraryContext)_localctx).library_name = id();
			setState(3330);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(3328);
				match(AUTHORIZATION);
				setState(3329);
				((Create_external_libraryContext)_localctx).owner_name = id();
				}
			}

			setState(3332);
			match(FROM);
			{
			setState(3334);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3333);
				match(COMMA);
				}
			}

			setState(3337);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(3336);
				match(LR_BRACKET);
				}
			}

			setState(3341);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONTENT) {
				{
				setState(3339);
				match(CONTENT);
				setState(3340);
				match(EQUAL);
				}
			}

			setState(3346);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING:
				{
				setState(3343);
				((Create_external_libraryContext)_localctx).client_library = match(STRING);
				}
				break;
			case BINARY:
				{
				setState(3344);
				match(BINARY);
				}
				break;
			case NONE:
				{
				setState(3345);
				match(NONE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3355);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3348);
				match(COMMA);
				setState(3349);
				match(PLATFORM);
				setState(3350);
				match(EQUAL);
				setState(3352);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINUX || _la==WINDOWS) {
					{
					setState(3351);
					_la = _input.LA(1);
					if ( !(_la==LINUX || _la==WINDOWS) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(3354);
				match(RR_BRACKET);
				}
			}

			}
			setState(3372);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,309,_ctx) ) {
			case 1:
				{
				setState(3357);
				match(WITH);
				setState(3367); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(3367);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case LANGUAGE:
					case COMMA:
						{
						setState(3359);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(3358);
							match(COMMA);
							}
						}

						setState(3361);
						match(LANGUAGE);
						setState(3362);
						match(EQUAL);
						setState(3363);
						_la = _input.LA(1);
						if ( !(_la==PYTHON || _la==R) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case DATA_SOURCE:
						{
						setState(3364);
						match(DATA_SOURCE);
						setState(3365);
						match(EQUAL);
						setState(3366);
						((Create_external_libraryContext)_localctx).external_data_source_name = id();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(3369); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==DATA_SOURCE || _la==LANGUAGE || _la==COMMA );
				setState(3371);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_external_resource_poolContext extends ParserRuleContext {
		public IdContext pool_name;
		public Token max_cpu_percent;
		public Token max_memory_percent;
		public Token max_processes;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode EXTERNAL() { return getToken(TSqlParser.EXTERNAL, 0); }
		public TerminalNode RESOURCE() { return getToken(TSqlParser.RESOURCE, 0); }
		public TerminalNode POOL() { return getToken(TSqlParser.POOL, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode MAX_CPU_PERCENT() { return getToken(TSqlParser.MAX_CPU_PERCENT, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public TerminalNode DEFAULT_DOUBLE_QUOTE() { return getToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, 0); }
		public TerminalNode AFFINITY() { return getToken(TSqlParser.AFFINITY, 0); }
		public TerminalNode CPU() { return getToken(TSqlParser.CPU, 0); }
		public TerminalNode NUMANODE() { return getToken(TSqlParser.NUMANODE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode MAX_MEMORY_PERCENT() { return getToken(TSqlParser.MAX_MEMORY_PERCENT, 0); }
		public TerminalNode MAX_PROCESSES() { return getToken(TSqlParser.MAX_PROCESSES, 0); }
		public TerminalNode AUTO() { return getToken(TSqlParser.AUTO, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<TerminalNode> TO() { return getTokens(TSqlParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(TSqlParser.TO, i);
		}
		public Alter_external_resource_poolContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_external_resource_pool; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_external_resource_pool(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_external_resource_pool(this);
		}
	}

	public final Alter_external_resource_poolContext alter_external_resource_pool() throws RecognitionException {
		Alter_external_resource_poolContext _localctx = new Alter_external_resource_poolContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_alter_external_resource_pool);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3374);
			match(ALTER);
			setState(3375);
			match(EXTERNAL);
			setState(3376);
			match(RESOURCE);
			setState(3377);
			match(POOL);
			setState(3380);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,310,_ctx) ) {
			case 1:
				{
				setState(3378);
				((Alter_external_resource_poolContext)_localctx).pool_name = id();
				}
				break;
			case 2:
				{
				setState(3379);
				match(DEFAULT_DOUBLE_QUOTE);
				}
				break;
			}
			setState(3382);
			match(WITH);
			setState(3383);
			match(LR_BRACKET);
			setState(3384);
			match(MAX_CPU_PERCENT);
			setState(3385);
			match(EQUAL);
			setState(3386);
			((Alter_external_resource_poolContext)_localctx).max_cpu_percent = match(DECIMAL);
			setState(3424);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AFFINITY:
			case COMMA:
				{
				setState(3388);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3387);
					match(COMMA);
					}
				}

				setState(3390);
				match(AFFINITY);
				setState(3391);
				match(CPU);
				setState(3392);
				match(EQUAL);
				setState(3406);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AUTO:
					{
					setState(3393);
					match(AUTO);
					}
					break;
				case DECIMAL:
				case COMMA:
					{
					setState(3402); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							setState(3402);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,313,_ctx) ) {
							case 1:
								{
								setState(3395);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(3394);
									match(COMMA);
									}
								}

								setState(3397);
								match(DECIMAL);
								setState(3398);
								match(TO);
								setState(3399);
								match(DECIMAL);
								}
								break;
							case 2:
								{
								setState(3400);
								match(COMMA);
								setState(3401);
								match(DECIMAL);
								}
								break;
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(3404); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,314,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NUMANODE:
				{
				setState(3408);
				match(NUMANODE);
				setState(3409);
				match(EQUAL);
				setState(3420); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						setState(3420);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,318,_ctx) ) {
						case 1:
							{
							setState(3411);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(3410);
								match(COMMA);
								}
							}

							setState(3413);
							match(DECIMAL);
							setState(3414);
							match(TO);
							setState(3415);
							match(DECIMAL);
							}
							break;
						case 2:
							{
							setState(3417);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(3416);
								match(COMMA);
								}
							}

							setState(3419);
							match(DECIMAL);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3422); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,319,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3432);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,322,_ctx) ) {
			case 1:
				{
				setState(3427);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3426);
					match(COMMA);
					}
				}

				setState(3429);
				match(MAX_MEMORY_PERCENT);
				setState(3430);
				match(EQUAL);
				setState(3431);
				((Alter_external_resource_poolContext)_localctx).max_memory_percent = match(DECIMAL);
				}
				break;
			}
			setState(3440);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MAX_PROCESSES || _la==COMMA) {
				{
				setState(3435);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3434);
					match(COMMA);
					}
				}

				setState(3437);
				match(MAX_PROCESSES);
				setState(3438);
				match(EQUAL);
				setState(3439);
				((Alter_external_resource_poolContext)_localctx).max_processes = match(DECIMAL);
				}
			}

			setState(3442);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_external_resource_poolContext extends ParserRuleContext {
		public IdContext pool_name;
		public Token max_cpu_percent;
		public Token max_memory_percent;
		public Token max_processes;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode EXTERNAL() { return getToken(TSqlParser.EXTERNAL, 0); }
		public TerminalNode RESOURCE() { return getToken(TSqlParser.RESOURCE, 0); }
		public TerminalNode POOL() { return getToken(TSqlParser.POOL, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode MAX_CPU_PERCENT() { return getToken(TSqlParser.MAX_CPU_PERCENT, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public TerminalNode AFFINITY() { return getToken(TSqlParser.AFFINITY, 0); }
		public TerminalNode CPU() { return getToken(TSqlParser.CPU, 0); }
		public TerminalNode NUMANODE() { return getToken(TSqlParser.NUMANODE, 0); }
		public TerminalNode MAX_MEMORY_PERCENT() { return getToken(TSqlParser.MAX_MEMORY_PERCENT, 0); }
		public TerminalNode MAX_PROCESSES() { return getToken(TSqlParser.MAX_PROCESSES, 0); }
		public TerminalNode AUTO() { return getToken(TSqlParser.AUTO, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<TerminalNode> TO() { return getTokens(TSqlParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(TSqlParser.TO, i);
		}
		public Create_external_resource_poolContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_external_resource_pool; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_external_resource_pool(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_external_resource_pool(this);
		}
	}

	public final Create_external_resource_poolContext create_external_resource_pool() throws RecognitionException {
		Create_external_resource_poolContext _localctx = new Create_external_resource_poolContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_create_external_resource_pool);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3444);
			match(CREATE);
			setState(3445);
			match(EXTERNAL);
			setState(3446);
			match(RESOURCE);
			setState(3447);
			match(POOL);
			setState(3448);
			((Create_external_resource_poolContext)_localctx).pool_name = id();
			setState(3449);
			match(WITH);
			setState(3450);
			match(LR_BRACKET);
			setState(3451);
			match(MAX_CPU_PERCENT);
			setState(3452);
			match(EQUAL);
			setState(3453);
			((Create_external_resource_poolContext)_localctx).max_cpu_percent = match(DECIMAL);
			setState(3491);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AFFINITY:
			case COMMA:
				{
				setState(3455);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3454);
					match(COMMA);
					}
				}

				setState(3457);
				match(AFFINITY);
				setState(3458);
				match(CPU);
				setState(3459);
				match(EQUAL);
				setState(3473);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AUTO:
					{
					setState(3460);
					match(AUTO);
					}
					break;
				case DECIMAL:
				case COMMA:
					{
					setState(3469); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							setState(3469);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,327,_ctx) ) {
							case 1:
								{
								setState(3462);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(3461);
									match(COMMA);
									}
								}

								setState(3464);
								match(DECIMAL);
								setState(3465);
								match(TO);
								setState(3466);
								match(DECIMAL);
								}
								break;
							case 2:
								{
								setState(3467);
								match(COMMA);
								setState(3468);
								match(DECIMAL);
								}
								break;
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(3471); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,328,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NUMANODE:
				{
				setState(3475);
				match(NUMANODE);
				setState(3476);
				match(EQUAL);
				setState(3487); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						setState(3487);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,332,_ctx) ) {
						case 1:
							{
							setState(3478);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(3477);
								match(COMMA);
								}
							}

							setState(3480);
							match(DECIMAL);
							setState(3481);
							match(TO);
							setState(3482);
							match(DECIMAL);
							}
							break;
						case 2:
							{
							setState(3484);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(3483);
								match(COMMA);
								}
							}

							setState(3486);
							match(DECIMAL);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3489); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,333,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3499);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,336,_ctx) ) {
			case 1:
				{
				setState(3494);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3493);
					match(COMMA);
					}
				}

				setState(3496);
				match(MAX_MEMORY_PERCENT);
				setState(3497);
				match(EQUAL);
				setState(3498);
				((Create_external_resource_poolContext)_localctx).max_memory_percent = match(DECIMAL);
				}
				break;
			}
			setState(3507);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MAX_PROCESSES || _la==COMMA) {
				{
				setState(3502);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3501);
					match(COMMA);
					}
				}

				setState(3504);
				match(MAX_PROCESSES);
				setState(3505);
				match(EQUAL);
				setState(3506);
				((Create_external_resource_poolContext)_localctx).max_processes = match(DECIMAL);
				}
			}

			setState(3509);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_fulltext_catalogContext extends ParserRuleContext {
		public IdContext catalog_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode FULLTEXT() { return getToken(TSqlParser.FULLTEXT, 0); }
		public TerminalNode CATALOG() { return getToken(TSqlParser.CATALOG, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode REBUILD() { return getToken(TSqlParser.REBUILD, 0); }
		public TerminalNode REORGANIZE() { return getToken(TSqlParser.REORGANIZE, 0); }
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode ACCENT_SENSITIVITY() { return getToken(TSqlParser.ACCENT_SENSITIVITY, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public Alter_fulltext_catalogContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_fulltext_catalog; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_fulltext_catalog(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_fulltext_catalog(this);
		}
	}

	public final Alter_fulltext_catalogContext alter_fulltext_catalog() throws RecognitionException {
		Alter_fulltext_catalogContext _localctx = new Alter_fulltext_catalogContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_alter_fulltext_catalog);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3511);
			match(ALTER);
			setState(3512);
			match(FULLTEXT);
			setState(3513);
			match(CATALOG);
			setState(3514);
			((Alter_fulltext_catalogContext)_localctx).catalog_name = id();
			setState(3525);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REBUILD:
				{
				setState(3515);
				match(REBUILD);
				setState(3520);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,339,_ctx) ) {
				case 1:
					{
					setState(3516);
					match(WITH);
					setState(3517);
					match(ACCENT_SENSITIVITY);
					setState(3518);
					match(EQUAL);
					setState(3519);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case REORGANIZE:
				{
				setState(3522);
				match(REORGANIZE);
				}
				break;
			case AS:
				{
				setState(3523);
				match(AS);
				setState(3524);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_fulltext_catalogContext extends ParserRuleContext {
		public IdContext catalog_name;
		public IdContext filegroup;
		public Token rootpath;
		public IdContext owner_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode FULLTEXT() { return getToken(TSqlParser.FULLTEXT, 0); }
		public TerminalNode CATALOG() { return getToken(TSqlParser.CATALOG, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public TerminalNode FILEGROUP() { return getToken(TSqlParser.FILEGROUP, 0); }
		public TerminalNode IN() { return getToken(TSqlParser.IN, 0); }
		public TerminalNode PATH() { return getToken(TSqlParser.PATH, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode ACCENT_SENSITIVITY() { return getToken(TSqlParser.ACCENT_SENSITIVITY, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public Create_fulltext_catalogContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_fulltext_catalog; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_fulltext_catalog(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_fulltext_catalog(this);
		}
	}

	public final Create_fulltext_catalogContext create_fulltext_catalog() throws RecognitionException {
		Create_fulltext_catalogContext _localctx = new Create_fulltext_catalogContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_create_fulltext_catalog);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3527);
			match(CREATE);
			setState(3528);
			match(FULLTEXT);
			setState(3529);
			match(CATALOG);
			setState(3530);
			((Create_fulltext_catalogContext)_localctx).catalog_name = id();
			setState(3534);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(3531);
				match(ON);
				setState(3532);
				match(FILEGROUP);
				setState(3533);
				((Create_fulltext_catalogContext)_localctx).filegroup = id();
				}
			}

			setState(3539);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(3536);
				match(IN);
				setState(3537);
				match(PATH);
				setState(3538);
				((Create_fulltext_catalogContext)_localctx).rootpath = match(STRING);
				}
			}

			setState(3545);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,343,_ctx) ) {
			case 1:
				{
				setState(3541);
				match(WITH);
				setState(3542);
				match(ACCENT_SENSITIVITY);
				setState(3543);
				match(EQUAL);
				setState(3544);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(3549);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(3547);
				match(AS);
				setState(3548);
				match(DEFAULT);
				}
			}

			setState(3553);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(3551);
				match(AUTHORIZATION);
				setState(3552);
				((Create_fulltext_catalogContext)_localctx).owner_name = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_fulltext_stoplistContext extends ParserRuleContext {
		public IdContext stoplist_name;
		public Token stopword;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode FULLTEXT() { return getToken(TSqlParser.FULLTEXT, 0); }
		public TerminalNode STOPLIST() { return getToken(TSqlParser.STOPLIST, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public TerminalNode LANGUAGE() { return getToken(TSqlParser.LANGUAGE, 0); }
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode BINARY() { return getToken(TSqlParser.BINARY, 0); }
		public TerminalNode ALL() { return getToken(TSqlParser.ALL, 0); }
		public Alter_fulltext_stoplistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_fulltext_stoplist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_fulltext_stoplist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_fulltext_stoplist(this);
		}
	}

	public final Alter_fulltext_stoplistContext alter_fulltext_stoplist() throws RecognitionException {
		Alter_fulltext_stoplistContext _localctx = new Alter_fulltext_stoplistContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_alter_fulltext_stoplist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3555);
			match(ALTER);
			setState(3556);
			match(FULLTEXT);
			setState(3557);
			match(STOPLIST);
			setState(3558);
			((Alter_fulltext_stoplistContext)_localctx).stoplist_name = id();
			setState(3572);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
				{
				setState(3559);
				match(ADD);
				setState(3560);
				((Alter_fulltext_stoplistContext)_localctx).stopword = match(STRING);
				setState(3561);
				match(LANGUAGE);
				setState(3562);
				_la = _input.LA(1);
				if ( !(((((_la - 793)) & ~0x3f) == 0 && ((1L << (_la - 793)) & ((1L << (DECIMAL - 793)) | (1L << (STRING - 793)) | (1L << (BINARY - 793)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case DROP:
				{
				setState(3563);
				match(DROP);
				setState(3570);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,346,_ctx) ) {
				case 1:
					{
					setState(3564);
					((Alter_fulltext_stoplistContext)_localctx).stopword = match(STRING);
					setState(3565);
					match(LANGUAGE);
					setState(3566);
					_la = _input.LA(1);
					if ( !(((((_la - 793)) & ~0x3f) == 0 && ((1L << (_la - 793)) & ((1L << (DECIMAL - 793)) | (1L << (STRING - 793)) | (1L << (BINARY - 793)))) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case 2:
					{
					setState(3567);
					match(ALL);
					setState(3568);
					_la = _input.LA(1);
					if ( !(((((_la - 793)) & ~0x3f) == 0 && ((1L << (_la - 793)) & ((1L << (DECIMAL - 793)) | (1L << (STRING - 793)) | (1L << (BINARY - 793)))) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case 3:
					{
					setState(3569);
					match(ALL);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_fulltext_stoplistContext extends ParserRuleContext {
		public IdContext stoplist_name;
		public IdContext database_name;
		public IdContext source_stoplist_name;
		public IdContext owner_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode FULLTEXT() { return getToken(TSqlParser.FULLTEXT, 0); }
		public List<TerminalNode> STOPLIST() { return getTokens(TSqlParser.STOPLIST); }
		public TerminalNode STOPLIST(int i) {
			return getToken(TSqlParser.STOPLIST, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode SYSTEM() { return getToken(TSqlParser.SYSTEM, 0); }
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Create_fulltext_stoplistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_fulltext_stoplist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_fulltext_stoplist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_fulltext_stoplist(this);
		}
	}

	public final Create_fulltext_stoplistContext create_fulltext_stoplist() throws RecognitionException {
		Create_fulltext_stoplistContext _localctx = new Create_fulltext_stoplistContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_create_fulltext_stoplist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3574);
			match(CREATE);
			setState(3575);
			match(FULLTEXT);
			setState(3576);
			match(STOPLIST);
			setState(3577);
			((Create_fulltext_stoplistContext)_localctx).stoplist_name = id();
			setState(3589);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(3578);
				match(FROM);
				setState(3587);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SID:
				case SOURCE:
				case STATE:
				case START:
				case TARGET:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(3582);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,348,_ctx) ) {
					case 1:
						{
						setState(3579);
						((Create_fulltext_stoplistContext)_localctx).database_name = id();
						setState(3580);
						match(DOT);
						}
						break;
					}
					setState(3584);
					((Create_fulltext_stoplistContext)_localctx).source_stoplist_name = id();
					}
					break;
				case SYSTEM:
					{
					setState(3585);
					match(SYSTEM);
					setState(3586);
					match(STOPLIST);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(3593);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(3591);
				match(AUTHORIZATION);
				setState(3592);
				((Create_fulltext_stoplistContext)_localctx).owner_name = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_login_sql_serverContext extends ParserRuleContext {
		public IdContext login_name;
		public Token password;
		public Token password_hash;
		public Token old_password;
		public IdContext default_database;
		public IdContext default_laguage;
		public IdContext credential_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode LOGIN() { return getToken(TSqlParser.LOGIN, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<TerminalNode> CREDENTIAL() { return getTokens(TSqlParser.CREDENTIAL); }
		public TerminalNode CREDENTIAL(int i) {
			return getToken(TSqlParser.CREDENTIAL, i);
		}
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(TSqlParser.OLD_PASSWORD, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode DEFAULT_DATABASE() { return getToken(TSqlParser.DEFAULT_DATABASE, 0); }
		public TerminalNode DEFAULT_LANGUAGE() { return getToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		public TerminalNode NAME() { return getToken(TSqlParser.NAME, 0); }
		public TerminalNode CHECK_POLICY() { return getToken(TSqlParser.CHECK_POLICY, 0); }
		public TerminalNode CHECK_EXPIRATION() { return getToken(TSqlParser.CHECK_EXPIRATION, 0); }
		public TerminalNode NO() { return getToken(TSqlParser.NO, 0); }
		public TerminalNode ENABLE() { return getToken(TSqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(TSqlParser.DISABLE, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public List<TerminalNode> OFF() { return getTokens(TSqlParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(TSqlParser.OFF, i);
		}
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode HASHED() { return getToken(TSqlParser.HASHED, 0); }
		public List<TerminalNode> MUST_CHANGE() { return getTokens(TSqlParser.MUST_CHANGE); }
		public TerminalNode MUST_CHANGE(int i) {
			return getToken(TSqlParser.MUST_CHANGE, i);
		}
		public List<TerminalNode> UNLOCK() { return getTokens(TSqlParser.UNLOCK); }
		public TerminalNode UNLOCK(int i) {
			return getToken(TSqlParser.UNLOCK, i);
		}
		public TerminalNode BINARY() { return getToken(TSqlParser.BINARY, 0); }
		public Alter_login_sql_serverContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_login_sql_server; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_login_sql_server(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_login_sql_server(this);
		}
	}

	public final Alter_login_sql_serverContext alter_login_sql_server() throws RecognitionException {
		Alter_login_sql_serverContext _localctx = new Alter_login_sql_serverContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_alter_login_sql_server);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3595);
			match(ALTER);
			setState(3596);
			match(LOGIN);
			setState(3597);
			((Alter_login_sql_serverContext)_localctx).login_name = id();
			setState(3665);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,365,_ctx) ) {
			case 1:
				{
				setState(3599);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,352,_ctx) ) {
				case 1:
					{
					setState(3598);
					_la = _input.LA(1);
					if ( !(_la==DISABLE || _la==ENABLE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(3601);
				match(WITH);
				setState(3615);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PASSWORD) {
					{
					{
					setState(3602);
					match(PASSWORD);
					setState(3603);
					match(EQUAL);
					setState(3607);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case STRING:
						{
						setState(3604);
						((Alter_login_sql_serverContext)_localctx).password = match(STRING);
						}
						break;
					case BINARY:
						{
						setState(3605);
						((Alter_login_sql_serverContext)_localctx).password_hash = match(BINARY);
						setState(3606);
						match(HASHED);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(3612);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==MUST_CHANGE || _la==UNLOCK) {
						{
						{
						setState(3609);
						_la = _input.LA(1);
						if ( !(_la==MUST_CHANGE || _la==UNLOCK) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						}
						setState(3614);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(3626);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OLD_PASSWORD) {
					{
					setState(3617);
					match(OLD_PASSWORD);
					setState(3618);
					match(EQUAL);
					setState(3619);
					((Alter_login_sql_serverContext)_localctx).old_password = match(STRING);
					setState(3623);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==MUST_CHANGE || _la==UNLOCK) {
						{
						{
						setState(3620);
						_la = _input.LA(1);
						if ( !(_la==MUST_CHANGE || _la==UNLOCK) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						}
						setState(3625);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(3631);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT_DATABASE) {
					{
					setState(3628);
					match(DEFAULT_DATABASE);
					setState(3629);
					match(EQUAL);
					setState(3630);
					((Alter_login_sql_serverContext)_localctx).default_database = id();
					}
				}

				setState(3636);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,359,_ctx) ) {
				case 1:
					{
					setState(3633);
					match(DEFAULT_LANGUAGE);
					setState(3634);
					match(EQUAL);
					setState(3635);
					((Alter_login_sql_serverContext)_localctx).default_laguage = id();
					}
					break;
				}
				setState(3641);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,360,_ctx) ) {
				case 1:
					{
					setState(3638);
					match(NAME);
					setState(3639);
					match(EQUAL);
					setState(3640);
					((Alter_login_sql_serverContext)_localctx).login_name = id();
					}
					break;
				}
				setState(3646);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHECK_POLICY) {
					{
					setState(3643);
					match(CHECK_POLICY);
					setState(3644);
					match(EQUAL);
					setState(3645);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(3651);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHECK_EXPIRATION) {
					{
					setState(3648);
					match(CHECK_EXPIRATION);
					setState(3649);
					match(EQUAL);
					setState(3650);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(3656);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,363,_ctx) ) {
				case 1:
					{
					setState(3653);
					match(CREDENTIAL);
					setState(3654);
					match(EQUAL);
					setState(3655);
					((Alter_login_sql_serverContext)_localctx).credential_name = id();
					}
					break;
				}
				setState(3660);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,364,_ctx) ) {
				case 1:
					{
					setState(3658);
					match(NO);
					setState(3659);
					match(CREDENTIAL);
					}
					break;
				}
				}
				break;
			case 3:
				{
				setState(3662);
				_la = _input.LA(1);
				if ( !(_la==ADD || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3663);
				match(CREDENTIAL);
				setState(3664);
				((Alter_login_sql_serverContext)_localctx).credential_name = id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_login_sql_serverContext extends ParserRuleContext {
		public IdContext login_name;
		public Token password;
		public Token password_hash;
		public Token sid;
		public IdContext default_database;
		public IdContext default_laguage;
		public IdContext credential_name;
		public Token default_language;
		public IdContext certname;
		public IdContext asym_key_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode LOGIN() { return getToken(TSqlParser.LOGIN, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public TerminalNode SID() { return getToken(TSqlParser.SID, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode DEFAULT_DATABASE() { return getToken(TSqlParser.DEFAULT_DATABASE, 0); }
		public TerminalNode DEFAULT_LANGUAGE() { return getToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		public TerminalNode CHECK_EXPIRATION() { return getToken(TSqlParser.CHECK_EXPIRATION, 0); }
		public TerminalNode CHECK_POLICY() { return getToken(TSqlParser.CHECK_POLICY, 0); }
		public TerminalNode CREDENTIAL() { return getToken(TSqlParser.CREDENTIAL, 0); }
		public List<TerminalNode> BINARY() { return getTokens(TSqlParser.BINARY); }
		public TerminalNode BINARY(int i) {
			return getToken(TSqlParser.BINARY, i);
		}
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public List<TerminalNode> OFF() { return getTokens(TSqlParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(TSqlParser.OFF, i);
		}
		public TerminalNode WINDOWS() { return getToken(TSqlParser.WINDOWS, 0); }
		public TerminalNode CERTIFICATE() { return getToken(TSqlParser.CERTIFICATE, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(TSqlParser.ASYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode HASHED() { return getToken(TSqlParser.HASHED, 0); }
		public List<TerminalNode> MUST_CHANGE() { return getTokens(TSqlParser.MUST_CHANGE); }
		public TerminalNode MUST_CHANGE(int i) {
			return getToken(TSqlParser.MUST_CHANGE, i);
		}
		public List<TerminalNode> UNLOCK() { return getTokens(TSqlParser.UNLOCK); }
		public TerminalNode UNLOCK(int i) {
			return getToken(TSqlParser.UNLOCK, i);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Create_login_sql_serverContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_login_sql_server; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_login_sql_server(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_login_sql_server(this);
		}
	}

	public final Create_login_sql_serverContext create_login_sql_server() throws RecognitionException {
		Create_login_sql_serverContext _localctx = new Create_login_sql_serverContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_create_login_sql_server);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3667);
			match(CREATE);
			setState(3668);
			match(LOGIN);
			setState(3669);
			((Create_login_sql_serverContext)_localctx).login_name = id();
			setState(3760);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				{
				setState(3670);
				match(WITH);
				setState(3684);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PASSWORD) {
					{
					{
					setState(3671);
					match(PASSWORD);
					setState(3672);
					match(EQUAL);
					setState(3676);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case STRING:
						{
						setState(3673);
						((Create_login_sql_serverContext)_localctx).password = match(STRING);
						}
						break;
					case BINARY:
						{
						setState(3674);
						((Create_login_sql_serverContext)_localctx).password_hash = match(BINARY);
						setState(3675);
						match(HASHED);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(3681);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==MUST_CHANGE || _la==UNLOCK) {
						{
						{
						setState(3678);
						_la = _input.LA(1);
						if ( !(_la==MUST_CHANGE || _la==UNLOCK) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						}
						setState(3683);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(3692);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,370,_ctx) ) {
				case 1:
					{
					setState(3687);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3686);
						match(COMMA);
						}
					}

					setState(3689);
					match(SID);
					setState(3690);
					match(EQUAL);
					setState(3691);
					((Create_login_sql_serverContext)_localctx).sid = match(BINARY);
					}
					break;
				}
				setState(3700);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,372,_ctx) ) {
				case 1:
					{
					setState(3695);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3694);
						match(COMMA);
						}
					}

					setState(3697);
					match(DEFAULT_DATABASE);
					setState(3698);
					match(EQUAL);
					setState(3699);
					((Create_login_sql_serverContext)_localctx).default_database = id();
					}
					break;
				}
				setState(3708);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,374,_ctx) ) {
				case 1:
					{
					setState(3703);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3702);
						match(COMMA);
						}
					}

					setState(3705);
					match(DEFAULT_LANGUAGE);
					setState(3706);
					match(EQUAL);
					setState(3707);
					((Create_login_sql_serverContext)_localctx).default_laguage = id();
					}
					break;
				}
				setState(3716);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,376,_ctx) ) {
				case 1:
					{
					setState(3711);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3710);
						match(COMMA);
						}
					}

					setState(3713);
					match(CHECK_EXPIRATION);
					setState(3714);
					match(EQUAL);
					setState(3715);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(3724);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,378,_ctx) ) {
				case 1:
					{
					setState(3719);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3718);
						match(COMMA);
						}
					}

					setState(3721);
					match(CHECK_POLICY);
					setState(3722);
					match(EQUAL);
					setState(3723);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(3732);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,380,_ctx) ) {
				case 1:
					{
					setState(3727);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3726);
						match(COMMA);
						}
					}

					setState(3729);
					match(CREDENTIAL);
					setState(3730);
					match(EQUAL);
					setState(3731);
					((Create_login_sql_serverContext)_localctx).credential_name = id();
					}
					break;
				}
				}
				break;
			case FROM:
				{
				{
				setState(3734);
				match(FROM);
				setState(3758);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WINDOWS:
					{
					setState(3735);
					match(WINDOWS);
					{
					setState(3736);
					match(WITH);
					setState(3743);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,382,_ctx) ) {
					case 1:
						{
						setState(3738);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(3737);
							match(COMMA);
							}
						}

						setState(3740);
						match(DEFAULT_DATABASE);
						setState(3741);
						match(EQUAL);
						setState(3742);
						((Create_login_sql_serverContext)_localctx).default_database = id();
						}
						break;
					}
					setState(3751);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,384,_ctx) ) {
					case 1:
						{
						setState(3746);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(3745);
							match(COMMA);
							}
						}

						setState(3748);
						match(DEFAULT_LANGUAGE);
						setState(3749);
						match(EQUAL);
						setState(3750);
						((Create_login_sql_serverContext)_localctx).default_language = match(STRING);
						}
						break;
					}
					}
					}
					break;
				case CERTIFICATE:
					{
					setState(3753);
					match(CERTIFICATE);
					setState(3754);
					((Create_login_sql_serverContext)_localctx).certname = id();
					}
					break;
				case ASYMMETRIC:
					{
					setState(3755);
					match(ASYMMETRIC);
					setState(3756);
					match(KEY);
					setState(3757);
					((Create_login_sql_serverContext)_localctx).asym_key_name = id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_login_azure_sqlContext extends ParserRuleContext {
		public IdContext login_name;
		public Token password;
		public Token old_password;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode LOGIN() { return getToken(TSqlParser.LOGIN, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode NAME() { return getToken(TSqlParser.NAME, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode ENABLE() { return getToken(TSqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(TSqlParser.DISABLE, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(TSqlParser.OLD_PASSWORD, 0); }
		public Alter_login_azure_sqlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_login_azure_sql; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_login_azure_sql(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_login_azure_sql(this);
		}
	}

	public final Alter_login_azure_sqlContext alter_login_azure_sql() throws RecognitionException {
		Alter_login_azure_sqlContext _localctx = new Alter_login_azure_sqlContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_alter_login_azure_sql);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3762);
			match(ALTER);
			setState(3763);
			match(LOGIN);
			setState(3764);
			((Alter_login_azure_sqlContext)_localctx).login_name = id();
			setState(3782);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,390,_ctx) ) {
			case 1:
				{
				setState(3766);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,387,_ctx) ) {
				case 1:
					{
					setState(3765);
					_la = _input.LA(1);
					if ( !(_la==DISABLE || _la==ENABLE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(3768);
				match(WITH);
				setState(3780);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PASSWORD:
					{
					setState(3769);
					match(PASSWORD);
					setState(3770);
					match(EQUAL);
					setState(3771);
					((Alter_login_azure_sqlContext)_localctx).password = match(STRING);
					setState(3775);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OLD_PASSWORD) {
						{
						setState(3772);
						match(OLD_PASSWORD);
						setState(3773);
						match(EQUAL);
						setState(3774);
						((Alter_login_azure_sqlContext)_localctx).old_password = match(STRING);
						}
					}

					}
					break;
				case NAME:
					{
					setState(3777);
					match(NAME);
					setState(3778);
					match(EQUAL);
					setState(3779);
					((Alter_login_azure_sqlContext)_localctx).login_name = id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_login_azure_sqlContext extends ParserRuleContext {
		public IdContext login_name;
		public Token sid;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode LOGIN() { return getToken(TSqlParser.LOGIN, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode SID() { return getToken(TSqlParser.SID, 0); }
		public TerminalNode BINARY() { return getToken(TSqlParser.BINARY, 0); }
		public Create_login_azure_sqlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_login_azure_sql; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_login_azure_sql(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_login_azure_sql(this);
		}
	}

	public final Create_login_azure_sqlContext create_login_azure_sql() throws RecognitionException {
		Create_login_azure_sqlContext _localctx = new Create_login_azure_sqlContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_create_login_azure_sql);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3784);
			match(CREATE);
			setState(3785);
			match(LOGIN);
			setState(3786);
			((Create_login_azure_sqlContext)_localctx).login_name = id();
			setState(3787);
			match(WITH);
			setState(3788);
			match(PASSWORD);
			setState(3789);
			match(EQUAL);
			setState(3790);
			match(STRING);
			setState(3794);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,391,_ctx) ) {
			case 1:
				{
				setState(3791);
				match(SID);
				setState(3792);
				match(EQUAL);
				setState(3793);
				((Create_login_azure_sqlContext)_localctx).sid = match(BINARY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_login_azure_sql_dw_and_pdwContext extends ParserRuleContext {
		public IdContext login_name;
		public Token password;
		public Token old_password;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode LOGIN() { return getToken(TSqlParser.LOGIN, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode NAME() { return getToken(TSqlParser.NAME, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode ENABLE() { return getToken(TSqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(TSqlParser.DISABLE, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(TSqlParser.OLD_PASSWORD, 0); }
		public List<TerminalNode> MUST_CHANGE() { return getTokens(TSqlParser.MUST_CHANGE); }
		public TerminalNode MUST_CHANGE(int i) {
			return getToken(TSqlParser.MUST_CHANGE, i);
		}
		public List<TerminalNode> UNLOCK() { return getTokens(TSqlParser.UNLOCK); }
		public TerminalNode UNLOCK(int i) {
			return getToken(TSqlParser.UNLOCK, i);
		}
		public Alter_login_azure_sql_dw_and_pdwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_login_azure_sql_dw_and_pdw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_login_azure_sql_dw_and_pdw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_login_azure_sql_dw_and_pdw(this);
		}
	}

	public final Alter_login_azure_sql_dw_and_pdwContext alter_login_azure_sql_dw_and_pdw() throws RecognitionException {
		Alter_login_azure_sql_dw_and_pdwContext _localctx = new Alter_login_azure_sql_dw_and_pdwContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_alter_login_azure_sql_dw_and_pdw);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3796);
			match(ALTER);
			setState(3797);
			match(LOGIN);
			setState(3798);
			((Alter_login_azure_sql_dw_and_pdwContext)_localctx).login_name = id();
			setState(3822);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,396,_ctx) ) {
			case 1:
				{
				setState(3800);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,392,_ctx) ) {
				case 1:
					{
					setState(3799);
					_la = _input.LA(1);
					if ( !(_la==DISABLE || _la==ENABLE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(3802);
				match(WITH);
				setState(3820);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PASSWORD:
					{
					setState(3803);
					match(PASSWORD);
					setState(3804);
					match(EQUAL);
					setState(3805);
					((Alter_login_azure_sql_dw_and_pdwContext)_localctx).password = match(STRING);
					setState(3815);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OLD_PASSWORD) {
						{
						setState(3806);
						match(OLD_PASSWORD);
						setState(3807);
						match(EQUAL);
						setState(3808);
						((Alter_login_azure_sql_dw_and_pdwContext)_localctx).old_password = match(STRING);
						setState(3812);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==MUST_CHANGE || _la==UNLOCK) {
							{
							{
							setState(3809);
							_la = _input.LA(1);
							if ( !(_la==MUST_CHANGE || _la==UNLOCK) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							}
							setState(3814);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
					}

					}
					break;
				case NAME:
					{
					setState(3817);
					match(NAME);
					setState(3818);
					match(EQUAL);
					setState(3819);
					((Alter_login_azure_sql_dw_and_pdwContext)_localctx).login_name = id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_login_pdwContext extends ParserRuleContext {
		public IdContext loginName;
		public Token password;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode LOGIN() { return getToken(TSqlParser.LOGIN, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public TerminalNode WINDOWS() { return getToken(TSqlParser.WINDOWS, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode MUST_CHANGE() { return getToken(TSqlParser.MUST_CHANGE, 0); }
		public TerminalNode CHECK_POLICY() { return getToken(TSqlParser.CHECK_POLICY, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public Create_login_pdwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_login_pdw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_login_pdw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_login_pdw(this);
		}
	}

	public final Create_login_pdwContext create_login_pdw() throws RecognitionException {
		Create_login_pdwContext _localctx = new Create_login_pdwContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_create_login_pdw);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3824);
			match(CREATE);
			setState(3825);
			match(LOGIN);
			setState(3826);
			((Create_login_pdwContext)_localctx).loginName = id();
			setState(3843);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				{
				setState(3827);
				match(WITH);
				{
				setState(3828);
				match(PASSWORD);
				setState(3829);
				match(EQUAL);
				setState(3830);
				((Create_login_pdwContext)_localctx).password = match(STRING);
				setState(3832);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MUST_CHANGE) {
					{
					setState(3831);
					match(MUST_CHANGE);
					}
				}

				setState(3839);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHECK_POLICY) {
					{
					setState(3834);
					match(CHECK_POLICY);
					setState(3835);
					match(EQUAL);
					setState(3837);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OFF || _la==ON) {
						{
						setState(3836);
						_la = _input.LA(1);
						if ( !(_la==OFF || _la==ON) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					}
				}

				}
				}
				break;
			case FROM:
				{
				setState(3841);
				match(FROM);
				setState(3842);
				match(WINDOWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_master_key_sql_serverContext extends ParserRuleContext {
		public Token password;
		public Token encryption_password;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public List<TerminalNode> MASTER() { return getTokens(TSqlParser.MASTER); }
		public TerminalNode MASTER(int i) {
			return getToken(TSqlParser.MASTER, i);
		}
		public List<TerminalNode> KEY() { return getTokens(TSqlParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(TSqlParser.KEY, i);
		}
		public TerminalNode REGENERATE() { return getToken(TSqlParser.REGENERATE, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode SERVICE() { return getToken(TSqlParser.SERVICE, 0); }
		public TerminalNode FORCE() { return getToken(TSqlParser.FORCE, 0); }
		public Alter_master_key_sql_serverContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_master_key_sql_server; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_master_key_sql_server(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_master_key_sql_server(this);
		}
	}

	public final Alter_master_key_sql_serverContext alter_master_key_sql_server() throws RecognitionException {
		Alter_master_key_sql_serverContext _localctx = new Alter_master_key_sql_serverContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_alter_master_key_sql_server);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3845);
			match(ALTER);
			setState(3846);
			match(MASTER);
			setState(3847);
			match(KEY);
			setState(3869);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REGENERATE:
			case FORCE:
				{
				setState(3849);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FORCE) {
					{
					setState(3848);
					match(FORCE);
					}
				}

				setState(3851);
				match(REGENERATE);
				setState(3852);
				match(WITH);
				setState(3853);
				match(ENCRYPTION);
				setState(3854);
				match(BY);
				setState(3855);
				match(PASSWORD);
				setState(3856);
				match(EQUAL);
				setState(3857);
				((Alter_master_key_sql_serverContext)_localctx).password = match(STRING);
				}
				break;
			case ADD:
			case DROP:
				{
				setState(3858);
				_la = _input.LA(1);
				if ( !(_la==ADD || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3859);
				match(ENCRYPTION);
				setState(3860);
				match(BY);
				setState(3867);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SERVICE:
					{
					setState(3861);
					match(SERVICE);
					setState(3862);
					match(MASTER);
					setState(3863);
					match(KEY);
					}
					break;
				case PASSWORD:
					{
					setState(3864);
					match(PASSWORD);
					setState(3865);
					match(EQUAL);
					setState(3866);
					((Alter_master_key_sql_serverContext)_localctx).encryption_password = match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_master_key_sql_serverContext extends ParserRuleContext {
		public Token password;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode MASTER() { return getToken(TSqlParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Create_master_key_sql_serverContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_master_key_sql_server; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_master_key_sql_server(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_master_key_sql_server(this);
		}
	}

	public final Create_master_key_sql_serverContext create_master_key_sql_server() throws RecognitionException {
		Create_master_key_sql_serverContext _localctx = new Create_master_key_sql_serverContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_create_master_key_sql_server);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3871);
			match(CREATE);
			setState(3872);
			match(MASTER);
			setState(3873);
			match(KEY);
			setState(3874);
			match(ENCRYPTION);
			setState(3875);
			match(BY);
			setState(3876);
			match(PASSWORD);
			setState(3877);
			match(EQUAL);
			setState(3878);
			((Create_master_key_sql_serverContext)_localctx).password = match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_master_key_azure_sqlContext extends ParserRuleContext {
		public Token password;
		public Token encryption_password;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public List<TerminalNode> MASTER() { return getTokens(TSqlParser.MASTER); }
		public TerminalNode MASTER(int i) {
			return getToken(TSqlParser.MASTER, i);
		}
		public List<TerminalNode> KEY() { return getTokens(TSqlParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(TSqlParser.KEY, i);
		}
		public TerminalNode REGENERATE() { return getToken(TSqlParser.REGENERATE, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode SERVICE() { return getToken(TSqlParser.SERVICE, 0); }
		public TerminalNode FORCE() { return getToken(TSqlParser.FORCE, 0); }
		public Alter_master_key_azure_sqlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_master_key_azure_sql; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_master_key_azure_sql(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_master_key_azure_sql(this);
		}
	}

	public final Alter_master_key_azure_sqlContext alter_master_key_azure_sql() throws RecognitionException {
		Alter_master_key_azure_sqlContext _localctx = new Alter_master_key_azure_sqlContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_alter_master_key_azure_sql);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3880);
			match(ALTER);
			setState(3881);
			match(MASTER);
			setState(3882);
			match(KEY);
			setState(3910);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REGENERATE:
			case FORCE:
				{
				setState(3884);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FORCE) {
					{
					setState(3883);
					match(FORCE);
					}
				}

				setState(3886);
				match(REGENERATE);
				setState(3887);
				match(WITH);
				setState(3888);
				match(ENCRYPTION);
				setState(3889);
				match(BY);
				setState(3890);
				match(PASSWORD);
				setState(3891);
				match(EQUAL);
				setState(3892);
				((Alter_master_key_azure_sqlContext)_localctx).password = match(STRING);
				}
				break;
			case ADD:
				{
				setState(3893);
				match(ADD);
				setState(3894);
				match(ENCRYPTION);
				setState(3895);
				match(BY);
				setState(3902);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SERVICE:
					{
					setState(3896);
					match(SERVICE);
					setState(3897);
					match(MASTER);
					setState(3898);
					match(KEY);
					}
					break;
				case PASSWORD:
					{
					setState(3899);
					match(PASSWORD);
					setState(3900);
					match(EQUAL);
					setState(3901);
					((Alter_master_key_azure_sqlContext)_localctx).encryption_password = match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DROP:
				{
				setState(3904);
				match(DROP);
				setState(3905);
				match(ENCRYPTION);
				setState(3906);
				match(BY);
				setState(3907);
				match(PASSWORD);
				setState(3908);
				match(EQUAL);
				setState(3909);
				((Alter_master_key_azure_sqlContext)_localctx).encryption_password = match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_master_key_azure_sqlContext extends ParserRuleContext {
		public Token password;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode MASTER() { return getToken(TSqlParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Create_master_key_azure_sqlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_master_key_azure_sql; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_master_key_azure_sql(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_master_key_azure_sql(this);
		}
	}

	public final Create_master_key_azure_sqlContext create_master_key_azure_sql() throws RecognitionException {
		Create_master_key_azure_sqlContext _localctx = new Create_master_key_azure_sqlContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_create_master_key_azure_sql);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3912);
			match(CREATE);
			setState(3913);
			match(MASTER);
			setState(3914);
			match(KEY);
			setState(3920);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,407,_ctx) ) {
			case 1:
				{
				setState(3915);
				match(ENCRYPTION);
				setState(3916);
				match(BY);
				setState(3917);
				match(PASSWORD);
				setState(3918);
				match(EQUAL);
				setState(3919);
				((Create_master_key_azure_sqlContext)_localctx).password = match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_message_typeContext extends ParserRuleContext {
		public IdContext message_type_name;
		public IdContext schema_collection_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode MESSAGE() { return getToken(TSqlParser.MESSAGE, 0); }
		public TerminalNode TYPE() { return getToken(TSqlParser.TYPE, 0); }
		public TerminalNode VALIDATION() { return getToken(TSqlParser.VALIDATION, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode NONE() { return getToken(TSqlParser.NONE, 0); }
		public TerminalNode EMPTY() { return getToken(TSqlParser.EMPTY, 0); }
		public TerminalNode WELL_FORMED_XML() { return getToken(TSqlParser.WELL_FORMED_XML, 0); }
		public TerminalNode VALID_XML() { return getToken(TSqlParser.VALID_XML, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode SCHEMA() { return getToken(TSqlParser.SCHEMA, 0); }
		public TerminalNode COLLECTION() { return getToken(TSqlParser.COLLECTION, 0); }
		public Alter_message_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_message_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_message_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_message_type(this);
		}
	}

	public final Alter_message_typeContext alter_message_type() throws RecognitionException {
		Alter_message_typeContext _localctx = new Alter_message_typeContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_alter_message_type);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3922);
			match(ALTER);
			setState(3923);
			match(MESSAGE);
			setState(3924);
			match(TYPE);
			setState(3925);
			((Alter_message_typeContext)_localctx).message_type_name = id();
			setState(3926);
			match(VALIDATION);
			setState(3927);
			match(EQUAL);
			setState(3936);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NONE:
				{
				setState(3928);
				match(NONE);
				}
				break;
			case EMPTY:
				{
				setState(3929);
				match(EMPTY);
				}
				break;
			case WELL_FORMED_XML:
				{
				setState(3930);
				match(WELL_FORMED_XML);
				}
				break;
			case VALID_XML:
				{
				setState(3931);
				match(VALID_XML);
				setState(3932);
				match(WITH);
				setState(3933);
				match(SCHEMA);
				setState(3934);
				match(COLLECTION);
				setState(3935);
				((Alter_message_typeContext)_localctx).schema_collection_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_partition_functionContext extends ParserRuleContext {
		public IdContext partition_function_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode PARTITION() { return getToken(TSqlParser.PARTITION, 0); }
		public TerminalNode FUNCTION() { return getToken(TSqlParser.FUNCTION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public TerminalNode RANGE() { return getToken(TSqlParser.RANGE, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode SPLIT() { return getToken(TSqlParser.SPLIT, 0); }
		public TerminalNode MERGE() { return getToken(TSqlParser.MERGE, 0); }
		public Alter_partition_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_partition_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_partition_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_partition_function(this);
		}
	}

	public final Alter_partition_functionContext alter_partition_function() throws RecognitionException {
		Alter_partition_functionContext _localctx = new Alter_partition_functionContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_alter_partition_function);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3938);
			match(ALTER);
			setState(3939);
			match(PARTITION);
			setState(3940);
			match(FUNCTION);
			setState(3941);
			((Alter_partition_functionContext)_localctx).partition_function_name = id();
			setState(3942);
			match(LR_BRACKET);
			setState(3943);
			match(RR_BRACKET);
			setState(3944);
			_la = _input.LA(1);
			if ( !(_la==MERGE || _la==SPLIT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3945);
			match(RANGE);
			setState(3946);
			match(LR_BRACKET);
			setState(3947);
			match(DECIMAL);
			setState(3948);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_partition_schemeContext extends ParserRuleContext {
		public IdContext partition_scheme_name;
		public IdContext file_group_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode PARTITION() { return getToken(TSqlParser.PARTITION, 0); }
		public TerminalNode SCHEME() { return getToken(TSqlParser.SCHEME, 0); }
		public TerminalNode NEXT() { return getToken(TSqlParser.NEXT, 0); }
		public TerminalNode USED() { return getToken(TSqlParser.USED, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Alter_partition_schemeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_partition_scheme; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_partition_scheme(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_partition_scheme(this);
		}
	}

	public final Alter_partition_schemeContext alter_partition_scheme() throws RecognitionException {
		Alter_partition_schemeContext _localctx = new Alter_partition_schemeContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_alter_partition_scheme);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3950);
			match(ALTER);
			setState(3951);
			match(PARTITION);
			setState(3952);
			match(SCHEME);
			setState(3953);
			((Alter_partition_schemeContext)_localctx).partition_scheme_name = id();
			setState(3954);
			match(NEXT);
			setState(3955);
			match(USED);
			setState(3957);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,409,_ctx) ) {
			case 1:
				{
				setState(3956);
				((Alter_partition_schemeContext)_localctx).file_group_name = id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_remote_service_bindingContext extends ParserRuleContext {
		public IdContext binding_name;
		public IdContext user_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode REMOTE() { return getToken(TSqlParser.REMOTE, 0); }
		public TerminalNode SERVICE() { return getToken(TSqlParser.SERVICE, 0); }
		public TerminalNode BINDING() { return getToken(TSqlParser.BINDING, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode USER() { return getToken(TSqlParser.USER, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public TerminalNode ANONYMOUS() { return getToken(TSqlParser.ANONYMOUS, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public Alter_remote_service_bindingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_remote_service_binding; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_remote_service_binding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_remote_service_binding(this);
		}
	}

	public final Alter_remote_service_bindingContext alter_remote_service_binding() throws RecognitionException {
		Alter_remote_service_bindingContext _localctx = new Alter_remote_service_bindingContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_alter_remote_service_binding);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3959);
			match(ALTER);
			setState(3960);
			match(REMOTE);
			setState(3961);
			match(SERVICE);
			setState(3962);
			match(BINDING);
			setState(3963);
			((Alter_remote_service_bindingContext)_localctx).binding_name = id();
			setState(3964);
			match(WITH);
			setState(3968);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USER) {
				{
				setState(3965);
				match(USER);
				setState(3966);
				match(EQUAL);
				setState(3967);
				((Alter_remote_service_bindingContext)_localctx).user_name = id();
				}
			}

			setState(3974);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3970);
				match(COMMA);
				setState(3971);
				match(ANONYMOUS);
				setState(3972);
				match(EQUAL);
				setState(3973);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_remote_service_bindingContext extends ParserRuleContext {
		public IdContext binding_name;
		public IdContext owner_name;
		public Token remote_service_name;
		public IdContext user_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode REMOTE() { return getToken(TSqlParser.REMOTE, 0); }
		public List<TerminalNode> SERVICE() { return getTokens(TSqlParser.SERVICE); }
		public TerminalNode SERVICE(int i) {
			return getToken(TSqlParser.SERVICE, i);
		}
		public TerminalNode BINDING() { return getToken(TSqlParser.BINDING, 0); }
		public TerminalNode TO() { return getToken(TSqlParser.TO, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode USER() { return getToken(TSqlParser.USER, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public TerminalNode ANONYMOUS() { return getToken(TSqlParser.ANONYMOUS, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public Create_remote_service_bindingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_remote_service_binding; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_remote_service_binding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_remote_service_binding(this);
		}
	}

	public final Create_remote_service_bindingContext create_remote_service_binding() throws RecognitionException {
		Create_remote_service_bindingContext _localctx = new Create_remote_service_bindingContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_create_remote_service_binding);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3976);
			match(CREATE);
			setState(3977);
			match(REMOTE);
			setState(3978);
			match(SERVICE);
			setState(3979);
			match(BINDING);
			setState(3980);
			((Create_remote_service_bindingContext)_localctx).binding_name = id();
			setState(3983);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(3981);
				match(AUTHORIZATION);
				setState(3982);
				((Create_remote_service_bindingContext)_localctx).owner_name = id();
				}
			}

			setState(3985);
			match(TO);
			setState(3986);
			match(SERVICE);
			setState(3987);
			((Create_remote_service_bindingContext)_localctx).remote_service_name = match(STRING);
			setState(3988);
			match(WITH);
			setState(3992);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USER) {
				{
				setState(3989);
				match(USER);
				setState(3990);
				match(EQUAL);
				setState(3991);
				((Create_remote_service_bindingContext)_localctx).user_name = id();
				}
			}

			setState(3998);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3994);
				match(COMMA);
				setState(3995);
				match(ANONYMOUS);
				setState(3996);
				match(EQUAL);
				setState(3997);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_resource_poolContext extends ParserRuleContext {
		public IdContext pool_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode RESOURCE() { return getToken(TSqlParser.RESOURCE, 0); }
		public TerminalNode POOL() { return getToken(TSqlParser.POOL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public TerminalNode MIN_CPU_PERCENT() { return getToken(TSqlParser.MIN_CPU_PERCENT, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public TerminalNode MAX_CPU_PERCENT() { return getToken(TSqlParser.MAX_CPU_PERCENT, 0); }
		public TerminalNode CAP_CPU_PERCENT() { return getToken(TSqlParser.CAP_CPU_PERCENT, 0); }
		public TerminalNode AFFINITY() { return getToken(TSqlParser.AFFINITY, 0); }
		public TerminalNode SCHEDULER() { return getToken(TSqlParser.SCHEDULER, 0); }
		public TerminalNode MIN_MEMORY_PERCENT() { return getToken(TSqlParser.MIN_MEMORY_PERCENT, 0); }
		public TerminalNode MAX_MEMORY_PERCENT() { return getToken(TSqlParser.MAX_MEMORY_PERCENT, 0); }
		public TerminalNode MIN_IOPS_PER_VOLUME() { return getToken(TSqlParser.MIN_IOPS_PER_VOLUME, 0); }
		public TerminalNode MAX_IOPS_PER_VOLUME() { return getToken(TSqlParser.MAX_IOPS_PER_VOLUME, 0); }
		public TerminalNode AUTO() { return getToken(TSqlParser.AUTO, 0); }
		public TerminalNode NUMANODE() { return getToken(TSqlParser.NUMANODE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<TerminalNode> TO() { return getTokens(TSqlParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(TSqlParser.TO, i);
		}
		public Create_resource_poolContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_resource_pool; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_resource_pool(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_resource_pool(this);
		}
	}

	public final Create_resource_poolContext create_resource_pool() throws RecognitionException {
		Create_resource_poolContext _localctx = new Create_resource_poolContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_create_resource_pool);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4000);
			match(CREATE);
			setState(4001);
			match(RESOURCE);
			setState(4002);
			match(POOL);
			setState(4003);
			((Create_resource_poolContext)_localctx).pool_name = id();
			setState(4106);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,438,_ctx) ) {
			case 1:
				{
				setState(4004);
				match(WITH);
				setState(4005);
				match(LR_BRACKET);
				setState(4012);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,416,_ctx) ) {
				case 1:
					{
					setState(4007);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4006);
						match(COMMA);
						}
					}

					setState(4009);
					match(MIN_CPU_PERCENT);
					setState(4010);
					match(EQUAL);
					setState(4011);
					match(DECIMAL);
					}
					break;
				}
				setState(4020);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,418,_ctx) ) {
				case 1:
					{
					setState(4015);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4014);
						match(COMMA);
						}
					}

					setState(4017);
					match(MAX_CPU_PERCENT);
					setState(4018);
					match(EQUAL);
					setState(4019);
					match(DECIMAL);
					}
					break;
				}
				setState(4028);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,420,_ctx) ) {
				case 1:
					{
					setState(4023);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4022);
						match(COMMA);
						}
					}

					setState(4025);
					match(CAP_CPU_PERCENT);
					setState(4026);
					match(EQUAL);
					setState(4027);
					match(DECIMAL);
					}
					break;
				}
				setState(4071);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,429,_ctx) ) {
				case 1:
					{
					setState(4031);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4030);
						match(COMMA);
						}
					}

					setState(4033);
					match(AFFINITY);
					setState(4034);
					match(SCHEDULER);
					setState(4035);
					match(EQUAL);
					setState(4069);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case AUTO:
						{
						setState(4036);
						match(AUTO);
						}
						break;
					case LR_BRACKET:
						{
						setState(4037);
						match(LR_BRACKET);
						setState(4047); 
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
							{
							setState(4039);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4038);
								match(COMMA);
								}
							}

							setState(4045);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,423,_ctx) ) {
							case 1:
								{
								setState(4041);
								match(DECIMAL);
								}
								break;
							case 2:
								{
								setState(4042);
								match(DECIMAL);
								setState(4043);
								match(TO);
								setState(4044);
								match(DECIMAL);
								}
								break;
							}
							}
							}
							setState(4049); 
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while ( _la==DECIMAL || _la==COMMA );
						setState(4051);
						match(RR_BRACKET);
						}
						break;
					case NUMANODE:
						{
						setState(4052);
						match(NUMANODE);
						setState(4053);
						match(EQUAL);
						setState(4054);
						match(LR_BRACKET);
						setState(4064); 
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
							{
							setState(4056);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4055);
								match(COMMA);
								}
							}

							setState(4062);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,426,_ctx) ) {
							case 1:
								{
								setState(4058);
								match(DECIMAL);
								}
								break;
							case 2:
								{
								setState(4059);
								match(DECIMAL);
								setState(4060);
								match(TO);
								setState(4061);
								match(DECIMAL);
								}
								break;
							}
							}
							}
							setState(4066); 
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while ( _la==DECIMAL || _la==COMMA );
						setState(4068);
						match(RR_BRACKET);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				setState(4079);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,431,_ctx) ) {
				case 1:
					{
					setState(4074);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4073);
						match(COMMA);
						}
					}

					setState(4076);
					match(MIN_MEMORY_PERCENT);
					setState(4077);
					match(EQUAL);
					setState(4078);
					match(DECIMAL);
					}
					break;
				}
				setState(4087);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,433,_ctx) ) {
				case 1:
					{
					setState(4082);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4081);
						match(COMMA);
						}
					}

					setState(4084);
					match(MAX_MEMORY_PERCENT);
					setState(4085);
					match(EQUAL);
					setState(4086);
					match(DECIMAL);
					}
					break;
				}
				setState(4095);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,435,_ctx) ) {
				case 1:
					{
					setState(4090);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4089);
						match(COMMA);
						}
					}

					setState(4092);
					match(MIN_IOPS_PER_VOLUME);
					setState(4093);
					match(EQUAL);
					setState(4094);
					match(DECIMAL);
					}
					break;
				}
				setState(4103);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MAX_IOPS_PER_VOLUME || _la==COMMA) {
					{
					setState(4098);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4097);
						match(COMMA);
						}
					}

					setState(4100);
					match(MAX_IOPS_PER_VOLUME);
					setState(4101);
					match(EQUAL);
					setState(4102);
					match(DECIMAL);
					}
				}

				setState(4105);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_resource_governorContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext function_name;
		public Token max_outstanding_io_per_volume;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode RESOURCE() { return getToken(TSqlParser.RESOURCE, 0); }
		public TerminalNode GOVERNOR() { return getToken(TSqlParser.GOVERNOR, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode CLASSIFIER_FUNCTION() { return getToken(TSqlParser.CLASSIFIER_FUNCTION, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode RESET() { return getToken(TSqlParser.RESET, 0); }
		public TerminalNode STATISTICS() { return getToken(TSqlParser.STATISTICS, 0); }
		public TerminalNode MAX_OUTSTANDING_IO_PER_VOLUME() { return getToken(TSqlParser.MAX_OUTSTANDING_IO_PER_VOLUME, 0); }
		public TerminalNode DISABLE() { return getToken(TSqlParser.DISABLE, 0); }
		public TerminalNode RECONFIGURE() { return getToken(TSqlParser.RECONFIGURE, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public TerminalNode NULL() { return getToken(TSqlParser.NULL, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Alter_resource_governorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_resource_governor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_resource_governor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_resource_governor(this);
		}
	}

	public final Alter_resource_governorContext alter_resource_governor() throws RecognitionException {
		Alter_resource_governorContext _localctx = new Alter_resource_governorContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_alter_resource_governor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4108);
			match(ALTER);
			setState(4109);
			match(RESOURCE);
			setState(4110);
			match(GOVERNOR);
			setState(4132);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,440,_ctx) ) {
			case 1:
				{
				setState(4111);
				_la = _input.LA(1);
				if ( !(_la==RECONFIGURE || _la==DISABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				{
				setState(4112);
				match(WITH);
				setState(4113);
				match(LR_BRACKET);
				setState(4114);
				match(CLASSIFIER_FUNCTION);
				setState(4115);
				match(EQUAL);
				setState(4121);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SID:
				case SOURCE:
				case STATE:
				case START:
				case TARGET:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(4116);
					((Alter_resource_governorContext)_localctx).schema_name = id();
					setState(4117);
					match(DOT);
					setState(4118);
					((Alter_resource_governorContext)_localctx).function_name = id();
					}
					break;
				case NULL:
					{
					setState(4120);
					match(NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4123);
				match(RR_BRACKET);
				}
				break;
			case 3:
				{
				setState(4124);
				match(RESET);
				setState(4125);
				match(STATISTICS);
				}
				break;
			case 4:
				{
				setState(4126);
				match(WITH);
				setState(4127);
				match(LR_BRACKET);
				setState(4128);
				match(MAX_OUTSTANDING_IO_PER_VOLUME);
				setState(4129);
				match(EQUAL);
				setState(4130);
				((Alter_resource_governorContext)_localctx).max_outstanding_io_per_volume = match(DECIMAL);
				setState(4131);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_db_roleContext extends ParserRuleContext {
		public IdContext role_name;
		public IdContext database_principal;
		public IdContext new_role_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode MEMBER() { return getToken(TSqlParser.MEMBER, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode NAME() { return getToken(TSqlParser.NAME, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public Alter_db_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_db_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_db_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_db_role(this);
		}
	}

	public final Alter_db_roleContext alter_db_role() throws RecognitionException {
		Alter_db_roleContext _localctx = new Alter_db_roleContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_alter_db_role);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4134);
			match(ALTER);
			setState(4135);
			match(ROLE);
			setState(4136);
			((Alter_db_roleContext)_localctx).role_name = id();
			setState(4144);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case DROP:
				{
				setState(4137);
				_la = _input.LA(1);
				if ( !(_la==ADD || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4138);
				match(MEMBER);
				setState(4139);
				((Alter_db_roleContext)_localctx).database_principal = id();
				}
				break;
			case WITH:
				{
				setState(4140);
				match(WITH);
				setState(4141);
				match(NAME);
				setState(4142);
				match(EQUAL);
				setState(4143);
				((Alter_db_roleContext)_localctx).new_role_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_db_roleContext extends ParserRuleContext {
		public IdContext role_name;
		public IdContext owner_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public Create_db_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_db_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_db_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_db_role(this);
		}
	}

	public final Create_db_roleContext create_db_role() throws RecognitionException {
		Create_db_roleContext _localctx = new Create_db_roleContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_create_db_role);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4146);
			match(CREATE);
			setState(4147);
			match(ROLE);
			setState(4148);
			((Create_db_roleContext)_localctx).role_name = id();
			setState(4151);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(4149);
				match(AUTHORIZATION);
				setState(4150);
				((Create_db_roleContext)_localctx).owner_name = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_routeContext extends ParserRuleContext {
		public IdContext route_name;
		public IdContext owner_name;
		public Token route_service_name;
		public Token broker_instance_identifier;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode ROUTE() { return getToken(TSqlParser.ROUTE, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode ADDRESS() { return getToken(TSqlParser.ADDRESS, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public List<TerminalNode> QUOTED_URL() { return getTokens(TSqlParser.QUOTED_URL); }
		public TerminalNode QUOTED_URL(int i) {
			return getToken(TSqlParser.QUOTED_URL, i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode SERVICE_NAME() { return getToken(TSqlParser.SERVICE_NAME, 0); }
		public TerminalNode BROKER_INSTANCE() { return getToken(TSqlParser.BROKER_INSTANCE, 0); }
		public TerminalNode LIFETIME() { return getToken(TSqlParser.LIFETIME, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode MIRROR_ADDRESS() { return getToken(TSqlParser.MIRROR_ADDRESS, 0); }
		public Create_routeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_route; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_route(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_route(this);
		}
	}

	public final Create_routeContext create_route() throws RecognitionException {
		Create_routeContext _localctx = new Create_routeContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_create_route);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4153);
			match(CREATE);
			setState(4154);
			match(ROUTE);
			setState(4155);
			((Create_routeContext)_localctx).route_name = id();
			setState(4158);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(4156);
				match(AUTHORIZATION);
				setState(4157);
				((Create_routeContext)_localctx).owner_name = id();
				}
			}

			setState(4160);
			match(WITH);
			setState(4167);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,445,_ctx) ) {
			case 1:
				{
				setState(4162);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4161);
					match(COMMA);
					}
				}

				setState(4164);
				match(SERVICE_NAME);
				setState(4165);
				match(EQUAL);
				setState(4166);
				((Create_routeContext)_localctx).route_service_name = match(STRING);
				}
				break;
			}
			setState(4175);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,447,_ctx) ) {
			case 1:
				{
				setState(4170);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4169);
					match(COMMA);
					}
				}

				setState(4172);
				match(BROKER_INSTANCE);
				setState(4173);
				match(EQUAL);
				setState(4174);
				((Create_routeContext)_localctx).broker_instance_identifier = match(STRING);
				}
				break;
			}
			setState(4183);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,449,_ctx) ) {
			case 1:
				{
				setState(4178);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4177);
					match(COMMA);
					}
				}

				setState(4180);
				match(LIFETIME);
				setState(4181);
				match(EQUAL);
				setState(4182);
				match(DECIMAL);
				}
				break;
			}
			setState(4186);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(4185);
				match(COMMA);
				}
			}

			setState(4188);
			match(ADDRESS);
			setState(4189);
			match(EQUAL);
			setState(4190);
			_la = _input.LA(1);
			if ( !(_la==QUOTED_URL || _la==STRING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4195);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(4191);
				match(COMMA);
				setState(4192);
				match(MIRROR_ADDRESS);
				setState(4193);
				match(EQUAL);
				setState(4194);
				_la = _input.LA(1);
				if ( !(_la==QUOTED_URL || _la==STRING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_ruleContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext rule_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode RULE() { return getToken(TSqlParser.RULE, 0); }
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Create_ruleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_rule; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_rule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_rule(this);
		}
	}

	public final Create_ruleContext create_rule() throws RecognitionException {
		Create_ruleContext _localctx = new Create_ruleContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_create_rule);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4197);
			match(CREATE);
			setState(4198);
			match(RULE);
			setState(4202);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,452,_ctx) ) {
			case 1:
				{
				setState(4199);
				((Create_ruleContext)_localctx).schema_name = id();
				setState(4200);
				match(DOT);
				}
				break;
			}
			setState(4204);
			((Create_ruleContext)_localctx).rule_name = id();
			setState(4205);
			match(AS);
			setState(4206);
			search_condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_schema_sqlContext extends ParserRuleContext {
		public IdContext schema_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public List<TerminalNode> SCHEMA() { return getTokens(TSqlParser.SCHEMA); }
		public TerminalNode SCHEMA(int i) {
			return getToken(TSqlParser.SCHEMA, i);
		}
		public TerminalNode TRANSFER() { return getToken(TSqlParser.TRANSFER, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> COLON() { return getTokens(TSqlParser.COLON); }
		public TerminalNode COLON(int i) {
			return getToken(TSqlParser.COLON, i);
		}
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public TerminalNode OBJECT() { return getToken(TSqlParser.OBJECT, 0); }
		public TerminalNode TYPE() { return getToken(TSqlParser.TYPE, 0); }
		public TerminalNode XML() { return getToken(TSqlParser.XML, 0); }
		public TerminalNode COLLECTION() { return getToken(TSqlParser.COLLECTION, 0); }
		public Alter_schema_sqlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_schema_sql; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_schema_sql(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_schema_sql(this);
		}
	}

	public final Alter_schema_sqlContext alter_schema_sql() throws RecognitionException {
		Alter_schema_sqlContext _localctx = new Alter_schema_sqlContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_alter_schema_sql);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4208);
			match(ALTER);
			setState(4209);
			match(SCHEMA);
			setState(4210);
			((Alter_schema_sqlContext)_localctx).schema_name = id();
			setState(4211);
			match(TRANSFER);
			setState(4221);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,454,_ctx) ) {
			case 1:
				{
				setState(4217);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OBJECT:
					{
					setState(4212);
					match(OBJECT);
					}
					break;
				case TYPE:
					{
					setState(4213);
					match(TYPE);
					}
					break;
				case XML:
					{
					setState(4214);
					match(XML);
					setState(4215);
					match(SCHEMA);
					setState(4216);
					match(COLLECTION);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4219);
				match(COLON);
				setState(4220);
				match(COLON);
				}
				break;
			}
			setState(4223);
			id();
			setState(4226);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DOT) {
				{
				setState(4224);
				match(DOT);
				setState(4225);
				id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_schemaContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext owner_name;
		public IdContext object_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public List<TerminalNode> SCHEMA() { return getTokens(TSqlParser.SCHEMA); }
		public TerminalNode SCHEMA(int i) {
			return getToken(TSqlParser.SCHEMA, i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<Create_tableContext> create_table() {
			return getRuleContexts(Create_tableContext.class);
		}
		public Create_tableContext create_table(int i) {
			return getRuleContext(Create_tableContext.class,i);
		}
		public List<Create_viewContext> create_view() {
			return getRuleContexts(Create_viewContext.class);
		}
		public Create_viewContext create_view(int i) {
			return getRuleContext(Create_viewContext.class,i);
		}
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public List<TerminalNode> TO() { return getTokens(TSqlParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(TSqlParser.TO, i);
		}
		public List<TerminalNode> REVOKE() { return getTokens(TSqlParser.REVOKE); }
		public TerminalNode REVOKE(int i) {
			return getToken(TSqlParser.REVOKE, i);
		}
		public List<TerminalNode> FROM() { return getTokens(TSqlParser.FROM); }
		public TerminalNode FROM(int i) {
			return getToken(TSqlParser.FROM, i);
		}
		public List<TerminalNode> GRANT() { return getTokens(TSqlParser.GRANT); }
		public TerminalNode GRANT(int i) {
			return getToken(TSqlParser.GRANT, i);
		}
		public List<TerminalNode> DENY() { return getTokens(TSqlParser.DENY); }
		public TerminalNode DENY(int i) {
			return getToken(TSqlParser.DENY, i);
		}
		public List<TerminalNode> SELECT() { return getTokens(TSqlParser.SELECT); }
		public TerminalNode SELECT(int i) {
			return getToken(TSqlParser.SELECT, i);
		}
		public List<TerminalNode> INSERT() { return getTokens(TSqlParser.INSERT); }
		public TerminalNode INSERT(int i) {
			return getToken(TSqlParser.INSERT, i);
		}
		public List<TerminalNode> DELETE() { return getTokens(TSqlParser.DELETE); }
		public TerminalNode DELETE(int i) {
			return getToken(TSqlParser.DELETE, i);
		}
		public List<TerminalNode> UPDATE() { return getTokens(TSqlParser.UPDATE); }
		public TerminalNode UPDATE(int i) {
			return getToken(TSqlParser.UPDATE, i);
		}
		public List<TerminalNode> COLON() { return getTokens(TSqlParser.COLON); }
		public TerminalNode COLON(int i) {
			return getToken(TSqlParser.COLON, i);
		}
		public Create_schemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_schema; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_schema(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_schema(this);
		}
	}

	public final Create_schemaContext create_schema() throws RecognitionException {
		Create_schemaContext _localctx = new Create_schemaContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_create_schema);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4228);
			match(CREATE);
			setState(4229);
			match(SCHEMA);
			setState(4237);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,456,_ctx) ) {
			case 1:
				{
				setState(4230);
				((Create_schemaContext)_localctx).schema_name = id();
				}
				break;
			case 2:
				{
				setState(4231);
				match(AUTHORIZATION);
				setState(4232);
				((Create_schemaContext)_localctx).owner_name = id();
				}
				break;
			case 3:
				{
				setState(4233);
				((Create_schemaContext)_localctx).schema_name = id();
				setState(4234);
				match(AUTHORIZATION);
				setState(4235);
				((Create_schemaContext)_localctx).owner_name = id();
				}
				break;
			}
			setState(4267);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,460,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(4265);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,459,_ctx) ) {
					case 1:
						{
						setState(4239);
						create_table();
						}
						break;
					case 2:
						{
						setState(4240);
						create_view();
						}
						break;
					case 3:
						{
						setState(4241);
						_la = _input.LA(1);
						if ( !(_la==DENY || _la==GRANT) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(4242);
						_la = _input.LA(1);
						if ( !(_la==DELETE || _la==INSERT || _la==SELECT || _la==UPDATE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(4243);
						match(ON);
						setState(4247);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==SCHEMA) {
							{
							setState(4244);
							match(SCHEMA);
							setState(4245);
							match(COLON);
							setState(4246);
							match(COLON);
							}
						}

						setState(4249);
						((Create_schemaContext)_localctx).object_name = id();
						setState(4250);
						match(TO);
						setState(4251);
						((Create_schemaContext)_localctx).owner_name = id();
						}
						break;
					case 4:
						{
						setState(4253);
						match(REVOKE);
						setState(4254);
						_la = _input.LA(1);
						if ( !(_la==DELETE || _la==INSERT || _la==SELECT || _la==UPDATE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(4255);
						match(ON);
						setState(4259);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==SCHEMA) {
							{
							setState(4256);
							match(SCHEMA);
							setState(4257);
							match(COLON);
							setState(4258);
							match(COLON);
							}
						}

						setState(4261);
						((Create_schemaContext)_localctx).object_name = id();
						setState(4262);
						match(FROM);
						setState(4263);
						((Create_schemaContext)_localctx).owner_name = id();
						}
						break;
					}
					} 
				}
				setState(4269);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,460,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_schema_azure_sql_dw_and_pdwContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext owner_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode SCHEMA() { return getToken(TSqlParser.SCHEMA, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public Create_schema_azure_sql_dw_and_pdwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_schema_azure_sql_dw_and_pdw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_schema_azure_sql_dw_and_pdw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_schema_azure_sql_dw_and_pdw(this);
		}
	}

	public final Create_schema_azure_sql_dw_and_pdwContext create_schema_azure_sql_dw_and_pdw() throws RecognitionException {
		Create_schema_azure_sql_dw_and_pdwContext _localctx = new Create_schema_azure_sql_dw_and_pdwContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_create_schema_azure_sql_dw_and_pdw);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4270);
			match(CREATE);
			setState(4271);
			match(SCHEMA);
			setState(4272);
			((Create_schema_azure_sql_dw_and_pdwContext)_localctx).schema_name = id();
			setState(4275);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(4273);
				match(AUTHORIZATION);
				setState(4274);
				((Create_schema_azure_sql_dw_and_pdwContext)_localctx).owner_name = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_schema_azure_sql_dw_and_pdwContext extends ParserRuleContext {
		public IdContext schema_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode SCHEMA() { return getToken(TSqlParser.SCHEMA, 0); }
		public TerminalNode TRANSFER() { return getToken(TSqlParser.TRANSFER, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode OBJECT() { return getToken(TSqlParser.OBJECT, 0); }
		public List<TerminalNode> COLON() { return getTokens(TSqlParser.COLON); }
		public TerminalNode COLON(int i) {
			return getToken(TSqlParser.COLON, i);
		}
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public TerminalNode ID() { return getToken(TSqlParser.ID, 0); }
		public Alter_schema_azure_sql_dw_and_pdwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_schema_azure_sql_dw_and_pdw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_schema_azure_sql_dw_and_pdw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_schema_azure_sql_dw_and_pdw(this);
		}
	}

	public final Alter_schema_azure_sql_dw_and_pdwContext alter_schema_azure_sql_dw_and_pdw() throws RecognitionException {
		Alter_schema_azure_sql_dw_and_pdwContext _localctx = new Alter_schema_azure_sql_dw_and_pdwContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_alter_schema_azure_sql_dw_and_pdw);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4277);
			match(ALTER);
			setState(4278);
			match(SCHEMA);
			setState(4279);
			((Alter_schema_azure_sql_dw_and_pdwContext)_localctx).schema_name = id();
			setState(4280);
			match(TRANSFER);
			setState(4284);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,462,_ctx) ) {
			case 1:
				{
				setState(4281);
				match(OBJECT);
				setState(4282);
				match(COLON);
				setState(4283);
				match(COLON);
				}
				break;
			}
			setState(4286);
			id();
			setState(4289);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DOT) {
				{
				setState(4287);
				match(DOT);
				setState(4288);
				match(ID);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_search_property_listContext extends ParserRuleContext {
		public IdContext new_list_name;
		public IdContext database_name;
		public IdContext source_list_name;
		public IdContext owner_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode SEARCH() { return getToken(TSqlParser.SEARCH, 0); }
		public TerminalNode PROPERTY() { return getToken(TSqlParser.PROPERTY, 0); }
		public TerminalNode LIST() { return getToken(TSqlParser.LIST, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Create_search_property_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_search_property_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_search_property_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_search_property_list(this);
		}
	}

	public final Create_search_property_listContext create_search_property_list() throws RecognitionException {
		Create_search_property_listContext _localctx = new Create_search_property_listContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_create_search_property_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4291);
			match(CREATE);
			setState(4292);
			match(SEARCH);
			setState(4293);
			match(PROPERTY);
			setState(4294);
			match(LIST);
			setState(4295);
			((Create_search_property_listContext)_localctx).new_list_name = id();
			setState(4303);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(4296);
				match(FROM);
				setState(4300);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,464,_ctx) ) {
				case 1:
					{
					setState(4297);
					((Create_search_property_listContext)_localctx).database_name = id();
					setState(4298);
					match(DOT);
					}
					break;
				}
				setState(4302);
				((Create_search_property_listContext)_localctx).source_list_name = id();
				}
			}

			setState(4307);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(4305);
				match(AUTHORIZATION);
				setState(4306);
				((Create_search_property_listContext)_localctx).owner_name = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_security_policyContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext security_policy_name;
		public IdContext tvf_schema_name;
		public IdContext security_predicate_function_name;
		public IdContext column_name_or_arguments;
		public IdContext table_schema_name;
		public IdContext name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode SECURITY() { return getToken(TSqlParser.SECURITY, 0); }
		public TerminalNode POLICY() { return getToken(TSqlParser.POLICY, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(TSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSqlParser.DOT, i);
		}
		public List<TerminalNode> ADD() { return getTokens(TSqlParser.ADD); }
		public TerminalNode ADD(int i) {
			return getToken(TSqlParser.ADD, i);
		}
		public List<TerminalNode> PREDICATE() { return getTokens(TSqlParser.PREDICATE); }
		public TerminalNode PREDICATE(int i) {
			return getToken(TSqlParser.PREDICATE, i);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode STATE() { return getToken(TSqlParser.STATE, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode NOT() { return getToken(TSqlParser.NOT, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode REPLICATION() { return getToken(TSqlParser.REPLICATION, 0); }
		public List<TerminalNode> OFF() { return getTokens(TSqlParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(TSqlParser.OFF, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<TerminalNode> AFTER() { return getTokens(TSqlParser.AFTER); }
		public TerminalNode AFTER(int i) {
			return getToken(TSqlParser.AFTER, i);
		}
		public List<TerminalNode> BEFORE() { return getTokens(TSqlParser.BEFORE); }
		public TerminalNode BEFORE(int i) {
			return getToken(TSqlParser.BEFORE, i);
		}
		public TerminalNode SCHEMABINDING() { return getToken(TSqlParser.SCHEMABINDING, 0); }
		public List<TerminalNode> FILTER() { return getTokens(TSqlParser.FILTER); }
		public TerminalNode FILTER(int i) {
			return getToken(TSqlParser.FILTER, i);
		}
		public List<TerminalNode> BLOCK() { return getTokens(TSqlParser.BLOCK); }
		public TerminalNode BLOCK(int i) {
			return getToken(TSqlParser.BLOCK, i);
		}
		public List<TerminalNode> INSERT() { return getTokens(TSqlParser.INSERT); }
		public TerminalNode INSERT(int i) {
			return getToken(TSqlParser.INSERT, i);
		}
		public List<TerminalNode> UPDATE() { return getTokens(TSqlParser.UPDATE); }
		public TerminalNode UPDATE(int i) {
			return getToken(TSqlParser.UPDATE, i);
		}
		public List<TerminalNode> DELETE() { return getTokens(TSqlParser.DELETE); }
		public TerminalNode DELETE(int i) {
			return getToken(TSqlParser.DELETE, i);
		}
		public Create_security_policyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_security_policy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_security_policy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_security_policy(this);
		}
	}

	public final Create_security_policyContext create_security_policy() throws RecognitionException {
		Create_security_policyContext _localctx = new Create_security_policyContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_create_security_policy);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4309);
			match(CREATE);
			setState(4310);
			match(SECURITY);
			setState(4311);
			match(POLICY);
			setState(4315);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,467,_ctx) ) {
			case 1:
				{
				setState(4312);
				((Create_security_policyContext)_localctx).schema_name = id();
				setState(4313);
				match(DOT);
				}
				break;
			}
			setState(4317);
			((Create_security_policyContext)_localctx).security_policy_name = id();
			setState(4358); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4319);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4318);
					match(COMMA);
					}
				}

				setState(4321);
				match(ADD);
				setState(4323);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BLOCK || _la==FILTER) {
					{
					setState(4322);
					_la = _input.LA(1);
					if ( !(_la==BLOCK || _la==FILTER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(4325);
				match(PREDICATE);
				setState(4326);
				((Create_security_policyContext)_localctx).tvf_schema_name = id();
				setState(4327);
				match(DOT);
				setState(4328);
				((Create_security_policyContext)_localctx).security_predicate_function_name = id();
				setState(4329);
				match(LR_BRACKET);
				setState(4334); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4331);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4330);
						match(COMMA);
						}
					}

					setState(4333);
					((Create_security_policyContext)_localctx).column_name_or_arguments = id();
					}
					}
					setState(4336); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (EVENTDATA - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & ((1L << (INIT - 158)) | (1L << (KEY - 158)) | (1L << (MASTER - 158)) | (1L << (MAX_MEMORY - 158)))) != 0) || ((((_la - 225)) & ~0x3f) == 0 && ((1L << (_la - 225)) & ((1L << (OFFSETS - 225)) | (1L << (PAGE - 225)) | (1L << (PUBLIC - 225)) | (1L << (R - 225)) | (1L << (RAW - 225)) | (1L << (RETURN - 225)) | (1L << (RETURNS - 225)) | (1L << (ROWCOUNT - 225)))) != 0) || ((((_la - 295)) & ~0x3f) == 0 && ((1L << (_la - 295)) & ((1L << (SAFETY - 295)) | (1L << (SERVER - 295)) | (1L << (SID - 295)) | (1L << (SOURCE - 295)) | (1L << (STATE - 295)) | (1L << (START - 295)) | (1L << (TARGET - 295)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (ABSOLUTE - 383)) | (1L << (ACCENT_SENSITIVITY - 383)) | (1L << (ACTION - 383)) | (1L << (ACTIVATION - 383)) | (1L << (ACTIVE - 383)) | (1L << (ADDRESS - 383)) | (1L << (AES_128 - 383)) | (1L << (AES_192 - 383)) | (1L << (AES_256 - 383)) | (1L << (AFFINITY - 383)) | (1L << (AFTER - 383)) | (1L << (AGGREGATE - 383)) | (1L << (ALGORITHM - 383)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 383)) | (1L << (ALLOWED - 383)) | (1L << (ANSI_NULL_DEFAULT - 383)) | (1L << (ANSI_NULLS - 383)) | (1L << (ANSI_PADDING - 383)) | (1L << (ANSI_WARNINGS - 383)) | (1L << (APPLICATION_LOG - 383)) | (1L << (APPLY - 383)) | (1L << (ARITHABORT - 383)) | (1L << (ASSEMBLY - 383)) | (1L << (AUDIT - 383)) | (1L << (AUDIT_GUID - 383)) | (1L << (AUTO - 383)) | (1L << (AUTO_CLEANUP - 383)) | (1L << (AUTO_CLOSE - 383)) | (1L << (AUTO_CREATE_STATISTICS - 383)) | (1L << (AUTO_SHRINK - 383)) | (1L << (AUTO_UPDATE_STATISTICS - 383)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 383)) | (1L << (AVAILABILITY - 383)) | (1L << (AVG - 383)) | (1L << (BACKUP_PRIORITY - 383)) | (1L << (BEGIN_DIALOG - 383)) | (1L << (BIGINT - 383)) | (1L << (BINARY_BASE64 - 383)) | (1L << (BINARY_CHECKSUM - 383)) | (1L << (BINDING - 383)) | (1L << (BLOB_STORAGE - 383)) | (1L << (BROKER - 383)) | (1L << (BROKER_INSTANCE - 383)) | (1L << (BULK_LOGGED - 383)) | (1L << (CALLER - 383)) | (1L << (CAP_CPU_PERCENT - 383)) | (1L << (CAST - 383)) | (1L << (CATALOG - 383)) | (1L << (CATCH - 383)) | (1L << (CHANGE_RETENTION - 383)) | (1L << (CHANGE_TRACKING - 383)) | (1L << (CHECKSUM - 383)) | (1L << (CHECKSUM_AGG - 383)) | (1L << (CLEANUP - 383)) | (1L << (COLLECTION - 383)) | (1L << (COLUMN_MASTER_KEY - 383)) | (1L << (COMMITTED - 383)) | (1L << (COMPATIBILITY_LEVEL - 383)) | (1L << (CONCAT - 383)) | (1L << (CONCAT_NULL_YIELDS_NULL - 383)) | (1L << (CONTENT - 383)) | (1L << (CONTROL - 383)) | (1L << (COOKIE - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (COUNT - 447)) | (1L << (COUNT_BIG - 447)) | (1L << (COUNTER - 447)) | (1L << (CPU - 447)) | (1L << (CREATE_NEW - 447)) | (1L << (CREATION_DISPOSITION - 447)) | (1L << (CREDENTIAL - 447)) | (1L << (CRYPTOGRAPHIC - 447)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 447)) | (1L << (CURSOR_DEFAULT - 447)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 447)) | (1L << (DATEADD - 447)) | (1L << (DATEDIFF - 447)) | (1L << (DATENAME - 447)) | (1L << (DATEPART - 447)) | (1L << (DAYS - 447)) | (1L << (DB_CHAINING - 447)) | (1L << (DB_FAILOVER - 447)) | (1L << (DECRYPTION - 447)) | (1L << (DEFAULT_DOUBLE_QUOTE - 447)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1L << (DEFAULT_LANGUAGE - 447)) | (1L << (DELAY - 447)) | (1L << (DELAYED_DURABILITY - 447)) | (1L << (DELETED - 447)) | (1L << (DENSE_RANK - 447)) | (1L << (DEPENDENTS - 447)) | (1L << (DES - 447)) | (1L << (DESCRIPTION - 447)) | (1L << (DESX - 447)) | (1L << (DHCP - 447)) | (1L << (DIALOG - 447)) | (1L << (DIRECTORY_NAME - 447)) | (1L << (DISABLE - 447)) | (1L << (DISABLE_BROKER - 447)) | (1L << (DISABLED - 447)) | (1L << (DISK_DRIVE - 447)) | (1L << (DOCUMENT - 447)) | (1L << (DYNAMIC - 447)) | (1L << (EMERGENCY - 447)) | (1L << (EMPTY - 447)) | (1L << (ENABLE - 447)) | (1L << (ENABLE_BROKER - 447)) | (1L << (ENCRYPTED_VALUE - 447)) | (1L << (ENCRYPTION - 447)) | (1L << (ENDPOINT_URL - 447)) | (1L << (ERROR_BROKER_CONVERSATIONS - 447)) | (1L << (EXCLUSIVE - 447)) | (1L << (EXECUTABLE - 447)) | (1L << (EXIST - 447)) | (1L << (EXPAND - 447)) | (1L << (EXPIRY_DATE - 447)) | (1L << (EXPLICIT - 447)) | (1L << (FAIL_OPERATION - 447)) | (1L << (FAILOVER_MODE - 447)) | (1L << (FAILURE - 447)) | (1L << (FAILURE_CONDITION_LEVEL - 447)) | (1L << (FAST - 447)) | (1L << (FAST_FORWARD - 447)) | (1L << (FILEGROUP - 447)) | (1L << (FILEGROWTH - 447)) | (1L << (FILEPATH - 447)) | (1L << (FILESTREAM - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (FILTER - 511)) | (1L << (FIRST - 511)) | (1L << (FIRST_VALUE - 511)) | (1L << (FOLLOWING - 511)) | (1L << (FORCE - 511)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1L << (FORCED - 511)) | (1L << (FORMAT - 511)) | (1L << (FORWARD_ONLY - 511)) | (1L << (FULLSCAN - 511)) | (1L << (FULLTEXT - 511)) | (1L << (GB - 511)) | (1L << (GETDATE - 511)) | (1L << (GETUTCDATE - 511)) | (1L << (GLOBAL - 511)) | (1L << (GO - 511)) | (1L << (GROUP_MAX_REQUESTS - 511)) | (1L << (GROUPING - 511)) | (1L << (GROUPING_ID - 511)) | (1L << (HADR - 511)) | (1L << (HASH - 511)) | (1L << (HEALTH_CHECK_TIMEOUT - 511)) | (1L << (HIGH - 511)) | (1L << (HONOR_BROKER_PRIORITY - 511)) | (1L << (HOURS - 511)) | (1L << (IDENTITY_VALUE - 511)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1L << (IMMEDIATE - 511)) | (1L << (IMPERSONATE - 511)) | (1L << (IMPORTANCE - 511)) | (1L << (INCREMENTAL - 511)) | (1L << (INITIATOR - 511)) | (1L << (INPUT - 511)) | (1L << (INSENSITIVE - 511)) | (1L << (INSERTED - 511)) | (1L << (INT - 511)) | (1L << (IP - 511)) | (1L << (ISOLATION - 511)) | (1L << (KB - 511)) | (1L << (KEEP - 511)) | (1L << (KEEPFIXED - 511)) | (1L << (KEY_SOURCE - 511)) | (1L << (KEYS - 511)) | (1L << (KEYSET - 511)) | (1L << (LAG - 511)) | (1L << (LAST - 511)) | (1L << (LAST_VALUE - 511)) | (1L << (LEAD - 511)) | (1L << (LEVEL - 511)) | (1L << (LIST - 511)) | (1L << (LISTENER - 511)) | (1L << (LISTENER_URL - 511)) | (1L << (LOB_COMPACTION - 511)) | (1L << (LOCAL - 511)) | (1L << (LOCATION - 511)) | (1L << (LOCK - 511)) | (1L << (LOCK_ESCALATION - 511)) | (1L << (LOGIN - 511)) | (1L << (LOOP - 511)) | (1L << (LOW - 511)) | (1L << (MANUAL - 511)) | (1L << (MARK - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (MATERIALIZED - 575)) | (1L << (MAX - 575)) | (1L << (MAX_CPU_PERCENT - 575)) | (1L << (MAX_DOP - 575)) | (1L << (MAX_FILES - 575)) | (1L << (MAX_IOPS_PER_VOLUME - 575)) | (1L << (MAX_MEMORY_PERCENT - 575)) | (1L << (MAX_PROCESSES - 575)) | (1L << (MAX_QUEUE_READERS - 575)) | (1L << (MAX_ROLLOVER_FILES - 575)) | (1L << (MAXDOP - 575)) | (1L << (MAXRECURSION - 575)) | (1L << (MAXSIZE - 575)) | (1L << (MB - 575)) | (1L << (MEDIUM - 575)) | (1L << (MEMORY_OPTIMIZED_DATA - 575)) | (1L << (MESSAGE - 575)) | (1L << (MIN - 575)) | (1L << (MIN_ACTIVE_ROWVERSION - 575)) | (1L << (MIN_CPU_PERCENT - 575)) | (1L << (MIN_IOPS_PER_VOLUME - 575)) | (1L << (MIN_MEMORY_PERCENT - 575)) | (1L << (MINUTES - 575)) | (1L << (MIRROR_ADDRESS - 575)) | (1L << (MIXED_PAGE_ALLOCATION - 575)) | (1L << (MODE - 575)) | (1L << (MODIFY - 575)) | (1L << (MOVE - 575)) | (1L << (MULTI_USER - 575)) | (1L << (NAME - 575)) | (1L << (NESTED_TRIGGERS - 575)) | (1L << (NEW_ACCOUNT - 575)) | (1L << (NEW_BROKER - 575)) | (1L << (NEW_PASSWORD - 575)) | (1L << (NEXT - 575)) | (1L << (NO - 575)) | (1L << (NO_TRUNCATE - 575)) | (1L << (NO_WAIT - 575)) | (1L << (NOCOUNT - 575)) | (1L << (NODES - 575)) | (1L << (NOEXPAND - 575)) | (1L << (NON_TRANSACTED_ACCESS - 575)) | (1L << (NORECOMPUTE - 575)) | (1L << (NORECOVERY - 575)) | (1L << (NOWAIT - 575)) | (1L << (NTILE - 575)) | (1L << (NUMANODE - 575)) | (1L << (NUMBER - 575)) | (1L << (NUMERIC_ROUNDABORT - 575)) | (1L << (OBJECT - 575)) | (1L << (OFFLINE - 575)) | (1L << (OFFSET - 575)) | (1L << (OLD_ACCOUNT - 575)) | (1L << (ONLINE - 575)) | (1L << (ONLY - 575)) | (1L << (OPEN_EXISTING - 575)) | (1L << (OPTIMISTIC - 575)) | (1L << (OPTIMIZE - 575)) | (1L << (OUT - 575)) | (1L << (OUTPUT - 575)) | (1L << (OWNER - 575)) | (1L << (PAGE_VERIFY - 575)) | (1L << (PARAMETERIZATION - 575)) | (1L << (PARTITION - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (PARTITIONS - 639)) | (1L << (PARTNER - 639)) | (1L << (PATH - 639)) | (1L << (POISON_MESSAGE_HANDLING - 639)) | (1L << (POOL - 639)) | (1L << (PORT - 639)) | (1L << (PRECEDING - 639)) | (1L << (PRIMARY_ROLE - 639)) | (1L << (PRIOR - 639)) | (1L << (PRIORITY - 639)) | (1L << (PRIORITY_LEVEL - 639)) | (1L << (PRIVATE - 639)) | (1L << (PRIVATE_KEY - 639)) | (1L << (PRIVILEGES - 639)) | (1L << (PROCEDURE_NAME - 639)) | (1L << (PROPERTY - 639)) | (1L << (PROVIDER - 639)) | (1L << (PROVIDER_KEY_NAME - 639)) | (1L << (QUERY - 639)) | (1L << (QUEUE - 639)) | (1L << (QUEUE_DELAY - 639)) | (1L << (QUOTED_IDENTIFIER - 639)) | (1L << (RANGE - 639)) | (1L << (RANK - 639)) | (1L << (RC2 - 639)) | (1L << (RC4 - 639)) | (1L << (RC4_128 - 639)) | (1L << (READ_COMMITTED_SNAPSHOT - 639)) | (1L << (READ_ONLY - 639)) | (1L << (READ_ONLY_ROUTING_LIST - 639)) | (1L << (READ_WRITE - 639)) | (1L << (READONLY - 639)) | (1L << (REBUILD - 639)) | (1L << (RECEIVE - 639)) | (1L << (RECOMPILE - 639)) | (1L << (RECOVERY - 639)) | (1L << (RECURSIVE_TRIGGERS - 639)) | (1L << (RELATIVE - 639)) | (1L << (REMOTE - 639)) | (1L << (REMOTE_SERVICE_NAME - 639)) | (1L << (REMOVE - 639)) | (1L << (REORGANIZE - 639)) | (1L << (REPEATABLE - 639)) | (1L << (REPLICA - 639)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 639)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 639)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 639)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 639)) | (1L << (RESERVE_DISK_SPACE - 639)) | (1L << (RESOURCE - 639)) | (1L << (RESOURCE_MANAGER_LOCATION - 639)) | (1L << (RESTRICTED_USER - 639)) | (1L << (RETENTION - 639)) | (1L << (ROBUST - 639)) | (1L << (ROOT - 639)) | (1L << (ROUTE - 639)) | (1L << (ROW - 639)) | (1L << (ROW_NUMBER - 639)) | (1L << (ROWGUID - 639)) | (1L << (ROWS - 639)) | (1L << (SAMPLE - 639)) | (1L << (SCHEMABINDING - 639)) | (1L << (SCOPED - 639)) | (1L << (SCROLL - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (SCROLL_LOCKS - 703)) | (1L << (SEARCH - 703)) | (1L << (SECONDARY - 703)) | (1L << (SECONDARY_ONLY - 703)) | (1L << (SECONDARY_ROLE - 703)) | (1L << (SECONDS - 703)) | (1L << (SECRET - 703)) | (1L << (SECURITY_LOG - 703)) | (1L << (SEEDING_MODE - 703)) | (1L << (SELF - 703)) | (1L << (SEMI_SENSITIVE - 703)) | (1L << (SEND - 703)) | (1L << (SENT - 703)) | (1L << (SERIALIZABLE - 703)) | (1L << (SESSION_TIMEOUT - 703)) | (1L << (SETERROR - 703)) | (1L << (SHARE - 703)) | (1L << (SHOWPLAN - 703)) | (1L << (SIGNATURE - 703)) | (1L << (SIMPLE - 703)) | (1L << (SINGLE_USER - 703)) | (1L << (SIZE - 703)) | (1L << (SMALLINT - 703)) | (1L << (SNAPSHOT - 703)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 703)) | (1L << (STANDBY - 703)) | (1L << (START_DATE - 703)) | (1L << (STATIC - 703)) | (1L << (STATS_STREAM - 703)) | (1L << (STATUS - 703)) | (1L << (STDEV - 703)) | (1L << (STDEVP - 703)) | (1L << (STOPLIST - 703)) | (1L << (STUFF - 703)) | (1L << (SUBJECT - 703)) | (1L << (SUM - 703)) | (1L << (SUSPEND - 703)) | (1L << (SYMMETRIC - 703)) | (1L << (SYNCHRONOUS_COMMIT - 703)) | (1L << (SYNONYM - 703)) | (1L << (TAKE - 703)) | (1L << (TARGET_RECOVERY_TIME - 703)) | (1L << (TB - 703)) | (1L << (TEXTIMAGE_ON - 703)) | (1L << (THROW - 703)) | (1L << (TIES - 703)) | (1L << (TIME - 703)) | (1L << (TIMEOUT - 703)) | (1L << (TIMER - 703)) | (1L << (TINYINT - 703)) | (1L << (TORN_PAGE_DETECTION - 703)) | (1L << (TRANSFORM_NOISE_WORDS - 703)) | (1L << (TRIPLE_DES - 703)) | (1L << (TRIPLE_DES_3KEY - 703)) | (1L << (TRUSTWORTHY - 703)) | (1L << (TRY - 703)) | (1L << (TSQL - 703)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 703)) | (1L << (TYPE - 703)) | (1L << (TYPE_WARNING - 703)) | (1L << (UNBOUNDED - 703)) | (1L << (UNCOMMITTED - 703)) | (1L << (UNKNOWN - 703)) | (1L << (UNLIMITED - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (USING - 767)) | (1L << (VALID_XML - 767)) | (1L << (VALIDATION - 767)) | (1L << (VALUE - 767)) | (1L << (VAR - 767)) | (1L << (VARP - 767)) | (1L << (VIEW_METADATA - 767)) | (1L << (VIEWS - 767)) | (1L << (WAIT - 767)) | (1L << (WELL_FORMED_XML - 767)) | (1L << (WORK - 767)) | (1L << (WORKLOAD - 767)) | (1L << (XML - 767)) | (1L << (XMLNAMESPACES - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)) | (1L << (COMMA - 767)))) != 0) );
				setState(4338);
				match(RR_BRACKET);
				setState(4339);
				match(ON);
				setState(4340);
				((Create_security_policyContext)_localctx).table_schema_name = id();
				setState(4341);
				match(DOT);
				setState(4342);
				((Create_security_policyContext)_localctx).name = id();
				setState(4355);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,475,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						setState(4353);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,474,_ctx) ) {
						case 1:
							{
							setState(4344);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4343);
								match(COMMA);
								}
							}

							setState(4346);
							match(AFTER);
							setState(4347);
							_la = _input.LA(1);
							if ( !(_la==INSERT || _la==UPDATE) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 2:
							{
							setState(4349);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4348);
								match(COMMA);
								}
							}

							setState(4351);
							match(BEFORE);
							setState(4352);
							_la = _input.LA(1);
							if ( !(_la==DELETE || _la==UPDATE) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						}
						} 
					}
					setState(4357);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,475,_ctx);
				}
				}
				}
				setState(4360); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==ADD || _la==COMMA );
			setState(4372);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,478,_ctx) ) {
			case 1:
				{
				setState(4362);
				match(WITH);
				setState(4363);
				match(LR_BRACKET);
				setState(4364);
				match(STATE);
				setState(4365);
				match(EQUAL);
				setState(4366);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4369);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SCHEMABINDING) {
					{
					setState(4367);
					match(SCHEMABINDING);
					setState(4368);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(4371);
				match(RR_BRACKET);
				}
				break;
			}
			setState(4377);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(4374);
				match(NOT);
				setState(4375);
				match(FOR);
				setState(4376);
				match(REPLICATION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_sequenceContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext sequence_name;
		public Token sequnce_increment;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode SEQUENCE() { return getToken(TSqlParser.SEQUENCE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public TerminalNode RESTART() { return getToken(TSqlParser.RESTART, 0); }
		public TerminalNode INCREMENT() { return getToken(TSqlParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode MINVALUE() { return getToken(TSqlParser.MINVALUE, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public List<TerminalNode> NO() { return getTokens(TSqlParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(TSqlParser.NO, i);
		}
		public TerminalNode MAXVALUE() { return getToken(TSqlParser.MAXVALUE, 0); }
		public TerminalNode CYCLE() { return getToken(TSqlParser.CYCLE, 0); }
		public TerminalNode CACHE() { return getToken(TSqlParser.CACHE, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public Alter_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_sequence(this);
		}
	}

	public final Alter_sequenceContext alter_sequence() throws RecognitionException {
		Alter_sequenceContext _localctx = new Alter_sequenceContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_alter_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4379);
			match(ALTER);
			setState(4380);
			match(SEQUENCE);
			setState(4384);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,480,_ctx) ) {
			case 1:
				{
				setState(4381);
				((Alter_sequenceContext)_localctx).schema_name = id();
				setState(4382);
				match(DOT);
				}
				break;
			}
			setState(4386);
			((Alter_sequenceContext)_localctx).sequence_name = id();
			setState(4392);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RESTART) {
				{
				setState(4387);
				match(RESTART);
				setState(4390);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,481,_ctx) ) {
				case 1:
					{
					setState(4388);
					match(WITH);
					setState(4389);
					match(DECIMAL);
					}
					break;
				}
				}
			}

			setState(4397);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INCREMENT) {
				{
				setState(4394);
				match(INCREMENT);
				setState(4395);
				match(BY);
				setState(4396);
				((Alter_sequenceContext)_localctx).sequnce_increment = match(DECIMAL);
				}
			}

			setState(4403);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,484,_ctx) ) {
			case 1:
				{
				setState(4399);
				match(MINVALUE);
				setState(4400);
				match(DECIMAL);
				}
				break;
			case 2:
				{
				setState(4401);
				match(NO);
				setState(4402);
				match(MINVALUE);
				}
				break;
			}
			setState(4409);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,485,_ctx) ) {
			case 1:
				{
				setState(4405);
				match(MAXVALUE);
				setState(4406);
				match(DECIMAL);
				}
				break;
			case 2:
				{
				setState(4407);
				match(NO);
				setState(4408);
				match(MAXVALUE);
				}
				break;
			}
			setState(4414);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,486,_ctx) ) {
			case 1:
				{
				setState(4411);
				match(CYCLE);
				}
				break;
			case 2:
				{
				setState(4412);
				match(NO);
				setState(4413);
				match(CYCLE);
				}
				break;
			}
			setState(4420);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,487,_ctx) ) {
			case 1:
				{
				setState(4416);
				match(CACHE);
				setState(4417);
				match(DECIMAL);
				}
				break;
			case 2:
				{
				setState(4418);
				match(NO);
				setState(4419);
				match(CACHE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_sequenceContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext sequence_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode SEQUENCE() { return getToken(TSqlParser.SEQUENCE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode START() { return getToken(TSqlParser.START, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public TerminalNode INCREMENT() { return getToken(TSqlParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode MINVALUE() { return getToken(TSqlParser.MINVALUE, 0); }
		public List<TerminalNode> NO() { return getTokens(TSqlParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(TSqlParser.NO, i);
		}
		public TerminalNode MAXVALUE() { return getToken(TSqlParser.MAXVALUE, 0); }
		public TerminalNode CYCLE() { return getToken(TSqlParser.CYCLE, 0); }
		public TerminalNode CACHE() { return getToken(TSqlParser.CACHE, 0); }
		public TerminalNode MINUS() { return getToken(TSqlParser.MINUS, 0); }
		public Create_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_sequence(this);
		}
	}

	public final Create_sequenceContext create_sequence() throws RecognitionException {
		Create_sequenceContext _localctx = new Create_sequenceContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_create_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4422);
			match(CREATE);
			setState(4423);
			match(SEQUENCE);
			setState(4427);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,488,_ctx) ) {
			case 1:
				{
				setState(4424);
				((Create_sequenceContext)_localctx).schema_name = id();
				setState(4425);
				match(DOT);
				}
				break;
			}
			setState(4429);
			((Create_sequenceContext)_localctx).sequence_name = id();
			setState(4432);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(4430);
				match(AS);
				setState(4431);
				data_type();
				}
			}

			setState(4437);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,490,_ctx) ) {
			case 1:
				{
				setState(4434);
				match(START);
				setState(4435);
				match(WITH);
				setState(4436);
				match(DECIMAL);
				}
				break;
			}
			setState(4445);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INCREMENT) {
				{
				setState(4439);
				match(INCREMENT);
				setState(4440);
				match(BY);
				setState(4442);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MINUS) {
					{
					setState(4441);
					match(MINUS);
					}
				}

				setState(4444);
				match(DECIMAL);
				}
			}

			setState(4453);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,494,_ctx) ) {
			case 1:
				{
				setState(4447);
				match(MINVALUE);
				setState(4449);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,493,_ctx) ) {
				case 1:
					{
					setState(4448);
					match(DECIMAL);
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(4451);
				match(NO);
				setState(4452);
				match(MINVALUE);
				}
				break;
			}
			setState(4461);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,496,_ctx) ) {
			case 1:
				{
				setState(4455);
				match(MAXVALUE);
				setState(4457);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,495,_ctx) ) {
				case 1:
					{
					setState(4456);
					match(DECIMAL);
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(4459);
				match(NO);
				setState(4460);
				match(MAXVALUE);
				}
				break;
			}
			setState(4466);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,497,_ctx) ) {
			case 1:
				{
				setState(4463);
				match(CYCLE);
				}
				break;
			case 2:
				{
				setState(4464);
				match(NO);
				setState(4465);
				match(CYCLE);
				}
				break;
			}
			setState(4474);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,499,_ctx) ) {
			case 1:
				{
				setState(4468);
				match(CACHE);
				setState(4470);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,498,_ctx) ) {
				case 1:
					{
					setState(4469);
					match(DECIMAL);
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(4472);
				match(NO);
				setState(4473);
				match(CACHE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_server_auditContext extends ParserRuleContext {
		public IdContext audit_name;
		public Token filepath;
		public Token max_rollover_files;
		public Token max_files;
		public Token queue_delay;
		public IdContext event_field_name;
		public IdContext new_audit_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode AUDIT() { return getToken(TSqlParser.AUDIT, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode REMOVE() { return getToken(TSqlParser.REMOVE, 0); }
		public TerminalNode WHERE() { return getToken(TSqlParser.WHERE, 0); }
		public TerminalNode MODIFY() { return getToken(TSqlParser.MODIFY, 0); }
		public TerminalNode NAME() { return getToken(TSqlParser.NAME, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode TO() { return getToken(TSqlParser.TO, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public TerminalNode FILE() { return getToken(TSqlParser.FILE, 0); }
		public TerminalNode APPLICATION_LOG() { return getToken(TSqlParser.APPLICATION_LOG, 0); }
		public TerminalNode SECURITY_LOG() { return getToken(TSqlParser.SECURITY_LOG, 0); }
		public List<TerminalNode> QUEUE_DELAY() { return getTokens(TSqlParser.QUEUE_DELAY); }
		public TerminalNode QUEUE_DELAY(int i) {
			return getToken(TSqlParser.QUEUE_DELAY, i);
		}
		public List<TerminalNode> ON_FAILURE() { return getTokens(TSqlParser.ON_FAILURE); }
		public TerminalNode ON_FAILURE(int i) {
			return getToken(TSqlParser.ON_FAILURE, i);
		}
		public List<TerminalNode> STATE() { return getTokens(TSqlParser.STATE); }
		public TerminalNode STATE(int i) {
			return getToken(TSqlParser.STATE, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode AND() { return getToken(TSqlParser.AND, 0); }
		public TerminalNode OR() { return getToken(TSqlParser.OR, 0); }
		public List<TerminalNode> CONTINUE() { return getTokens(TSqlParser.CONTINUE); }
		public TerminalNode CONTINUE(int i) {
			return getToken(TSqlParser.CONTINUE, i);
		}
		public List<TerminalNode> SHUTDOWN() { return getTokens(TSqlParser.SHUTDOWN); }
		public TerminalNode SHUTDOWN(int i) {
			return getToken(TSqlParser.SHUTDOWN, i);
		}
		public List<TerminalNode> FAIL_OPERATION() { return getTokens(TSqlParser.FAIL_OPERATION); }
		public TerminalNode FAIL_OPERATION(int i) {
			return getToken(TSqlParser.FAIL_OPERATION, i);
		}
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public List<TerminalNode> OFF() { return getTokens(TSqlParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(TSqlParser.OFF, i);
		}
		public TerminalNode GREATER() { return getToken(TSqlParser.GREATER, 0); }
		public TerminalNode LESS() { return getToken(TSqlParser.LESS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode NOT() { return getToken(TSqlParser.NOT, 0); }
		public TerminalNode EXCLAMATION() { return getToken(TSqlParser.EXCLAMATION, 0); }
		public List<TerminalNode> FILEPATH() { return getTokens(TSqlParser.FILEPATH); }
		public TerminalNode FILEPATH(int i) {
			return getToken(TSqlParser.FILEPATH, i);
		}
		public List<TerminalNode> MAXSIZE() { return getTokens(TSqlParser.MAXSIZE); }
		public TerminalNode MAXSIZE(int i) {
			return getToken(TSqlParser.MAXSIZE, i);
		}
		public List<TerminalNode> MAX_ROLLOVER_FILES() { return getTokens(TSqlParser.MAX_ROLLOVER_FILES); }
		public TerminalNode MAX_ROLLOVER_FILES(int i) {
			return getToken(TSqlParser.MAX_ROLLOVER_FILES, i);
		}
		public List<TerminalNode> MAX_FILES() { return getTokens(TSqlParser.MAX_FILES); }
		public TerminalNode MAX_FILES(int i) {
			return getToken(TSqlParser.MAX_FILES, i);
		}
		public List<TerminalNode> RESERVE_DISK_SPACE() { return getTokens(TSqlParser.RESERVE_DISK_SPACE); }
		public TerminalNode RESERVE_DISK_SPACE(int i) {
			return getToken(TSqlParser.RESERVE_DISK_SPACE, i);
		}
		public List<TerminalNode> UNLIMITED() { return getTokens(TSqlParser.UNLIMITED); }
		public TerminalNode UNLIMITED(int i) {
			return getToken(TSqlParser.UNLIMITED, i);
		}
		public List<TerminalNode> MB() { return getTokens(TSqlParser.MB); }
		public TerminalNode MB(int i) {
			return getToken(TSqlParser.MB, i);
		}
		public List<TerminalNode> GB() { return getTokens(TSqlParser.GB); }
		public TerminalNode GB(int i) {
			return getToken(TSqlParser.GB, i);
		}
		public List<TerminalNode> TB() { return getTokens(TSqlParser.TB); }
		public TerminalNode TB(int i) {
			return getToken(TSqlParser.TB, i);
		}
		public Alter_server_auditContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_server_audit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_server_audit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_server_audit(this);
		}
	}

	public final Alter_server_auditContext alter_server_audit() throws RecognitionException {
		Alter_server_auditContext _localctx = new Alter_server_auditContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_alter_server_audit);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4476);
			match(ALTER);
			setState(4477);
			match(SERVER);
			setState(4478);
			match(AUDIT);
			setState(4479);
			((Alter_server_auditContext)_localctx).audit_name = id();
			setState(4611);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,524,_ctx) ) {
			case 1:
				{
				setState(4527);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TO) {
					{
					setState(4480);
					match(TO);
					setState(4525);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case FILE:
						{
						setState(4481);
						match(FILE);
						{
						setState(4482);
						match(LR_BRACKET);
						setState(4519);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==FILEPATH || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (MAX_FILES - 579)) | (1L << (MAX_ROLLOVER_FILES - 579)) | (1L << (MAXSIZE - 579)))) != 0) || _la==RESERVE_DISK_SPACE || _la==COMMA) {
							{
							setState(4517);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,506,_ctx) ) {
							case 1:
								{
								setState(4484);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4483);
									match(COMMA);
									}
								}

								setState(4486);
								match(FILEPATH);
								setState(4487);
								match(EQUAL);
								setState(4488);
								((Alter_server_auditContext)_localctx).filepath = match(STRING);
								}
								break;
							case 2:
								{
								setState(4490);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4489);
									match(COMMA);
									}
								}

								setState(4492);
								match(MAXSIZE);
								setState(4493);
								match(EQUAL);
								setState(4497);
								_errHandler.sync(this);
								switch (_input.LA(1)) {
								case DECIMAL:
									{
									setState(4494);
									match(DECIMAL);
									setState(4495);
									_la = _input.LA(1);
									if ( !(_la==GB || _la==MB || _la==TB) ) {
									_errHandler.recoverInline(this);
									}
									else {
										if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
										_errHandler.reportMatch(this);
										consume();
									}
									}
									break;
								case UNLIMITED:
									{
									setState(4496);
									match(UNLIMITED);
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								break;
							case 3:
								{
								setState(4500);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4499);
									match(COMMA);
									}
								}

								setState(4502);
								match(MAX_ROLLOVER_FILES);
								setState(4503);
								match(EQUAL);
								setState(4504);
								((Alter_server_auditContext)_localctx).max_rollover_files = _input.LT(1);
								_la = _input.LA(1);
								if ( !(_la==UNLIMITED || _la==DECIMAL) ) {
									((Alter_server_auditContext)_localctx).max_rollover_files = (Token)_errHandler.recoverInline(this);
								}
								else {
									if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
									_errHandler.reportMatch(this);
									consume();
								}
								}
								break;
							case 4:
								{
								setState(4506);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4505);
									match(COMMA);
									}
								}

								setState(4508);
								match(MAX_FILES);
								setState(4509);
								match(EQUAL);
								setState(4510);
								((Alter_server_auditContext)_localctx).max_files = match(DECIMAL);
								}
								break;
							case 5:
								{
								setState(4512);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4511);
									match(COMMA);
									}
								}

								setState(4514);
								match(RESERVE_DISK_SPACE);
								setState(4515);
								match(EQUAL);
								setState(4516);
								_la = _input.LA(1);
								if ( !(_la==OFF || _la==ON) ) {
								_errHandler.recoverInline(this);
								}
								else {
									if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
									_errHandler.reportMatch(this);
									consume();
								}
								}
								break;
							}
							}
							setState(4521);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(4522);
						match(RR_BRACKET);
						}
						}
						break;
					case APPLICATION_LOG:
						{
						setState(4523);
						match(APPLICATION_LOG);
						}
						break;
					case SECURITY_LOG:
						{
						setState(4524);
						match(SECURITY_LOG);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(4555);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,515,_ctx) ) {
				case 1:
					{
					setState(4529);
					match(WITH);
					setState(4530);
					match(LR_BRACKET);
					setState(4551);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==ON_FAILURE || _la==STATE || _la==QUEUE_DELAY || _la==COMMA) {
						{
						setState(4549);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,513,_ctx) ) {
						case 1:
							{
							setState(4532);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4531);
								match(COMMA);
								}
							}

							setState(4534);
							match(QUEUE_DELAY);
							setState(4535);
							match(EQUAL);
							setState(4536);
							((Alter_server_auditContext)_localctx).queue_delay = match(DECIMAL);
							}
							break;
						case 2:
							{
							setState(4538);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4537);
								match(COMMA);
								}
							}

							setState(4540);
							match(ON_FAILURE);
							setState(4541);
							match(EQUAL);
							setState(4542);
							_la = _input.LA(1);
							if ( !(_la==CONTINUE || _la==SHUTDOWN || _la==FAIL_OPERATION) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 3:
							{
							setState(4544);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4543);
								match(COMMA);
								}
							}

							setState(4546);
							match(STATE);
							setState(4547);
							match(EQUAL);
							setState(4548);
							_la = _input.LA(1);
							if ( !(_la==OFF || _la==ON) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						}
						}
						setState(4553);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(4554);
					match(RR_BRACKET);
					}
					break;
				}
				setState(4603);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(4557);
					match(WHERE);
					setState(4601);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,522,_ctx) ) {
					case 1:
						{
						setState(4559);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(4558);
							match(COMMA);
							}
						}

						{
						setState(4562);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(4561);
							match(NOT);
							}
						}

						}
						setState(4564);
						((Alter_server_auditContext)_localctx).event_field_name = id();
						setState(4576);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,518,_ctx) ) {
						case 1:
							{
							setState(4565);
							match(EQUAL);
							}
							break;
						case 2:
							{
							{
							setState(4566);
							match(LESS);
							setState(4567);
							match(GREATER);
							}
							}
							break;
						case 3:
							{
							{
							setState(4568);
							match(EXCLAMATION);
							setState(4569);
							match(EQUAL);
							}
							}
							break;
						case 4:
							{
							setState(4570);
							match(GREATER);
							}
							break;
						case 5:
							{
							{
							setState(4571);
							match(GREATER);
							setState(4572);
							match(EQUAL);
							}
							}
							break;
						case 6:
							{
							setState(4573);
							match(LESS);
							}
							break;
						case 7:
							{
							setState(4574);
							match(LESS);
							setState(4575);
							match(EQUAL);
							}
							break;
						}
						setState(4578);
						_la = _input.LA(1);
						if ( !(_la==DECIMAL || _la==STRING) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 2:
						{
						setState(4581);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(4580);
							match(COMMA);
							}
						}

						setState(4583);
						_la = _input.LA(1);
						if ( !(_la==AND || _la==OR) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(4585);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(4584);
							match(NOT);
							}
						}

						setState(4598);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,521,_ctx) ) {
						case 1:
							{
							setState(4587);
							match(EQUAL);
							}
							break;
						case 2:
							{
							{
							setState(4588);
							match(LESS);
							setState(4589);
							match(GREATER);
							}
							}
							break;
						case 3:
							{
							{
							setState(4590);
							match(EXCLAMATION);
							setState(4591);
							match(EQUAL);
							}
							}
							break;
						case 4:
							{
							setState(4592);
							match(GREATER);
							}
							break;
						case 5:
							{
							{
							setState(4593);
							match(GREATER);
							setState(4594);
							match(EQUAL);
							}
							}
							break;
						case 6:
							{
							setState(4595);
							match(LESS);
							}
							break;
						case 7:
							{
							setState(4596);
							match(LESS);
							setState(4597);
							match(EQUAL);
							}
							break;
						}
						setState(4600);
						_la = _input.LA(1);
						if ( !(_la==DECIMAL || _la==STRING) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					}
					}
				}

				}
				break;
			case 2:
				{
				setState(4605);
				match(REMOVE);
				setState(4606);
				match(WHERE);
				}
				break;
			case 3:
				{
				setState(4607);
				match(MODIFY);
				setState(4608);
				match(NAME);
				setState(4609);
				match(EQUAL);
				setState(4610);
				((Alter_server_auditContext)_localctx).new_audit_name = id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_server_auditContext extends ParserRuleContext {
		public IdContext audit_name;
		public Token filepath;
		public Token max_rollover_files;
		public Token max_files;
		public Token queue_delay;
		public IdContext audit_guid;
		public IdContext event_field_name;
		public IdContext new_audit_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode AUDIT() { return getToken(TSqlParser.AUDIT, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode REMOVE() { return getToken(TSqlParser.REMOVE, 0); }
		public TerminalNode WHERE() { return getToken(TSqlParser.WHERE, 0); }
		public TerminalNode MODIFY() { return getToken(TSqlParser.MODIFY, 0); }
		public TerminalNode NAME() { return getToken(TSqlParser.NAME, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode TO() { return getToken(TSqlParser.TO, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public TerminalNode FILE() { return getToken(TSqlParser.FILE, 0); }
		public TerminalNode APPLICATION_LOG() { return getToken(TSqlParser.APPLICATION_LOG, 0); }
		public TerminalNode SECURITY_LOG() { return getToken(TSqlParser.SECURITY_LOG, 0); }
		public List<TerminalNode> QUEUE_DELAY() { return getTokens(TSqlParser.QUEUE_DELAY); }
		public TerminalNode QUEUE_DELAY(int i) {
			return getToken(TSqlParser.QUEUE_DELAY, i);
		}
		public List<TerminalNode> ON_FAILURE() { return getTokens(TSqlParser.ON_FAILURE); }
		public TerminalNode ON_FAILURE(int i) {
			return getToken(TSqlParser.ON_FAILURE, i);
		}
		public List<TerminalNode> STATE() { return getTokens(TSqlParser.STATE); }
		public TerminalNode STATE(int i) {
			return getToken(TSqlParser.STATE, i);
		}
		public List<TerminalNode> AUDIT_GUID() { return getTokens(TSqlParser.AUDIT_GUID); }
		public TerminalNode AUDIT_GUID(int i) {
			return getToken(TSqlParser.AUDIT_GUID, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode AND() { return getToken(TSqlParser.AND, 0); }
		public TerminalNode OR() { return getToken(TSqlParser.OR, 0); }
		public List<TerminalNode> CONTINUE() { return getTokens(TSqlParser.CONTINUE); }
		public TerminalNode CONTINUE(int i) {
			return getToken(TSqlParser.CONTINUE, i);
		}
		public List<TerminalNode> SHUTDOWN() { return getTokens(TSqlParser.SHUTDOWN); }
		public TerminalNode SHUTDOWN(int i) {
			return getToken(TSqlParser.SHUTDOWN, i);
		}
		public List<TerminalNode> FAIL_OPERATION() { return getTokens(TSqlParser.FAIL_OPERATION); }
		public TerminalNode FAIL_OPERATION(int i) {
			return getToken(TSqlParser.FAIL_OPERATION, i);
		}
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public List<TerminalNode> OFF() { return getTokens(TSqlParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(TSqlParser.OFF, i);
		}
		public TerminalNode GREATER() { return getToken(TSqlParser.GREATER, 0); }
		public TerminalNode LESS() { return getToken(TSqlParser.LESS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode NOT() { return getToken(TSqlParser.NOT, 0); }
		public TerminalNode EXCLAMATION() { return getToken(TSqlParser.EXCLAMATION, 0); }
		public List<TerminalNode> FILEPATH() { return getTokens(TSqlParser.FILEPATH); }
		public TerminalNode FILEPATH(int i) {
			return getToken(TSqlParser.FILEPATH, i);
		}
		public List<TerminalNode> MAXSIZE() { return getTokens(TSqlParser.MAXSIZE); }
		public TerminalNode MAXSIZE(int i) {
			return getToken(TSqlParser.MAXSIZE, i);
		}
		public List<TerminalNode> MAX_ROLLOVER_FILES() { return getTokens(TSqlParser.MAX_ROLLOVER_FILES); }
		public TerminalNode MAX_ROLLOVER_FILES(int i) {
			return getToken(TSqlParser.MAX_ROLLOVER_FILES, i);
		}
		public List<TerminalNode> MAX_FILES() { return getTokens(TSqlParser.MAX_FILES); }
		public TerminalNode MAX_FILES(int i) {
			return getToken(TSqlParser.MAX_FILES, i);
		}
		public List<TerminalNode> RESERVE_DISK_SPACE() { return getTokens(TSqlParser.RESERVE_DISK_SPACE); }
		public TerminalNode RESERVE_DISK_SPACE(int i) {
			return getToken(TSqlParser.RESERVE_DISK_SPACE, i);
		}
		public List<TerminalNode> UNLIMITED() { return getTokens(TSqlParser.UNLIMITED); }
		public TerminalNode UNLIMITED(int i) {
			return getToken(TSqlParser.UNLIMITED, i);
		}
		public List<TerminalNode> MB() { return getTokens(TSqlParser.MB); }
		public TerminalNode MB(int i) {
			return getToken(TSqlParser.MB, i);
		}
		public List<TerminalNode> GB() { return getTokens(TSqlParser.GB); }
		public TerminalNode GB(int i) {
			return getToken(TSqlParser.GB, i);
		}
		public List<TerminalNode> TB() { return getTokens(TSqlParser.TB); }
		public TerminalNode TB(int i) {
			return getToken(TSqlParser.TB, i);
		}
		public Create_server_auditContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_server_audit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_server_audit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_server_audit(this);
		}
	}

	public final Create_server_auditContext create_server_audit() throws RecognitionException {
		Create_server_auditContext _localctx = new Create_server_auditContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_create_server_audit);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4613);
			match(CREATE);
			setState(4614);
			match(SERVER);
			setState(4615);
			match(AUDIT);
			setState(4616);
			((Create_server_auditContext)_localctx).audit_name = id();
			setState(4754);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,550,_ctx) ) {
			case 1:
				{
				setState(4664);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TO) {
					{
					setState(4617);
					match(TO);
					setState(4662);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case FILE:
						{
						setState(4618);
						match(FILE);
						{
						setState(4619);
						match(LR_BRACKET);
						setState(4656);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==FILEPATH || ((((_la - 579)) & ~0x3f) == 0 && ((1L << (_la - 579)) & ((1L << (MAX_FILES - 579)) | (1L << (MAX_ROLLOVER_FILES - 579)) | (1L << (MAXSIZE - 579)))) != 0) || _la==RESERVE_DISK_SPACE || _la==COMMA) {
							{
							setState(4654);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,531,_ctx) ) {
							case 1:
								{
								setState(4621);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4620);
									match(COMMA);
									}
								}

								setState(4623);
								match(FILEPATH);
								setState(4624);
								match(EQUAL);
								setState(4625);
								((Create_server_auditContext)_localctx).filepath = match(STRING);
								}
								break;
							case 2:
								{
								setState(4627);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4626);
									match(COMMA);
									}
								}

								setState(4629);
								match(MAXSIZE);
								setState(4630);
								match(EQUAL);
								setState(4634);
								_errHandler.sync(this);
								switch (_input.LA(1)) {
								case DECIMAL:
									{
									setState(4631);
									match(DECIMAL);
									setState(4632);
									_la = _input.LA(1);
									if ( !(_la==GB || _la==MB || _la==TB) ) {
									_errHandler.recoverInline(this);
									}
									else {
										if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
										_errHandler.reportMatch(this);
										consume();
									}
									}
									break;
								case UNLIMITED:
									{
									setState(4633);
									match(UNLIMITED);
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								break;
							case 3:
								{
								setState(4637);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4636);
									match(COMMA);
									}
								}

								setState(4639);
								match(MAX_ROLLOVER_FILES);
								setState(4640);
								match(EQUAL);
								setState(4641);
								((Create_server_auditContext)_localctx).max_rollover_files = _input.LT(1);
								_la = _input.LA(1);
								if ( !(_la==UNLIMITED || _la==DECIMAL) ) {
									((Create_server_auditContext)_localctx).max_rollover_files = (Token)_errHandler.recoverInline(this);
								}
								else {
									if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
									_errHandler.reportMatch(this);
									consume();
								}
								}
								break;
							case 4:
								{
								setState(4643);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4642);
									match(COMMA);
									}
								}

								setState(4645);
								match(MAX_FILES);
								setState(4646);
								match(EQUAL);
								setState(4647);
								((Create_server_auditContext)_localctx).max_files = match(DECIMAL);
								}
								break;
							case 5:
								{
								setState(4649);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4648);
									match(COMMA);
									}
								}

								setState(4651);
								match(RESERVE_DISK_SPACE);
								setState(4652);
								match(EQUAL);
								setState(4653);
								_la = _input.LA(1);
								if ( !(_la==OFF || _la==ON) ) {
								_errHandler.recoverInline(this);
								}
								else {
									if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
									_errHandler.reportMatch(this);
									consume();
								}
								}
								break;
							}
							}
							setState(4658);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(4659);
						match(RR_BRACKET);
						}
						}
						break;
					case APPLICATION_LOG:
						{
						setState(4660);
						match(APPLICATION_LOG);
						}
						break;
					case SECURITY_LOG:
						{
						setState(4661);
						match(SECURITY_LOG);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(4698);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,541,_ctx) ) {
				case 1:
					{
					setState(4666);
					match(WITH);
					setState(4667);
					match(LR_BRACKET);
					setState(4694);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==ON_FAILURE || _la==STATE || _la==AUDIT_GUID || _la==QUEUE_DELAY || _la==COMMA) {
						{
						setState(4692);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,539,_ctx) ) {
						case 1:
							{
							setState(4669);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4668);
								match(COMMA);
								}
							}

							setState(4671);
							match(QUEUE_DELAY);
							setState(4672);
							match(EQUAL);
							setState(4673);
							((Create_server_auditContext)_localctx).queue_delay = match(DECIMAL);
							}
							break;
						case 2:
							{
							setState(4675);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4674);
								match(COMMA);
								}
							}

							setState(4677);
							match(ON_FAILURE);
							setState(4678);
							match(EQUAL);
							setState(4679);
							_la = _input.LA(1);
							if ( !(_la==CONTINUE || _la==SHUTDOWN || _la==FAIL_OPERATION) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 3:
							{
							setState(4681);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4680);
								match(COMMA);
								}
							}

							setState(4683);
							match(STATE);
							setState(4684);
							match(EQUAL);
							setState(4685);
							_la = _input.LA(1);
							if ( !(_la==OFF || _la==ON) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 4:
							{
							setState(4687);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4686);
								match(COMMA);
								}
							}

							setState(4689);
							match(AUDIT_GUID);
							setState(4690);
							match(EQUAL);
							setState(4691);
							((Create_server_auditContext)_localctx).audit_guid = id();
							}
							break;
						}
						}
						setState(4696);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(4697);
					match(RR_BRACKET);
					}
					break;
				}
				setState(4746);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(4700);
					match(WHERE);
					setState(4744);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,548,_ctx) ) {
					case 1:
						{
						setState(4702);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(4701);
							match(COMMA);
							}
						}

						{
						setState(4705);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(4704);
							match(NOT);
							}
						}

						}
						setState(4707);
						((Create_server_auditContext)_localctx).event_field_name = id();
						setState(4719);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,544,_ctx) ) {
						case 1:
							{
							setState(4708);
							match(EQUAL);
							}
							break;
						case 2:
							{
							{
							setState(4709);
							match(LESS);
							setState(4710);
							match(GREATER);
							}
							}
							break;
						case 3:
							{
							{
							setState(4711);
							match(EXCLAMATION);
							setState(4712);
							match(EQUAL);
							}
							}
							break;
						case 4:
							{
							setState(4713);
							match(GREATER);
							}
							break;
						case 5:
							{
							{
							setState(4714);
							match(GREATER);
							setState(4715);
							match(EQUAL);
							}
							}
							break;
						case 6:
							{
							setState(4716);
							match(LESS);
							}
							break;
						case 7:
							{
							setState(4717);
							match(LESS);
							setState(4718);
							match(EQUAL);
							}
							break;
						}
						setState(4721);
						_la = _input.LA(1);
						if ( !(_la==DECIMAL || _la==STRING) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 2:
						{
						setState(4724);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(4723);
							match(COMMA);
							}
						}

						setState(4726);
						_la = _input.LA(1);
						if ( !(_la==AND || _la==OR) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(4728);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(4727);
							match(NOT);
							}
						}

						setState(4741);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,547,_ctx) ) {
						case 1:
							{
							setState(4730);
							match(EQUAL);
							}
							break;
						case 2:
							{
							{
							setState(4731);
							match(LESS);
							setState(4732);
							match(GREATER);
							}
							}
							break;
						case 3:
							{
							{
							setState(4733);
							match(EXCLAMATION);
							setState(4734);
							match(EQUAL);
							}
							}
							break;
						case 4:
							{
							setState(4735);
							match(GREATER);
							}
							break;
						case 5:
							{
							{
							setState(4736);
							match(GREATER);
							setState(4737);
							match(EQUAL);
							}
							}
							break;
						case 6:
							{
							setState(4738);
							match(LESS);
							}
							break;
						case 7:
							{
							setState(4739);
							match(LESS);
							setState(4740);
							match(EQUAL);
							}
							break;
						}
						setState(4743);
						_la = _input.LA(1);
						if ( !(_la==DECIMAL || _la==STRING) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					}
					}
				}

				}
				break;
			case 2:
				{
				setState(4748);
				match(REMOVE);
				setState(4749);
				match(WHERE);
				}
				break;
			case 3:
				{
				setState(4750);
				match(MODIFY);
				setState(4751);
				match(NAME);
				setState(4752);
				match(EQUAL);
				setState(4753);
				((Create_server_auditContext)_localctx).new_audit_name = id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_server_audit_specificationContext extends ParserRuleContext {
		public IdContext audit_specification_name;
		public IdContext audit_name;
		public IdContext audit_action_group_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public List<TerminalNode> SERVER() { return getTokens(TSqlParser.SERVER); }
		public TerminalNode SERVER(int i) {
			return getToken(TSqlParser.SERVER, i);
		}
		public List<TerminalNode> AUDIT() { return getTokens(TSqlParser.AUDIT); }
		public TerminalNode AUDIT(int i) {
			return getToken(TSqlParser.AUDIT, i);
		}
		public TerminalNode SPECIFICATION() { return getToken(TSqlParser.SPECIFICATION, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode STATE() { return getToken(TSqlParser.STATE, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public List<TerminalNode> ADD() { return getTokens(TSqlParser.ADD); }
		public TerminalNode ADD(int i) {
			return getToken(TSqlParser.ADD, i);
		}
		public List<TerminalNode> DROP() { return getTokens(TSqlParser.DROP); }
		public TerminalNode DROP(int i) {
			return getToken(TSqlParser.DROP, i);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public Alter_server_audit_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_server_audit_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_server_audit_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_server_audit_specification(this);
		}
	}

	public final Alter_server_audit_specificationContext alter_server_audit_specification() throws RecognitionException {
		Alter_server_audit_specificationContext _localctx = new Alter_server_audit_specificationContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_alter_server_audit_specification);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4756);
			match(ALTER);
			setState(4757);
			match(SERVER);
			setState(4758);
			match(AUDIT);
			setState(4759);
			match(SPECIFICATION);
			setState(4760);
			((Alter_server_audit_specificationContext)_localctx).audit_specification_name = id();
			setState(4765);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4761);
				match(FOR);
				setState(4762);
				match(SERVER);
				setState(4763);
				match(AUDIT);
				setState(4764);
				((Alter_server_audit_specificationContext)_localctx).audit_name = id();
				}
			}

			setState(4774);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,552,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4767);
					_la = _input.LA(1);
					if ( !(_la==ADD || _la==DROP) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4768);
					match(LR_BRACKET);
					setState(4769);
					((Alter_server_audit_specificationContext)_localctx).audit_action_group_name = id();
					setState(4770);
					match(RR_BRACKET);
					}
					} 
				}
				setState(4776);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,552,_ctx);
			}
			setState(4783);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,553,_ctx) ) {
			case 1:
				{
				setState(4777);
				match(WITH);
				setState(4778);
				match(LR_BRACKET);
				setState(4779);
				match(STATE);
				setState(4780);
				match(EQUAL);
				setState(4781);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4782);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_server_audit_specificationContext extends ParserRuleContext {
		public IdContext audit_specification_name;
		public IdContext audit_name;
		public IdContext audit_action_group_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public List<TerminalNode> SERVER() { return getTokens(TSqlParser.SERVER); }
		public TerminalNode SERVER(int i) {
			return getToken(TSqlParser.SERVER, i);
		}
		public List<TerminalNode> AUDIT() { return getTokens(TSqlParser.AUDIT); }
		public TerminalNode AUDIT(int i) {
			return getToken(TSqlParser.AUDIT, i);
		}
		public TerminalNode SPECIFICATION() { return getToken(TSqlParser.SPECIFICATION, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public List<TerminalNode> ADD() { return getTokens(TSqlParser.ADD); }
		public TerminalNode ADD(int i) {
			return getToken(TSqlParser.ADD, i);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode STATE() { return getToken(TSqlParser.STATE, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public Create_server_audit_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_server_audit_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_server_audit_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_server_audit_specification(this);
		}
	}

	public final Create_server_audit_specificationContext create_server_audit_specification() throws RecognitionException {
		Create_server_audit_specificationContext _localctx = new Create_server_audit_specificationContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_create_server_audit_specification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4785);
			match(CREATE);
			setState(4786);
			match(SERVER);
			setState(4787);
			match(AUDIT);
			setState(4788);
			match(SPECIFICATION);
			setState(4789);
			((Create_server_audit_specificationContext)_localctx).audit_specification_name = id();
			setState(4794);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4790);
				match(FOR);
				setState(4791);
				match(SERVER);
				setState(4792);
				match(AUDIT);
				setState(4793);
				((Create_server_audit_specificationContext)_localctx).audit_name = id();
				}
			}

			setState(4803);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ADD) {
				{
				{
				setState(4796);
				match(ADD);
				setState(4797);
				match(LR_BRACKET);
				setState(4798);
				((Create_server_audit_specificationContext)_localctx).audit_action_group_name = id();
				setState(4799);
				match(RR_BRACKET);
				}
				}
				setState(4805);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4812);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,556,_ctx) ) {
			case 1:
				{
				setState(4806);
				match(WITH);
				setState(4807);
				match(LR_BRACKET);
				setState(4808);
				match(STATE);
				setState(4809);
				match(EQUAL);
				setState(4810);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4811);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_server_configurationContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode CONFIGURATION() { return getToken(TSqlParser.CONFIGURATION, 0); }
		public List<TerminalNode> SET() { return getTokens(TSqlParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(TSqlParser.SET, i);
		}
		public TerminalNode PROCESS() { return getToken(TSqlParser.PROCESS, 0); }
		public TerminalNode AFFINITY() { return getToken(TSqlParser.AFFINITY, 0); }
		public TerminalNode DIAGNOSTICS() { return getToken(TSqlParser.DIAGNOSTICS, 0); }
		public TerminalNode LOG() { return getToken(TSqlParser.LOG, 0); }
		public TerminalNode FAILOVER() { return getToken(TSqlParser.FAILOVER, 0); }
		public TerminalNode CLUSTER() { return getToken(TSqlParser.CLUSTER, 0); }
		public TerminalNode PROPERTY() { return getToken(TSqlParser.PROPERTY, 0); }
		public TerminalNode HADR() { return getToken(TSqlParser.HADR, 0); }
		public TerminalNode CONTEXT() { return getToken(TSqlParser.CONTEXT, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode BUFFER() { return getToken(TSqlParser.BUFFER, 0); }
		public TerminalNode POOL() { return getToken(TSqlParser.POOL, 0); }
		public TerminalNode EXTENSION() { return getToken(TSqlParser.EXTENSION, 0); }
		public TerminalNode SOFTNUMA() { return getToken(TSqlParser.SOFTNUMA, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode LOCAL() { return getToken(TSqlParser.LOCAL, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public TerminalNode CPU() { return getToken(TSqlParser.CPU, 0); }
		public TerminalNode NUMANODE() { return getToken(TSqlParser.NUMANODE, 0); }
		public TerminalNode PATH() { return getToken(TSqlParser.PATH, 0); }
		public TerminalNode MAX_SIZE() { return getToken(TSqlParser.MAX_SIZE, 0); }
		public TerminalNode MAX_FILES() { return getToken(TSqlParser.MAX_FILES, 0); }
		public TerminalNode VERBOSELOGGING() { return getToken(TSqlParser.VERBOSELOGGING, 0); }
		public TerminalNode SQLDUMPERFLAGS() { return getToken(TSqlParser.SQLDUMPERFLAGS, 0); }
		public TerminalNode SQLDUMPERPATH() { return getToken(TSqlParser.SQLDUMPERPATH, 0); }
		public TerminalNode SQLDUMPERTIMEOUT() { return getToken(TSqlParser.SQLDUMPERTIMEOUT, 0); }
		public TerminalNode FAILURECONDITIONLEVEL() { return getToken(TSqlParser.FAILURECONDITIONLEVEL, 0); }
		public TerminalNode HEALTHCHECKTIMEOUT() { return getToken(TSqlParser.HEALTHCHECKTIMEOUT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode FILENAME() { return getToken(TSqlParser.FILENAME, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode SIZE() { return getToken(TSqlParser.SIZE, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public TerminalNode KB() { return getToken(TSqlParser.KB, 0); }
		public TerminalNode MB() { return getToken(TSqlParser.MB, 0); }
		public TerminalNode GB() { return getToken(TSqlParser.GB, 0); }
		public TerminalNode AUTO() { return getToken(TSqlParser.AUTO, 0); }
		public List<TerminalNode> TO() { return getTokens(TSqlParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(TSqlParser.TO, i);
		}
		public Alter_server_configurationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_server_configuration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_server_configuration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_server_configuration(this);
		}
	}

	public final Alter_server_configurationContext alter_server_configuration() throws RecognitionException {
		Alter_server_configurationContext _localctx = new Alter_server_configurationContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_alter_server_configuration);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4814);
			match(ALTER);
			setState(4815);
			match(SERVER);
			setState(4816);
			match(CONFIGURATION);
			setState(4817);
			match(SET);
			{
			setState(4923);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PROCESS:
				{
				setState(4818);
				match(PROCESS);
				setState(4819);
				match(AFFINITY);
				setState(4855);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CPU:
					{
					setState(4820);
					match(CPU);
					setState(4821);
					match(EQUAL);
					setState(4837);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case AUTO:
						{
						setState(4822);
						match(AUTO);
						}
						break;
					case DECIMAL:
					case COMMA:
						{
						setState(4833); 
						_errHandler.sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								setState(4833);
								_errHandler.sync(this);
								switch ( getInterpreter().adaptivePredict(_input,559,_ctx) ) {
								case 1:
									{
									setState(4824);
									_errHandler.sync(this);
									_la = _input.LA(1);
									if (_la==COMMA) {
										{
										setState(4823);
										match(COMMA);
										}
									}

									setState(4826);
									match(DECIMAL);
									}
									break;
								case 2:
									{
									setState(4828);
									_errHandler.sync(this);
									_la = _input.LA(1);
									if (_la==COMMA) {
										{
										setState(4827);
										match(COMMA);
										}
									}

									setState(4830);
									match(DECIMAL);
									setState(4831);
									match(TO);
									setState(4832);
									match(DECIMAL);
									}
									break;
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							setState(4835); 
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input,560,_ctx);
						} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case NUMANODE:
					{
					setState(4839);
					match(NUMANODE);
					setState(4840);
					match(EQUAL);
					setState(4851); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							setState(4851);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,564,_ctx) ) {
							case 1:
								{
								setState(4842);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4841);
									match(COMMA);
									}
								}

								setState(4844);
								match(DECIMAL);
								}
								break;
							case 2:
								{
								setState(4846);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4845);
									match(COMMA);
									}
								}

								setState(4848);
								match(DECIMAL);
								setState(4849);
								match(TO);
								setState(4850);
								match(DECIMAL);
								}
								break;
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(4853); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,565,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DIAGNOSTICS:
				{
				setState(4857);
				match(DIAGNOSTICS);
				setState(4858);
				match(LOG);
				setState(4874);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ON:
					{
					setState(4859);
					match(ON);
					}
					break;
				case OFF:
					{
					setState(4860);
					match(OFF);
					}
					break;
				case PATH:
					{
					setState(4861);
					match(PATH);
					setState(4862);
					match(EQUAL);
					setState(4863);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case MAX_SIZE:
					{
					setState(4864);
					match(MAX_SIZE);
					setState(4865);
					match(EQUAL);
					setState(4869);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case DECIMAL:
						{
						setState(4866);
						match(DECIMAL);
						setState(4867);
						match(MB);
						}
						break;
					case DEFAULT:
						{
						setState(4868);
						match(DEFAULT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case MAX_FILES:
					{
					setState(4871);
					match(MAX_FILES);
					setState(4872);
					match(EQUAL);
					setState(4873);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==DECIMAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case FAILOVER:
				{
				setState(4876);
				match(FAILOVER);
				setState(4877);
				match(CLUSTER);
				setState(4878);
				match(PROPERTY);
				setState(4896);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case VERBOSELOGGING:
					{
					setState(4879);
					match(VERBOSELOGGING);
					setState(4880);
					match(EQUAL);
					setState(4881);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case SQLDUMPERFLAGS:
					{
					setState(4882);
					match(SQLDUMPERFLAGS);
					setState(4883);
					match(EQUAL);
					setState(4884);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case SQLDUMPERPATH:
					{
					setState(4885);
					match(SQLDUMPERPATH);
					setState(4886);
					match(EQUAL);
					setState(4887);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case SQLDUMPERTIMEOUT:
					{
					setState(4888);
					match(SQLDUMPERTIMEOUT);
					setState(4889);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case FAILURECONDITIONLEVEL:
					{
					setState(4890);
					match(FAILURECONDITIONLEVEL);
					setState(4891);
					match(EQUAL);
					setState(4892);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case HEALTHCHECKTIMEOUT:
					{
					setState(4893);
					match(HEALTHCHECKTIMEOUT);
					setState(4894);
					match(EQUAL);
					setState(4895);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==DECIMAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case HADR:
				{
				setState(4898);
				match(HADR);
				setState(4899);
				match(CLUSTER);
				setState(4900);
				match(CONTEXT);
				setState(4901);
				match(EQUAL);
				setState(4902);
				_la = _input.LA(1);
				if ( !(_la==LOCAL || _la==STRING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case BUFFER:
				{
				setState(4903);
				match(BUFFER);
				setState(4904);
				match(POOL);
				setState(4905);
				match(EXTENSION);
				setState(4918);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ON:
					{
					setState(4906);
					match(ON);
					setState(4907);
					match(LR_BRACKET);
					setState(4908);
					match(FILENAME);
					setState(4909);
					match(EQUAL);
					setState(4910);
					match(STRING);
					setState(4911);
					match(COMMA);
					setState(4912);
					match(SIZE);
					setState(4913);
					match(EQUAL);
					setState(4914);
					match(DECIMAL);
					setState(4915);
					_la = _input.LA(1);
					if ( !(_la==GB || _la==KB || _la==MB) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4916);
					match(RR_BRACKET);
					}
					break;
				case OFF:
					{
					setState(4917);
					match(OFF);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case SET:
				{
				setState(4920);
				match(SET);
				setState(4921);
				match(SOFTNUMA);
				setState(4922);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_server_roleContext extends ParserRuleContext {
		public IdContext server_role_name;
		public IdContext server_principal;
		public IdContext new_server_role_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode MEMBER() { return getToken(TSqlParser.MEMBER, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode NAME() { return getToken(TSqlParser.NAME, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public Alter_server_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_server_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_server_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_server_role(this);
		}
	}

	public final Alter_server_roleContext alter_server_role() throws RecognitionException {
		Alter_server_roleContext _localctx = new Alter_server_roleContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_alter_server_role);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4925);
			match(ALTER);
			setState(4926);
			match(SERVER);
			setState(4927);
			match(ROLE);
			setState(4928);
			((Alter_server_roleContext)_localctx).server_role_name = id();
			setState(4936);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case DROP:
				{
				setState(4929);
				_la = _input.LA(1);
				if ( !(_la==ADD || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4930);
				match(MEMBER);
				setState(4931);
				((Alter_server_roleContext)_localctx).server_principal = id();
				}
				break;
			case WITH:
				{
				setState(4932);
				match(WITH);
				setState(4933);
				match(NAME);
				setState(4934);
				match(EQUAL);
				setState(4935);
				((Alter_server_roleContext)_localctx).new_server_role_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_server_roleContext extends ParserRuleContext {
		public IdContext server_role;
		public IdContext server_principal;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public Create_server_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_server_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_server_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_server_role(this);
		}
	}

	public final Create_server_roleContext create_server_role() throws RecognitionException {
		Create_server_roleContext _localctx = new Create_server_roleContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_create_server_role);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4938);
			match(CREATE);
			setState(4939);
			match(SERVER);
			setState(4940);
			match(ROLE);
			setState(4941);
			((Create_server_roleContext)_localctx).server_role = id();
			setState(4944);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(4942);
				match(AUTHORIZATION);
				setState(4943);
				((Create_server_roleContext)_localctx).server_principal = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_server_role_pdwContext extends ParserRuleContext {
		public IdContext server_role_name;
		public IdContext login;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public TerminalNode MEMBER() { return getToken(TSqlParser.MEMBER, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public Alter_server_role_pdwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_server_role_pdw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_server_role_pdw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_server_role_pdw(this);
		}
	}

	public final Alter_server_role_pdwContext alter_server_role_pdw() throws RecognitionException {
		Alter_server_role_pdwContext _localctx = new Alter_server_role_pdwContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_alter_server_role_pdw);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4946);
			match(ALTER);
			setState(4947);
			match(SERVER);
			setState(4948);
			match(ROLE);
			setState(4949);
			((Alter_server_role_pdwContext)_localctx).server_role_name = id();
			setState(4950);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4951);
			match(MEMBER);
			setState(4952);
			((Alter_server_role_pdwContext)_localctx).login = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_serviceContext extends ParserRuleContext {
		public IdContext modified_service_name;
		public IdContext schema_name;
		public IdContext queue_name;
		public IdContext modified_contract_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode SERVICE() { return getToken(TSqlParser.SERVICE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode QUEUE() { return getToken(TSqlParser.QUEUE, 0); }
		public List<TerminalNode> ADD() { return getTokens(TSqlParser.ADD); }
		public TerminalNode ADD(int i) {
			return getToken(TSqlParser.ADD, i);
		}
		public List<TerminalNode> DROP() { return getTokens(TSqlParser.DROP); }
		public TerminalNode DROP(int i) {
			return getToken(TSqlParser.DROP, i);
		}
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Alter_serviceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_service; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_service(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_service(this);
		}
	}

	public final Alter_serviceContext alter_service() throws RecognitionException {
		Alter_serviceContext _localctx = new Alter_serviceContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_alter_service);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4954);
			match(ALTER);
			setState(4955);
			match(SERVICE);
			setState(4956);
			((Alter_serviceContext)_localctx).modified_service_name = id();
			setState(4964);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(4957);
				match(ON);
				setState(4958);
				match(QUEUE);
				{
				setState(4959);
				((Alter_serviceContext)_localctx).schema_name = id();
				setState(4960);
				match(DOT);
				}
				setState(4962);
				((Alter_serviceContext)_localctx).queue_name = id();
				}
			}

			setState(4973);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,576,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4967);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4966);
						match(COMMA);
						}
					}

					setState(4969);
					_la = _input.LA(1);
					if ( !(_la==ADD || _la==DROP) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4970);
					((Alter_serviceContext)_localctx).modified_contract_name = id();
					}
					} 
				}
				setState(4975);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,576,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_serviceContext extends ParserRuleContext {
		public IdContext create_service_name;
		public IdContext owner_name;
		public IdContext schema_name;
		public IdContext queue_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode SERVICE() { return getToken(TSqlParser.SERVICE, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode QUEUE() { return getToken(TSqlParser.QUEUE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> DEFAULT() { return getTokens(TSqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(TSqlParser.DEFAULT, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Create_serviceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_service; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_service(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_service(this);
		}
	}

	public final Create_serviceContext create_service() throws RecognitionException {
		Create_serviceContext _localctx = new Create_serviceContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_create_service);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4976);
			match(CREATE);
			setState(4977);
			match(SERVICE);
			setState(4978);
			((Create_serviceContext)_localctx).create_service_name = id();
			setState(4981);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(4979);
				match(AUTHORIZATION);
				setState(4980);
				((Create_serviceContext)_localctx).owner_name = id();
				}
			}

			setState(4983);
			match(ON);
			setState(4984);
			match(QUEUE);
			setState(4988);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,578,_ctx) ) {
			case 1:
				{
				setState(4985);
				((Create_serviceContext)_localctx).schema_name = id();
				setState(4986);
				match(DOT);
				}
				break;
			}
			setState(4990);
			((Create_serviceContext)_localctx).queue_name = id();
			setState(5004);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,582,_ctx) ) {
			case 1:
				{
				setState(4991);
				match(LR_BRACKET);
				setState(4999); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4993);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4992);
						match(COMMA);
						}
					}

					setState(4997);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CALLED:
					case DATA_COMPRESSION:
					case EVENTDATA:
					case FILENAME:
					case FILLFACTOR:
					case FORCESEEK:
					case INIT:
					case KEY:
					case MASTER:
					case MAX_MEMORY:
					case OFFSETS:
					case PAGE:
					case PUBLIC:
					case R:
					case RAW:
					case RETURN:
					case RETURNS:
					case ROWCOUNT:
					case SAFETY:
					case SERVER:
					case SID:
					case SOURCE:
					case STATE:
					case START:
					case TARGET:
					case ABSOLUTE:
					case ACCENT_SENSITIVITY:
					case ACTION:
					case ACTIVATION:
					case ACTIVE:
					case ADDRESS:
					case AES_128:
					case AES_192:
					case AES_256:
					case AFFINITY:
					case AFTER:
					case AGGREGATE:
					case ALGORITHM:
					case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
					case ALLOW_SNAPSHOT_ISOLATION:
					case ALLOWED:
					case ANSI_NULL_DEFAULT:
					case ANSI_NULLS:
					case ANSI_PADDING:
					case ANSI_WARNINGS:
					case APPLICATION_LOG:
					case APPLY:
					case ARITHABORT:
					case ASSEMBLY:
					case AUDIT:
					case AUDIT_GUID:
					case AUTO:
					case AUTO_CLEANUP:
					case AUTO_CLOSE:
					case AUTO_CREATE_STATISTICS:
					case AUTO_SHRINK:
					case AUTO_UPDATE_STATISTICS:
					case AUTO_UPDATE_STATISTICS_ASYNC:
					case AVAILABILITY:
					case AVG:
					case BACKUP_PRIORITY:
					case BEGIN_DIALOG:
					case BIGINT:
					case BINARY_BASE64:
					case BINARY_CHECKSUM:
					case BINDING:
					case BLOB_STORAGE:
					case BROKER:
					case BROKER_INSTANCE:
					case BULK_LOGGED:
					case CALLER:
					case CAP_CPU_PERCENT:
					case CAST:
					case CATALOG:
					case CATCH:
					case CHANGE_RETENTION:
					case CHANGE_TRACKING:
					case CHECKSUM:
					case CHECKSUM_AGG:
					case CLEANUP:
					case COLLECTION:
					case COLUMN_MASTER_KEY:
					case COMMITTED:
					case COMPATIBILITY_LEVEL:
					case CONCAT:
					case CONCAT_NULL_YIELDS_NULL:
					case CONTENT:
					case CONTROL:
					case COOKIE:
					case COUNT:
					case COUNT_BIG:
					case COUNTER:
					case CPU:
					case CREATE_NEW:
					case CREATION_DISPOSITION:
					case CREDENTIAL:
					case CRYPTOGRAPHIC:
					case CURSOR_CLOSE_ON_COMMIT:
					case CURSOR_DEFAULT:
					case DATE_CORRELATION_OPTIMIZATION:
					case DATEADD:
					case DATEDIFF:
					case DATENAME:
					case DATEPART:
					case DAYS:
					case DB_CHAINING:
					case DB_FAILOVER:
					case DECRYPTION:
					case DEFAULT_DOUBLE_QUOTE:
					case DEFAULT_FULLTEXT_LANGUAGE:
					case DEFAULT_LANGUAGE:
					case DELAY:
					case DELAYED_DURABILITY:
					case DELETED:
					case DENSE_RANK:
					case DEPENDENTS:
					case DES:
					case DESCRIPTION:
					case DESX:
					case DHCP:
					case DIALOG:
					case DIRECTORY_NAME:
					case DISABLE:
					case DISABLE_BROKER:
					case DISABLED:
					case DISK_DRIVE:
					case DOCUMENT:
					case DYNAMIC:
					case EMERGENCY:
					case EMPTY:
					case ENABLE:
					case ENABLE_BROKER:
					case ENCRYPTED_VALUE:
					case ENCRYPTION:
					case ENDPOINT_URL:
					case ERROR_BROKER_CONVERSATIONS:
					case EXCLUSIVE:
					case EXECUTABLE:
					case EXIST:
					case EXPAND:
					case EXPIRY_DATE:
					case EXPLICIT:
					case FAIL_OPERATION:
					case FAILOVER_MODE:
					case FAILURE:
					case FAILURE_CONDITION_LEVEL:
					case FAST:
					case FAST_FORWARD:
					case FILEGROUP:
					case FILEGROWTH:
					case FILEPATH:
					case FILESTREAM:
					case FILTER:
					case FIRST:
					case FIRST_VALUE:
					case FOLLOWING:
					case FORCE:
					case FORCE_FAILOVER_ALLOW_DATA_LOSS:
					case FORCED:
					case FORMAT:
					case FORWARD_ONLY:
					case FULLSCAN:
					case FULLTEXT:
					case GB:
					case GETDATE:
					case GETUTCDATE:
					case GLOBAL:
					case GO:
					case GROUP_MAX_REQUESTS:
					case GROUPING:
					case GROUPING_ID:
					case HADR:
					case HASH:
					case HEALTH_CHECK_TIMEOUT:
					case HIGH:
					case HONOR_BROKER_PRIORITY:
					case HOURS:
					case IDENTITY_VALUE:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMMEDIATE:
					case IMPERSONATE:
					case IMPORTANCE:
					case INCREMENTAL:
					case INITIATOR:
					case INPUT:
					case INSENSITIVE:
					case INSERTED:
					case INT:
					case IP:
					case ISOLATION:
					case KB:
					case KEEP:
					case KEEPFIXED:
					case KEY_SOURCE:
					case KEYS:
					case KEYSET:
					case LAG:
					case LAST:
					case LAST_VALUE:
					case LEAD:
					case LEVEL:
					case LIST:
					case LISTENER:
					case LISTENER_URL:
					case LOB_COMPACTION:
					case LOCAL:
					case LOCATION:
					case LOCK:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case LOW:
					case MANUAL:
					case MARK:
					case MATERIALIZED:
					case MAX:
					case MAX_CPU_PERCENT:
					case MAX_DOP:
					case MAX_FILES:
					case MAX_IOPS_PER_VOLUME:
					case MAX_MEMORY_PERCENT:
					case MAX_PROCESSES:
					case MAX_QUEUE_READERS:
					case MAX_ROLLOVER_FILES:
					case MAXDOP:
					case MAXRECURSION:
					case MAXSIZE:
					case MB:
					case MEDIUM:
					case MEMORY_OPTIMIZED_DATA:
					case MESSAGE:
					case MIN:
					case MIN_ACTIVE_ROWVERSION:
					case MIN_CPU_PERCENT:
					case MIN_IOPS_PER_VOLUME:
					case MIN_MEMORY_PERCENT:
					case MINUTES:
					case MIRROR_ADDRESS:
					case MIXED_PAGE_ALLOCATION:
					case MODE:
					case MODIFY:
					case MOVE:
					case MULTI_USER:
					case NAME:
					case NESTED_TRIGGERS:
					case NEW_ACCOUNT:
					case NEW_BROKER:
					case NEW_PASSWORD:
					case NEXT:
					case NO:
					case NO_TRUNCATE:
					case NO_WAIT:
					case NOCOUNT:
					case NODES:
					case NOEXPAND:
					case NON_TRANSACTED_ACCESS:
					case NORECOMPUTE:
					case NORECOVERY:
					case NOWAIT:
					case NTILE:
					case NUMANODE:
					case NUMBER:
					case NUMERIC_ROUNDABORT:
					case OBJECT:
					case OFFLINE:
					case OFFSET:
					case OLD_ACCOUNT:
					case ONLINE:
					case ONLY:
					case OPEN_EXISTING:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OWNER:
					case PAGE_VERIFY:
					case PARAMETERIZATION:
					case PARTITION:
					case PARTITIONS:
					case PARTNER:
					case PATH:
					case POISON_MESSAGE_HANDLING:
					case POOL:
					case PORT:
					case PRECEDING:
					case PRIMARY_ROLE:
					case PRIOR:
					case PRIORITY:
					case PRIORITY_LEVEL:
					case PRIVATE:
					case PRIVATE_KEY:
					case PRIVILEGES:
					case PROCEDURE_NAME:
					case PROPERTY:
					case PROVIDER:
					case PROVIDER_KEY_NAME:
					case QUERY:
					case QUEUE:
					case QUEUE_DELAY:
					case QUOTED_IDENTIFIER:
					case RANGE:
					case RANK:
					case RC2:
					case RC4:
					case RC4_128:
					case READ_COMMITTED_SNAPSHOT:
					case READ_ONLY:
					case READ_ONLY_ROUTING_LIST:
					case READ_WRITE:
					case READONLY:
					case REBUILD:
					case RECEIVE:
					case RECOMPILE:
					case RECOVERY:
					case RECURSIVE_TRIGGERS:
					case RELATIVE:
					case REMOTE:
					case REMOTE_SERVICE_NAME:
					case REMOVE:
					case REORGANIZE:
					case REPEATABLE:
					case REPLICA:
					case REQUEST_MAX_CPU_TIME_SEC:
					case REQUEST_MAX_MEMORY_GRANT_PERCENT:
					case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
					case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					case RESERVE_DISK_SPACE:
					case RESOURCE:
					case RESOURCE_MANAGER_LOCATION:
					case RESTRICTED_USER:
					case RETENTION:
					case ROBUST:
					case ROOT:
					case ROUTE:
					case ROW:
					case ROW_NUMBER:
					case ROWGUID:
					case ROWS:
					case SAMPLE:
					case SCHEMABINDING:
					case SCOPED:
					case SCROLL:
					case SCROLL_LOCKS:
					case SEARCH:
					case SECONDARY:
					case SECONDARY_ONLY:
					case SECONDARY_ROLE:
					case SECONDS:
					case SECRET:
					case SECURITY_LOG:
					case SEEDING_MODE:
					case SELF:
					case SEMI_SENSITIVE:
					case SEND:
					case SENT:
					case SERIALIZABLE:
					case SESSION_TIMEOUT:
					case SETERROR:
					case SHARE:
					case SHOWPLAN:
					case SIGNATURE:
					case SIMPLE:
					case SINGLE_USER:
					case SIZE:
					case SMALLINT:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STANDBY:
					case START_DATE:
					case STATIC:
					case STATS_STREAM:
					case STATUS:
					case STDEV:
					case STDEVP:
					case STOPLIST:
					case STUFF:
					case SUBJECT:
					case SUM:
					case SUSPEND:
					case SYMMETRIC:
					case SYNCHRONOUS_COMMIT:
					case SYNONYM:
					case TAKE:
					case TARGET_RECOVERY_TIME:
					case TB:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TIMEOUT:
					case TIMER:
					case TINYINT:
					case TORN_PAGE_DETECTION:
					case TRANSFORM_NOISE_WORDS:
					case TRIPLE_DES:
					case TRIPLE_DES_3KEY:
					case TRUSTWORTHY:
					case TRY:
					case TSQL:
					case TWO_DIGIT_YEAR_CUTOFF:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case UNLIMITED:
					case USING:
					case VALID_XML:
					case VALIDATION:
					case VALUE:
					case VAR:
					case VARP:
					case VIEW_METADATA:
					case VIEWS:
					case WAIT:
					case WELL_FORMED_XML:
					case WORK:
					case WORKLOAD:
					case XML:
					case XMLNAMESPACES:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case ID:
						{
						setState(4995);
						id();
						}
						break;
					case DEFAULT:
						{
						setState(4996);
						match(DEFAULT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					setState(5001); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (DEFAULT - 81)) | (1L << (EVENTDATA - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & ((1L << (INIT - 158)) | (1L << (KEY - 158)) | (1L << (MASTER - 158)) | (1L << (MAX_MEMORY - 158)))) != 0) || ((((_la - 225)) & ~0x3f) == 0 && ((1L << (_la - 225)) & ((1L << (OFFSETS - 225)) | (1L << (PAGE - 225)) | (1L << (PUBLIC - 225)) | (1L << (R - 225)) | (1L << (RAW - 225)) | (1L << (RETURN - 225)) | (1L << (RETURNS - 225)) | (1L << (ROWCOUNT - 225)))) != 0) || ((((_la - 295)) & ~0x3f) == 0 && ((1L << (_la - 295)) & ((1L << (SAFETY - 295)) | (1L << (SERVER - 295)) | (1L << (SID - 295)) | (1L << (SOURCE - 295)) | (1L << (STATE - 295)) | (1L << (START - 295)) | (1L << (TARGET - 295)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (ABSOLUTE - 383)) | (1L << (ACCENT_SENSITIVITY - 383)) | (1L << (ACTION - 383)) | (1L << (ACTIVATION - 383)) | (1L << (ACTIVE - 383)) | (1L << (ADDRESS - 383)) | (1L << (AES_128 - 383)) | (1L << (AES_192 - 383)) | (1L << (AES_256 - 383)) | (1L << (AFFINITY - 383)) | (1L << (AFTER - 383)) | (1L << (AGGREGATE - 383)) | (1L << (ALGORITHM - 383)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 383)) | (1L << (ALLOWED - 383)) | (1L << (ANSI_NULL_DEFAULT - 383)) | (1L << (ANSI_NULLS - 383)) | (1L << (ANSI_PADDING - 383)) | (1L << (ANSI_WARNINGS - 383)) | (1L << (APPLICATION_LOG - 383)) | (1L << (APPLY - 383)) | (1L << (ARITHABORT - 383)) | (1L << (ASSEMBLY - 383)) | (1L << (AUDIT - 383)) | (1L << (AUDIT_GUID - 383)) | (1L << (AUTO - 383)) | (1L << (AUTO_CLEANUP - 383)) | (1L << (AUTO_CLOSE - 383)) | (1L << (AUTO_CREATE_STATISTICS - 383)) | (1L << (AUTO_SHRINK - 383)) | (1L << (AUTO_UPDATE_STATISTICS - 383)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 383)) | (1L << (AVAILABILITY - 383)) | (1L << (AVG - 383)) | (1L << (BACKUP_PRIORITY - 383)) | (1L << (BEGIN_DIALOG - 383)) | (1L << (BIGINT - 383)) | (1L << (BINARY_BASE64 - 383)) | (1L << (BINARY_CHECKSUM - 383)) | (1L << (BINDING - 383)) | (1L << (BLOB_STORAGE - 383)) | (1L << (BROKER - 383)) | (1L << (BROKER_INSTANCE - 383)) | (1L << (BULK_LOGGED - 383)) | (1L << (CALLER - 383)) | (1L << (CAP_CPU_PERCENT - 383)) | (1L << (CAST - 383)) | (1L << (CATALOG - 383)) | (1L << (CATCH - 383)) | (1L << (CHANGE_RETENTION - 383)) | (1L << (CHANGE_TRACKING - 383)) | (1L << (CHECKSUM - 383)) | (1L << (CHECKSUM_AGG - 383)) | (1L << (CLEANUP - 383)) | (1L << (COLLECTION - 383)) | (1L << (COLUMN_MASTER_KEY - 383)) | (1L << (COMMITTED - 383)) | (1L << (COMPATIBILITY_LEVEL - 383)) | (1L << (CONCAT - 383)) | (1L << (CONCAT_NULL_YIELDS_NULL - 383)) | (1L << (CONTENT - 383)) | (1L << (CONTROL - 383)) | (1L << (COOKIE - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (COUNT - 447)) | (1L << (COUNT_BIG - 447)) | (1L << (COUNTER - 447)) | (1L << (CPU - 447)) | (1L << (CREATE_NEW - 447)) | (1L << (CREATION_DISPOSITION - 447)) | (1L << (CREDENTIAL - 447)) | (1L << (CRYPTOGRAPHIC - 447)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 447)) | (1L << (CURSOR_DEFAULT - 447)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 447)) | (1L << (DATEADD - 447)) | (1L << (DATEDIFF - 447)) | (1L << (DATENAME - 447)) | (1L << (DATEPART - 447)) | (1L << (DAYS - 447)) | (1L << (DB_CHAINING - 447)) | (1L << (DB_FAILOVER - 447)) | (1L << (DECRYPTION - 447)) | (1L << (DEFAULT_DOUBLE_QUOTE - 447)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1L << (DEFAULT_LANGUAGE - 447)) | (1L << (DELAY - 447)) | (1L << (DELAYED_DURABILITY - 447)) | (1L << (DELETED - 447)) | (1L << (DENSE_RANK - 447)) | (1L << (DEPENDENTS - 447)) | (1L << (DES - 447)) | (1L << (DESCRIPTION - 447)) | (1L << (DESX - 447)) | (1L << (DHCP - 447)) | (1L << (DIALOG - 447)) | (1L << (DIRECTORY_NAME - 447)) | (1L << (DISABLE - 447)) | (1L << (DISABLE_BROKER - 447)) | (1L << (DISABLED - 447)) | (1L << (DISK_DRIVE - 447)) | (1L << (DOCUMENT - 447)) | (1L << (DYNAMIC - 447)) | (1L << (EMERGENCY - 447)) | (1L << (EMPTY - 447)) | (1L << (ENABLE - 447)) | (1L << (ENABLE_BROKER - 447)) | (1L << (ENCRYPTED_VALUE - 447)) | (1L << (ENCRYPTION - 447)) | (1L << (ENDPOINT_URL - 447)) | (1L << (ERROR_BROKER_CONVERSATIONS - 447)) | (1L << (EXCLUSIVE - 447)) | (1L << (EXECUTABLE - 447)) | (1L << (EXIST - 447)) | (1L << (EXPAND - 447)) | (1L << (EXPIRY_DATE - 447)) | (1L << (EXPLICIT - 447)) | (1L << (FAIL_OPERATION - 447)) | (1L << (FAILOVER_MODE - 447)) | (1L << (FAILURE - 447)) | (1L << (FAILURE_CONDITION_LEVEL - 447)) | (1L << (FAST - 447)) | (1L << (FAST_FORWARD - 447)) | (1L << (FILEGROUP - 447)) | (1L << (FILEGROWTH - 447)) | (1L << (FILEPATH - 447)) | (1L << (FILESTREAM - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (FILTER - 511)) | (1L << (FIRST - 511)) | (1L << (FIRST_VALUE - 511)) | (1L << (FOLLOWING - 511)) | (1L << (FORCE - 511)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1L << (FORCED - 511)) | (1L << (FORMAT - 511)) | (1L << (FORWARD_ONLY - 511)) | (1L << (FULLSCAN - 511)) | (1L << (FULLTEXT - 511)) | (1L << (GB - 511)) | (1L << (GETDATE - 511)) | (1L << (GETUTCDATE - 511)) | (1L << (GLOBAL - 511)) | (1L << (GO - 511)) | (1L << (GROUP_MAX_REQUESTS - 511)) | (1L << (GROUPING - 511)) | (1L << (GROUPING_ID - 511)) | (1L << (HADR - 511)) | (1L << (HASH - 511)) | (1L << (HEALTH_CHECK_TIMEOUT - 511)) | (1L << (HIGH - 511)) | (1L << (HONOR_BROKER_PRIORITY - 511)) | (1L << (HOURS - 511)) | (1L << (IDENTITY_VALUE - 511)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1L << (IMMEDIATE - 511)) | (1L << (IMPERSONATE - 511)) | (1L << (IMPORTANCE - 511)) | (1L << (INCREMENTAL - 511)) | (1L << (INITIATOR - 511)) | (1L << (INPUT - 511)) | (1L << (INSENSITIVE - 511)) | (1L << (INSERTED - 511)) | (1L << (INT - 511)) | (1L << (IP - 511)) | (1L << (ISOLATION - 511)) | (1L << (KB - 511)) | (1L << (KEEP - 511)) | (1L << (KEEPFIXED - 511)) | (1L << (KEY_SOURCE - 511)) | (1L << (KEYS - 511)) | (1L << (KEYSET - 511)) | (1L << (LAG - 511)) | (1L << (LAST - 511)) | (1L << (LAST_VALUE - 511)) | (1L << (LEAD - 511)) | (1L << (LEVEL - 511)) | (1L << (LIST - 511)) | (1L << (LISTENER - 511)) | (1L << (LISTENER_URL - 511)) | (1L << (LOB_COMPACTION - 511)) | (1L << (LOCAL - 511)) | (1L << (LOCATION - 511)) | (1L << (LOCK - 511)) | (1L << (LOCK_ESCALATION - 511)) | (1L << (LOGIN - 511)) | (1L << (LOOP - 511)) | (1L << (LOW - 511)) | (1L << (MANUAL - 511)) | (1L << (MARK - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (MATERIALIZED - 575)) | (1L << (MAX - 575)) | (1L << (MAX_CPU_PERCENT - 575)) | (1L << (MAX_DOP - 575)) | (1L << (MAX_FILES - 575)) | (1L << (MAX_IOPS_PER_VOLUME - 575)) | (1L << (MAX_MEMORY_PERCENT - 575)) | (1L << (MAX_PROCESSES - 575)) | (1L << (MAX_QUEUE_READERS - 575)) | (1L << (MAX_ROLLOVER_FILES - 575)) | (1L << (MAXDOP - 575)) | (1L << (MAXRECURSION - 575)) | (1L << (MAXSIZE - 575)) | (1L << (MB - 575)) | (1L << (MEDIUM - 575)) | (1L << (MEMORY_OPTIMIZED_DATA - 575)) | (1L << (MESSAGE - 575)) | (1L << (MIN - 575)) | (1L << (MIN_ACTIVE_ROWVERSION - 575)) | (1L << (MIN_CPU_PERCENT - 575)) | (1L << (MIN_IOPS_PER_VOLUME - 575)) | (1L << (MIN_MEMORY_PERCENT - 575)) | (1L << (MINUTES - 575)) | (1L << (MIRROR_ADDRESS - 575)) | (1L << (MIXED_PAGE_ALLOCATION - 575)) | (1L << (MODE - 575)) | (1L << (MODIFY - 575)) | (1L << (MOVE - 575)) | (1L << (MULTI_USER - 575)) | (1L << (NAME - 575)) | (1L << (NESTED_TRIGGERS - 575)) | (1L << (NEW_ACCOUNT - 575)) | (1L << (NEW_BROKER - 575)) | (1L << (NEW_PASSWORD - 575)) | (1L << (NEXT - 575)) | (1L << (NO - 575)) | (1L << (NO_TRUNCATE - 575)) | (1L << (NO_WAIT - 575)) | (1L << (NOCOUNT - 575)) | (1L << (NODES - 575)) | (1L << (NOEXPAND - 575)) | (1L << (NON_TRANSACTED_ACCESS - 575)) | (1L << (NORECOMPUTE - 575)) | (1L << (NORECOVERY - 575)) | (1L << (NOWAIT - 575)) | (1L << (NTILE - 575)) | (1L << (NUMANODE - 575)) | (1L << (NUMBER - 575)) | (1L << (NUMERIC_ROUNDABORT - 575)) | (1L << (OBJECT - 575)) | (1L << (OFFLINE - 575)) | (1L << (OFFSET - 575)) | (1L << (OLD_ACCOUNT - 575)) | (1L << (ONLINE - 575)) | (1L << (ONLY - 575)) | (1L << (OPEN_EXISTING - 575)) | (1L << (OPTIMISTIC - 575)) | (1L << (OPTIMIZE - 575)) | (1L << (OUT - 575)) | (1L << (OUTPUT - 575)) | (1L << (OWNER - 575)) | (1L << (PAGE_VERIFY - 575)) | (1L << (PARAMETERIZATION - 575)) | (1L << (PARTITION - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (PARTITIONS - 639)) | (1L << (PARTNER - 639)) | (1L << (PATH - 639)) | (1L << (POISON_MESSAGE_HANDLING - 639)) | (1L << (POOL - 639)) | (1L << (PORT - 639)) | (1L << (PRECEDING - 639)) | (1L << (PRIMARY_ROLE - 639)) | (1L << (PRIOR - 639)) | (1L << (PRIORITY - 639)) | (1L << (PRIORITY_LEVEL - 639)) | (1L << (PRIVATE - 639)) | (1L << (PRIVATE_KEY - 639)) | (1L << (PRIVILEGES - 639)) | (1L << (PROCEDURE_NAME - 639)) | (1L << (PROPERTY - 639)) | (1L << (PROVIDER - 639)) | (1L << (PROVIDER_KEY_NAME - 639)) | (1L << (QUERY - 639)) | (1L << (QUEUE - 639)) | (1L << (QUEUE_DELAY - 639)) | (1L << (QUOTED_IDENTIFIER - 639)) | (1L << (RANGE - 639)) | (1L << (RANK - 639)) | (1L << (RC2 - 639)) | (1L << (RC4 - 639)) | (1L << (RC4_128 - 639)) | (1L << (READ_COMMITTED_SNAPSHOT - 639)) | (1L << (READ_ONLY - 639)) | (1L << (READ_ONLY_ROUTING_LIST - 639)) | (1L << (READ_WRITE - 639)) | (1L << (READONLY - 639)) | (1L << (REBUILD - 639)) | (1L << (RECEIVE - 639)) | (1L << (RECOMPILE - 639)) | (1L << (RECOVERY - 639)) | (1L << (RECURSIVE_TRIGGERS - 639)) | (1L << (RELATIVE - 639)) | (1L << (REMOTE - 639)) | (1L << (REMOTE_SERVICE_NAME - 639)) | (1L << (REMOVE - 639)) | (1L << (REORGANIZE - 639)) | (1L << (REPEATABLE - 639)) | (1L << (REPLICA - 639)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 639)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 639)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 639)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 639)) | (1L << (RESERVE_DISK_SPACE - 639)) | (1L << (RESOURCE - 639)) | (1L << (RESOURCE_MANAGER_LOCATION - 639)) | (1L << (RESTRICTED_USER - 639)) | (1L << (RETENTION - 639)) | (1L << (ROBUST - 639)) | (1L << (ROOT - 639)) | (1L << (ROUTE - 639)) | (1L << (ROW - 639)) | (1L << (ROW_NUMBER - 639)) | (1L << (ROWGUID - 639)) | (1L << (ROWS - 639)) | (1L << (SAMPLE - 639)) | (1L << (SCHEMABINDING - 639)) | (1L << (SCOPED - 639)) | (1L << (SCROLL - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (SCROLL_LOCKS - 703)) | (1L << (SEARCH - 703)) | (1L << (SECONDARY - 703)) | (1L << (SECONDARY_ONLY - 703)) | (1L << (SECONDARY_ROLE - 703)) | (1L << (SECONDS - 703)) | (1L << (SECRET - 703)) | (1L << (SECURITY_LOG - 703)) | (1L << (SEEDING_MODE - 703)) | (1L << (SELF - 703)) | (1L << (SEMI_SENSITIVE - 703)) | (1L << (SEND - 703)) | (1L << (SENT - 703)) | (1L << (SERIALIZABLE - 703)) | (1L << (SESSION_TIMEOUT - 703)) | (1L << (SETERROR - 703)) | (1L << (SHARE - 703)) | (1L << (SHOWPLAN - 703)) | (1L << (SIGNATURE - 703)) | (1L << (SIMPLE - 703)) | (1L << (SINGLE_USER - 703)) | (1L << (SIZE - 703)) | (1L << (SMALLINT - 703)) | (1L << (SNAPSHOT - 703)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 703)) | (1L << (STANDBY - 703)) | (1L << (START_DATE - 703)) | (1L << (STATIC - 703)) | (1L << (STATS_STREAM - 703)) | (1L << (STATUS - 703)) | (1L << (STDEV - 703)) | (1L << (STDEVP - 703)) | (1L << (STOPLIST - 703)) | (1L << (STUFF - 703)) | (1L << (SUBJECT - 703)) | (1L << (SUM - 703)) | (1L << (SUSPEND - 703)) | (1L << (SYMMETRIC - 703)) | (1L << (SYNCHRONOUS_COMMIT - 703)) | (1L << (SYNONYM - 703)) | (1L << (TAKE - 703)) | (1L << (TARGET_RECOVERY_TIME - 703)) | (1L << (TB - 703)) | (1L << (TEXTIMAGE_ON - 703)) | (1L << (THROW - 703)) | (1L << (TIES - 703)) | (1L << (TIME - 703)) | (1L << (TIMEOUT - 703)) | (1L << (TIMER - 703)) | (1L << (TINYINT - 703)) | (1L << (TORN_PAGE_DETECTION - 703)) | (1L << (TRANSFORM_NOISE_WORDS - 703)) | (1L << (TRIPLE_DES - 703)) | (1L << (TRIPLE_DES_3KEY - 703)) | (1L << (TRUSTWORTHY - 703)) | (1L << (TRY - 703)) | (1L << (TSQL - 703)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 703)) | (1L << (TYPE - 703)) | (1L << (TYPE_WARNING - 703)) | (1L << (UNBOUNDED - 703)) | (1L << (UNCOMMITTED - 703)) | (1L << (UNKNOWN - 703)) | (1L << (UNLIMITED - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (USING - 767)) | (1L << (VALID_XML - 767)) | (1L << (VALIDATION - 767)) | (1L << (VALUE - 767)) | (1L << (VAR - 767)) | (1L << (VARP - 767)) | (1L << (VIEW_METADATA - 767)) | (1L << (VIEWS - 767)) | (1L << (WAIT - 767)) | (1L << (WELL_FORMED_XML - 767)) | (1L << (WORK - 767)) | (1L << (WORKLOAD - 767)) | (1L << (XML - 767)) | (1L << (XMLNAMESPACES - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)) | (1L << (COMMA - 767)))) != 0) );
				setState(5003);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_service_master_keyContext extends ParserRuleContext {
		public Token acold_account_name;
		public Token old_password;
		public Token new_account_name;
		public Token new_password;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode SERVICE() { return getToken(TSqlParser.SERVICE, 0); }
		public TerminalNode MASTER() { return getToken(TSqlParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode REGENERATE() { return getToken(TSqlParser.REGENERATE, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode FORCE() { return getToken(TSqlParser.FORCE, 0); }
		public TerminalNode OLD_ACCOUNT() { return getToken(TSqlParser.OLD_ACCOUNT, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(TSqlParser.OLD_PASSWORD, 0); }
		public TerminalNode NEW_ACCOUNT() { return getToken(TSqlParser.NEW_ACCOUNT, 0); }
		public TerminalNode NEW_PASSWORD() { return getToken(TSqlParser.NEW_PASSWORD, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public Alter_service_master_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_service_master_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_service_master_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_service_master_key(this);
		}
	}

	public final Alter_service_master_keyContext alter_service_master_key() throws RecognitionException {
		Alter_service_master_keyContext _localctx = new Alter_service_master_keyContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_alter_service_master_key);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5006);
			match(ALTER);
			setState(5007);
			match(SERVICE);
			setState(5008);
			match(MASTER);
			setState(5009);
			match(KEY);
			setState(5031);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REGENERATE:
			case FORCE:
				{
				setState(5011);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FORCE) {
					{
					setState(5010);
					match(FORCE);
					}
				}

				setState(5013);
				match(REGENERATE);
				}
				break;
			case WITH:
				{
				{
				setState(5014);
				match(WITH);
				setState(5029);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,584,_ctx) ) {
				case 1:
					{
					setState(5015);
					match(OLD_ACCOUNT);
					setState(5016);
					match(EQUAL);
					setState(5017);
					((Alter_service_master_keyContext)_localctx).acold_account_name = match(STRING);
					setState(5018);
					match(COMMA);
					setState(5019);
					match(OLD_PASSWORD);
					setState(5020);
					match(EQUAL);
					setState(5021);
					((Alter_service_master_keyContext)_localctx).old_password = match(STRING);
					}
					break;
				case 2:
					{
					setState(5022);
					match(NEW_ACCOUNT);
					setState(5023);
					match(EQUAL);
					setState(5024);
					((Alter_service_master_keyContext)_localctx).new_account_name = match(STRING);
					setState(5025);
					match(COMMA);
					setState(5026);
					match(NEW_PASSWORD);
					setState(5027);
					match(EQUAL);
					setState(5028);
					((Alter_service_master_keyContext)_localctx).new_password = match(STRING);
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_symmetric_keyContext extends ParserRuleContext {
		public IdContext key_name;
		public IdContext certificate_name;
		public Token password;
		public IdContext symmetric_key_name;
		public IdContext Asym_key_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public List<TerminalNode> SYMMETRIC() { return getTokens(TSqlParser.SYMMETRIC); }
		public TerminalNode SYMMETRIC(int i) {
			return getToken(TSqlParser.SYMMETRIC, i);
		}
		public List<TerminalNode> KEY() { return getTokens(TSqlParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(TSqlParser.KEY, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode CERTIFICATE() { return getToken(TSqlParser.CERTIFICATE, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(TSqlParser.ASYMMETRIC, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Alter_symmetric_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_symmetric_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_symmetric_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_symmetric_key(this);
		}
	}

	public final Alter_symmetric_keyContext alter_symmetric_key() throws RecognitionException {
		Alter_symmetric_keyContext _localctx = new Alter_symmetric_keyContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_alter_symmetric_key);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5033);
			match(ALTER);
			setState(5034);
			match(SYMMETRIC);
			setState(5035);
			match(KEY);
			setState(5036);
			((Alter_symmetric_keyContext)_localctx).key_name = id();
			{
			setState(5037);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5038);
			match(ENCRYPTION);
			setState(5039);
			match(BY);
			setState(5051);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CERTIFICATE:
				{
				setState(5040);
				match(CERTIFICATE);
				setState(5041);
				((Alter_symmetric_keyContext)_localctx).certificate_name = id();
				}
				break;
			case PASSWORD:
				{
				setState(5042);
				match(PASSWORD);
				setState(5043);
				match(EQUAL);
				setState(5044);
				((Alter_symmetric_keyContext)_localctx).password = match(STRING);
				}
				break;
			case SYMMETRIC:
				{
				setState(5045);
				match(SYMMETRIC);
				setState(5046);
				match(KEY);
				setState(5047);
				((Alter_symmetric_keyContext)_localctx).symmetric_key_name = id();
				}
				break;
			case ASYMMETRIC:
				{
				setState(5048);
				match(ASYMMETRIC);
				setState(5049);
				match(KEY);
				setState(5050);
				((Alter_symmetric_keyContext)_localctx).Asym_key_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_symmetric_keyContext extends ParserRuleContext {
		public IdContext key_name;
		public IdContext owner_name;
		public IdContext provider_name;
		public Token key_pass_phrase;
		public Token identity_phrase;
		public Token provider_key_name;
		public IdContext certificate_name;
		public Token password;
		public IdContext symmetric_key_name;
		public IdContext asym_key_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public List<TerminalNode> SYMMETRIC() { return getTokens(TSqlParser.SYMMETRIC); }
		public TerminalNode SYMMETRIC(int i) {
			return getToken(TSqlParser.SYMMETRIC, i);
		}
		public List<TerminalNode> KEY() { return getTokens(TSqlParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(TSqlParser.KEY, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public TerminalNode PROVIDER() { return getToken(TSqlParser.PROVIDER, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode KEY_SOURCE() { return getToken(TSqlParser.KEY_SOURCE, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode ALGORITHM() { return getToken(TSqlParser.ALGORITHM, 0); }
		public TerminalNode IDENTITY_VALUE() { return getToken(TSqlParser.IDENTITY_VALUE, 0); }
		public TerminalNode PROVIDER_KEY_NAME() { return getToken(TSqlParser.PROVIDER_KEY_NAME, 0); }
		public TerminalNode CREATION_DISPOSITION() { return getToken(TSqlParser.CREATION_DISPOSITION, 0); }
		public TerminalNode CERTIFICATE() { return getToken(TSqlParser.CERTIFICATE, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(TSqlParser.ASYMMETRIC, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode DES() { return getToken(TSqlParser.DES, 0); }
		public TerminalNode TRIPLE_DES() { return getToken(TSqlParser.TRIPLE_DES, 0); }
		public TerminalNode TRIPLE_DES_3KEY() { return getToken(TSqlParser.TRIPLE_DES_3KEY, 0); }
		public TerminalNode RC2() { return getToken(TSqlParser.RC2, 0); }
		public TerminalNode RC4() { return getToken(TSqlParser.RC4, 0); }
		public TerminalNode RC4_128() { return getToken(TSqlParser.RC4_128, 0); }
		public TerminalNode DESX() { return getToken(TSqlParser.DESX, 0); }
		public TerminalNode AES_128() { return getToken(TSqlParser.AES_128, 0); }
		public TerminalNode AES_192() { return getToken(TSqlParser.AES_192, 0); }
		public TerminalNode AES_256() { return getToken(TSqlParser.AES_256, 0); }
		public TerminalNode CREATE_NEW() { return getToken(TSqlParser.CREATE_NEW, 0); }
		public TerminalNode OPEN_EXISTING() { return getToken(TSqlParser.OPEN_EXISTING, 0); }
		public Create_symmetric_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_symmetric_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_symmetric_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_symmetric_key(this);
		}
	}

	public final Create_symmetric_keyContext create_symmetric_key() throws RecognitionException {
		Create_symmetric_keyContext _localctx = new Create_symmetric_keyContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_create_symmetric_key);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5053);
			match(ALTER);
			setState(5054);
			match(SYMMETRIC);
			setState(5055);
			match(KEY);
			setState(5056);
			((Create_symmetric_keyContext)_localctx).key_name = id();
			setState(5059);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(5057);
				match(AUTHORIZATION);
				setState(5058);
				((Create_symmetric_keyContext)_localctx).owner_name = id();
				}
			}

			setState(5064);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(5061);
				match(FROM);
				setState(5062);
				match(PROVIDER);
				setState(5063);
				((Create_symmetric_keyContext)_localctx).provider_name = id();
				}
			}

			{
			setState(5066);
			match(WITH);
			setState(5099);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALGORITHM:
			case CREATION_DISPOSITION:
			case IDENTITY_VALUE:
			case KEY_SOURCE:
			case PROVIDER_KEY_NAME:
				{
				setState(5082);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case KEY_SOURCE:
					{
					setState(5067);
					match(KEY_SOURCE);
					setState(5068);
					match(EQUAL);
					setState(5069);
					((Create_symmetric_keyContext)_localctx).key_pass_phrase = match(STRING);
					}
					break;
				case ALGORITHM:
					{
					setState(5070);
					match(ALGORITHM);
					setState(5071);
					match(EQUAL);
					setState(5072);
					_la = _input.LA(1);
					if ( !(((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (AES_128 - 389)) | (1L << (AES_192 - 389)) | (1L << (AES_256 - 389)))) != 0) || _la==DES || _la==DESX || ((((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & ((1L << (RC2 - 663)) | (1L << (RC4 - 663)) | (1L << (RC4_128 - 663)))) != 0) || _la==TRIPLE_DES || _la==TRIPLE_DES_3KEY) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case IDENTITY_VALUE:
					{
					setState(5073);
					match(IDENTITY_VALUE);
					setState(5074);
					match(EQUAL);
					setState(5075);
					((Create_symmetric_keyContext)_localctx).identity_phrase = match(STRING);
					}
					break;
				case PROVIDER_KEY_NAME:
					{
					setState(5076);
					match(PROVIDER_KEY_NAME);
					setState(5077);
					match(EQUAL);
					setState(5078);
					((Create_symmetric_keyContext)_localctx).provider_key_name = match(STRING);
					}
					break;
				case CREATION_DISPOSITION:
					{
					setState(5079);
					match(CREATION_DISPOSITION);
					setState(5080);
					match(EQUAL);
					setState(5081);
					_la = _input.LA(1);
					if ( !(_la==CREATE_NEW || _la==OPEN_EXISTING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case ENCRYPTION:
				{
				setState(5084);
				match(ENCRYPTION);
				setState(5085);
				match(BY);
				setState(5097);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CERTIFICATE:
					{
					setState(5086);
					match(CERTIFICATE);
					setState(5087);
					((Create_symmetric_keyContext)_localctx).certificate_name = id();
					}
					break;
				case PASSWORD:
					{
					setState(5088);
					match(PASSWORD);
					setState(5089);
					match(EQUAL);
					setState(5090);
					((Create_symmetric_keyContext)_localctx).password = match(STRING);
					}
					break;
				case SYMMETRIC:
					{
					setState(5091);
					match(SYMMETRIC);
					setState(5092);
					match(KEY);
					setState(5093);
					((Create_symmetric_keyContext)_localctx).symmetric_key_name = id();
					}
					break;
				case ASYMMETRIC:
					{
					setState(5094);
					match(ASYMMETRIC);
					setState(5095);
					match(KEY);
					setState(5096);
					((Create_symmetric_keyContext)_localctx).asym_key_name = id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_synonymContext extends ParserRuleContext {
		public IdContext schema_name_1;
		public IdContext synonym_name;
		public IdContext server_name;
		public IdContext database_name;
		public IdContext schema_name_2;
		public IdContext object_name;
		public IdContext database_or_schema2;
		public IdContext schema_id_2_or_object_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode SYNONYM() { return getToken(TSqlParser.SYNONYM, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(TSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSqlParser.DOT, i);
		}
		public Create_synonymContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_synonym; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_synonym(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_synonym(this);
		}
	}

	public final Create_synonymContext create_synonym() throws RecognitionException {
		Create_synonymContext _localctx = new Create_synonymContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_create_synonym);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5101);
			match(CREATE);
			setState(5102);
			match(SYNONYM);
			setState(5106);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,592,_ctx) ) {
			case 1:
				{
				setState(5103);
				((Create_synonymContext)_localctx).schema_name_1 = id();
				setState(5104);
				match(DOT);
				}
				break;
			}
			setState(5108);
			((Create_synonymContext)_localctx).synonym_name = id();
			setState(5109);
			match(FOR);
			setState(5136);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,598,_ctx) ) {
			case 1:
				{
				setState(5113);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,593,_ctx) ) {
				case 1:
					{
					setState(5110);
					((Create_synonymContext)_localctx).server_name = id();
					setState(5111);
					match(DOT);
					}
					break;
				}
				setState(5118);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,594,_ctx) ) {
				case 1:
					{
					setState(5115);
					((Create_synonymContext)_localctx).database_name = id();
					setState(5116);
					match(DOT);
					}
					break;
				}
				setState(5123);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,595,_ctx) ) {
				case 1:
					{
					setState(5120);
					((Create_synonymContext)_localctx).schema_name_2 = id();
					setState(5121);
					match(DOT);
					}
					break;
				}
				setState(5125);
				((Create_synonymContext)_localctx).object_name = id();
				}
				break;
			case 2:
				{
				setState(5129);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,596,_ctx) ) {
				case 1:
					{
					setState(5126);
					((Create_synonymContext)_localctx).database_or_schema2 = id();
					setState(5127);
					match(DOT);
					}
					break;
				}
				setState(5134);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,597,_ctx) ) {
				case 1:
					{
					setState(5131);
					((Create_synonymContext)_localctx).schema_id_2_or_object_name = id();
					setState(5132);
					match(DOT);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_userContext extends ParserRuleContext {
		public IdContext username;
		public IdContext newusername;
		public IdContext schema_name;
		public IdContext loginame;
		public Token lcid;
		public IdContext language_name_or_alias;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(TSqlParser.USER, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> NAME() { return getTokens(TSqlParser.NAME); }
		public TerminalNode NAME(int i) {
			return getToken(TSqlParser.NAME, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public List<TerminalNode> DEFAULT_SCHEMA() { return getTokens(TSqlParser.DEFAULT_SCHEMA); }
		public TerminalNode DEFAULT_SCHEMA(int i) {
			return getToken(TSqlParser.DEFAULT_SCHEMA, i);
		}
		public List<TerminalNode> LOGIN() { return getTokens(TSqlParser.LOGIN); }
		public TerminalNode LOGIN(int i) {
			return getToken(TSqlParser.LOGIN, i);
		}
		public List<TerminalNode> PASSWORD() { return getTokens(TSqlParser.PASSWORD); }
		public TerminalNode PASSWORD(int i) {
			return getToken(TSqlParser.PASSWORD, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public List<TerminalNode> DEFAULT_LANGUAGE() { return getTokens(TSqlParser.DEFAULT_LANGUAGE); }
		public TerminalNode DEFAULT_LANGUAGE(int i) {
			return getToken(TSqlParser.DEFAULT_LANGUAGE, i);
		}
		public List<TerminalNode> ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return getTokens(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS); }
		public TerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(int i) {
			return getToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, i);
		}
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public List<TerminalNode> OFF() { return getTokens(TSqlParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(TSqlParser.OFF, i);
		}
		public List<TerminalNode> NULL() { return getTokens(TSqlParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(TSqlParser.NULL, i);
		}
		public List<TerminalNode> NONE() { return getTokens(TSqlParser.NONE); }
		public TerminalNode NONE(int i) {
			return getToken(TSqlParser.NONE, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<TerminalNode> OLD_PASSWORD() { return getTokens(TSqlParser.OLD_PASSWORD); }
		public TerminalNode OLD_PASSWORD(int i) {
			return getToken(TSqlParser.OLD_PASSWORD, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public Alter_userContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_user; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_user(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_user(this);
		}
	}

	public final Alter_userContext alter_user() throws RecognitionException {
		Alter_userContext _localctx = new Alter_userContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_alter_user);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5138);
			match(ALTER);
			setState(5139);
			match(USER);
			setState(5140);
			((Alter_userContext)_localctx).username = id();
			setState(5141);
			match(WITH);
			setState(5192); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(5192);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,608,_ctx) ) {
					case 1:
						{
						setState(5143);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5142);
							match(COMMA);
							}
						}

						setState(5145);
						match(NAME);
						setState(5146);
						match(EQUAL);
						setState(5147);
						((Alter_userContext)_localctx).newusername = id();
						}
						break;
					case 2:
						{
						setState(5149);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5148);
							match(COMMA);
							}
						}

						setState(5151);
						match(DEFAULT_SCHEMA);
						setState(5152);
						match(EQUAL);
						setState(5155);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case CALLED:
						case DATA_COMPRESSION:
						case EVENTDATA:
						case FILENAME:
						case FILLFACTOR:
						case FORCESEEK:
						case INIT:
						case KEY:
						case MASTER:
						case MAX_MEMORY:
						case OFFSETS:
						case PAGE:
						case PUBLIC:
						case R:
						case RAW:
						case RETURN:
						case RETURNS:
						case ROWCOUNT:
						case SAFETY:
						case SERVER:
						case SID:
						case SOURCE:
						case STATE:
						case START:
						case TARGET:
						case ABSOLUTE:
						case ACCENT_SENSITIVITY:
						case ACTION:
						case ACTIVATION:
						case ACTIVE:
						case ADDRESS:
						case AES_128:
						case AES_192:
						case AES_256:
						case AFFINITY:
						case AFTER:
						case AGGREGATE:
						case ALGORITHM:
						case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
						case ALLOW_SNAPSHOT_ISOLATION:
						case ALLOWED:
						case ANSI_NULL_DEFAULT:
						case ANSI_NULLS:
						case ANSI_PADDING:
						case ANSI_WARNINGS:
						case APPLICATION_LOG:
						case APPLY:
						case ARITHABORT:
						case ASSEMBLY:
						case AUDIT:
						case AUDIT_GUID:
						case AUTO:
						case AUTO_CLEANUP:
						case AUTO_CLOSE:
						case AUTO_CREATE_STATISTICS:
						case AUTO_SHRINK:
						case AUTO_UPDATE_STATISTICS:
						case AUTO_UPDATE_STATISTICS_ASYNC:
						case AVAILABILITY:
						case AVG:
						case BACKUP_PRIORITY:
						case BEGIN_DIALOG:
						case BIGINT:
						case BINARY_BASE64:
						case BINARY_CHECKSUM:
						case BINDING:
						case BLOB_STORAGE:
						case BROKER:
						case BROKER_INSTANCE:
						case BULK_LOGGED:
						case CALLER:
						case CAP_CPU_PERCENT:
						case CAST:
						case CATALOG:
						case CATCH:
						case CHANGE_RETENTION:
						case CHANGE_TRACKING:
						case CHECKSUM:
						case CHECKSUM_AGG:
						case CLEANUP:
						case COLLECTION:
						case COLUMN_MASTER_KEY:
						case COMMITTED:
						case COMPATIBILITY_LEVEL:
						case CONCAT:
						case CONCAT_NULL_YIELDS_NULL:
						case CONTENT:
						case CONTROL:
						case COOKIE:
						case COUNT:
						case COUNT_BIG:
						case COUNTER:
						case CPU:
						case CREATE_NEW:
						case CREATION_DISPOSITION:
						case CREDENTIAL:
						case CRYPTOGRAPHIC:
						case CURSOR_CLOSE_ON_COMMIT:
						case CURSOR_DEFAULT:
						case DATE_CORRELATION_OPTIMIZATION:
						case DATEADD:
						case DATEDIFF:
						case DATENAME:
						case DATEPART:
						case DAYS:
						case DB_CHAINING:
						case DB_FAILOVER:
						case DECRYPTION:
						case DEFAULT_DOUBLE_QUOTE:
						case DEFAULT_FULLTEXT_LANGUAGE:
						case DEFAULT_LANGUAGE:
						case DELAY:
						case DELAYED_DURABILITY:
						case DELETED:
						case DENSE_RANK:
						case DEPENDENTS:
						case DES:
						case DESCRIPTION:
						case DESX:
						case DHCP:
						case DIALOG:
						case DIRECTORY_NAME:
						case DISABLE:
						case DISABLE_BROKER:
						case DISABLED:
						case DISK_DRIVE:
						case DOCUMENT:
						case DYNAMIC:
						case EMERGENCY:
						case EMPTY:
						case ENABLE:
						case ENABLE_BROKER:
						case ENCRYPTED_VALUE:
						case ENCRYPTION:
						case ENDPOINT_URL:
						case ERROR_BROKER_CONVERSATIONS:
						case EXCLUSIVE:
						case EXECUTABLE:
						case EXIST:
						case EXPAND:
						case EXPIRY_DATE:
						case EXPLICIT:
						case FAIL_OPERATION:
						case FAILOVER_MODE:
						case FAILURE:
						case FAILURE_CONDITION_LEVEL:
						case FAST:
						case FAST_FORWARD:
						case FILEGROUP:
						case FILEGROWTH:
						case FILEPATH:
						case FILESTREAM:
						case FILTER:
						case FIRST:
						case FIRST_VALUE:
						case FOLLOWING:
						case FORCE:
						case FORCE_FAILOVER_ALLOW_DATA_LOSS:
						case FORCED:
						case FORMAT:
						case FORWARD_ONLY:
						case FULLSCAN:
						case FULLTEXT:
						case GB:
						case GETDATE:
						case GETUTCDATE:
						case GLOBAL:
						case GO:
						case GROUP_MAX_REQUESTS:
						case GROUPING:
						case GROUPING_ID:
						case HADR:
						case HASH:
						case HEALTH_CHECK_TIMEOUT:
						case HIGH:
						case HONOR_BROKER_PRIORITY:
						case HOURS:
						case IDENTITY_VALUE:
						case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
						case IMMEDIATE:
						case IMPERSONATE:
						case IMPORTANCE:
						case INCREMENTAL:
						case INITIATOR:
						case INPUT:
						case INSENSITIVE:
						case INSERTED:
						case INT:
						case IP:
						case ISOLATION:
						case KB:
						case KEEP:
						case KEEPFIXED:
						case KEY_SOURCE:
						case KEYS:
						case KEYSET:
						case LAG:
						case LAST:
						case LAST_VALUE:
						case LEAD:
						case LEVEL:
						case LIST:
						case LISTENER:
						case LISTENER_URL:
						case LOB_COMPACTION:
						case LOCAL:
						case LOCATION:
						case LOCK:
						case LOCK_ESCALATION:
						case LOGIN:
						case LOOP:
						case LOW:
						case MANUAL:
						case MARK:
						case MATERIALIZED:
						case MAX:
						case MAX_CPU_PERCENT:
						case MAX_DOP:
						case MAX_FILES:
						case MAX_IOPS_PER_VOLUME:
						case MAX_MEMORY_PERCENT:
						case MAX_PROCESSES:
						case MAX_QUEUE_READERS:
						case MAX_ROLLOVER_FILES:
						case MAXDOP:
						case MAXRECURSION:
						case MAXSIZE:
						case MB:
						case MEDIUM:
						case MEMORY_OPTIMIZED_DATA:
						case MESSAGE:
						case MIN:
						case MIN_ACTIVE_ROWVERSION:
						case MIN_CPU_PERCENT:
						case MIN_IOPS_PER_VOLUME:
						case MIN_MEMORY_PERCENT:
						case MINUTES:
						case MIRROR_ADDRESS:
						case MIXED_PAGE_ALLOCATION:
						case MODE:
						case MODIFY:
						case MOVE:
						case MULTI_USER:
						case NAME:
						case NESTED_TRIGGERS:
						case NEW_ACCOUNT:
						case NEW_BROKER:
						case NEW_PASSWORD:
						case NEXT:
						case NO:
						case NO_TRUNCATE:
						case NO_WAIT:
						case NOCOUNT:
						case NODES:
						case NOEXPAND:
						case NON_TRANSACTED_ACCESS:
						case NORECOMPUTE:
						case NORECOVERY:
						case NOWAIT:
						case NTILE:
						case NUMANODE:
						case NUMBER:
						case NUMERIC_ROUNDABORT:
						case OBJECT:
						case OFFLINE:
						case OFFSET:
						case OLD_ACCOUNT:
						case ONLINE:
						case ONLY:
						case OPEN_EXISTING:
						case OPTIMISTIC:
						case OPTIMIZE:
						case OUT:
						case OUTPUT:
						case OWNER:
						case PAGE_VERIFY:
						case PARAMETERIZATION:
						case PARTITION:
						case PARTITIONS:
						case PARTNER:
						case PATH:
						case POISON_MESSAGE_HANDLING:
						case POOL:
						case PORT:
						case PRECEDING:
						case PRIMARY_ROLE:
						case PRIOR:
						case PRIORITY:
						case PRIORITY_LEVEL:
						case PRIVATE:
						case PRIVATE_KEY:
						case PRIVILEGES:
						case PROCEDURE_NAME:
						case PROPERTY:
						case PROVIDER:
						case PROVIDER_KEY_NAME:
						case QUERY:
						case QUEUE:
						case QUEUE_DELAY:
						case QUOTED_IDENTIFIER:
						case RANGE:
						case RANK:
						case RC2:
						case RC4:
						case RC4_128:
						case READ_COMMITTED_SNAPSHOT:
						case READ_ONLY:
						case READ_ONLY_ROUTING_LIST:
						case READ_WRITE:
						case READONLY:
						case REBUILD:
						case RECEIVE:
						case RECOMPILE:
						case RECOVERY:
						case RECURSIVE_TRIGGERS:
						case RELATIVE:
						case REMOTE:
						case REMOTE_SERVICE_NAME:
						case REMOVE:
						case REORGANIZE:
						case REPEATABLE:
						case REPLICA:
						case REQUEST_MAX_CPU_TIME_SEC:
						case REQUEST_MAX_MEMORY_GRANT_PERCENT:
						case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
						case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
						case RESERVE_DISK_SPACE:
						case RESOURCE:
						case RESOURCE_MANAGER_LOCATION:
						case RESTRICTED_USER:
						case RETENTION:
						case ROBUST:
						case ROOT:
						case ROUTE:
						case ROW:
						case ROW_NUMBER:
						case ROWGUID:
						case ROWS:
						case SAMPLE:
						case SCHEMABINDING:
						case SCOPED:
						case SCROLL:
						case SCROLL_LOCKS:
						case SEARCH:
						case SECONDARY:
						case SECONDARY_ONLY:
						case SECONDARY_ROLE:
						case SECONDS:
						case SECRET:
						case SECURITY_LOG:
						case SEEDING_MODE:
						case SELF:
						case SEMI_SENSITIVE:
						case SEND:
						case SENT:
						case SERIALIZABLE:
						case SESSION_TIMEOUT:
						case SETERROR:
						case SHARE:
						case SHOWPLAN:
						case SIGNATURE:
						case SIMPLE:
						case SINGLE_USER:
						case SIZE:
						case SMALLINT:
						case SNAPSHOT:
						case SPATIAL_WINDOW_MAX_CELLS:
						case STANDBY:
						case START_DATE:
						case STATIC:
						case STATS_STREAM:
						case STATUS:
						case STDEV:
						case STDEVP:
						case STOPLIST:
						case STUFF:
						case SUBJECT:
						case SUM:
						case SUSPEND:
						case SYMMETRIC:
						case SYNCHRONOUS_COMMIT:
						case SYNONYM:
						case TAKE:
						case TARGET_RECOVERY_TIME:
						case TB:
						case TEXTIMAGE_ON:
						case THROW:
						case TIES:
						case TIME:
						case TIMEOUT:
						case TIMER:
						case TINYINT:
						case TORN_PAGE_DETECTION:
						case TRANSFORM_NOISE_WORDS:
						case TRIPLE_DES:
						case TRIPLE_DES_3KEY:
						case TRUSTWORTHY:
						case TRY:
						case TSQL:
						case TWO_DIGIT_YEAR_CUTOFF:
						case TYPE:
						case TYPE_WARNING:
						case UNBOUNDED:
						case UNCOMMITTED:
						case UNKNOWN:
						case UNLIMITED:
						case USING:
						case VALID_XML:
						case VALIDATION:
						case VALUE:
						case VAR:
						case VARP:
						case VIEW_METADATA:
						case VIEWS:
						case WAIT:
						case WELL_FORMED_XML:
						case WORK:
						case WORKLOAD:
						case XML:
						case XMLNAMESPACES:
						case DOUBLE_QUOTE_ID:
						case SQUARE_BRACKET_ID:
						case ID:
							{
							setState(5153);
							((Alter_userContext)_localctx).schema_name = id();
							}
							break;
						case NULL:
							{
							setState(5154);
							match(NULL);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 3:
						{
						setState(5158);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5157);
							match(COMMA);
							}
						}

						setState(5160);
						match(LOGIN);
						setState(5161);
						match(EQUAL);
						setState(5162);
						((Alter_userContext)_localctx).loginame = id();
						}
						break;
					case 4:
						{
						setState(5164);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5163);
							match(COMMA);
							}
						}

						setState(5166);
						match(PASSWORD);
						setState(5167);
						match(EQUAL);
						setState(5168);
						match(STRING);
						setState(5172); 
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
							{
							setState(5169);
							match(OLD_PASSWORD);
							setState(5170);
							match(EQUAL);
							setState(5171);
							match(STRING);
							}
							}
							setState(5174); 
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while ( _la==OLD_PASSWORD );
						}
						break;
					case 5:
						{
						setState(5177);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5176);
							match(COMMA);
							}
						}

						setState(5179);
						match(DEFAULT_LANGUAGE);
						setState(5180);
						match(EQUAL);
						setState(5184);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case NONE:
							{
							setState(5181);
							match(NONE);
							}
							break;
						case DECIMAL:
							{
							setState(5182);
							((Alter_userContext)_localctx).lcid = match(DECIMAL);
							}
							break;
						case CALLED:
						case DATA_COMPRESSION:
						case EVENTDATA:
						case FILENAME:
						case FILLFACTOR:
						case FORCESEEK:
						case INIT:
						case KEY:
						case MASTER:
						case MAX_MEMORY:
						case OFFSETS:
						case PAGE:
						case PUBLIC:
						case R:
						case RAW:
						case RETURN:
						case RETURNS:
						case ROWCOUNT:
						case SAFETY:
						case SERVER:
						case SID:
						case SOURCE:
						case STATE:
						case START:
						case TARGET:
						case ABSOLUTE:
						case ACCENT_SENSITIVITY:
						case ACTION:
						case ACTIVATION:
						case ACTIVE:
						case ADDRESS:
						case AES_128:
						case AES_192:
						case AES_256:
						case AFFINITY:
						case AFTER:
						case AGGREGATE:
						case ALGORITHM:
						case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
						case ALLOW_SNAPSHOT_ISOLATION:
						case ALLOWED:
						case ANSI_NULL_DEFAULT:
						case ANSI_NULLS:
						case ANSI_PADDING:
						case ANSI_WARNINGS:
						case APPLICATION_LOG:
						case APPLY:
						case ARITHABORT:
						case ASSEMBLY:
						case AUDIT:
						case AUDIT_GUID:
						case AUTO:
						case AUTO_CLEANUP:
						case AUTO_CLOSE:
						case AUTO_CREATE_STATISTICS:
						case AUTO_SHRINK:
						case AUTO_UPDATE_STATISTICS:
						case AUTO_UPDATE_STATISTICS_ASYNC:
						case AVAILABILITY:
						case AVG:
						case BACKUP_PRIORITY:
						case BEGIN_DIALOG:
						case BIGINT:
						case BINARY_BASE64:
						case BINARY_CHECKSUM:
						case BINDING:
						case BLOB_STORAGE:
						case BROKER:
						case BROKER_INSTANCE:
						case BULK_LOGGED:
						case CALLER:
						case CAP_CPU_PERCENT:
						case CAST:
						case CATALOG:
						case CATCH:
						case CHANGE_RETENTION:
						case CHANGE_TRACKING:
						case CHECKSUM:
						case CHECKSUM_AGG:
						case CLEANUP:
						case COLLECTION:
						case COLUMN_MASTER_KEY:
						case COMMITTED:
						case COMPATIBILITY_LEVEL:
						case CONCAT:
						case CONCAT_NULL_YIELDS_NULL:
						case CONTENT:
						case CONTROL:
						case COOKIE:
						case COUNT:
						case COUNT_BIG:
						case COUNTER:
						case CPU:
						case CREATE_NEW:
						case CREATION_DISPOSITION:
						case CREDENTIAL:
						case CRYPTOGRAPHIC:
						case CURSOR_CLOSE_ON_COMMIT:
						case CURSOR_DEFAULT:
						case DATE_CORRELATION_OPTIMIZATION:
						case DATEADD:
						case DATEDIFF:
						case DATENAME:
						case DATEPART:
						case DAYS:
						case DB_CHAINING:
						case DB_FAILOVER:
						case DECRYPTION:
						case DEFAULT_DOUBLE_QUOTE:
						case DEFAULT_FULLTEXT_LANGUAGE:
						case DEFAULT_LANGUAGE:
						case DELAY:
						case DELAYED_DURABILITY:
						case DELETED:
						case DENSE_RANK:
						case DEPENDENTS:
						case DES:
						case DESCRIPTION:
						case DESX:
						case DHCP:
						case DIALOG:
						case DIRECTORY_NAME:
						case DISABLE:
						case DISABLE_BROKER:
						case DISABLED:
						case DISK_DRIVE:
						case DOCUMENT:
						case DYNAMIC:
						case EMERGENCY:
						case EMPTY:
						case ENABLE:
						case ENABLE_BROKER:
						case ENCRYPTED_VALUE:
						case ENCRYPTION:
						case ENDPOINT_URL:
						case ERROR_BROKER_CONVERSATIONS:
						case EXCLUSIVE:
						case EXECUTABLE:
						case EXIST:
						case EXPAND:
						case EXPIRY_DATE:
						case EXPLICIT:
						case FAIL_OPERATION:
						case FAILOVER_MODE:
						case FAILURE:
						case FAILURE_CONDITION_LEVEL:
						case FAST:
						case FAST_FORWARD:
						case FILEGROUP:
						case FILEGROWTH:
						case FILEPATH:
						case FILESTREAM:
						case FILTER:
						case FIRST:
						case FIRST_VALUE:
						case FOLLOWING:
						case FORCE:
						case FORCE_FAILOVER_ALLOW_DATA_LOSS:
						case FORCED:
						case FORMAT:
						case FORWARD_ONLY:
						case FULLSCAN:
						case FULLTEXT:
						case GB:
						case GETDATE:
						case GETUTCDATE:
						case GLOBAL:
						case GO:
						case GROUP_MAX_REQUESTS:
						case GROUPING:
						case GROUPING_ID:
						case HADR:
						case HASH:
						case HEALTH_CHECK_TIMEOUT:
						case HIGH:
						case HONOR_BROKER_PRIORITY:
						case HOURS:
						case IDENTITY_VALUE:
						case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
						case IMMEDIATE:
						case IMPERSONATE:
						case IMPORTANCE:
						case INCREMENTAL:
						case INITIATOR:
						case INPUT:
						case INSENSITIVE:
						case INSERTED:
						case INT:
						case IP:
						case ISOLATION:
						case KB:
						case KEEP:
						case KEEPFIXED:
						case KEY_SOURCE:
						case KEYS:
						case KEYSET:
						case LAG:
						case LAST:
						case LAST_VALUE:
						case LEAD:
						case LEVEL:
						case LIST:
						case LISTENER:
						case LISTENER_URL:
						case LOB_COMPACTION:
						case LOCAL:
						case LOCATION:
						case LOCK:
						case LOCK_ESCALATION:
						case LOGIN:
						case LOOP:
						case LOW:
						case MANUAL:
						case MARK:
						case MATERIALIZED:
						case MAX:
						case MAX_CPU_PERCENT:
						case MAX_DOP:
						case MAX_FILES:
						case MAX_IOPS_PER_VOLUME:
						case MAX_MEMORY_PERCENT:
						case MAX_PROCESSES:
						case MAX_QUEUE_READERS:
						case MAX_ROLLOVER_FILES:
						case MAXDOP:
						case MAXRECURSION:
						case MAXSIZE:
						case MB:
						case MEDIUM:
						case MEMORY_OPTIMIZED_DATA:
						case MESSAGE:
						case MIN:
						case MIN_ACTIVE_ROWVERSION:
						case MIN_CPU_PERCENT:
						case MIN_IOPS_PER_VOLUME:
						case MIN_MEMORY_PERCENT:
						case MINUTES:
						case MIRROR_ADDRESS:
						case MIXED_PAGE_ALLOCATION:
						case MODE:
						case MODIFY:
						case MOVE:
						case MULTI_USER:
						case NAME:
						case NESTED_TRIGGERS:
						case NEW_ACCOUNT:
						case NEW_BROKER:
						case NEW_PASSWORD:
						case NEXT:
						case NO:
						case NO_TRUNCATE:
						case NO_WAIT:
						case NOCOUNT:
						case NODES:
						case NOEXPAND:
						case NON_TRANSACTED_ACCESS:
						case NORECOMPUTE:
						case NORECOVERY:
						case NOWAIT:
						case NTILE:
						case NUMANODE:
						case NUMBER:
						case NUMERIC_ROUNDABORT:
						case OBJECT:
						case OFFLINE:
						case OFFSET:
						case OLD_ACCOUNT:
						case ONLINE:
						case ONLY:
						case OPEN_EXISTING:
						case OPTIMISTIC:
						case OPTIMIZE:
						case OUT:
						case OUTPUT:
						case OWNER:
						case PAGE_VERIFY:
						case PARAMETERIZATION:
						case PARTITION:
						case PARTITIONS:
						case PARTNER:
						case PATH:
						case POISON_MESSAGE_HANDLING:
						case POOL:
						case PORT:
						case PRECEDING:
						case PRIMARY_ROLE:
						case PRIOR:
						case PRIORITY:
						case PRIORITY_LEVEL:
						case PRIVATE:
						case PRIVATE_KEY:
						case PRIVILEGES:
						case PROCEDURE_NAME:
						case PROPERTY:
						case PROVIDER:
						case PROVIDER_KEY_NAME:
						case QUERY:
						case QUEUE:
						case QUEUE_DELAY:
						case QUOTED_IDENTIFIER:
						case RANGE:
						case RANK:
						case RC2:
						case RC4:
						case RC4_128:
						case READ_COMMITTED_SNAPSHOT:
						case READ_ONLY:
						case READ_ONLY_ROUTING_LIST:
						case READ_WRITE:
						case READONLY:
						case REBUILD:
						case RECEIVE:
						case RECOMPILE:
						case RECOVERY:
						case RECURSIVE_TRIGGERS:
						case RELATIVE:
						case REMOTE:
						case REMOTE_SERVICE_NAME:
						case REMOVE:
						case REORGANIZE:
						case REPEATABLE:
						case REPLICA:
						case REQUEST_MAX_CPU_TIME_SEC:
						case REQUEST_MAX_MEMORY_GRANT_PERCENT:
						case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
						case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
						case RESERVE_DISK_SPACE:
						case RESOURCE:
						case RESOURCE_MANAGER_LOCATION:
						case RESTRICTED_USER:
						case RETENTION:
						case ROBUST:
						case ROOT:
						case ROUTE:
						case ROW:
						case ROW_NUMBER:
						case ROWGUID:
						case ROWS:
						case SAMPLE:
						case SCHEMABINDING:
						case SCOPED:
						case SCROLL:
						case SCROLL_LOCKS:
						case SEARCH:
						case SECONDARY:
						case SECONDARY_ONLY:
						case SECONDARY_ROLE:
						case SECONDS:
						case SECRET:
						case SECURITY_LOG:
						case SEEDING_MODE:
						case SELF:
						case SEMI_SENSITIVE:
						case SEND:
						case SENT:
						case SERIALIZABLE:
						case SESSION_TIMEOUT:
						case SETERROR:
						case SHARE:
						case SHOWPLAN:
						case SIGNATURE:
						case SIMPLE:
						case SINGLE_USER:
						case SIZE:
						case SMALLINT:
						case SNAPSHOT:
						case SPATIAL_WINDOW_MAX_CELLS:
						case STANDBY:
						case START_DATE:
						case STATIC:
						case STATS_STREAM:
						case STATUS:
						case STDEV:
						case STDEVP:
						case STOPLIST:
						case STUFF:
						case SUBJECT:
						case SUM:
						case SUSPEND:
						case SYMMETRIC:
						case SYNCHRONOUS_COMMIT:
						case SYNONYM:
						case TAKE:
						case TARGET_RECOVERY_TIME:
						case TB:
						case TEXTIMAGE_ON:
						case THROW:
						case TIES:
						case TIME:
						case TIMEOUT:
						case TIMER:
						case TINYINT:
						case TORN_PAGE_DETECTION:
						case TRANSFORM_NOISE_WORDS:
						case TRIPLE_DES:
						case TRIPLE_DES_3KEY:
						case TRUSTWORTHY:
						case TRY:
						case TSQL:
						case TWO_DIGIT_YEAR_CUTOFF:
						case TYPE:
						case TYPE_WARNING:
						case UNBOUNDED:
						case UNCOMMITTED:
						case UNKNOWN:
						case UNLIMITED:
						case USING:
						case VALID_XML:
						case VALIDATION:
						case VALUE:
						case VAR:
						case VARP:
						case VIEW_METADATA:
						case VIEWS:
						case WAIT:
						case WELL_FORMED_XML:
						case WORK:
						case WORKLOAD:
						case XML:
						case XMLNAMESPACES:
						case DOUBLE_QUOTE_ID:
						case SQUARE_BRACKET_ID:
						case ID:
							{
							setState(5183);
							((Alter_userContext)_localctx).language_name_or_alias = id();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 6:
						{
						setState(5187);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5186);
							match(COMMA);
							}
						}

						setState(5189);
						match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
						setState(5190);
						match(EQUAL);
						setState(5191);
						_la = _input.LA(1);
						if ( !(_la==OFF || _la==ON) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5194); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,609,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_userContext extends ParserRuleContext {
		public IdContext user_name;
		public IdContext login_name;
		public IdContext schema_name;
		public IdContext windows_principal;
		public IdContext language_name_or_alias;
		public Token password;
		public IdContext Azure_Active_Directory_principal;
		public IdContext cert_name;
		public IdContext asym_key_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(TSqlParser.USER, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode LOGIN() { return getToken(TSqlParser.LOGIN, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public List<TerminalNode> DEFAULT_SCHEMA() { return getTokens(TSqlParser.DEFAULT_SCHEMA); }
		public TerminalNode DEFAULT_SCHEMA(int i) {
			return getToken(TSqlParser.DEFAULT_SCHEMA, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public List<TerminalNode> ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return getTokens(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS); }
		public TerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(int i) {
			return getToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, i);
		}
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public List<TerminalNode> OFF() { return getTokens(TSqlParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(TSqlParser.OFF, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode EXTERNAL() { return getToken(TSqlParser.EXTERNAL, 0); }
		public TerminalNode PROVIDER() { return getToken(TSqlParser.PROVIDER, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public List<TerminalNode> DEFAULT_LANGUAGE() { return getTokens(TSqlParser.DEFAULT_LANGUAGE); }
		public TerminalNode DEFAULT_LANGUAGE(int i) {
			return getToken(TSqlParser.DEFAULT_LANGUAGE, i);
		}
		public List<TerminalNode> SID() { return getTokens(TSqlParser.SID); }
		public TerminalNode SID(int i) {
			return getToken(TSqlParser.SID, i);
		}
		public List<TerminalNode> BINARY() { return getTokens(TSqlParser.BINARY); }
		public TerminalNode BINARY(int i) {
			return getToken(TSqlParser.BINARY, i);
		}
		public List<TerminalNode> NONE() { return getTokens(TSqlParser.NONE); }
		public TerminalNode NONE(int i) {
			return getToken(TSqlParser.NONE, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public TerminalNode WITHOUT() { return getToken(TSqlParser.WITHOUT, 0); }
		public TerminalNode CERTIFICATE() { return getToken(TSqlParser.CERTIFICATE, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(TSqlParser.ASYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public Create_userContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_user; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_user(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_user(this);
		}
	}

	public final Create_userContext create_user() throws RecognitionException {
		Create_userContext _localctx = new Create_userContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_create_user);
		int _la;
		try {
			int _alt;
			setState(5342);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,637,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5196);
				match(CREATE);
				setState(5197);
				match(USER);
				setState(5198);
				((Create_userContext)_localctx).user_name = id();
				setState(5202);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR || _la==FROM) {
					{
					setState(5199);
					_la = _input.LA(1);
					if ( !(_la==FOR || _la==FROM) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5200);
					match(LOGIN);
					setState(5201);
					((Create_userContext)_localctx).login_name = id();
					}
				}

				setState(5222);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,615,_ctx) ) {
				case 1:
					{
					setState(5204);
					match(WITH);
					setState(5219);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,614,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							setState(5217);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,613,_ctx) ) {
							case 1:
								{
								setState(5206);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(5205);
									match(COMMA);
									}
								}

								setState(5208);
								match(DEFAULT_SCHEMA);
								setState(5209);
								match(EQUAL);
								setState(5210);
								((Create_userContext)_localctx).schema_name = id();
								}
								break;
							case 2:
								{
								setState(5212);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(5211);
									match(COMMA);
									}
								}

								setState(5214);
								match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
								setState(5215);
								match(EQUAL);
								setState(5216);
								_la = _input.LA(1);
								if ( !(_la==OFF || _la==ON) ) {
								_errHandler.recoverInline(this);
								}
								else {
									if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
									_errHandler.reportMatch(this);
									consume();
								}
								}
								break;
							}
							} 
						}
						setState(5221);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,614,_ctx);
					}
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5224);
				match(CREATE);
				setState(5225);
				match(USER);
				setState(5306);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,631,_ctx) ) {
				case 1:
					{
					setState(5226);
					((Create_userContext)_localctx).windows_principal = id();
					setState(5261);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,623,_ctx) ) {
					case 1:
						{
						setState(5227);
						match(WITH);
						setState(5258);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,622,_ctx);
						while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								setState(5256);
								_errHandler.sync(this);
								switch ( getInterpreter().adaptivePredict(_input,621,_ctx) ) {
								case 1:
									{
									setState(5229);
									_errHandler.sync(this);
									_la = _input.LA(1);
									if (_la==COMMA) {
										{
										setState(5228);
										match(COMMA);
										}
									}

									setState(5231);
									match(DEFAULT_SCHEMA);
									setState(5232);
									match(EQUAL);
									setState(5233);
									((Create_userContext)_localctx).schema_name = id();
									}
									break;
								case 2:
									{
									setState(5235);
									_errHandler.sync(this);
									_la = _input.LA(1);
									if (_la==COMMA) {
										{
										setState(5234);
										match(COMMA);
										}
									}

									setState(5237);
									match(DEFAULT_LANGUAGE);
									setState(5238);
									match(EQUAL);
									setState(5242);
									_errHandler.sync(this);
									switch (_input.LA(1)) {
									case NONE:
										{
										setState(5239);
										match(NONE);
										}
										break;
									case DECIMAL:
										{
										setState(5240);
										match(DECIMAL);
										}
										break;
									case CALLED:
									case DATA_COMPRESSION:
									case EVENTDATA:
									case FILENAME:
									case FILLFACTOR:
									case FORCESEEK:
									case INIT:
									case KEY:
									case MASTER:
									case MAX_MEMORY:
									case OFFSETS:
									case PAGE:
									case PUBLIC:
									case R:
									case RAW:
									case RETURN:
									case RETURNS:
									case ROWCOUNT:
									case SAFETY:
									case SERVER:
									case SID:
									case SOURCE:
									case STATE:
									case START:
									case TARGET:
									case ABSOLUTE:
									case ACCENT_SENSITIVITY:
									case ACTION:
									case ACTIVATION:
									case ACTIVE:
									case ADDRESS:
									case AES_128:
									case AES_192:
									case AES_256:
									case AFFINITY:
									case AFTER:
									case AGGREGATE:
									case ALGORITHM:
									case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
									case ALLOW_SNAPSHOT_ISOLATION:
									case ALLOWED:
									case ANSI_NULL_DEFAULT:
									case ANSI_NULLS:
									case ANSI_PADDING:
									case ANSI_WARNINGS:
									case APPLICATION_LOG:
									case APPLY:
									case ARITHABORT:
									case ASSEMBLY:
									case AUDIT:
									case AUDIT_GUID:
									case AUTO:
									case AUTO_CLEANUP:
									case AUTO_CLOSE:
									case AUTO_CREATE_STATISTICS:
									case AUTO_SHRINK:
									case AUTO_UPDATE_STATISTICS:
									case AUTO_UPDATE_STATISTICS_ASYNC:
									case AVAILABILITY:
									case AVG:
									case BACKUP_PRIORITY:
									case BEGIN_DIALOG:
									case BIGINT:
									case BINARY_BASE64:
									case BINARY_CHECKSUM:
									case BINDING:
									case BLOB_STORAGE:
									case BROKER:
									case BROKER_INSTANCE:
									case BULK_LOGGED:
									case CALLER:
									case CAP_CPU_PERCENT:
									case CAST:
									case CATALOG:
									case CATCH:
									case CHANGE_RETENTION:
									case CHANGE_TRACKING:
									case CHECKSUM:
									case CHECKSUM_AGG:
									case CLEANUP:
									case COLLECTION:
									case COLUMN_MASTER_KEY:
									case COMMITTED:
									case COMPATIBILITY_LEVEL:
									case CONCAT:
									case CONCAT_NULL_YIELDS_NULL:
									case CONTENT:
									case CONTROL:
									case COOKIE:
									case COUNT:
									case COUNT_BIG:
									case COUNTER:
									case CPU:
									case CREATE_NEW:
									case CREATION_DISPOSITION:
									case CREDENTIAL:
									case CRYPTOGRAPHIC:
									case CURSOR_CLOSE_ON_COMMIT:
									case CURSOR_DEFAULT:
									case DATE_CORRELATION_OPTIMIZATION:
									case DATEADD:
									case DATEDIFF:
									case DATENAME:
									case DATEPART:
									case DAYS:
									case DB_CHAINING:
									case DB_FAILOVER:
									case DECRYPTION:
									case DEFAULT_DOUBLE_QUOTE:
									case DEFAULT_FULLTEXT_LANGUAGE:
									case DEFAULT_LANGUAGE:
									case DELAY:
									case DELAYED_DURABILITY:
									case DELETED:
									case DENSE_RANK:
									case DEPENDENTS:
									case DES:
									case DESCRIPTION:
									case DESX:
									case DHCP:
									case DIALOG:
									case DIRECTORY_NAME:
									case DISABLE:
									case DISABLE_BROKER:
									case DISABLED:
									case DISK_DRIVE:
									case DOCUMENT:
									case DYNAMIC:
									case EMERGENCY:
									case EMPTY:
									case ENABLE:
									case ENABLE_BROKER:
									case ENCRYPTED_VALUE:
									case ENCRYPTION:
									case ENDPOINT_URL:
									case ERROR_BROKER_CONVERSATIONS:
									case EXCLUSIVE:
									case EXECUTABLE:
									case EXIST:
									case EXPAND:
									case EXPIRY_DATE:
									case EXPLICIT:
									case FAIL_OPERATION:
									case FAILOVER_MODE:
									case FAILURE:
									case FAILURE_CONDITION_LEVEL:
									case FAST:
									case FAST_FORWARD:
									case FILEGROUP:
									case FILEGROWTH:
									case FILEPATH:
									case FILESTREAM:
									case FILTER:
									case FIRST:
									case FIRST_VALUE:
									case FOLLOWING:
									case FORCE:
									case FORCE_FAILOVER_ALLOW_DATA_LOSS:
									case FORCED:
									case FORMAT:
									case FORWARD_ONLY:
									case FULLSCAN:
									case FULLTEXT:
									case GB:
									case GETDATE:
									case GETUTCDATE:
									case GLOBAL:
									case GO:
									case GROUP_MAX_REQUESTS:
									case GROUPING:
									case GROUPING_ID:
									case HADR:
									case HASH:
									case HEALTH_CHECK_TIMEOUT:
									case HIGH:
									case HONOR_BROKER_PRIORITY:
									case HOURS:
									case IDENTITY_VALUE:
									case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
									case IMMEDIATE:
									case IMPERSONATE:
									case IMPORTANCE:
									case INCREMENTAL:
									case INITIATOR:
									case INPUT:
									case INSENSITIVE:
									case INSERTED:
									case INT:
									case IP:
									case ISOLATION:
									case KB:
									case KEEP:
									case KEEPFIXED:
									case KEY_SOURCE:
									case KEYS:
									case KEYSET:
									case LAG:
									case LAST:
									case LAST_VALUE:
									case LEAD:
									case LEVEL:
									case LIST:
									case LISTENER:
									case LISTENER_URL:
									case LOB_COMPACTION:
									case LOCAL:
									case LOCATION:
									case LOCK:
									case LOCK_ESCALATION:
									case LOGIN:
									case LOOP:
									case LOW:
									case MANUAL:
									case MARK:
									case MATERIALIZED:
									case MAX:
									case MAX_CPU_PERCENT:
									case MAX_DOP:
									case MAX_FILES:
									case MAX_IOPS_PER_VOLUME:
									case MAX_MEMORY_PERCENT:
									case MAX_PROCESSES:
									case MAX_QUEUE_READERS:
									case MAX_ROLLOVER_FILES:
									case MAXDOP:
									case MAXRECURSION:
									case MAXSIZE:
									case MB:
									case MEDIUM:
									case MEMORY_OPTIMIZED_DATA:
									case MESSAGE:
									case MIN:
									case MIN_ACTIVE_ROWVERSION:
									case MIN_CPU_PERCENT:
									case MIN_IOPS_PER_VOLUME:
									case MIN_MEMORY_PERCENT:
									case MINUTES:
									case MIRROR_ADDRESS:
									case MIXED_PAGE_ALLOCATION:
									case MODE:
									case MODIFY:
									case MOVE:
									case MULTI_USER:
									case NAME:
									case NESTED_TRIGGERS:
									case NEW_ACCOUNT:
									case NEW_BROKER:
									case NEW_PASSWORD:
									case NEXT:
									case NO:
									case NO_TRUNCATE:
									case NO_WAIT:
									case NOCOUNT:
									case NODES:
									case NOEXPAND:
									case NON_TRANSACTED_ACCESS:
									case NORECOMPUTE:
									case NORECOVERY:
									case NOWAIT:
									case NTILE:
									case NUMANODE:
									case NUMBER:
									case NUMERIC_ROUNDABORT:
									case OBJECT:
									case OFFLINE:
									case OFFSET:
									case OLD_ACCOUNT:
									case ONLINE:
									case ONLY:
									case OPEN_EXISTING:
									case OPTIMISTIC:
									case OPTIMIZE:
									case OUT:
									case OUTPUT:
									case OWNER:
									case PAGE_VERIFY:
									case PARAMETERIZATION:
									case PARTITION:
									case PARTITIONS:
									case PARTNER:
									case PATH:
									case POISON_MESSAGE_HANDLING:
									case POOL:
									case PORT:
									case PRECEDING:
									case PRIMARY_ROLE:
									case PRIOR:
									case PRIORITY:
									case PRIORITY_LEVEL:
									case PRIVATE:
									case PRIVATE_KEY:
									case PRIVILEGES:
									case PROCEDURE_NAME:
									case PROPERTY:
									case PROVIDER:
									case PROVIDER_KEY_NAME:
									case QUERY:
									case QUEUE:
									case QUEUE_DELAY:
									case QUOTED_IDENTIFIER:
									case RANGE:
									case RANK:
									case RC2:
									case RC4:
									case RC4_128:
									case READ_COMMITTED_SNAPSHOT:
									case READ_ONLY:
									case READ_ONLY_ROUTING_LIST:
									case READ_WRITE:
									case READONLY:
									case REBUILD:
									case RECEIVE:
									case RECOMPILE:
									case RECOVERY:
									case RECURSIVE_TRIGGERS:
									case RELATIVE:
									case REMOTE:
									case REMOTE_SERVICE_NAME:
									case REMOVE:
									case REORGANIZE:
									case REPEATABLE:
									case REPLICA:
									case REQUEST_MAX_CPU_TIME_SEC:
									case REQUEST_MAX_MEMORY_GRANT_PERCENT:
									case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
									case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
									case RESERVE_DISK_SPACE:
									case RESOURCE:
									case RESOURCE_MANAGER_LOCATION:
									case RESTRICTED_USER:
									case RETENTION:
									case ROBUST:
									case ROOT:
									case ROUTE:
									case ROW:
									case ROW_NUMBER:
									case ROWGUID:
									case ROWS:
									case SAMPLE:
									case SCHEMABINDING:
									case SCOPED:
									case SCROLL:
									case SCROLL_LOCKS:
									case SEARCH:
									case SECONDARY:
									case SECONDARY_ONLY:
									case SECONDARY_ROLE:
									case SECONDS:
									case SECRET:
									case SECURITY_LOG:
									case SEEDING_MODE:
									case SELF:
									case SEMI_SENSITIVE:
									case SEND:
									case SENT:
									case SERIALIZABLE:
									case SESSION_TIMEOUT:
									case SETERROR:
									case SHARE:
									case SHOWPLAN:
									case SIGNATURE:
									case SIMPLE:
									case SINGLE_USER:
									case SIZE:
									case SMALLINT:
									case SNAPSHOT:
									case SPATIAL_WINDOW_MAX_CELLS:
									case STANDBY:
									case START_DATE:
									case STATIC:
									case STATS_STREAM:
									case STATUS:
									case STDEV:
									case STDEVP:
									case STOPLIST:
									case STUFF:
									case SUBJECT:
									case SUM:
									case SUSPEND:
									case SYMMETRIC:
									case SYNCHRONOUS_COMMIT:
									case SYNONYM:
									case TAKE:
									case TARGET_RECOVERY_TIME:
									case TB:
									case TEXTIMAGE_ON:
									case THROW:
									case TIES:
									case TIME:
									case TIMEOUT:
									case TIMER:
									case TINYINT:
									case TORN_PAGE_DETECTION:
									case TRANSFORM_NOISE_WORDS:
									case TRIPLE_DES:
									case TRIPLE_DES_3KEY:
									case TRUSTWORTHY:
									case TRY:
									case TSQL:
									case TWO_DIGIT_YEAR_CUTOFF:
									case TYPE:
									case TYPE_WARNING:
									case UNBOUNDED:
									case UNCOMMITTED:
									case UNKNOWN:
									case UNLIMITED:
									case USING:
									case VALID_XML:
									case VALIDATION:
									case VALUE:
									case VAR:
									case VARP:
									case VIEW_METADATA:
									case VIEWS:
									case WAIT:
									case WELL_FORMED_XML:
									case WORK:
									case WORKLOAD:
									case XML:
									case XMLNAMESPACES:
									case DOUBLE_QUOTE_ID:
									case SQUARE_BRACKET_ID:
									case ID:
										{
										setState(5241);
										((Create_userContext)_localctx).language_name_or_alias = id();
										}
										break;
									default:
										throw new NoViableAltException(this);
									}
									}
									break;
								case 3:
									{
									setState(5245);
									_errHandler.sync(this);
									_la = _input.LA(1);
									if (_la==COMMA) {
										{
										setState(5244);
										match(COMMA);
										}
									}

									setState(5247);
									match(SID);
									setState(5248);
									match(EQUAL);
									setState(5249);
									match(BINARY);
									}
									break;
								case 4:
									{
									setState(5251);
									_errHandler.sync(this);
									_la = _input.LA(1);
									if (_la==COMMA) {
										{
										setState(5250);
										match(COMMA);
										}
									}

									setState(5253);
									match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
									setState(5254);
									match(EQUAL);
									setState(5255);
									_la = _input.LA(1);
									if ( !(_la==OFF || _la==ON) ) {
									_errHandler.recoverInline(this);
									}
									else {
										if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
										_errHandler.reportMatch(this);
										consume();
									}
									}
									break;
								}
								} 
							}
							setState(5260);
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input,622,_ctx);
						}
						}
						break;
					}
					}
					break;
				case 2:
					{
					setState(5263);
					((Create_userContext)_localctx).user_name = id();
					setState(5264);
					match(WITH);
					setState(5265);
					match(PASSWORD);
					setState(5266);
					match(EQUAL);
					setState(5267);
					((Create_userContext)_localctx).password = match(STRING);
					setState(5298);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,630,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							setState(5296);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,629,_ctx) ) {
							case 1:
								{
								setState(5269);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(5268);
									match(COMMA);
									}
								}

								setState(5271);
								match(DEFAULT_SCHEMA);
								setState(5272);
								match(EQUAL);
								setState(5273);
								((Create_userContext)_localctx).schema_name = id();
								}
								break;
							case 2:
								{
								setState(5275);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(5274);
									match(COMMA);
									}
								}

								setState(5277);
								match(DEFAULT_LANGUAGE);
								setState(5278);
								match(EQUAL);
								setState(5282);
								_errHandler.sync(this);
								switch (_input.LA(1)) {
								case NONE:
									{
									setState(5279);
									match(NONE);
									}
									break;
								case DECIMAL:
									{
									setState(5280);
									match(DECIMAL);
									}
									break;
								case CALLED:
								case DATA_COMPRESSION:
								case EVENTDATA:
								case FILENAME:
								case FILLFACTOR:
								case FORCESEEK:
								case INIT:
								case KEY:
								case MASTER:
								case MAX_MEMORY:
								case OFFSETS:
								case PAGE:
								case PUBLIC:
								case R:
								case RAW:
								case RETURN:
								case RETURNS:
								case ROWCOUNT:
								case SAFETY:
								case SERVER:
								case SID:
								case SOURCE:
								case STATE:
								case START:
								case TARGET:
								case ABSOLUTE:
								case ACCENT_SENSITIVITY:
								case ACTION:
								case ACTIVATION:
								case ACTIVE:
								case ADDRESS:
								case AES_128:
								case AES_192:
								case AES_256:
								case AFFINITY:
								case AFTER:
								case AGGREGATE:
								case ALGORITHM:
								case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
								case ALLOW_SNAPSHOT_ISOLATION:
								case ALLOWED:
								case ANSI_NULL_DEFAULT:
								case ANSI_NULLS:
								case ANSI_PADDING:
								case ANSI_WARNINGS:
								case APPLICATION_LOG:
								case APPLY:
								case ARITHABORT:
								case ASSEMBLY:
								case AUDIT:
								case AUDIT_GUID:
								case AUTO:
								case AUTO_CLEANUP:
								case AUTO_CLOSE:
								case AUTO_CREATE_STATISTICS:
								case AUTO_SHRINK:
								case AUTO_UPDATE_STATISTICS:
								case AUTO_UPDATE_STATISTICS_ASYNC:
								case AVAILABILITY:
								case AVG:
								case BACKUP_PRIORITY:
								case BEGIN_DIALOG:
								case BIGINT:
								case BINARY_BASE64:
								case BINARY_CHECKSUM:
								case BINDING:
								case BLOB_STORAGE:
								case BROKER:
								case BROKER_INSTANCE:
								case BULK_LOGGED:
								case CALLER:
								case CAP_CPU_PERCENT:
								case CAST:
								case CATALOG:
								case CATCH:
								case CHANGE_RETENTION:
								case CHANGE_TRACKING:
								case CHECKSUM:
								case CHECKSUM_AGG:
								case CLEANUP:
								case COLLECTION:
								case COLUMN_MASTER_KEY:
								case COMMITTED:
								case COMPATIBILITY_LEVEL:
								case CONCAT:
								case CONCAT_NULL_YIELDS_NULL:
								case CONTENT:
								case CONTROL:
								case COOKIE:
								case COUNT:
								case COUNT_BIG:
								case COUNTER:
								case CPU:
								case CREATE_NEW:
								case CREATION_DISPOSITION:
								case CREDENTIAL:
								case CRYPTOGRAPHIC:
								case CURSOR_CLOSE_ON_COMMIT:
								case CURSOR_DEFAULT:
								case DATE_CORRELATION_OPTIMIZATION:
								case DATEADD:
								case DATEDIFF:
								case DATENAME:
								case DATEPART:
								case DAYS:
								case DB_CHAINING:
								case DB_FAILOVER:
								case DECRYPTION:
								case DEFAULT_DOUBLE_QUOTE:
								case DEFAULT_FULLTEXT_LANGUAGE:
								case DEFAULT_LANGUAGE:
								case DELAY:
								case DELAYED_DURABILITY:
								case DELETED:
								case DENSE_RANK:
								case DEPENDENTS:
								case DES:
								case DESCRIPTION:
								case DESX:
								case DHCP:
								case DIALOG:
								case DIRECTORY_NAME:
								case DISABLE:
								case DISABLE_BROKER:
								case DISABLED:
								case DISK_DRIVE:
								case DOCUMENT:
								case DYNAMIC:
								case EMERGENCY:
								case EMPTY:
								case ENABLE:
								case ENABLE_BROKER:
								case ENCRYPTED_VALUE:
								case ENCRYPTION:
								case ENDPOINT_URL:
								case ERROR_BROKER_CONVERSATIONS:
								case EXCLUSIVE:
								case EXECUTABLE:
								case EXIST:
								case EXPAND:
								case EXPIRY_DATE:
								case EXPLICIT:
								case FAIL_OPERATION:
								case FAILOVER_MODE:
								case FAILURE:
								case FAILURE_CONDITION_LEVEL:
								case FAST:
								case FAST_FORWARD:
								case FILEGROUP:
								case FILEGROWTH:
								case FILEPATH:
								case FILESTREAM:
								case FILTER:
								case FIRST:
								case FIRST_VALUE:
								case FOLLOWING:
								case FORCE:
								case FORCE_FAILOVER_ALLOW_DATA_LOSS:
								case FORCED:
								case FORMAT:
								case FORWARD_ONLY:
								case FULLSCAN:
								case FULLTEXT:
								case GB:
								case GETDATE:
								case GETUTCDATE:
								case GLOBAL:
								case GO:
								case GROUP_MAX_REQUESTS:
								case GROUPING:
								case GROUPING_ID:
								case HADR:
								case HASH:
								case HEALTH_CHECK_TIMEOUT:
								case HIGH:
								case HONOR_BROKER_PRIORITY:
								case HOURS:
								case IDENTITY_VALUE:
								case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
								case IMMEDIATE:
								case IMPERSONATE:
								case IMPORTANCE:
								case INCREMENTAL:
								case INITIATOR:
								case INPUT:
								case INSENSITIVE:
								case INSERTED:
								case INT:
								case IP:
								case ISOLATION:
								case KB:
								case KEEP:
								case KEEPFIXED:
								case KEY_SOURCE:
								case KEYS:
								case KEYSET:
								case LAG:
								case LAST:
								case LAST_VALUE:
								case LEAD:
								case LEVEL:
								case LIST:
								case LISTENER:
								case LISTENER_URL:
								case LOB_COMPACTION:
								case LOCAL:
								case LOCATION:
								case LOCK:
								case LOCK_ESCALATION:
								case LOGIN:
								case LOOP:
								case LOW:
								case MANUAL:
								case MARK:
								case MATERIALIZED:
								case MAX:
								case MAX_CPU_PERCENT:
								case MAX_DOP:
								case MAX_FILES:
								case MAX_IOPS_PER_VOLUME:
								case MAX_MEMORY_PERCENT:
								case MAX_PROCESSES:
								case MAX_QUEUE_READERS:
								case MAX_ROLLOVER_FILES:
								case MAXDOP:
								case MAXRECURSION:
								case MAXSIZE:
								case MB:
								case MEDIUM:
								case MEMORY_OPTIMIZED_DATA:
								case MESSAGE:
								case MIN:
								case MIN_ACTIVE_ROWVERSION:
								case MIN_CPU_PERCENT:
								case MIN_IOPS_PER_VOLUME:
								case MIN_MEMORY_PERCENT:
								case MINUTES:
								case MIRROR_ADDRESS:
								case MIXED_PAGE_ALLOCATION:
								case MODE:
								case MODIFY:
								case MOVE:
								case MULTI_USER:
								case NAME:
								case NESTED_TRIGGERS:
								case NEW_ACCOUNT:
								case NEW_BROKER:
								case NEW_PASSWORD:
								case NEXT:
								case NO:
								case NO_TRUNCATE:
								case NO_WAIT:
								case NOCOUNT:
								case NODES:
								case NOEXPAND:
								case NON_TRANSACTED_ACCESS:
								case NORECOMPUTE:
								case NORECOVERY:
								case NOWAIT:
								case NTILE:
								case NUMANODE:
								case NUMBER:
								case NUMERIC_ROUNDABORT:
								case OBJECT:
								case OFFLINE:
								case OFFSET:
								case OLD_ACCOUNT:
								case ONLINE:
								case ONLY:
								case OPEN_EXISTING:
								case OPTIMISTIC:
								case OPTIMIZE:
								case OUT:
								case OUTPUT:
								case OWNER:
								case PAGE_VERIFY:
								case PARAMETERIZATION:
								case PARTITION:
								case PARTITIONS:
								case PARTNER:
								case PATH:
								case POISON_MESSAGE_HANDLING:
								case POOL:
								case PORT:
								case PRECEDING:
								case PRIMARY_ROLE:
								case PRIOR:
								case PRIORITY:
								case PRIORITY_LEVEL:
								case PRIVATE:
								case PRIVATE_KEY:
								case PRIVILEGES:
								case PROCEDURE_NAME:
								case PROPERTY:
								case PROVIDER:
								case PROVIDER_KEY_NAME:
								case QUERY:
								case QUEUE:
								case QUEUE_DELAY:
								case QUOTED_IDENTIFIER:
								case RANGE:
								case RANK:
								case RC2:
								case RC4:
								case RC4_128:
								case READ_COMMITTED_SNAPSHOT:
								case READ_ONLY:
								case READ_ONLY_ROUTING_LIST:
								case READ_WRITE:
								case READONLY:
								case REBUILD:
								case RECEIVE:
								case RECOMPILE:
								case RECOVERY:
								case RECURSIVE_TRIGGERS:
								case RELATIVE:
								case REMOTE:
								case REMOTE_SERVICE_NAME:
								case REMOVE:
								case REORGANIZE:
								case REPEATABLE:
								case REPLICA:
								case REQUEST_MAX_CPU_TIME_SEC:
								case REQUEST_MAX_MEMORY_GRANT_PERCENT:
								case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
								case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
								case RESERVE_DISK_SPACE:
								case RESOURCE:
								case RESOURCE_MANAGER_LOCATION:
								case RESTRICTED_USER:
								case RETENTION:
								case ROBUST:
								case ROOT:
								case ROUTE:
								case ROW:
								case ROW_NUMBER:
								case ROWGUID:
								case ROWS:
								case SAMPLE:
								case SCHEMABINDING:
								case SCOPED:
								case SCROLL:
								case SCROLL_LOCKS:
								case SEARCH:
								case SECONDARY:
								case SECONDARY_ONLY:
								case SECONDARY_ROLE:
								case SECONDS:
								case SECRET:
								case SECURITY_LOG:
								case SEEDING_MODE:
								case SELF:
								case SEMI_SENSITIVE:
								case SEND:
								case SENT:
								case SERIALIZABLE:
								case SESSION_TIMEOUT:
								case SETERROR:
								case SHARE:
								case SHOWPLAN:
								case SIGNATURE:
								case SIMPLE:
								case SINGLE_USER:
								case SIZE:
								case SMALLINT:
								case SNAPSHOT:
								case SPATIAL_WINDOW_MAX_CELLS:
								case STANDBY:
								case START_DATE:
								case STATIC:
								case STATS_STREAM:
								case STATUS:
								case STDEV:
								case STDEVP:
								case STOPLIST:
								case STUFF:
								case SUBJECT:
								case SUM:
								case SUSPEND:
								case SYMMETRIC:
								case SYNCHRONOUS_COMMIT:
								case SYNONYM:
								case TAKE:
								case TARGET_RECOVERY_TIME:
								case TB:
								case TEXTIMAGE_ON:
								case THROW:
								case TIES:
								case TIME:
								case TIMEOUT:
								case TIMER:
								case TINYINT:
								case TORN_PAGE_DETECTION:
								case TRANSFORM_NOISE_WORDS:
								case TRIPLE_DES:
								case TRIPLE_DES_3KEY:
								case TRUSTWORTHY:
								case TRY:
								case TSQL:
								case TWO_DIGIT_YEAR_CUTOFF:
								case TYPE:
								case TYPE_WARNING:
								case UNBOUNDED:
								case UNCOMMITTED:
								case UNKNOWN:
								case UNLIMITED:
								case USING:
								case VALID_XML:
								case VALIDATION:
								case VALUE:
								case VAR:
								case VARP:
								case VIEW_METADATA:
								case VIEWS:
								case WAIT:
								case WELL_FORMED_XML:
								case WORK:
								case WORKLOAD:
								case XML:
								case XMLNAMESPACES:
								case DOUBLE_QUOTE_ID:
								case SQUARE_BRACKET_ID:
								case ID:
									{
									setState(5281);
									((Create_userContext)_localctx).language_name_or_alias = id();
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								break;
							case 3:
								{
								setState(5285);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(5284);
									match(COMMA);
									}
								}

								setState(5287);
								match(SID);
								setState(5288);
								match(EQUAL);
								setState(5289);
								match(BINARY);
								}
								break;
							case 4:
								{
								setState(5291);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(5290);
									match(COMMA);
									}
								}

								setState(5293);
								match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
								setState(5294);
								match(EQUAL);
								setState(5295);
								_la = _input.LA(1);
								if ( !(_la==OFF || _la==ON) ) {
								_errHandler.recoverInline(this);
								}
								else {
									if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
									_errHandler.reportMatch(this);
									consume();
								}
								}
								break;
							}
							} 
						}
						setState(5300);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,630,_ctx);
					}
					}
					break;
				case 3:
					{
					setState(5301);
					((Create_userContext)_localctx).Azure_Active_Directory_principal = id();
					setState(5302);
					match(FROM);
					setState(5303);
					match(EXTERNAL);
					setState(5304);
					match(PROVIDER);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5308);
				match(CREATE);
				setState(5309);
				match(USER);
				setState(5310);
				((Create_userContext)_localctx).user_name = id();
				setState(5337);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,636,_ctx) ) {
				case 1:
					{
					setState(5311);
					match(WITHOUT);
					setState(5312);
					match(LOGIN);
					setState(5327);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,635,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							setState(5325);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,634,_ctx) ) {
							case 1:
								{
								setState(5314);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(5313);
									match(COMMA);
									}
								}

								setState(5316);
								match(DEFAULT_SCHEMA);
								setState(5317);
								match(EQUAL);
								setState(5318);
								((Create_userContext)_localctx).schema_name = id();
								}
								break;
							case 2:
								{
								setState(5320);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(5319);
									match(COMMA);
									}
								}

								setState(5322);
								match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
								setState(5323);
								match(EQUAL);
								setState(5324);
								_la = _input.LA(1);
								if ( !(_la==OFF || _la==ON) ) {
								_errHandler.recoverInline(this);
								}
								else {
									if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
									_errHandler.reportMatch(this);
									consume();
								}
								}
								break;
							}
							} 
						}
						setState(5329);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,635,_ctx);
					}
					}
					break;
				case 2:
					{
					setState(5330);
					_la = _input.LA(1);
					if ( !(_la==FOR || _la==FROM) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5331);
					match(CERTIFICATE);
					setState(5332);
					((Create_userContext)_localctx).cert_name = id();
					}
					break;
				case 3:
					{
					setState(5333);
					_la = _input.LA(1);
					if ( !(_la==FOR || _la==FROM) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5334);
					match(ASYMMETRIC);
					setState(5335);
					match(KEY);
					setState(5336);
					((Create_userContext)_localctx).asym_key_name = id();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5339);
				match(CREATE);
				setState(5340);
				match(USER);
				setState(5341);
				((Create_userContext)_localctx).user_name = id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_user_azure_sql_dwContext extends ParserRuleContext {
		public IdContext user_name;
		public IdContext login_name;
		public IdContext schema_name;
		public IdContext Azure_Active_Directory_principal;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(TSqlParser.USER, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode LOGIN() { return getToken(TSqlParser.LOGIN, 0); }
		public TerminalNode WITHOUT() { return getToken(TSqlParser.WITHOUT, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode DEFAULT_SCHEMA() { return getToken(TSqlParser.DEFAULT_SCHEMA, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public TerminalNode EXTERNAL() { return getToken(TSqlParser.EXTERNAL, 0); }
		public TerminalNode PROVIDER() { return getToken(TSqlParser.PROVIDER, 0); }
		public Create_user_azure_sql_dwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_user_azure_sql_dw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_user_azure_sql_dw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_user_azure_sql_dw(this);
		}
	}

	public final Create_user_azure_sql_dwContext create_user_azure_sql_dw() throws RecognitionException {
		Create_user_azure_sql_dwContext _localctx = new Create_user_azure_sql_dwContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_create_user_azure_sql_dw);
		int _la;
		try {
			setState(5372);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,641,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5344);
				match(CREATE);
				setState(5345);
				match(USER);
				setState(5346);
				((Create_user_azure_sql_dwContext)_localctx).user_name = id();
				setState(5352);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FOR:
				case FROM:
					{
					setState(5347);
					_la = _input.LA(1);
					if ( !(_la==FOR || _la==FROM) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5348);
					match(LOGIN);
					setState(5349);
					((Create_user_azure_sql_dwContext)_localctx).login_name = id();
					}
					break;
				case WITHOUT:
					{
					setState(5350);
					match(WITHOUT);
					setState(5351);
					match(LOGIN);
					}
					break;
				case EOF:
				case ALTER:
				case BACKUP:
				case BEGIN:
				case BLOCKING_HIERARCHY:
				case BREAK:
				case CALLED:
				case CASE:
				case CLOSE:
				case COALESCE:
				case COMMIT:
				case CONTINUE:
				case CONVERT:
				case CREATE:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DATA_COMPRESSION:
				case DBCC:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULT:
				case DELETE:
				case DROP:
				case ELSE:
				case END:
				case EVENTDATA:
				case EXECUTE:
				case FETCH:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case GET:
				case GOTO:
				case GRANT:
				case IDENTITY:
				case IF:
				case INIT:
				case INSERT:
				case ISNULL:
				case KEY:
				case LEFT:
				case MASTER:
				case MAX_MEMORY:
				case MERGE:
				case NULL:
				case NULLIF:
				case OFFSETS:
				case OPEN:
				case OVER:
				case PAGE:
				case PRINT:
				case PUBLIC:
				case R:
				case RAISERROR:
				case RAW:
				case RETURN:
				case RETURNS:
				case REVERT:
				case RIGHT:
				case ROLLBACK:
				case ROWCOUNT:
				case SAFETY:
				case SAVE:
				case SELECT:
				case SERVER:
				case SESSION_USER:
				case SET:
				case SETUSER:
				case SID:
				case SOURCE:
				case STATE:
				case START:
				case SYSTEM_USER:
				case TARGET:
				case TRUNCATE:
				case UPDATE:
				case USE:
				case WAITFOR:
				case WHILE:
				case WITH:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case LOCAL_ID:
				case DECIMAL:
				case ID:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case LR_BRACKET:
				case SEMI:
				case PLUS:
				case MINUS:
				case BIT_NOT:
					break;
				default:
					break;
				}
				setState(5358);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,639,_ctx) ) {
				case 1:
					{
					setState(5354);
					match(WITH);
					setState(5355);
					match(DEFAULT_SCHEMA);
					setState(5356);
					match(EQUAL);
					setState(5357);
					((Create_user_azure_sql_dwContext)_localctx).schema_name = id();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5360);
				match(CREATE);
				setState(5361);
				match(USER);
				setState(5362);
				((Create_user_azure_sql_dwContext)_localctx).Azure_Active_Directory_principal = id();
				setState(5363);
				match(FROM);
				setState(5364);
				match(EXTERNAL);
				setState(5365);
				match(PROVIDER);
				setState(5370);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,640,_ctx) ) {
				case 1:
					{
					setState(5366);
					match(WITH);
					setState(5367);
					match(DEFAULT_SCHEMA);
					setState(5368);
					match(EQUAL);
					setState(5369);
					((Create_user_azure_sql_dwContext)_localctx).schema_name = id();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_user_azure_sqlContext extends ParserRuleContext {
		public IdContext username;
		public IdContext newusername;
		public IdContext schema_name;
		public IdContext loginame;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(TSqlParser.USER, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> NAME() { return getTokens(TSqlParser.NAME); }
		public TerminalNode NAME(int i) {
			return getToken(TSqlParser.NAME, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public List<TerminalNode> DEFAULT_SCHEMA() { return getTokens(TSqlParser.DEFAULT_SCHEMA); }
		public TerminalNode DEFAULT_SCHEMA(int i) {
			return getToken(TSqlParser.DEFAULT_SCHEMA, i);
		}
		public List<TerminalNode> LOGIN() { return getTokens(TSqlParser.LOGIN); }
		public TerminalNode LOGIN(int i) {
			return getToken(TSqlParser.LOGIN, i);
		}
		public List<TerminalNode> ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return getTokens(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS); }
		public TerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(int i) {
			return getToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, i);
		}
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public List<TerminalNode> OFF() { return getTokens(TSqlParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(TSqlParser.OFF, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Alter_user_azure_sqlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_user_azure_sql; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_user_azure_sql(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_user_azure_sql(this);
		}
	}

	public final Alter_user_azure_sqlContext alter_user_azure_sql() throws RecognitionException {
		Alter_user_azure_sqlContext _localctx = new Alter_user_azure_sqlContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_alter_user_azure_sql);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5374);
			match(ALTER);
			setState(5375);
			match(USER);
			setState(5376);
			((Alter_user_azure_sqlContext)_localctx).username = id();
			setState(5377);
			match(WITH);
			setState(5402); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(5402);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,646,_ctx) ) {
					case 1:
						{
						setState(5379);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5378);
							match(COMMA);
							}
						}

						setState(5381);
						match(NAME);
						setState(5382);
						match(EQUAL);
						setState(5383);
						((Alter_user_azure_sqlContext)_localctx).newusername = id();
						}
						break;
					case 2:
						{
						setState(5385);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5384);
							match(COMMA);
							}
						}

						setState(5387);
						match(DEFAULT_SCHEMA);
						setState(5388);
						match(EQUAL);
						setState(5389);
						((Alter_user_azure_sqlContext)_localctx).schema_name = id();
						}
						break;
					case 3:
						{
						setState(5391);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5390);
							match(COMMA);
							}
						}

						setState(5393);
						match(LOGIN);
						setState(5394);
						match(EQUAL);
						setState(5395);
						((Alter_user_azure_sqlContext)_localctx).loginame = id();
						}
						break;
					case 4:
						{
						setState(5397);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5396);
							match(COMMA);
							}
						}

						setState(5399);
						match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
						setState(5400);
						match(EQUAL);
						setState(5401);
						_la = _input.LA(1);
						if ( !(_la==OFF || _la==ON) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5404); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,647,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_workload_groupContext extends ParserRuleContext {
		public IdContext workload_group_group_name;
		public Token request_max_memory_grant;
		public Token request_max_cpu_time_sec;
		public Token request_memory_grant_timeout_sec;
		public Token max_dop;
		public Token group_max_requests;
		public IdContext workload_group_pool_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode WORKLOAD() { return getToken(TSqlParser.WORKLOAD, 0); }
		public TerminalNode GROUP() { return getToken(TSqlParser.GROUP, 0); }
		public List<TerminalNode> DEFAULT_DOUBLE_QUOTE() { return getTokens(TSqlParser.DEFAULT_DOUBLE_QUOTE); }
		public TerminalNode DEFAULT_DOUBLE_QUOTE(int i) {
			return getToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode USING() { return getToken(TSqlParser.USING, 0); }
		public List<TerminalNode> IMPORTANCE() { return getTokens(TSqlParser.IMPORTANCE); }
		public TerminalNode IMPORTANCE(int i) {
			return getToken(TSqlParser.IMPORTANCE, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public List<TerminalNode> REQUEST_MAX_MEMORY_GRANT_PERCENT() { return getTokens(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT); }
		public TerminalNode REQUEST_MAX_MEMORY_GRANT_PERCENT(int i) {
			return getToken(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, i);
		}
		public List<TerminalNode> REQUEST_MAX_CPU_TIME_SEC() { return getTokens(TSqlParser.REQUEST_MAX_CPU_TIME_SEC); }
		public TerminalNode REQUEST_MAX_CPU_TIME_SEC(int i) {
			return getToken(TSqlParser.REQUEST_MAX_CPU_TIME_SEC, i);
		}
		public List<TerminalNode> REQUEST_MEMORY_GRANT_TIMEOUT_SEC() { return getTokens(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC); }
		public TerminalNode REQUEST_MEMORY_GRANT_TIMEOUT_SEC(int i) {
			return getToken(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, i);
		}
		public List<TerminalNode> MAX_DOP() { return getTokens(TSqlParser.MAX_DOP); }
		public TerminalNode MAX_DOP(int i) {
			return getToken(TSqlParser.MAX_DOP, i);
		}
		public List<TerminalNode> GROUP_MAX_REQUESTS() { return getTokens(TSqlParser.GROUP_MAX_REQUESTS); }
		public TerminalNode GROUP_MAX_REQUESTS(int i) {
			return getToken(TSqlParser.GROUP_MAX_REQUESTS, i);
		}
		public List<TerminalNode> LOW() { return getTokens(TSqlParser.LOW); }
		public TerminalNode LOW(int i) {
			return getToken(TSqlParser.LOW, i);
		}
		public List<TerminalNode> MEDIUM() { return getTokens(TSqlParser.MEDIUM); }
		public TerminalNode MEDIUM(int i) {
			return getToken(TSqlParser.MEDIUM, i);
		}
		public List<TerminalNode> HIGH() { return getTokens(TSqlParser.HIGH); }
		public TerminalNode HIGH(int i) {
			return getToken(TSqlParser.HIGH, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Alter_workload_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_workload_group; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_workload_group(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_workload_group(this);
		}
	}

	public final Alter_workload_groupContext alter_workload_group() throws RecognitionException {
		Alter_workload_groupContext _localctx = new Alter_workload_groupContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_alter_workload_group);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5406);
			match(ALTER);
			setState(5407);
			match(WORKLOAD);
			setState(5408);
			match(GROUP);
			setState(5411);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,648,_ctx) ) {
			case 1:
				{
				setState(5409);
				((Alter_workload_groupContext)_localctx).workload_group_group_name = id();
				}
				break;
			case 2:
				{
				setState(5410);
				match(DEFAULT_DOUBLE_QUOTE);
				}
				break;
			}
			setState(5444);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,653,_ctx) ) {
			case 1:
				{
				setState(5413);
				match(WITH);
				setState(5414);
				match(LR_BRACKET);
				setState(5439); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(5439);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,651,_ctx) ) {
					case 1:
						{
						setState(5415);
						match(IMPORTANCE);
						setState(5416);
						match(EQUAL);
						setState(5417);
						_la = _input.LA(1);
						if ( !(((((_la - 533)) & ~0x3f) == 0 && ((1L << (_la - 533)) & ((1L << (HIGH - 533)) | (1L << (LOW - 533)) | (1L << (MEDIUM - 533)))) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 2:
						{
						setState(5419);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5418);
							match(COMMA);
							}
						}

						setState(5421);
						match(REQUEST_MAX_MEMORY_GRANT_PERCENT);
						setState(5422);
						match(EQUAL);
						setState(5423);
						((Alter_workload_groupContext)_localctx).request_max_memory_grant = match(DECIMAL);
						}
						break;
					case 3:
						{
						setState(5425);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5424);
							match(COMMA);
							}
						}

						setState(5427);
						match(REQUEST_MAX_CPU_TIME_SEC);
						setState(5428);
						match(EQUAL);
						setState(5429);
						((Alter_workload_groupContext)_localctx).request_max_cpu_time_sec = match(DECIMAL);
						}
						break;
					case 4:
						{
						setState(5430);
						match(REQUEST_MEMORY_GRANT_TIMEOUT_SEC);
						setState(5431);
						match(EQUAL);
						setState(5432);
						((Alter_workload_groupContext)_localctx).request_memory_grant_timeout_sec = match(DECIMAL);
						}
						break;
					case 5:
						{
						setState(5433);
						match(MAX_DOP);
						setState(5434);
						match(EQUAL);
						setState(5435);
						((Alter_workload_groupContext)_localctx).max_dop = match(DECIMAL);
						}
						break;
					case 6:
						{
						setState(5436);
						match(GROUP_MAX_REQUESTS);
						setState(5437);
						match(EQUAL);
						setState(5438);
						((Alter_workload_groupContext)_localctx).group_max_requests = match(DECIMAL);
						}
						break;
					}
					}
					setState(5441); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & ((1L << (GROUP_MAX_REQUESTS - 527)) | (1L << (IMPORTANCE - 527)) | (1L << (MAX_DOP - 527)))) != 0) || ((((_la - 683)) & ~0x3f) == 0 && ((1L << (_la - 683)) & ((1L << (REQUEST_MAX_CPU_TIME_SEC - 683)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 683)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 683)))) != 0) || _la==COMMA );
				setState(5443);
				match(RR_BRACKET);
				}
				break;
			}
			setState(5451);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,655,_ctx) ) {
			case 1:
				{
				setState(5446);
				match(USING);
				setState(5449);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,654,_ctx) ) {
				case 1:
					{
					setState(5447);
					((Alter_workload_groupContext)_localctx).workload_group_pool_name = id();
					}
					break;
				case 2:
					{
					setState(5448);
					match(DEFAULT_DOUBLE_QUOTE);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_workload_groupContext extends ParserRuleContext {
		public IdContext workload_group_group_name;
		public Token request_max_memory_grant;
		public Token request_max_cpu_time_sec;
		public Token request_memory_grant_timeout_sec;
		public Token max_dop;
		public Token group_max_requests;
		public IdContext workload_group_pool_name;
		public IdContext external_pool_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode WORKLOAD() { return getToken(TSqlParser.WORKLOAD, 0); }
		public TerminalNode GROUP() { return getToken(TSqlParser.GROUP, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode USING() { return getToken(TSqlParser.USING, 0); }
		public List<TerminalNode> IMPORTANCE() { return getTokens(TSqlParser.IMPORTANCE); }
		public TerminalNode IMPORTANCE(int i) {
			return getToken(TSqlParser.IMPORTANCE, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public List<TerminalNode> REQUEST_MAX_MEMORY_GRANT_PERCENT() { return getTokens(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT); }
		public TerminalNode REQUEST_MAX_MEMORY_GRANT_PERCENT(int i) {
			return getToken(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, i);
		}
		public List<TerminalNode> REQUEST_MAX_CPU_TIME_SEC() { return getTokens(TSqlParser.REQUEST_MAX_CPU_TIME_SEC); }
		public TerminalNode REQUEST_MAX_CPU_TIME_SEC(int i) {
			return getToken(TSqlParser.REQUEST_MAX_CPU_TIME_SEC, i);
		}
		public List<TerminalNode> REQUEST_MEMORY_GRANT_TIMEOUT_SEC() { return getTokens(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC); }
		public TerminalNode REQUEST_MEMORY_GRANT_TIMEOUT_SEC(int i) {
			return getToken(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, i);
		}
		public List<TerminalNode> MAX_DOP() { return getTokens(TSqlParser.MAX_DOP); }
		public TerminalNode MAX_DOP(int i) {
			return getToken(TSqlParser.MAX_DOP, i);
		}
		public List<TerminalNode> GROUP_MAX_REQUESTS() { return getTokens(TSqlParser.GROUP_MAX_REQUESTS); }
		public TerminalNode GROUP_MAX_REQUESTS(int i) {
			return getToken(TSqlParser.GROUP_MAX_REQUESTS, i);
		}
		public List<TerminalNode> DEFAULT_DOUBLE_QUOTE() { return getTokens(TSqlParser.DEFAULT_DOUBLE_QUOTE); }
		public TerminalNode DEFAULT_DOUBLE_QUOTE(int i) {
			return getToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, i);
		}
		public TerminalNode EXTERNAL() { return getToken(TSqlParser.EXTERNAL, 0); }
		public List<TerminalNode> LOW() { return getTokens(TSqlParser.LOW); }
		public TerminalNode LOW(int i) {
			return getToken(TSqlParser.LOW, i);
		}
		public List<TerminalNode> MEDIUM() { return getTokens(TSqlParser.MEDIUM); }
		public TerminalNode MEDIUM(int i) {
			return getToken(TSqlParser.MEDIUM, i);
		}
		public List<TerminalNode> HIGH() { return getTokens(TSqlParser.HIGH); }
		public TerminalNode HIGH(int i) {
			return getToken(TSqlParser.HIGH, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Create_workload_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_workload_group; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_workload_group(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_workload_group(this);
		}
	}

	public final Create_workload_groupContext create_workload_group() throws RecognitionException {
		Create_workload_groupContext _localctx = new Create_workload_groupContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_create_workload_group);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5453);
			match(CREATE);
			setState(5454);
			match(WORKLOAD);
			setState(5455);
			match(GROUP);
			setState(5456);
			((Create_workload_groupContext)_localctx).workload_group_group_name = id();
			setState(5488);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,660,_ctx) ) {
			case 1:
				{
				setState(5457);
				match(WITH);
				setState(5458);
				match(LR_BRACKET);
				setState(5483); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(5483);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,658,_ctx) ) {
					case 1:
						{
						setState(5459);
						match(IMPORTANCE);
						setState(5460);
						match(EQUAL);
						setState(5461);
						_la = _input.LA(1);
						if ( !(((((_la - 533)) & ~0x3f) == 0 && ((1L << (_la - 533)) & ((1L << (HIGH - 533)) | (1L << (LOW - 533)) | (1L << (MEDIUM - 533)))) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 2:
						{
						setState(5463);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5462);
							match(COMMA);
							}
						}

						setState(5465);
						match(REQUEST_MAX_MEMORY_GRANT_PERCENT);
						setState(5466);
						match(EQUAL);
						setState(5467);
						((Create_workload_groupContext)_localctx).request_max_memory_grant = match(DECIMAL);
						}
						break;
					case 3:
						{
						setState(5469);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5468);
							match(COMMA);
							}
						}

						setState(5471);
						match(REQUEST_MAX_CPU_TIME_SEC);
						setState(5472);
						match(EQUAL);
						setState(5473);
						((Create_workload_groupContext)_localctx).request_max_cpu_time_sec = match(DECIMAL);
						}
						break;
					case 4:
						{
						setState(5474);
						match(REQUEST_MEMORY_GRANT_TIMEOUT_SEC);
						setState(5475);
						match(EQUAL);
						setState(5476);
						((Create_workload_groupContext)_localctx).request_memory_grant_timeout_sec = match(DECIMAL);
						}
						break;
					case 5:
						{
						setState(5477);
						match(MAX_DOP);
						setState(5478);
						match(EQUAL);
						setState(5479);
						((Create_workload_groupContext)_localctx).max_dop = match(DECIMAL);
						}
						break;
					case 6:
						{
						setState(5480);
						match(GROUP_MAX_REQUESTS);
						setState(5481);
						match(EQUAL);
						setState(5482);
						((Create_workload_groupContext)_localctx).group_max_requests = match(DECIMAL);
						}
						break;
					}
					}
					setState(5485); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & ((1L << (GROUP_MAX_REQUESTS - 527)) | (1L << (IMPORTANCE - 527)) | (1L << (MAX_DOP - 527)))) != 0) || ((((_la - 683)) & ~0x3f) == 0 && ((1L << (_la - 683)) & ((1L << (REQUEST_MAX_CPU_TIME_SEC - 683)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 683)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 683)))) != 0) || _la==COMMA );
				setState(5487);
				match(RR_BRACKET);
				}
				break;
			}
			setState(5503);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,664,_ctx) ) {
			case 1:
				{
				setState(5490);
				match(USING);
				setState(5493);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,661,_ctx) ) {
				case 1:
					{
					setState(5491);
					((Create_workload_groupContext)_localctx).workload_group_pool_name = id();
					}
					break;
				case 2:
					{
					setState(5492);
					match(DEFAULT_DOUBLE_QUOTE);
					}
					break;
				}
				setState(5501);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,663,_ctx) ) {
				case 1:
					{
					setState(5496);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(5495);
						match(COMMA);
						}
					}

					setState(5498);
					match(EXTERNAL);
					setState(5499);
					((Create_workload_groupContext)_localctx).external_pool_name = id();
					}
					break;
				case 2:
					{
					setState(5500);
					match(DEFAULT_DOUBLE_QUOTE);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_xml_schema_collectionContext extends ParserRuleContext {
		public IdContext relational_schema;
		public IdContext sql_identifier;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode XML() { return getToken(TSqlParser.XML, 0); }
		public TerminalNode SCHEMA() { return getToken(TSqlParser.SCHEMA, 0); }
		public TerminalNode COLLECTION() { return getToken(TSqlParser.COLLECTION, 0); }
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Create_xml_schema_collectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_xml_schema_collection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_xml_schema_collection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_xml_schema_collection(this);
		}
	}

	public final Create_xml_schema_collectionContext create_xml_schema_collection() throws RecognitionException {
		Create_xml_schema_collectionContext _localctx = new Create_xml_schema_collectionContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_create_xml_schema_collection);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5505);
			match(CREATE);
			setState(5506);
			match(XML);
			setState(5507);
			match(SCHEMA);
			setState(5508);
			match(COLLECTION);
			setState(5512);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,665,_ctx) ) {
			case 1:
				{
				setState(5509);
				((Create_xml_schema_collectionContext)_localctx).relational_schema = id();
				setState(5510);
				match(DOT);
				}
				break;
			}
			setState(5514);
			((Create_xml_schema_collectionContext)_localctx).sql_identifier = id();
			setState(5515);
			match(AS);
			setState(5519);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING:
				{
				setState(5516);
				match(STRING);
				}
				break;
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case START:
			case TARGET:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				setState(5517);
				id();
				}
				break;
			case LOCAL_ID:
				{
				setState(5518);
				match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_queueContext extends ParserRuleContext {
		public IdContext queue_name;
		public IdContext filegroup;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode QUEUE() { return getToken(TSqlParser.QUEUE, 0); }
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Queue_settingsContext queue_settings() {
			return getRuleContext(Queue_settingsContext.class,0);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public Create_queueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_queue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_queue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_queue(this);
		}
	}

	public final Create_queueContext create_queue() throws RecognitionException {
		Create_queueContext _localctx = new Create_queueContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_create_queue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5521);
			match(CREATE);
			setState(5522);
			match(QUEUE);
			setState(5525);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,667,_ctx) ) {
			case 1:
				{
				setState(5523);
				full_table_name();
				}
				break;
			case 2:
				{
				setState(5524);
				((Create_queueContext)_localctx).queue_name = id();
				}
				break;
			}
			setState(5528);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,668,_ctx) ) {
			case 1:
				{
				setState(5527);
				queue_settings();
				}
				break;
			}
			setState(5533);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,669,_ctx) ) {
			case 1:
				{
				setState(5530);
				match(ON);
				setState(5531);
				((Create_queueContext)_localctx).filegroup = id();
				}
				break;
			case 2:
				{
				setState(5532);
				match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Queue_settingsContext extends ParserRuleContext {
		public Token max_readers;
		public Token user_name;
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<TerminalNode> STATUS() { return getTokens(TSqlParser.STATUS); }
		public TerminalNode STATUS(int i) {
			return getToken(TSqlParser.STATUS, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode RETENTION() { return getToken(TSqlParser.RETENTION, 0); }
		public TerminalNode ACTIVATION() { return getToken(TSqlParser.ACTIVATION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public TerminalNode POISON_MESSAGE_HANDLING() { return getToken(TSqlParser.POISON_MESSAGE_HANDLING, 0); }
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public List<TerminalNode> OFF() { return getTokens(TSqlParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(TSqlParser.OFF, i);
		}
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode PROCEDURE_NAME() { return getToken(TSqlParser.PROCEDURE_NAME, 0); }
		public Func_proc_nameContext func_proc_name() {
			return getRuleContext(Func_proc_nameContext.class,0);
		}
		public TerminalNode MAX_QUEUE_READERS() { return getToken(TSqlParser.MAX_QUEUE_READERS, 0); }
		public TerminalNode EXECUTE() { return getToken(TSqlParser.EXECUTE, 0); }
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode SELF() { return getToken(TSqlParser.SELF, 0); }
		public TerminalNode OWNER() { return getToken(TSqlParser.OWNER, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Queue_settingsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queue_settings; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterQueue_settings(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitQueue_settings(this);
		}
	}

	public final Queue_settingsContext queue_settings() throws RecognitionException {
		Queue_settingsContext _localctx = new Queue_settingsContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_queue_settings);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5535);
			match(WITH);
			setState(5542);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,671,_ctx) ) {
			case 1:
				{
				setState(5536);
				match(STATUS);
				setState(5537);
				match(EQUAL);
				setState(5538);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5540);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5539);
					match(COMMA);
					}
				}

				}
				break;
			}
			setState(5550);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,673,_ctx) ) {
			case 1:
				{
				setState(5544);
				match(RETENTION);
				setState(5545);
				match(EQUAL);
				setState(5546);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5548);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5547);
					match(COMMA);
					}
				}

				}
				break;
			}
			setState(5597);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,685,_ctx) ) {
			case 1:
				{
				setState(5552);
				match(ACTIVATION);
				setState(5553);
				match(LR_BRACKET);
				setState(5591);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case EXECUTE:
				case MAX_QUEUE_READERS:
				case PROCEDURE_NAME:
				case STATUS:
				case RR_BRACKET:
					{
					{
					setState(5560);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==STATUS) {
						{
						setState(5554);
						match(STATUS);
						setState(5555);
						match(EQUAL);
						setState(5556);
						_la = _input.LA(1);
						if ( !(_la==OFF || _la==ON) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5558);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5557);
							match(COMMA);
							}
						}

						}
					}

					setState(5568);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==PROCEDURE_NAME) {
						{
						setState(5562);
						match(PROCEDURE_NAME);
						setState(5563);
						match(EQUAL);
						setState(5564);
						func_proc_name();
						setState(5566);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5565);
							match(COMMA);
							}
						}

						}
					}

					setState(5576);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==MAX_QUEUE_READERS) {
						{
						setState(5570);
						match(MAX_QUEUE_READERS);
						setState(5571);
						match(EQUAL);
						setState(5572);
						((Queue_settingsContext)_localctx).max_readers = match(DECIMAL);
						setState(5574);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5573);
							match(COMMA);
							}
						}

						}
					}

					setState(5588);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==EXECUTE) {
						{
						setState(5578);
						match(EXECUTE);
						setState(5579);
						match(AS);
						setState(5583);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case SELF:
							{
							setState(5580);
							match(SELF);
							}
							break;
						case STRING:
							{
							setState(5581);
							((Queue_settingsContext)_localctx).user_name = match(STRING);
							}
							break;
						case OWNER:
							{
							setState(5582);
							match(OWNER);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(5586);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5585);
							match(COMMA);
							}
						}

						}
					}

					}
					}
					break;
				case DROP:
					{
					setState(5590);
					match(DROP);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5593);
				match(RR_BRACKET);
				setState(5595);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5594);
					match(COMMA);
					}
				}

				}
				break;
			}
			setState(5606);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,686,_ctx) ) {
			case 1:
				{
				setState(5599);
				match(POISON_MESSAGE_HANDLING);
				setState(5600);
				match(LR_BRACKET);
				{
				setState(5601);
				match(STATUS);
				setState(5602);
				match(EQUAL);
				setState(5603);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				setState(5605);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_queueContext extends ParserRuleContext {
		public IdContext queue_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode QUEUE() { return getToken(TSqlParser.QUEUE, 0); }
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public Queue_settingsContext queue_settings() {
			return getRuleContext(Queue_settingsContext.class,0);
		}
		public Queue_actionContext queue_action() {
			return getRuleContext(Queue_actionContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Alter_queueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_queue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_queue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_queue(this);
		}
	}

	public final Alter_queueContext alter_queue() throws RecognitionException {
		Alter_queueContext _localctx = new Alter_queueContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_alter_queue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5608);
			match(ALTER);
			setState(5609);
			match(QUEUE);
			setState(5612);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,687,_ctx) ) {
			case 1:
				{
				setState(5610);
				full_table_name();
				}
				break;
			case 2:
				{
				setState(5611);
				((Alter_queueContext)_localctx).queue_name = id();
				}
				break;
			}
			setState(5616);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				{
				setState(5614);
				queue_settings();
				}
				break;
			case MOVE:
			case REBUILD:
			case REORGANIZE:
				{
				setState(5615);
				queue_action();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Queue_actionContext extends ParserRuleContext {
		public TerminalNode REBUILD() { return getToken(TSqlParser.REBUILD, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public Queue_rebuild_optionsContext queue_rebuild_options() {
			return getRuleContext(Queue_rebuild_optionsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode REORGANIZE() { return getToken(TSqlParser.REORGANIZE, 0); }
		public TerminalNode LOB_COMPACTION() { return getToken(TSqlParser.LOB_COMPACTION, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public TerminalNode MOVE() { return getToken(TSqlParser.MOVE, 0); }
		public TerminalNode TO() { return getToken(TSqlParser.TO, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public Queue_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queue_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterQueue_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitQueue_action(this);
		}
	}

	public final Queue_actionContext queue_action() throws RecognitionException {
		Queue_actionContext _localctx = new Queue_actionContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_queue_action);
		int _la;
		try {
			setState(5639);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REBUILD:
				enterOuterAlt(_localctx, 1);
				{
				setState(5618);
				match(REBUILD);
				setState(5624);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,689,_ctx) ) {
				case 1:
					{
					setState(5619);
					match(WITH);
					setState(5620);
					match(LR_BRACKET);
					setState(5621);
					queue_rebuild_options();
					setState(5622);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case REORGANIZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5626);
				match(REORGANIZE);
				setState(5631);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,690,_ctx) ) {
				case 1:
					{
					setState(5627);
					match(WITH);
					setState(5628);
					match(LOB_COMPACTION);
					setState(5629);
					match(EQUAL);
					setState(5630);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case MOVE:
				enterOuterAlt(_localctx, 3);
				{
				setState(5633);
				match(MOVE);
				setState(5634);
				match(TO);
				setState(5637);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SID:
				case SOURCE:
				case STATE:
				case START:
				case TARGET:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(5635);
					id();
					}
					break;
				case DEFAULT:
					{
					setState(5636);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Queue_rebuild_optionsContext extends ParserRuleContext {
		public TerminalNode MAXDOP() { return getToken(TSqlParser.MAXDOP, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public Queue_rebuild_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queue_rebuild_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterQueue_rebuild_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitQueue_rebuild_options(this);
		}
	}

	public final Queue_rebuild_optionsContext queue_rebuild_options() throws RecognitionException {
		Queue_rebuild_optionsContext _localctx = new Queue_rebuild_optionsContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_queue_rebuild_options);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5641);
			match(MAXDOP);
			setState(5642);
			match(EQUAL);
			setState(5643);
			match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_contractContext extends ParserRuleContext {
		public IdContext owner_name;
		public IdContext message_type_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode CONTRACT() { return getToken(TSqlParser.CONTRACT, 0); }
		public Contract_nameContext contract_name() {
			return getRuleContext(Contract_nameContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public List<TerminalNode> SENT() { return getTokens(TSqlParser.SENT); }
		public TerminalNode SENT(int i) {
			return getToken(TSqlParser.SENT, i);
		}
		public List<TerminalNode> BY() { return getTokens(TSqlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(TSqlParser.BY, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> INITIATOR() { return getTokens(TSqlParser.INITIATOR); }
		public TerminalNode INITIATOR(int i) {
			return getToken(TSqlParser.INITIATOR, i);
		}
		public List<TerminalNode> TARGET() { return getTokens(TSqlParser.TARGET); }
		public TerminalNode TARGET(int i) {
			return getToken(TSqlParser.TARGET, i);
		}
		public List<TerminalNode> ANY() { return getTokens(TSqlParser.ANY); }
		public TerminalNode ANY(int i) {
			return getToken(TSqlParser.ANY, i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(TSqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(TSqlParser.DEFAULT, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Create_contractContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_contract; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_contract(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_contract(this);
		}
	}

	public final Create_contractContext create_contract() throws RecognitionException {
		Create_contractContext _localctx = new Create_contractContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_create_contract);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5645);
			match(CREATE);
			setState(5646);
			match(CONTRACT);
			setState(5647);
			contract_name();
			setState(5650);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(5648);
				match(AUTHORIZATION);
				setState(5649);
				((Create_contractContext)_localctx).owner_name = id();
				}
			}

			setState(5652);
			match(LR_BRACKET);
			setState(5663); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5655);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SID:
				case SOURCE:
				case STATE:
				case START:
				case TARGET:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(5653);
					((Create_contractContext)_localctx).message_type_name = id();
					}
					break;
				case DEFAULT:
					{
					setState(5654);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5657);
				match(SENT);
				setState(5658);
				match(BY);
				setState(5659);
				_la = _input.LA(1);
				if ( !(_la==ANY || _la==TARGET || _la==INITIATOR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5661);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5660);
					match(COMMA);
					}
				}

				}
				}
				setState(5665); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (DEFAULT - 81)) | (1L << (EVENTDATA - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & ((1L << (INIT - 158)) | (1L << (KEY - 158)) | (1L << (MASTER - 158)) | (1L << (MAX_MEMORY - 158)))) != 0) || ((((_la - 225)) & ~0x3f) == 0 && ((1L << (_la - 225)) & ((1L << (OFFSETS - 225)) | (1L << (PAGE - 225)) | (1L << (PUBLIC - 225)) | (1L << (R - 225)) | (1L << (RAW - 225)) | (1L << (RETURN - 225)) | (1L << (RETURNS - 225)) | (1L << (ROWCOUNT - 225)))) != 0) || ((((_la - 295)) & ~0x3f) == 0 && ((1L << (_la - 295)) & ((1L << (SAFETY - 295)) | (1L << (SERVER - 295)) | (1L << (SID - 295)) | (1L << (SOURCE - 295)) | (1L << (STATE - 295)) | (1L << (START - 295)) | (1L << (TARGET - 295)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (ABSOLUTE - 383)) | (1L << (ACCENT_SENSITIVITY - 383)) | (1L << (ACTION - 383)) | (1L << (ACTIVATION - 383)) | (1L << (ACTIVE - 383)) | (1L << (ADDRESS - 383)) | (1L << (AES_128 - 383)) | (1L << (AES_192 - 383)) | (1L << (AES_256 - 383)) | (1L << (AFFINITY - 383)) | (1L << (AFTER - 383)) | (1L << (AGGREGATE - 383)) | (1L << (ALGORITHM - 383)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 383)) | (1L << (ALLOWED - 383)) | (1L << (ANSI_NULL_DEFAULT - 383)) | (1L << (ANSI_NULLS - 383)) | (1L << (ANSI_PADDING - 383)) | (1L << (ANSI_WARNINGS - 383)) | (1L << (APPLICATION_LOG - 383)) | (1L << (APPLY - 383)) | (1L << (ARITHABORT - 383)) | (1L << (ASSEMBLY - 383)) | (1L << (AUDIT - 383)) | (1L << (AUDIT_GUID - 383)) | (1L << (AUTO - 383)) | (1L << (AUTO_CLEANUP - 383)) | (1L << (AUTO_CLOSE - 383)) | (1L << (AUTO_CREATE_STATISTICS - 383)) | (1L << (AUTO_SHRINK - 383)) | (1L << (AUTO_UPDATE_STATISTICS - 383)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 383)) | (1L << (AVAILABILITY - 383)) | (1L << (AVG - 383)) | (1L << (BACKUP_PRIORITY - 383)) | (1L << (BEGIN_DIALOG - 383)) | (1L << (BIGINT - 383)) | (1L << (BINARY_BASE64 - 383)) | (1L << (BINARY_CHECKSUM - 383)) | (1L << (BINDING - 383)) | (1L << (BLOB_STORAGE - 383)) | (1L << (BROKER - 383)) | (1L << (BROKER_INSTANCE - 383)) | (1L << (BULK_LOGGED - 383)) | (1L << (CALLER - 383)) | (1L << (CAP_CPU_PERCENT - 383)) | (1L << (CAST - 383)) | (1L << (CATALOG - 383)) | (1L << (CATCH - 383)) | (1L << (CHANGE_RETENTION - 383)) | (1L << (CHANGE_TRACKING - 383)) | (1L << (CHECKSUM - 383)) | (1L << (CHECKSUM_AGG - 383)) | (1L << (CLEANUP - 383)) | (1L << (COLLECTION - 383)) | (1L << (COLUMN_MASTER_KEY - 383)) | (1L << (COMMITTED - 383)) | (1L << (COMPATIBILITY_LEVEL - 383)) | (1L << (CONCAT - 383)) | (1L << (CONCAT_NULL_YIELDS_NULL - 383)) | (1L << (CONTENT - 383)) | (1L << (CONTROL - 383)) | (1L << (COOKIE - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (COUNT - 447)) | (1L << (COUNT_BIG - 447)) | (1L << (COUNTER - 447)) | (1L << (CPU - 447)) | (1L << (CREATE_NEW - 447)) | (1L << (CREATION_DISPOSITION - 447)) | (1L << (CREDENTIAL - 447)) | (1L << (CRYPTOGRAPHIC - 447)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 447)) | (1L << (CURSOR_DEFAULT - 447)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 447)) | (1L << (DATEADD - 447)) | (1L << (DATEDIFF - 447)) | (1L << (DATENAME - 447)) | (1L << (DATEPART - 447)) | (1L << (DAYS - 447)) | (1L << (DB_CHAINING - 447)) | (1L << (DB_FAILOVER - 447)) | (1L << (DECRYPTION - 447)) | (1L << (DEFAULT_DOUBLE_QUOTE - 447)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1L << (DEFAULT_LANGUAGE - 447)) | (1L << (DELAY - 447)) | (1L << (DELAYED_DURABILITY - 447)) | (1L << (DELETED - 447)) | (1L << (DENSE_RANK - 447)) | (1L << (DEPENDENTS - 447)) | (1L << (DES - 447)) | (1L << (DESCRIPTION - 447)) | (1L << (DESX - 447)) | (1L << (DHCP - 447)) | (1L << (DIALOG - 447)) | (1L << (DIRECTORY_NAME - 447)) | (1L << (DISABLE - 447)) | (1L << (DISABLE_BROKER - 447)) | (1L << (DISABLED - 447)) | (1L << (DISK_DRIVE - 447)) | (1L << (DOCUMENT - 447)) | (1L << (DYNAMIC - 447)) | (1L << (EMERGENCY - 447)) | (1L << (EMPTY - 447)) | (1L << (ENABLE - 447)) | (1L << (ENABLE_BROKER - 447)) | (1L << (ENCRYPTED_VALUE - 447)) | (1L << (ENCRYPTION - 447)) | (1L << (ENDPOINT_URL - 447)) | (1L << (ERROR_BROKER_CONVERSATIONS - 447)) | (1L << (EXCLUSIVE - 447)) | (1L << (EXECUTABLE - 447)) | (1L << (EXIST - 447)) | (1L << (EXPAND - 447)) | (1L << (EXPIRY_DATE - 447)) | (1L << (EXPLICIT - 447)) | (1L << (FAIL_OPERATION - 447)) | (1L << (FAILOVER_MODE - 447)) | (1L << (FAILURE - 447)) | (1L << (FAILURE_CONDITION_LEVEL - 447)) | (1L << (FAST - 447)) | (1L << (FAST_FORWARD - 447)) | (1L << (FILEGROUP - 447)) | (1L << (FILEGROWTH - 447)) | (1L << (FILEPATH - 447)) | (1L << (FILESTREAM - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (FILTER - 511)) | (1L << (FIRST - 511)) | (1L << (FIRST_VALUE - 511)) | (1L << (FOLLOWING - 511)) | (1L << (FORCE - 511)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1L << (FORCED - 511)) | (1L << (FORMAT - 511)) | (1L << (FORWARD_ONLY - 511)) | (1L << (FULLSCAN - 511)) | (1L << (FULLTEXT - 511)) | (1L << (GB - 511)) | (1L << (GETDATE - 511)) | (1L << (GETUTCDATE - 511)) | (1L << (GLOBAL - 511)) | (1L << (GO - 511)) | (1L << (GROUP_MAX_REQUESTS - 511)) | (1L << (GROUPING - 511)) | (1L << (GROUPING_ID - 511)) | (1L << (HADR - 511)) | (1L << (HASH - 511)) | (1L << (HEALTH_CHECK_TIMEOUT - 511)) | (1L << (HIGH - 511)) | (1L << (HONOR_BROKER_PRIORITY - 511)) | (1L << (HOURS - 511)) | (1L << (IDENTITY_VALUE - 511)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1L << (IMMEDIATE - 511)) | (1L << (IMPERSONATE - 511)) | (1L << (IMPORTANCE - 511)) | (1L << (INCREMENTAL - 511)) | (1L << (INITIATOR - 511)) | (1L << (INPUT - 511)) | (1L << (INSENSITIVE - 511)) | (1L << (INSERTED - 511)) | (1L << (INT - 511)) | (1L << (IP - 511)) | (1L << (ISOLATION - 511)) | (1L << (KB - 511)) | (1L << (KEEP - 511)) | (1L << (KEEPFIXED - 511)) | (1L << (KEY_SOURCE - 511)) | (1L << (KEYS - 511)) | (1L << (KEYSET - 511)) | (1L << (LAG - 511)) | (1L << (LAST - 511)) | (1L << (LAST_VALUE - 511)) | (1L << (LEAD - 511)) | (1L << (LEVEL - 511)) | (1L << (LIST - 511)) | (1L << (LISTENER - 511)) | (1L << (LISTENER_URL - 511)) | (1L << (LOB_COMPACTION - 511)) | (1L << (LOCAL - 511)) | (1L << (LOCATION - 511)) | (1L << (LOCK - 511)) | (1L << (LOCK_ESCALATION - 511)) | (1L << (LOGIN - 511)) | (1L << (LOOP - 511)) | (1L << (LOW - 511)) | (1L << (MANUAL - 511)) | (1L << (MARK - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (MATERIALIZED - 575)) | (1L << (MAX - 575)) | (1L << (MAX_CPU_PERCENT - 575)) | (1L << (MAX_DOP - 575)) | (1L << (MAX_FILES - 575)) | (1L << (MAX_IOPS_PER_VOLUME - 575)) | (1L << (MAX_MEMORY_PERCENT - 575)) | (1L << (MAX_PROCESSES - 575)) | (1L << (MAX_QUEUE_READERS - 575)) | (1L << (MAX_ROLLOVER_FILES - 575)) | (1L << (MAXDOP - 575)) | (1L << (MAXRECURSION - 575)) | (1L << (MAXSIZE - 575)) | (1L << (MB - 575)) | (1L << (MEDIUM - 575)) | (1L << (MEMORY_OPTIMIZED_DATA - 575)) | (1L << (MESSAGE - 575)) | (1L << (MIN - 575)) | (1L << (MIN_ACTIVE_ROWVERSION - 575)) | (1L << (MIN_CPU_PERCENT - 575)) | (1L << (MIN_IOPS_PER_VOLUME - 575)) | (1L << (MIN_MEMORY_PERCENT - 575)) | (1L << (MINUTES - 575)) | (1L << (MIRROR_ADDRESS - 575)) | (1L << (MIXED_PAGE_ALLOCATION - 575)) | (1L << (MODE - 575)) | (1L << (MODIFY - 575)) | (1L << (MOVE - 575)) | (1L << (MULTI_USER - 575)) | (1L << (NAME - 575)) | (1L << (NESTED_TRIGGERS - 575)) | (1L << (NEW_ACCOUNT - 575)) | (1L << (NEW_BROKER - 575)) | (1L << (NEW_PASSWORD - 575)) | (1L << (NEXT - 575)) | (1L << (NO - 575)) | (1L << (NO_TRUNCATE - 575)) | (1L << (NO_WAIT - 575)) | (1L << (NOCOUNT - 575)) | (1L << (NODES - 575)) | (1L << (NOEXPAND - 575)) | (1L << (NON_TRANSACTED_ACCESS - 575)) | (1L << (NORECOMPUTE - 575)) | (1L << (NORECOVERY - 575)) | (1L << (NOWAIT - 575)) | (1L << (NTILE - 575)) | (1L << (NUMANODE - 575)) | (1L << (NUMBER - 575)) | (1L << (NUMERIC_ROUNDABORT - 575)) | (1L << (OBJECT - 575)) | (1L << (OFFLINE - 575)) | (1L << (OFFSET - 575)) | (1L << (OLD_ACCOUNT - 575)) | (1L << (ONLINE - 575)) | (1L << (ONLY - 575)) | (1L << (OPEN_EXISTING - 575)) | (1L << (OPTIMISTIC - 575)) | (1L << (OPTIMIZE - 575)) | (1L << (OUT - 575)) | (1L << (OUTPUT - 575)) | (1L << (OWNER - 575)) | (1L << (PAGE_VERIFY - 575)) | (1L << (PARAMETERIZATION - 575)) | (1L << (PARTITION - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (PARTITIONS - 639)) | (1L << (PARTNER - 639)) | (1L << (PATH - 639)) | (1L << (POISON_MESSAGE_HANDLING - 639)) | (1L << (POOL - 639)) | (1L << (PORT - 639)) | (1L << (PRECEDING - 639)) | (1L << (PRIMARY_ROLE - 639)) | (1L << (PRIOR - 639)) | (1L << (PRIORITY - 639)) | (1L << (PRIORITY_LEVEL - 639)) | (1L << (PRIVATE - 639)) | (1L << (PRIVATE_KEY - 639)) | (1L << (PRIVILEGES - 639)) | (1L << (PROCEDURE_NAME - 639)) | (1L << (PROPERTY - 639)) | (1L << (PROVIDER - 639)) | (1L << (PROVIDER_KEY_NAME - 639)) | (1L << (QUERY - 639)) | (1L << (QUEUE - 639)) | (1L << (QUEUE_DELAY - 639)) | (1L << (QUOTED_IDENTIFIER - 639)) | (1L << (RANGE - 639)) | (1L << (RANK - 639)) | (1L << (RC2 - 639)) | (1L << (RC4 - 639)) | (1L << (RC4_128 - 639)) | (1L << (READ_COMMITTED_SNAPSHOT - 639)) | (1L << (READ_ONLY - 639)) | (1L << (READ_ONLY_ROUTING_LIST - 639)) | (1L << (READ_WRITE - 639)) | (1L << (READONLY - 639)) | (1L << (REBUILD - 639)) | (1L << (RECEIVE - 639)) | (1L << (RECOMPILE - 639)) | (1L << (RECOVERY - 639)) | (1L << (RECURSIVE_TRIGGERS - 639)) | (1L << (RELATIVE - 639)) | (1L << (REMOTE - 639)) | (1L << (REMOTE_SERVICE_NAME - 639)) | (1L << (REMOVE - 639)) | (1L << (REORGANIZE - 639)) | (1L << (REPEATABLE - 639)) | (1L << (REPLICA - 639)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 639)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 639)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 639)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 639)) | (1L << (RESERVE_DISK_SPACE - 639)) | (1L << (RESOURCE - 639)) | (1L << (RESOURCE_MANAGER_LOCATION - 639)) | (1L << (RESTRICTED_USER - 639)) | (1L << (RETENTION - 639)) | (1L << (ROBUST - 639)) | (1L << (ROOT - 639)) | (1L << (ROUTE - 639)) | (1L << (ROW - 639)) | (1L << (ROW_NUMBER - 639)) | (1L << (ROWGUID - 639)) | (1L << (ROWS - 639)) | (1L << (SAMPLE - 639)) | (1L << (SCHEMABINDING - 639)) | (1L << (SCOPED - 639)) | (1L << (SCROLL - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (SCROLL_LOCKS - 703)) | (1L << (SEARCH - 703)) | (1L << (SECONDARY - 703)) | (1L << (SECONDARY_ONLY - 703)) | (1L << (SECONDARY_ROLE - 703)) | (1L << (SECONDS - 703)) | (1L << (SECRET - 703)) | (1L << (SECURITY_LOG - 703)) | (1L << (SEEDING_MODE - 703)) | (1L << (SELF - 703)) | (1L << (SEMI_SENSITIVE - 703)) | (1L << (SEND - 703)) | (1L << (SENT - 703)) | (1L << (SERIALIZABLE - 703)) | (1L << (SESSION_TIMEOUT - 703)) | (1L << (SETERROR - 703)) | (1L << (SHARE - 703)) | (1L << (SHOWPLAN - 703)) | (1L << (SIGNATURE - 703)) | (1L << (SIMPLE - 703)) | (1L << (SINGLE_USER - 703)) | (1L << (SIZE - 703)) | (1L << (SMALLINT - 703)) | (1L << (SNAPSHOT - 703)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 703)) | (1L << (STANDBY - 703)) | (1L << (START_DATE - 703)) | (1L << (STATIC - 703)) | (1L << (STATS_STREAM - 703)) | (1L << (STATUS - 703)) | (1L << (STDEV - 703)) | (1L << (STDEVP - 703)) | (1L << (STOPLIST - 703)) | (1L << (STUFF - 703)) | (1L << (SUBJECT - 703)) | (1L << (SUM - 703)) | (1L << (SUSPEND - 703)) | (1L << (SYMMETRIC - 703)) | (1L << (SYNCHRONOUS_COMMIT - 703)) | (1L << (SYNONYM - 703)) | (1L << (TAKE - 703)) | (1L << (TARGET_RECOVERY_TIME - 703)) | (1L << (TB - 703)) | (1L << (TEXTIMAGE_ON - 703)) | (1L << (THROW - 703)) | (1L << (TIES - 703)) | (1L << (TIME - 703)) | (1L << (TIMEOUT - 703)) | (1L << (TIMER - 703)) | (1L << (TINYINT - 703)) | (1L << (TORN_PAGE_DETECTION - 703)) | (1L << (TRANSFORM_NOISE_WORDS - 703)) | (1L << (TRIPLE_DES - 703)) | (1L << (TRIPLE_DES_3KEY - 703)) | (1L << (TRUSTWORTHY - 703)) | (1L << (TRY - 703)) | (1L << (TSQL - 703)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 703)) | (1L << (TYPE - 703)) | (1L << (TYPE_WARNING - 703)) | (1L << (UNBOUNDED - 703)) | (1L << (UNCOMMITTED - 703)) | (1L << (UNKNOWN - 703)) | (1L << (UNLIMITED - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (USING - 767)) | (1L << (VALID_XML - 767)) | (1L << (VALIDATION - 767)) | (1L << (VALUE - 767)) | (1L << (VAR - 767)) | (1L << (VARP - 767)) | (1L << (VIEW_METADATA - 767)) | (1L << (VIEWS - 767)) | (1L << (WAIT - 767)) | (1L << (WELL_FORMED_XML - 767)) | (1L << (WORK - 767)) | (1L << (WORKLOAD - 767)) | (1L << (XML - 767)) | (1L << (XMLNAMESPACES - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)))) != 0) );
			setState(5667);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conversation_statementContext extends ParserRuleContext {
		public Begin_conversation_timerContext begin_conversation_timer() {
			return getRuleContext(Begin_conversation_timerContext.class,0);
		}
		public Begin_conversation_dialogContext begin_conversation_dialog() {
			return getRuleContext(Begin_conversation_dialogContext.class,0);
		}
		public End_conversationContext end_conversation() {
			return getRuleContext(End_conversationContext.class,0);
		}
		public Get_conversationContext get_conversation() {
			return getRuleContext(Get_conversationContext.class,0);
		}
		public Send_conversationContext send_conversation() {
			return getRuleContext(Send_conversationContext.class,0);
		}
		public Waitfor_conversationContext waitfor_conversation() {
			return getRuleContext(Waitfor_conversationContext.class,0);
		}
		public Conversation_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conversation_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterConversation_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitConversation_statement(this);
		}
	}

	public final Conversation_statementContext conversation_statement() throws RecognitionException {
		Conversation_statementContext _localctx = new Conversation_statementContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_conversation_statement);
		try {
			setState(5675);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,697,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5669);
				begin_conversation_timer();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5670);
				begin_conversation_dialog();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5671);
				end_conversation();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5672);
				get_conversation();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5673);
				send_conversation();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5674);
				waitfor_conversation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Message_statementContext extends ParserRuleContext {
		public IdContext message_type_name;
		public IdContext owner_name;
		public IdContext schema_collection_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode MESSAGE() { return getToken(TSqlParser.MESSAGE, 0); }
		public TerminalNode TYPE() { return getToken(TSqlParser.TYPE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode VALIDATION() { return getToken(TSqlParser.VALIDATION, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode NONE() { return getToken(TSqlParser.NONE, 0); }
		public TerminalNode EMPTY() { return getToken(TSqlParser.EMPTY, 0); }
		public TerminalNode WELL_FORMED_XML() { return getToken(TSqlParser.WELL_FORMED_XML, 0); }
		public TerminalNode VALID_XML() { return getToken(TSqlParser.VALID_XML, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode SCHEMA() { return getToken(TSqlParser.SCHEMA, 0); }
		public TerminalNode COLLECTION() { return getToken(TSqlParser.COLLECTION, 0); }
		public Message_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_message_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterMessage_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitMessage_statement(this);
		}
	}

	public final Message_statementContext message_statement() throws RecognitionException {
		Message_statementContext _localctx = new Message_statementContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_message_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5677);
			match(CREATE);
			setState(5678);
			match(MESSAGE);
			setState(5679);
			match(TYPE);
			setState(5680);
			((Message_statementContext)_localctx).message_type_name = id();
			setState(5683);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(5681);
				match(AUTHORIZATION);
				setState(5682);
				((Message_statementContext)_localctx).owner_name = id();
				}
			}

			{
			setState(5685);
			match(VALIDATION);
			setState(5686);
			match(EQUAL);
			setState(5695);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NONE:
				{
				setState(5687);
				match(NONE);
				}
				break;
			case EMPTY:
				{
				setState(5688);
				match(EMPTY);
				}
				break;
			case WELL_FORMED_XML:
				{
				setState(5689);
				match(WELL_FORMED_XML);
				}
				break;
			case VALID_XML:
				{
				setState(5690);
				match(VALID_XML);
				setState(5691);
				match(WITH);
				setState(5692);
				match(SCHEMA);
				setState(5693);
				match(COLLECTION);
				setState(5694);
				((Message_statementContext)_localctx).schema_collection_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_statementContext extends ParserRuleContext {
		public TerminalNode MERGE() { return getToken(TSqlParser.MERGE, 0); }
		public Ddl_objectContext ddl_object() {
			return getRuleContext(Ddl_objectContext.class,0);
		}
		public TerminalNode USING() { return getToken(TSqlParser.USING, 0); }
		public Table_sourcesContext table_sources() {
			return getRuleContext(Table_sourcesContext.class,0);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public List<Search_conditionContext> search_condition() {
			return getRuleContexts(Search_conditionContext.class);
		}
		public Search_conditionContext search_condition(int i) {
			return getRuleContext(Search_conditionContext.class,i);
		}
		public With_expressionContext with_expression() {
			return getRuleContext(With_expressionContext.class,0);
		}
		public TerminalNode TOP() { return getToken(TSqlParser.TOP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode INTO() { return getToken(TSqlParser.INTO, 0); }
		public Insert_with_table_hintsContext insert_with_table_hints() {
			return getRuleContext(Insert_with_table_hintsContext.class,0);
		}
		public As_table_aliasContext as_table_alias() {
			return getRuleContext(As_table_aliasContext.class,0);
		}
		public List<TerminalNode> WHEN() { return getTokens(TSqlParser.WHEN); }
		public TerminalNode WHEN(int i) {
			return getToken(TSqlParser.WHEN, i);
		}
		public List<TerminalNode> MATCHED() { return getTokens(TSqlParser.MATCHED); }
		public TerminalNode MATCHED(int i) {
			return getToken(TSqlParser.MATCHED, i);
		}
		public List<TerminalNode> THEN() { return getTokens(TSqlParser.THEN); }
		public TerminalNode THEN(int i) {
			return getToken(TSqlParser.THEN, i);
		}
		public List<Merge_matchedContext> merge_matched() {
			return getRuleContexts(Merge_matchedContext.class);
		}
		public Merge_matchedContext merge_matched(int i) {
			return getRuleContext(Merge_matchedContext.class,i);
		}
		public List<TerminalNode> NOT() { return getTokens(TSqlParser.NOT); }
		public TerminalNode NOT(int i) {
			return getToken(TSqlParser.NOT, i);
		}
		public Merge_not_matchedContext merge_not_matched() {
			return getRuleContext(Merge_not_matchedContext.class,0);
		}
		public List<TerminalNode> BY() { return getTokens(TSqlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(TSqlParser.BY, i);
		}
		public List<TerminalNode> SOURCE() { return getTokens(TSqlParser.SOURCE); }
		public TerminalNode SOURCE(int i) {
			return getToken(TSqlParser.SOURCE, i);
		}
		public Output_clauseContext output_clause() {
			return getRuleContext(Output_clauseContext.class,0);
		}
		public Option_clauseContext option_clause() {
			return getRuleContext(Option_clauseContext.class,0);
		}
		public TerminalNode PERCENT() { return getToken(TSqlParser.PERCENT, 0); }
		public List<TerminalNode> AND() { return getTokens(TSqlParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(TSqlParser.AND, i);
		}
		public TerminalNode TARGET() { return getToken(TSqlParser.TARGET, 0); }
		public Merge_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterMerge_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitMerge_statement(this);
		}
	}

	public final Merge_statementContext merge_statement() throws RecognitionException {
		Merge_statementContext _localctx = new Merge_statementContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_merge_statement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5698);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5697);
				with_expression();
				}
			}

			setState(5700);
			match(MERGE);
			setState(5708);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TOP) {
				{
				setState(5701);
				match(TOP);
				setState(5702);
				match(LR_BRACKET);
				setState(5703);
				expression(0);
				setState(5704);
				match(RR_BRACKET);
				setState(5706);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERCENT) {
					{
					setState(5705);
					match(PERCENT);
					}
				}

				}
			}

			setState(5711);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(5710);
				match(INTO);
				}
			}

			setState(5713);
			ddl_object();
			setState(5715);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5714);
				insert_with_table_hints();
				}
			}

			setState(5718);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,705,_ctx) ) {
			case 1:
				{
				setState(5717);
				as_table_alias();
				}
				break;
			}
			setState(5720);
			match(USING);
			setState(5721);
			table_sources();
			setState(5722);
			match(ON);
			setState(5723);
			search_condition();
			setState(5734);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,707,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5724);
					match(WHEN);
					setState(5725);
					match(MATCHED);
					setState(5728);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AND) {
						{
						setState(5726);
						match(AND);
						setState(5727);
						search_condition();
						}
					}

					setState(5730);
					match(THEN);
					setState(5731);
					merge_matched();
					}
					} 
				}
				setState(5736);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,707,_ctx);
			}
			setState(5750);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,710,_ctx) ) {
			case 1:
				{
				setState(5737);
				match(WHEN);
				setState(5738);
				match(NOT);
				setState(5739);
				match(MATCHED);
				setState(5742);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BY) {
					{
					setState(5740);
					match(BY);
					setState(5741);
					match(TARGET);
					}
				}

				setState(5746);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AND) {
					{
					setState(5744);
					match(AND);
					setState(5745);
					search_condition();
					}
				}

				setState(5748);
				match(THEN);
				setState(5749);
				merge_not_matched();
				}
				break;
			}
			setState(5765);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==WHEN) {
				{
				{
				setState(5752);
				match(WHEN);
				setState(5753);
				match(NOT);
				setState(5754);
				match(MATCHED);
				setState(5755);
				match(BY);
				setState(5756);
				match(SOURCE);
				setState(5759);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AND) {
					{
					setState(5757);
					match(AND);
					setState(5758);
					search_condition();
					}
				}

				setState(5761);
				match(THEN);
				setState(5762);
				merge_matched();
				}
				}
				setState(5767);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5769);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OUTPUT) {
				{
				setState(5768);
				output_clause();
				}
			}

			setState(5772);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTION) {
				{
				setState(5771);
				option_clause();
				}
			}

			setState(5774);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_matchedContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(TSqlParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(TSqlParser.SET, 0); }
		public List<Update_elemContext> update_elem() {
			return getRuleContexts(Update_elemContext.class);
		}
		public Update_elemContext update_elem(int i) {
			return getRuleContext(Update_elemContext.class,i);
		}
		public TerminalNode DELETE() { return getToken(TSqlParser.DELETE, 0); }
		public Merge_matchedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_matched; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterMerge_matched(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitMerge_matched(this);
		}
	}

	public final Merge_matchedContext merge_matched() throws RecognitionException {
		Merge_matchedContext _localctx = new Merge_matchedContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_merge_matched);
		int _la;
		try {
			setState(5787);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UPDATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5776);
				match(UPDATE);
				setState(5777);
				match(SET);
				setState(5778);
				update_elem();
				setState(5783);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5779);
					match(COMMA);
					setState(5780);
					update_elem();
					}
					}
					setState(5785);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case DELETE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5786);
				match(DELETE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_not_matchedContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(TSqlParser.INSERT, 0); }
		public Table_value_constructorContext table_value_constructor() {
			return getRuleContext(Table_value_constructorContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public TerminalNode VALUES() { return getToken(TSqlParser.VALUES, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Merge_not_matchedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_not_matched; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterMerge_not_matched(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitMerge_not_matched(this);
		}
	}

	public final Merge_not_matchedContext merge_not_matched() throws RecognitionException {
		Merge_not_matchedContext _localctx = new Merge_not_matchedContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_merge_not_matched);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5789);
			match(INSERT);
			setState(5794);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(5790);
				match(LR_BRACKET);
				setState(5791);
				column_name_list();
				setState(5792);
				match(RR_BRACKET);
				}
			}

			setState(5799);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VALUES:
				{
				setState(5796);
				table_value_constructor();
				}
				break;
			case DEFAULT:
				{
				setState(5797);
				match(DEFAULT);
				setState(5798);
				match(VALUES);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delete_statementContext extends ParserRuleContext {
		public Token cursor_var;
		public TerminalNode DELETE() { return getToken(TSqlParser.DELETE, 0); }
		public Delete_statement_fromContext delete_statement_from() {
			return getRuleContext(Delete_statement_fromContext.class,0);
		}
		public With_expressionContext with_expression() {
			return getRuleContext(With_expressionContext.class,0);
		}
		public TerminalNode TOP() { return getToken(TSqlParser.TOP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public List<TerminalNode> FROM() { return getTokens(TSqlParser.FROM); }
		public TerminalNode FROM(int i) {
			return getToken(TSqlParser.FROM, i);
		}
		public Insert_with_table_hintsContext insert_with_table_hints() {
			return getRuleContext(Insert_with_table_hintsContext.class,0);
		}
		public Output_clauseContext output_clause() {
			return getRuleContext(Output_clauseContext.class,0);
		}
		public Table_sourcesContext table_sources() {
			return getRuleContext(Table_sourcesContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(TSqlParser.WHERE, 0); }
		public For_clauseContext for_clause() {
			return getRuleContext(For_clauseContext.class,0);
		}
		public Option_clauseContext option_clause() {
			return getRuleContext(Option_clauseContext.class,0);
		}
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode CURRENT() { return getToken(TSqlParser.CURRENT, 0); }
		public TerminalNode OF() { return getToken(TSqlParser.OF, 0); }
		public TerminalNode PERCENT() { return getToken(TSqlParser.PERCENT, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public TerminalNode GLOBAL() { return getToken(TSqlParser.GLOBAL, 0); }
		public Delete_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDelete_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDelete_statement(this);
		}
	}

	public final Delete_statementContext delete_statement() throws RecognitionException {
		Delete_statementContext _localctx = new Delete_statementContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_delete_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5802);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5801);
				with_expression();
				}
			}

			setState(5804);
			match(DELETE);
			setState(5814);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,721,_ctx) ) {
			case 1:
				{
				setState(5805);
				match(TOP);
				setState(5806);
				match(LR_BRACKET);
				setState(5807);
				expression(0);
				setState(5808);
				match(RR_BRACKET);
				setState(5810);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERCENT) {
					{
					setState(5809);
					match(PERCENT);
					}
				}

				}
				break;
			case 2:
				{
				setState(5812);
				match(TOP);
				setState(5813);
				match(DECIMAL);
				}
				break;
			}
			setState(5817);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(5816);
				match(FROM);
				}
			}

			setState(5819);
			delete_statement_from();
			setState(5821);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,723,_ctx) ) {
			case 1:
				{
				setState(5820);
				insert_with_table_hints();
				}
				break;
			}
			setState(5824);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,724,_ctx) ) {
			case 1:
				{
				setState(5823);
				output_clause();
				}
				break;
			}
			setState(5828);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(5826);
				match(FROM);
				setState(5827);
				table_sources();
				}
			}

			setState(5843);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(5830);
				match(WHERE);
				setState(5841);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BLOCKING_HIERARCHY:
				case CALLED:
				case CASE:
				case COALESCE:
				case CONVERT:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DATA_COMPRESSION:
				case DEFAULT:
				case EVENTDATA:
				case EXISTS:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case IDENTITY:
				case INIT:
				case ISNULL:
				case KEY:
				case LEFT:
				case MASTER:
				case MAX_MEMORY:
				case NOT:
				case NULL:
				case NULLIF:
				case OFFSETS:
				case OVER:
				case PAGE:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case RIGHT:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SESSION_USER:
				case SID:
				case SOURCE:
				case STATE:
				case START:
				case SYSTEM_USER:
				case TARGET:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case LOCAL_ID:
				case DECIMAL:
				case ID:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case LR_BRACKET:
				case PLUS:
				case MINUS:
				case BIT_NOT:
					{
					setState(5831);
					search_condition();
					}
					break;
				case CURRENT:
					{
					setState(5832);
					match(CURRENT);
					setState(5833);
					match(OF);
					setState(5839);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,727,_ctx) ) {
					case 1:
						{
						setState(5835);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,726,_ctx) ) {
						case 1:
							{
							setState(5834);
							match(GLOBAL);
							}
							break;
						}
						setState(5837);
						cursor_name();
						}
						break;
					case 2:
						{
						setState(5838);
						((Delete_statementContext)_localctx).cursor_var = match(LOCAL_ID);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(5846);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(5845);
				for_clause();
				}
			}

			setState(5849);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTION) {
				{
				setState(5848);
				option_clause();
				}
			}

			setState(5852);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,732,_ctx) ) {
			case 1:
				{
				setState(5851);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delete_statement_fromContext extends ParserRuleContext {
		public Token table_var;
		public Ddl_objectContext ddl_object() {
			return getRuleContext(Ddl_objectContext.class,0);
		}
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return getRuleContext(Rowset_function_limitedContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Delete_statement_fromContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_statement_from; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDelete_statement_from(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDelete_statement_from(this);
		}
	}

	public final Delete_statement_fromContext delete_statement_from() throws RecognitionException {
		Delete_statement_fromContext _localctx = new Delete_statement_fromContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_delete_statement_from);
		try {
			setState(5858);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,733,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5854);
				ddl_object();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5855);
				table_alias();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5856);
				rowset_function_limited();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5857);
				((Delete_statement_fromContext)_localctx).table_var = match(LOCAL_ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_statementContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(TSqlParser.INSERT, 0); }
		public Insert_statement_valueContext insert_statement_value() {
			return getRuleContext(Insert_statement_valueContext.class,0);
		}
		public Ddl_objectContext ddl_object() {
			return getRuleContext(Ddl_objectContext.class,0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return getRuleContext(Rowset_function_limitedContext.class,0);
		}
		public With_expressionContext with_expression() {
			return getRuleContext(With_expressionContext.class,0);
		}
		public TerminalNode TOP() { return getToken(TSqlParser.TOP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode INTO() { return getToken(TSqlParser.INTO, 0); }
		public Insert_with_table_hintsContext insert_with_table_hints() {
			return getRuleContext(Insert_with_table_hintsContext.class,0);
		}
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Output_clauseContext output_clause() {
			return getRuleContext(Output_clauseContext.class,0);
		}
		public For_clauseContext for_clause() {
			return getRuleContext(For_clauseContext.class,0);
		}
		public Option_clauseContext option_clause() {
			return getRuleContext(Option_clauseContext.class,0);
		}
		public TerminalNode PERCENT() { return getToken(TSqlParser.PERCENT, 0); }
		public Insert_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterInsert_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitInsert_statement(this);
		}
	}

	public final Insert_statementContext insert_statement() throws RecognitionException {
		Insert_statementContext _localctx = new Insert_statementContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_insert_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5861);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5860);
				with_expression();
				}
			}

			setState(5863);
			match(INSERT);
			setState(5871);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TOP) {
				{
				setState(5864);
				match(TOP);
				setState(5865);
				match(LR_BRACKET);
				setState(5866);
				expression(0);
				setState(5867);
				match(RR_BRACKET);
				setState(5869);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERCENT) {
					{
					setState(5868);
					match(PERCENT);
					}
				}

				}
			}

			setState(5874);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(5873);
				match(INTO);
				}
			}

			setState(5878);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case START:
			case TARGET:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case ID:
				{
				setState(5876);
				ddl_object();
				}
				break;
			case OPENDATASOURCE:
			case OPENQUERY:
				{
				setState(5877);
				rowset_function_limited();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5881);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,739,_ctx) ) {
			case 1:
				{
				setState(5880);
				insert_with_table_hints();
				}
				break;
			}
			setState(5887);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,740,_ctx) ) {
			case 1:
				{
				setState(5883);
				match(LR_BRACKET);
				setState(5884);
				column_name_list();
				setState(5885);
				match(RR_BRACKET);
				}
				break;
			}
			setState(5890);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OUTPUT) {
				{
				setState(5889);
				output_clause();
				}
			}

			setState(5892);
			insert_statement_value();
			setState(5894);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(5893);
				for_clause();
				}
			}

			setState(5897);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTION) {
				{
				setState(5896);
				option_clause();
				}
			}

			setState(5900);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,744,_ctx) ) {
			case 1:
				{
				setState(5899);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_statement_valueContext extends ParserRuleContext {
		public Table_value_constructorContext table_value_constructor() {
			return getRuleContext(Table_value_constructorContext.class,0);
		}
		public Derived_tableContext derived_table() {
			return getRuleContext(Derived_tableContext.class,0);
		}
		public Execute_statementContext execute_statement() {
			return getRuleContext(Execute_statementContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public TerminalNode VALUES() { return getToken(TSqlParser.VALUES, 0); }
		public Insert_statement_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_statement_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterInsert_statement_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitInsert_statement_value(this);
		}
	}

	public final Insert_statement_valueContext insert_statement_value() throws RecognitionException {
		Insert_statement_valueContext _localctx = new Insert_statement_valueContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_insert_statement_value);
		try {
			setState(5907);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,745,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5902);
				table_value_constructor();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5903);
				derived_table();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5904);
				execute_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5905);
				match(DEFAULT);
				setState(5906);
				match(VALUES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Receive_statementContext extends ParserRuleContext {
		public IdContext table_variable;
		public Search_conditionContext where;
		public TerminalNode RECEIVE() { return getToken(TSqlParser.RECEIVE, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public TerminalNode ALL() { return getToken(TSqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(TSqlParser.DISTINCT, 0); }
		public Top_clauseContext top_clause() {
			return getRuleContext(Top_clauseContext.class,0);
		}
		public List<TerminalNode> LOCAL_ID() { return getTokens(TSqlParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(TSqlParser.LOCAL_ID, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode INTO() { return getToken(TSqlParser.INTO, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(TSqlParser.WHERE, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public Receive_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_receive_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterReceive_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitReceive_statement(this);
		}
	}

	public final Receive_statementContext receive_statement() throws RecognitionException {
		Receive_statementContext _localctx = new Receive_statementContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_receive_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5910);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(5909);
				match(LR_BRACKET);
				}
			}

			setState(5912);
			match(RECEIVE);
			setState(5917);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				{
				setState(5913);
				match(ALL);
				}
				break;
			case DISTINCT:
				{
				setState(5914);
				match(DISTINCT);
				}
				break;
			case TOP:
				{
				setState(5915);
				top_clause();
				}
				break;
			case STAR:
				{
				setState(5916);
				match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5927);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==LOCAL_ID) {
				{
				{
				setState(5919);
				match(LOCAL_ID);
				setState(5920);
				match(EQUAL);
				setState(5921);
				expression(0);
				setState(5923);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5922);
					match(COMMA);
					}
				}

				}
				}
				setState(5929);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5930);
			match(FROM);
			setState(5931);
			full_table_name();
			setState(5937);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(5932);
				match(INTO);
				setState(5933);
				((Receive_statementContext)_localctx).table_variable = id();
				{
				setState(5934);
				match(WHERE);
				setState(5935);
				((Receive_statementContext)_localctx).where = search_condition();
				}
				}
			}

			setState(5940);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RR_BRACKET) {
				{
				setState(5939);
				match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_statementContext extends ParserRuleContext {
		public Query_expressionContext query_expression() {
			return getRuleContext(Query_expressionContext.class,0);
		}
		public With_expressionContext with_expression() {
			return getRuleContext(With_expressionContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public For_clauseContext for_clause() {
			return getRuleContext(For_clauseContext.class,0);
		}
		public Option_clauseContext option_clause() {
			return getRuleContext(Option_clauseContext.class,0);
		}
		public Select_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSelect_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSelect_statement(this);
		}
	}

	public final Select_statementContext select_statement() throws RecognitionException {
		Select_statementContext _localctx = new Select_statementContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_select_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5943);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5942);
				with_expression();
				}
			}

			setState(5945);
			query_expression();
			setState(5947);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,753,_ctx) ) {
			case 1:
				{
				setState(5946);
				order_by_clause();
				}
				break;
			}
			setState(5950);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,754,_ctx) ) {
			case 1:
				{
				setState(5949);
				for_clause();
				}
				break;
			}
			setState(5953);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,755,_ctx) ) {
			case 1:
				{
				setState(5952);
				option_clause();
				}
				break;
			}
			setState(5956);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,756,_ctx) ) {
			case 1:
				{
				setState(5955);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TimeContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TimeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_time; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTime(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTime(this);
		}
	}

	public final TimeContext time() throws RecognitionException {
		TimeContext _localctx = new TimeContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_time);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5960);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOCAL_ID:
				{
				setState(5958);
				match(LOCAL_ID);
				}
				break;
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				{
				setState(5959);
				constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_statementContext extends ParserRuleContext {
		public Token cursor_var;
		public TerminalNode UPDATE() { return getToken(TSqlParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(TSqlParser.SET, 0); }
		public List<Update_elemContext> update_elem() {
			return getRuleContexts(Update_elemContext.class);
		}
		public Update_elemContext update_elem(int i) {
			return getRuleContext(Update_elemContext.class,i);
		}
		public Ddl_objectContext ddl_object() {
			return getRuleContext(Ddl_objectContext.class,0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return getRuleContext(Rowset_function_limitedContext.class,0);
		}
		public With_expressionContext with_expression() {
			return getRuleContext(With_expressionContext.class,0);
		}
		public TerminalNode TOP() { return getToken(TSqlParser.TOP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public With_table_hintsContext with_table_hints() {
			return getRuleContext(With_table_hintsContext.class,0);
		}
		public Output_clauseContext output_clause() {
			return getRuleContext(Output_clauseContext.class,0);
		}
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public Table_sourcesContext table_sources() {
			return getRuleContext(Table_sourcesContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(TSqlParser.WHERE, 0); }
		public For_clauseContext for_clause() {
			return getRuleContext(For_clauseContext.class,0);
		}
		public Option_clauseContext option_clause() {
			return getRuleContext(Option_clauseContext.class,0);
		}
		public Search_condition_listContext search_condition_list() {
			return getRuleContext(Search_condition_listContext.class,0);
		}
		public TerminalNode CURRENT() { return getToken(TSqlParser.CURRENT, 0); }
		public TerminalNode OF() { return getToken(TSqlParser.OF, 0); }
		public TerminalNode PERCENT() { return getToken(TSqlParser.PERCENT, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public TerminalNode GLOBAL() { return getToken(TSqlParser.GLOBAL, 0); }
		public Update_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterUpdate_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitUpdate_statement(this);
		}
	}

	public final Update_statementContext update_statement() throws RecognitionException {
		Update_statementContext _localctx = new Update_statementContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_update_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5963);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5962);
				with_expression();
				}
			}

			setState(5965);
			match(UPDATE);
			setState(5973);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TOP) {
				{
				setState(5966);
				match(TOP);
				setState(5967);
				match(LR_BRACKET);
				setState(5968);
				expression(0);
				setState(5969);
				match(RR_BRACKET);
				setState(5971);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERCENT) {
					{
					setState(5970);
					match(PERCENT);
					}
				}

				}
			}

			setState(5977);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case START:
			case TARGET:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case ID:
				{
				setState(5975);
				ddl_object();
				}
				break;
			case OPENDATASOURCE:
			case OPENQUERY:
				{
				setState(5976);
				rowset_function_limited();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5980);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH || _la==LR_BRACKET) {
				{
				setState(5979);
				with_table_hints();
				}
			}

			setState(5982);
			match(SET);
			setState(5983);
			update_elem();
			setState(5988);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5984);
				match(COMMA);
				setState(5985);
				update_elem();
				}
				}
				setState(5990);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5992);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,764,_ctx) ) {
			case 1:
				{
				setState(5991);
				output_clause();
				}
				break;
			}
			setState(5996);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(5994);
				match(FROM);
				setState(5995);
				table_sources();
				}
			}

			setState(6011);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(5998);
				match(WHERE);
				setState(6009);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BLOCKING_HIERARCHY:
				case CALLED:
				case CASE:
				case COALESCE:
				case CONVERT:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DATA_COMPRESSION:
				case DEFAULT:
				case EVENTDATA:
				case EXISTS:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case IDENTITY:
				case INIT:
				case ISNULL:
				case KEY:
				case LEFT:
				case MASTER:
				case MAX_MEMORY:
				case NOT:
				case NULL:
				case NULLIF:
				case OFFSETS:
				case OVER:
				case PAGE:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case RIGHT:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SESSION_USER:
				case SID:
				case SOURCE:
				case STATE:
				case START:
				case SYSTEM_USER:
				case TARGET:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case LOCAL_ID:
				case DECIMAL:
				case ID:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case LR_BRACKET:
				case PLUS:
				case MINUS:
				case BIT_NOT:
					{
					setState(5999);
					search_condition_list();
					}
					break;
				case CURRENT:
					{
					setState(6000);
					match(CURRENT);
					setState(6001);
					match(OF);
					setState(6007);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,767,_ctx) ) {
					case 1:
						{
						setState(6003);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,766,_ctx) ) {
						case 1:
							{
							setState(6002);
							match(GLOBAL);
							}
							break;
						}
						setState(6005);
						cursor_name();
						}
						break;
					case 2:
						{
						setState(6006);
						((Update_statementContext)_localctx).cursor_var = match(LOCAL_ID);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(6014);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(6013);
				for_clause();
				}
			}

			setState(6017);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTION) {
				{
				setState(6016);
				option_clause();
				}
			}

			setState(6020);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,772,_ctx) ) {
			case 1:
				{
				setState(6019);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Output_clauseContext extends ParserRuleContext {
		public TerminalNode OUTPUT() { return getToken(TSqlParser.OUTPUT, 0); }
		public List<Output_dml_list_elemContext> output_dml_list_elem() {
			return getRuleContexts(Output_dml_list_elemContext.class);
		}
		public Output_dml_list_elemContext output_dml_list_elem(int i) {
			return getRuleContext(Output_dml_list_elemContext.class,i);
		}
		public TerminalNode INTO() { return getToken(TSqlParser.INTO, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Output_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_output_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterOutput_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitOutput_clause(this);
		}
	}

	public final Output_clauseContext output_clause() throws RecognitionException {
		Output_clauseContext _localctx = new Output_clauseContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_output_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6022);
			match(OUTPUT);
			setState(6023);
			output_dml_list_elem();
			setState(6028);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6024);
				match(COMMA);
				setState(6025);
				output_dml_list_elem();
				}
				}
				setState(6030);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6042);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(6031);
				match(INTO);
				setState(6034);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LOCAL_ID:
					{
					setState(6032);
					match(LOCAL_ID);
					}
					break;
				case BLOCKING_HIERARCHY:
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SID:
				case SOURCE:
				case STATE:
				case START:
				case TARGET:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(6033);
					table_name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6040);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,775,_ctx) ) {
				case 1:
					{
					setState(6036);
					match(LR_BRACKET);
					setState(6037);
					column_name_list();
					setState(6038);
					match(RR_BRACKET);
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Output_dml_list_elemContext extends ParserRuleContext {
		public Output_column_nameContext output_column_name() {
			return getRuleContext(Output_column_nameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public As_column_aliasContext as_column_alias() {
			return getRuleContext(As_column_aliasContext.class,0);
		}
		public Output_dml_list_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_output_dml_list_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterOutput_dml_list_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitOutput_dml_list_elem(this);
		}
	}

	public final Output_dml_list_elemContext output_dml_list_elem() throws RecognitionException {
		Output_dml_list_elemContext _localctx = new Output_dml_list_elemContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_output_dml_list_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6046);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,777,_ctx) ) {
			case 1:
				{
				setState(6044);
				output_column_name();
				}
				break;
			case 2:
				{
				setState(6045);
				expression(0);
				}
				break;
			}
			setState(6049);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,778,_ctx) ) {
			case 1:
				{
				setState(6048);
				as_column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Output_column_nameContext extends ParserRuleContext {
		public TerminalNode DELETED() { return getToken(TSqlParser.DELETED, 0); }
		public TerminalNode INSERTED() { return getToken(TSqlParser.INSERTED, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode DOLLAR_ACTION() { return getToken(TSqlParser.DOLLAR_ACTION, 0); }
		public Output_column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_output_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterOutput_column_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitOutput_column_name(this);
		}
	}

	public final Output_column_nameContext output_column_name() throws RecognitionException {
		Output_column_nameContext _localctx = new Output_column_nameContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_output_column_name);
		try {
			setState(6062);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BLOCKING_HIERARCHY:
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case START:
			case TARGET:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(6054);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,779,_ctx) ) {
				case 1:
					{
					setState(6051);
					match(DELETED);
					}
					break;
				case 2:
					{
					setState(6052);
					match(INSERTED);
					}
					break;
				case 3:
					{
					setState(6053);
					table_name();
					}
					break;
				}
				setState(6056);
				match(DOT);
				setState(6059);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STAR:
					{
					setState(6057);
					match(STAR);
					}
					break;
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SID:
				case SOURCE:
				case STATE:
				case START:
				case TARGET:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(6058);
					id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DOLLAR_ACTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(6061);
				match(DOLLAR_ACTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_databaseContext extends ParserRuleContext {
		public IdContext database;
		public IdContext collation_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode CONTAINMENT() { return getToken(TSqlParser.CONTAINMENT, 0); }
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public List<Database_file_specContext> database_file_spec() {
			return getRuleContexts(Database_file_specContext.class);
		}
		public Database_file_specContext database_file_spec(int i) {
			return getRuleContext(Database_file_specContext.class,i);
		}
		public TerminalNode LOG() { return getToken(TSqlParser.LOG, 0); }
		public TerminalNode COLLATE() { return getToken(TSqlParser.COLLATE, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<Create_database_optionContext> create_database_option() {
			return getRuleContexts(Create_database_optionContext.class);
		}
		public Create_database_optionContext create_database_option(int i) {
			return getRuleContext(Create_database_optionContext.class,i);
		}
		public TerminalNode NONE() { return getToken(TSqlParser.NONE, 0); }
		public TerminalNode PARTIAL() { return getToken(TSqlParser.PARTIAL, 0); }
		public TerminalNode PRIMARY() { return getToken(TSqlParser.PRIMARY, 0); }
		public Create_databaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_database; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_database(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_database(this);
		}
	}

	public final Create_databaseContext create_database() throws RecognitionException {
		Create_databaseContext _localctx = new Create_databaseContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_create_database);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6064);
			match(CREATE);
			setState(6065);
			match(DATABASE);
			{
			setState(6066);
			((Create_databaseContext)_localctx).database = id();
			}
			setState(6070);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONTAINMENT) {
				{
				setState(6067);
				match(CONTAINMENT);
				setState(6068);
				match(EQUAL);
				setState(6069);
				_la = _input.LA(1);
				if ( !(_la==NONE || _la==PARTIAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(6084);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(6072);
				match(ON);
				setState(6074);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIMARY) {
					{
					setState(6073);
					match(PRIMARY);
					}
				}

				setState(6076);
				database_file_spec();
				setState(6081);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6077);
					match(COMMA);
					setState(6078);
					database_file_spec();
					}
					}
					setState(6083);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6096);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(6086);
				match(LOG);
				setState(6087);
				match(ON);
				setState(6088);
				database_file_spec();
				setState(6093);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6089);
					match(COMMA);
					setState(6090);
					database_file_spec();
					}
					}
					setState(6095);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6100);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLLATE) {
				{
				setState(6098);
				match(COLLATE);
				setState(6099);
				((Create_databaseContext)_localctx).collation_name = id();
				}
			}

			setState(6111);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,790,_ctx) ) {
			case 1:
				{
				setState(6102);
				match(WITH);
				setState(6103);
				create_database_option();
				setState(6108);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6104);
					match(COMMA);
					setState(6105);
					create_database_option();
					}
					}
					setState(6110);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_indexContext extends ParserRuleContext {
		public Search_conditionContext where;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode INDEX() { return getToken(TSqlParser.INDEX, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public Table_name_with_hintContext table_name_with_hint() {
			return getRuleContext(Table_name_with_hintContext.class,0);
		}
		public Column_name_list_with_orderContext column_name_list_with_order() {
			return getRuleContext(Column_name_list_with_orderContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(TSqlParser.UNIQUE, 0); }
		public ClusteredContext clustered() {
			return getRuleContext(ClusteredContext.class,0);
		}
		public TerminalNode INCLUDE() { return getToken(TSqlParser.INCLUDE, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(TSqlParser.WHERE, 0); }
		public Index_optionsContext index_options() {
			return getRuleContext(Index_optionsContext.class,0);
		}
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public Create_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_index(this);
		}
	}

	public final Create_indexContext create_index() throws RecognitionException {
		Create_indexContext _localctx = new Create_indexContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_create_index);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6113);
			match(CREATE);
			setState(6115);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNIQUE) {
				{
				setState(6114);
				match(UNIQUE);
				}
			}

			setState(6118);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CLUSTERED || _la==NONCLUSTERED) {
				{
				setState(6117);
				clustered();
				}
			}

			setState(6120);
			match(INDEX);
			setState(6121);
			id();
			setState(6122);
			match(ON);
			setState(6123);
			table_name_with_hint();
			setState(6124);
			match(LR_BRACKET);
			setState(6125);
			column_name_list_with_order();
			setState(6126);
			match(RR_BRACKET);
			setState(6132);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INCLUDE) {
				{
				setState(6127);
				match(INCLUDE);
				setState(6128);
				match(LR_BRACKET);
				setState(6129);
				column_name_list();
				setState(6130);
				match(RR_BRACKET);
				}
			}

			setState(6136);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(6134);
				match(WHERE);
				setState(6135);
				((Create_indexContext)_localctx).where = search_condition();
				}
			}

			setState(6139);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,795,_ctx) ) {
			case 1:
				{
				setState(6138);
				index_options();
				}
				break;
			}
			setState(6143);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(6141);
				match(ON);
				setState(6142);
				id();
				}
			}

			setState(6146);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,797,_ctx) ) {
			case 1:
				{
				setState(6145);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_alter_procedureContext extends ParserRuleContext {
		public Token proc;
		public Func_proc_nameContext func_proc_name() {
			return getRuleContext(Func_proc_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public Sql_clausesContext sql_clauses() {
			return getRuleContext(Sql_clausesContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode PROC() { return getToken(TSqlParser.PROC, 0); }
		public TerminalNode PROCEDURE() { return getToken(TSqlParser.PROCEDURE, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public List<Procedure_paramContext> procedure_param() {
			return getRuleContexts(Procedure_paramContext.class);
		}
		public Procedure_paramContext procedure_param(int i) {
			return getRuleContext(Procedure_paramContext.class,i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<Procedure_optionContext> procedure_option() {
			return getRuleContexts(Procedure_optionContext.class);
		}
		public Procedure_optionContext procedure_option(int i) {
			return getRuleContext(Procedure_optionContext.class,i);
		}
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode REPLICATION() { return getToken(TSqlParser.REPLICATION, 0); }
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode OR() { return getToken(TSqlParser.OR, 0); }
		public Create_or_alter_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_alter_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_or_alter_procedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_or_alter_procedure(this);
		}
	}

	public final Create_or_alter_procedureContext create_or_alter_procedure() throws RecognitionException {
		Create_or_alter_procedureContext _localctx = new Create_or_alter_procedureContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_create_or_alter_procedure);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6154);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CREATE:
				{
				{
				setState(6148);
				match(CREATE);
				setState(6151);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(6149);
					match(OR);
					setState(6150);
					match(ALTER);
					}
				}

				}
				}
				break;
			case ALTER:
				{
				setState(6153);
				match(ALTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6156);
			((Create_or_alter_procedureContext)_localctx).proc = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==PROC || _la==PROCEDURE) ) {
				((Create_or_alter_procedureContext)_localctx).proc = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6157);
			func_proc_name();
			setState(6160);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEMI) {
				{
				setState(6158);
				match(SEMI);
				setState(6159);
				match(DECIMAL);
				}
			}

			setState(6176);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL_ID || _la==LR_BRACKET) {
				{
				setState(6163);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(6162);
					match(LR_BRACKET);
					}
				}

				setState(6165);
				procedure_param();
				setState(6170);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6166);
					match(COMMA);
					setState(6167);
					procedure_param();
					}
					}
					setState(6172);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6174);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RR_BRACKET) {
					{
					setState(6173);
					match(RR_BRACKET);
					}
				}

				}
			}

			setState(6187);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6178);
				match(WITH);
				setState(6179);
				procedure_option();
				setState(6184);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6180);
					match(COMMA);
					setState(6181);
					procedure_option();
					}
					}
					setState(6186);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6191);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(6189);
				match(FOR);
				setState(6190);
				match(REPLICATION);
				}
			}

			setState(6193);
			match(AS);
			setState(6194);
			sql_clauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_alter_triggerContext extends ParserRuleContext {
		public Create_or_alter_dml_triggerContext create_or_alter_dml_trigger() {
			return getRuleContext(Create_or_alter_dml_triggerContext.class,0);
		}
		public Create_or_alter_ddl_triggerContext create_or_alter_ddl_trigger() {
			return getRuleContext(Create_or_alter_ddl_triggerContext.class,0);
		}
		public Create_or_alter_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_alter_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_or_alter_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_or_alter_trigger(this);
		}
	}

	public final Create_or_alter_triggerContext create_or_alter_trigger() throws RecognitionException {
		Create_or_alter_triggerContext _localctx = new Create_or_alter_triggerContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_create_or_alter_trigger);
		try {
			setState(6198);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,808,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6196);
				create_or_alter_dml_trigger();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6197);
				create_or_alter_ddl_trigger();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_alter_dml_triggerContext extends ParserRuleContext {
		public TerminalNode TRIGGER() { return getToken(TSqlParser.TRIGGER, 0); }
		public Simple_nameContext simple_name() {
			return getRuleContext(Simple_nameContext.class,0);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public List<Dml_trigger_operationContext> dml_trigger_operation() {
			return getRuleContexts(Dml_trigger_operationContext.class);
		}
		public Dml_trigger_operationContext dml_trigger_operation(int i) {
			return getRuleContext(Dml_trigger_operationContext.class,i);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public Sql_clausesContext sql_clauses() {
			return getRuleContext(Sql_clausesContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public List<TerminalNode> FOR() { return getTokens(TSqlParser.FOR); }
		public TerminalNode FOR(int i) {
			return getToken(TSqlParser.FOR, i);
		}
		public TerminalNode AFTER() { return getToken(TSqlParser.AFTER, 0); }
		public TerminalNode INSTEAD() { return getToken(TSqlParser.INSTEAD, 0); }
		public TerminalNode OF() { return getToken(TSqlParser.OF, 0); }
		public List<TerminalNode> WITH() { return getTokens(TSqlParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(TSqlParser.WITH, i);
		}
		public List<Dml_trigger_optionContext> dml_trigger_option() {
			return getRuleContexts(Dml_trigger_optionContext.class);
		}
		public Dml_trigger_optionContext dml_trigger_option(int i) {
			return getRuleContext(Dml_trigger_optionContext.class,i);
		}
		public TerminalNode APPEND() { return getToken(TSqlParser.APPEND, 0); }
		public TerminalNode NOT() { return getToken(TSqlParser.NOT, 0); }
		public TerminalNode REPLICATION() { return getToken(TSqlParser.REPLICATION, 0); }
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode OR() { return getToken(TSqlParser.OR, 0); }
		public Create_or_alter_dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_alter_dml_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_or_alter_dml_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_or_alter_dml_trigger(this);
		}
	}

	public final Create_or_alter_dml_triggerContext create_or_alter_dml_trigger() throws RecognitionException {
		Create_or_alter_dml_triggerContext _localctx = new Create_or_alter_dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_create_or_alter_dml_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6206);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CREATE:
				{
				{
				setState(6200);
				match(CREATE);
				setState(6203);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(6201);
					match(OR);
					setState(6202);
					match(ALTER);
					}
				}

				}
				}
				break;
			case ALTER:
				{
				setState(6205);
				match(ALTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6208);
			match(TRIGGER);
			setState(6209);
			simple_name();
			setState(6210);
			match(ON);
			setState(6211);
			table_name();
			setState(6221);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6212);
				match(WITH);
				setState(6213);
				dml_trigger_option();
				setState(6218);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6214);
					match(COMMA);
					setState(6215);
					dml_trigger_option();
					}
					}
					setState(6220);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6227);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				{
				setState(6223);
				match(FOR);
				}
				break;
			case AFTER:
				{
				setState(6224);
				match(AFTER);
				}
				break;
			case INSTEAD:
				{
				setState(6225);
				match(INSTEAD);
				setState(6226);
				match(OF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6229);
			dml_trigger_operation();
			setState(6234);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6230);
				match(COMMA);
				setState(6231);
				dml_trigger_operation();
				}
				}
				setState(6236);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6239);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6237);
				match(WITH);
				setState(6238);
				match(APPEND);
				}
			}

			setState(6244);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(6241);
				match(NOT);
				setState(6242);
				match(FOR);
				setState(6243);
				match(REPLICATION);
				}
			}

			setState(6246);
			match(AS);
			setState(6247);
			sql_clauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_trigger_optionContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public Execute_clauseContext execute_clause() {
			return getRuleContext(Execute_clauseContext.class,0);
		}
		public Dml_trigger_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_trigger_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDml_trigger_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDml_trigger_option(this);
		}
	}

	public final Dml_trigger_optionContext dml_trigger_option() throws RecognitionException {
		Dml_trigger_optionContext _localctx = new Dml_trigger_optionContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_dml_trigger_option);
		try {
			setState(6251);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENCRYPTION:
				enterOuterAlt(_localctx, 1);
				{
				setState(6249);
				match(ENCRYPTION);
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 2);
				{
				setState(6250);
				execute_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_trigger_operationContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(TSqlParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(TSqlParser.UPDATE, 0); }
		public TerminalNode DELETE() { return getToken(TSqlParser.DELETE, 0); }
		public Dml_trigger_operationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_trigger_operation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDml_trigger_operation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDml_trigger_operation(this);
		}
	}

	public final Dml_trigger_operationContext dml_trigger_operation() throws RecognitionException {
		Dml_trigger_operationContext _localctx = new Dml_trigger_operationContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_dml_trigger_operation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6253);
			_la = _input.LA(1);
			if ( !(_la==DELETE || _la==INSERT || _la==UPDATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_alter_ddl_triggerContext extends ParserRuleContext {
		public TerminalNode TRIGGER() { return getToken(TSqlParser.TRIGGER, 0); }
		public Simple_nameContext simple_name() {
			return getRuleContext(Simple_nameContext.class,0);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public Ddl_trigger_operationContext ddl_trigger_operation() {
			return getRuleContext(Ddl_trigger_operationContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public Sql_clausesContext sql_clauses() {
			return getRuleContext(Sql_clausesContext.class,0);
		}
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode AFTER() { return getToken(TSqlParser.AFTER, 0); }
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode ALL() { return getToken(TSqlParser.ALL, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<Dml_trigger_optionContext> dml_trigger_option() {
			return getRuleContexts(Dml_trigger_optionContext.class);
		}
		public Dml_trigger_optionContext dml_trigger_option(int i) {
			return getRuleContext(Dml_trigger_optionContext.class,i);
		}
		public List<Dml_trigger_operationContext> dml_trigger_operation() {
			return getRuleContexts(Dml_trigger_operationContext.class);
		}
		public Dml_trigger_operationContext dml_trigger_operation(int i) {
			return getRuleContext(Dml_trigger_operationContext.class,i);
		}
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode OR() { return getToken(TSqlParser.OR, 0); }
		public Create_or_alter_ddl_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_alter_ddl_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_or_alter_ddl_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_or_alter_ddl_trigger(this);
		}
	}

	public final Create_or_alter_ddl_triggerContext create_or_alter_ddl_trigger() throws RecognitionException {
		Create_or_alter_ddl_triggerContext _localctx = new Create_or_alter_ddl_triggerContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_create_or_alter_ddl_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6261);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CREATE:
				{
				{
				setState(6255);
				match(CREATE);
				setState(6258);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(6256);
					match(OR);
					setState(6257);
					match(ALTER);
					}
				}

				}
				}
				break;
			case ALTER:
				{
				setState(6260);
				match(ALTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6263);
			match(TRIGGER);
			setState(6264);
			simple_name();
			setState(6265);
			match(ON);
			setState(6269);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				{
				setState(6266);
				match(ALL);
				setState(6267);
				match(SERVER);
				}
				break;
			case DATABASE:
				{
				setState(6268);
				match(DATABASE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6280);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6271);
				match(WITH);
				setState(6272);
				dml_trigger_option();
				setState(6277);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6273);
					match(COMMA);
					setState(6274);
					dml_trigger_option();
					}
					}
					setState(6279);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6282);
			_la = _input.LA(1);
			if ( !(_la==FOR || _la==AFTER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6283);
			ddl_trigger_operation();
			setState(6288);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6284);
				match(COMMA);
				setState(6285);
				dml_trigger_operation();
				}
				}
				setState(6290);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6291);
			match(AS);
			setState(6292);
			sql_clauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ddl_trigger_operationContext extends ParserRuleContext {
		public Simple_idContext simple_id() {
			return getRuleContext(Simple_idContext.class,0);
		}
		public Ddl_trigger_operationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ddl_trigger_operation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDdl_trigger_operation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDdl_trigger_operation(this);
		}
	}

	public final Ddl_trigger_operationContext ddl_trigger_operation() throws RecognitionException {
		Ddl_trigger_operationContext _localctx = new Ddl_trigger_operationContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_ddl_trigger_operation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6294);
			simple_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_alter_functionContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(TSqlParser.FUNCTION, 0); }
		public Func_proc_nameContext func_proc_name() {
			return getRuleContext(Func_proc_nameContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public Func_body_returns_selectContext func_body_returns_select() {
			return getRuleContext(Func_body_returns_selectContext.class,0);
		}
		public Func_body_returns_tableContext func_body_returns_table() {
			return getRuleContext(Func_body_returns_tableContext.class,0);
		}
		public Func_body_returns_scalarContext func_body_returns_scalar() {
			return getRuleContext(Func_body_returns_scalarContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public List<Procedure_paramContext> procedure_param() {
			return getRuleContexts(Procedure_paramContext.class);
		}
		public Procedure_paramContext procedure_param(int i) {
			return getRuleContext(Procedure_paramContext.class,i);
		}
		public TerminalNode OR() { return getToken(TSqlParser.OR, 0); }
		public Create_or_alter_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_alter_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_or_alter_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_or_alter_function(this);
		}
	}

	public final Create_or_alter_functionContext create_or_alter_function() throws RecognitionException {
		Create_or_alter_functionContext _localctx = new Create_or_alter_functionContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_create_or_alter_function);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6302);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CREATE:
				{
				{
				setState(6296);
				match(CREATE);
				setState(6299);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(6297);
					match(OR);
					setState(6298);
					match(ALTER);
					}
				}

				}
				}
				break;
			case ALTER:
				{
				setState(6301);
				match(ALTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6304);
			match(FUNCTION);
			setState(6305);
			func_proc_name();
			setState(6319);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,827,_ctx) ) {
			case 1:
				{
				{
				setState(6306);
				match(LR_BRACKET);
				setState(6307);
				procedure_param();
				setState(6312);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6308);
					match(COMMA);
					setState(6309);
					procedure_param();
					}
					}
					setState(6314);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6315);
				match(RR_BRACKET);
				}
				}
				break;
			case 2:
				{
				setState(6317);
				match(LR_BRACKET);
				setState(6318);
				match(RR_BRACKET);
				}
				break;
			}
			setState(6324);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,828,_ctx) ) {
			case 1:
				{
				setState(6321);
				func_body_returns_select();
				}
				break;
			case 2:
				{
				setState(6322);
				func_body_returns_table();
				}
				break;
			case 3:
				{
				setState(6323);
				func_body_returns_scalar();
				}
				break;
			}
			setState(6327);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,829,_ctx) ) {
			case 1:
				{
				setState(6326);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_body_returns_selectContext extends ParserRuleContext {
		public TerminalNode RETURNS() { return getToken(TSqlParser.RETURNS, 0); }
		public TerminalNode TABLE() { return getToken(TSqlParser.TABLE, 0); }
		public TerminalNode RETURN() { return getToken(TSqlParser.RETURN, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<Function_optionContext> function_option() {
			return getRuleContexts(Function_optionContext.class);
		}
		public Function_optionContext function_option(int i) {
			return getRuleContext(Function_optionContext.class,i);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public Func_body_returns_selectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_body_returns_select; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterFunc_body_returns_select(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitFunc_body_returns_select(this);
		}
	}

	public final Func_body_returns_selectContext func_body_returns_select() throws RecognitionException {
		Func_body_returns_selectContext _localctx = new Func_body_returns_selectContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_func_body_returns_select);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6329);
			match(RETURNS);
			setState(6330);
			match(TABLE);
			setState(6340);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6331);
				match(WITH);
				setState(6332);
				function_option();
				setState(6337);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6333);
					match(COMMA);
					setState(6334);
					function_option();
					}
					}
					setState(6339);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6343);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(6342);
				match(AS);
				}
			}

			setState(6345);
			match(RETURN);
			setState(6351);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,833,_ctx) ) {
			case 1:
				{
				setState(6346);
				match(LR_BRACKET);
				setState(6347);
				select_statement();
				setState(6348);
				match(RR_BRACKET);
				}
				break;
			case 2:
				{
				setState(6350);
				select_statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_body_returns_tableContext extends ParserRuleContext {
		public TerminalNode RETURNS() { return getToken(TSqlParser.RETURNS, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Table_type_definitionContext table_type_definition() {
			return getRuleContext(Table_type_definitionContext.class,0);
		}
		public TerminalNode BEGIN() { return getToken(TSqlParser.BEGIN, 0); }
		public TerminalNode RETURN() { return getToken(TSqlParser.RETURN, 0); }
		public TerminalNode END() { return getToken(TSqlParser.END, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<Function_optionContext> function_option() {
			return getRuleContexts(Function_optionContext.class);
		}
		public Function_optionContext function_option(int i) {
			return getRuleContext(Function_optionContext.class,i);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public List<Sql_clauseContext> sql_clause() {
			return getRuleContexts(Sql_clauseContext.class);
		}
		public Sql_clauseContext sql_clause(int i) {
			return getRuleContext(Sql_clauseContext.class,i);
		}
		public Func_body_returns_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_body_returns_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterFunc_body_returns_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitFunc_body_returns_table(this);
		}
	}

	public final Func_body_returns_tableContext func_body_returns_table() throws RecognitionException {
		Func_body_returns_tableContext _localctx = new Func_body_returns_tableContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_func_body_returns_table);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6353);
			match(RETURNS);
			setState(6354);
			match(LOCAL_ID);
			setState(6355);
			table_type_definition();
			setState(6365);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6356);
				match(WITH);
				setState(6357);
				function_option();
				setState(6362);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6358);
					match(COMMA);
					setState(6359);
					function_option();
					}
					}
					setState(6364);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6368);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(6367);
				match(AS);
				}
			}

			setState(6370);
			match(BEGIN);
			setState(6374);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,837,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6371);
					sql_clause();
					}
					} 
				}
				setState(6376);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,837,_ctx);
			}
			setState(6377);
			match(RETURN);
			setState(6379);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEMI) {
				{
				setState(6378);
				match(SEMI);
				}
			}

			setState(6381);
			match(END);
			setState(6383);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,839,_ctx) ) {
			case 1:
				{
				setState(6382);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_body_returns_scalarContext extends ParserRuleContext {
		public ExpressionContext ret;
		public TerminalNode RETURNS() { return getToken(TSqlParser.RETURNS, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode BEGIN() { return getToken(TSqlParser.BEGIN, 0); }
		public TerminalNode RETURN() { return getToken(TSqlParser.RETURN, 0); }
		public TerminalNode END() { return getToken(TSqlParser.END, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<Function_optionContext> function_option() {
			return getRuleContexts(Function_optionContext.class);
		}
		public Function_optionContext function_option(int i) {
			return getRuleContext(Function_optionContext.class,i);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public List<Sql_clauseContext> sql_clause() {
			return getRuleContexts(Sql_clauseContext.class);
		}
		public Sql_clauseContext sql_clause(int i) {
			return getRuleContext(Sql_clauseContext.class,i);
		}
		public Func_body_returns_scalarContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_body_returns_scalar; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterFunc_body_returns_scalar(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitFunc_body_returns_scalar(this);
		}
	}

	public final Func_body_returns_scalarContext func_body_returns_scalar() throws RecognitionException {
		Func_body_returns_scalarContext _localctx = new Func_body_returns_scalarContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_func_body_returns_scalar);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6385);
			match(RETURNS);
			setState(6386);
			data_type();
			setState(6396);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6387);
				match(WITH);
				setState(6388);
				function_option();
				setState(6393);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6389);
					match(COMMA);
					setState(6390);
					function_option();
					}
					}
					setState(6395);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6399);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(6398);
				match(AS);
				}
			}

			setState(6401);
			match(BEGIN);
			setState(6405);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,843,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6402);
					sql_clause();
					}
					} 
				}
				setState(6407);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,843,_ctx);
			}
			setState(6408);
			match(RETURN);
			setState(6409);
			((Func_body_returns_scalarContext)_localctx).ret = expression(0);
			setState(6411);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEMI) {
				{
				setState(6410);
				match(SEMI);
				}
			}

			setState(6413);
			match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_paramContext extends ParserRuleContext {
		public Default_valueContext default_val;
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public TerminalNode VARYING() { return getToken(TSqlParser.VARYING, 0); }
		public Default_valueContext default_value() {
			return getRuleContext(Default_valueContext.class,0);
		}
		public TerminalNode OUT() { return getToken(TSqlParser.OUT, 0); }
		public TerminalNode OUTPUT() { return getToken(TSqlParser.OUTPUT, 0); }
		public TerminalNode READONLY() { return getToken(TSqlParser.READONLY, 0); }
		public Procedure_paramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_param; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterProcedure_param(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitProcedure_param(this);
		}
	}

	public final Procedure_paramContext procedure_param() throws RecognitionException {
		Procedure_paramContext _localctx = new Procedure_paramContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_procedure_param);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6415);
			match(LOCAL_ID);
			setState(6419);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,845,_ctx) ) {
			case 1:
				{
				setState(6416);
				id();
				setState(6417);
				match(DOT);
				}
				break;
			}
			setState(6422);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(6421);
				match(AS);
				}
			}

			setState(6424);
			data_type();
			setState(6426);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VARYING) {
				{
				setState(6425);
				match(VARYING);
				}
			}

			setState(6430);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL) {
				{
				setState(6428);
				match(EQUAL);
				setState(6429);
				((Procedure_paramContext)_localctx).default_val = default_value();
				}
			}

			setState(6433);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 633)) & ~0x3f) == 0 && ((1L << (_la - 633)) & ((1L << (OUT - 633)) | (1L << (OUTPUT - 633)) | (1L << (READONLY - 633)))) != 0)) {
				{
				setState(6432);
				_la = _input.LA(1);
				if ( !(((((_la - 633)) & ~0x3f) == 0 && ((1L << (_la - 633)) & ((1L << (OUT - 633)) | (1L << (OUTPUT - 633)) | (1L << (READONLY - 633)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_optionContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode RECOMPILE() { return getToken(TSqlParser.RECOMPILE, 0); }
		public Execute_clauseContext execute_clause() {
			return getRuleContext(Execute_clauseContext.class,0);
		}
		public Procedure_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterProcedure_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitProcedure_option(this);
		}
	}

	public final Procedure_optionContext procedure_option() throws RecognitionException {
		Procedure_optionContext _localctx = new Procedure_optionContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_procedure_option);
		try {
			setState(6438);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENCRYPTION:
				enterOuterAlt(_localctx, 1);
				{
				setState(6435);
				match(ENCRYPTION);
				}
				break;
			case RECOMPILE:
				enterOuterAlt(_localctx, 2);
				{
				setState(6436);
				match(RECOMPILE);
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 3);
				{
				setState(6437);
				execute_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_optionContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode SCHEMABINDING() { return getToken(TSqlParser.SCHEMABINDING, 0); }
		public TerminalNode RETURNS() { return getToken(TSqlParser.RETURNS, 0); }
		public List<TerminalNode> NULL() { return getTokens(TSqlParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(TSqlParser.NULL, i);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode INPUT() { return getToken(TSqlParser.INPUT, 0); }
		public TerminalNode CALLED() { return getToken(TSqlParser.CALLED, 0); }
		public Execute_clauseContext execute_clause() {
			return getRuleContext(Execute_clauseContext.class,0);
		}
		public Function_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterFunction_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitFunction_option(this);
		}
	}

	public final Function_optionContext function_option() throws RecognitionException {
		Function_optionContext _localctx = new Function_optionContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_function_option);
		try {
			setState(6452);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENCRYPTION:
				enterOuterAlt(_localctx, 1);
				{
				setState(6440);
				match(ENCRYPTION);
				}
				break;
			case SCHEMABINDING:
				enterOuterAlt(_localctx, 2);
				{
				setState(6441);
				match(SCHEMABINDING);
				}
				break;
			case RETURNS:
				enterOuterAlt(_localctx, 3);
				{
				setState(6442);
				match(RETURNS);
				setState(6443);
				match(NULL);
				setState(6444);
				match(ON);
				setState(6445);
				match(NULL);
				setState(6446);
				match(INPUT);
				}
				break;
			case CALLED:
				enterOuterAlt(_localctx, 4);
				{
				setState(6447);
				match(CALLED);
				setState(6448);
				match(ON);
				setState(6449);
				match(NULL);
				setState(6450);
				match(INPUT);
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 5);
				{
				setState(6451);
				execute_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_statisticsContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode STATISTICS() { return getToken(TSqlParser.STATISTICS, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public Table_name_with_hintContext table_name_with_hint() {
			return getRuleContext(Table_name_with_hintContext.class,0);
		}
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode FULLSCAN() { return getToken(TSqlParser.FULLSCAN, 0); }
		public TerminalNode SAMPLE() { return getToken(TSqlParser.SAMPLE, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode STATS_STREAM() { return getToken(TSqlParser.STATS_STREAM, 0); }
		public TerminalNode PERCENT() { return getToken(TSqlParser.PERCENT, 0); }
		public TerminalNode ROWS() { return getToken(TSqlParser.ROWS, 0); }
		public TerminalNode NORECOMPUTE() { return getToken(TSqlParser.NORECOMPUTE, 0); }
		public TerminalNode INCREMENTAL() { return getToken(TSqlParser.INCREMENTAL, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public Create_statisticsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_statistics; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_statistics(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_statistics(this);
		}
	}

	public final Create_statisticsContext create_statistics() throws RecognitionException {
		Create_statisticsContext _localctx = new Create_statisticsContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_create_statistics);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6454);
			match(CREATE);
			setState(6455);
			match(STATISTICS);
			setState(6456);
			id();
			setState(6457);
			match(ON);
			setState(6458);
			table_name_with_hint();
			setState(6459);
			match(LR_BRACKET);
			setState(6460);
			column_name_list();
			setState(6461);
			match(RR_BRACKET);
			setState(6480);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,855,_ctx) ) {
			case 1:
				{
				setState(6462);
				match(WITH);
				setState(6468);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FULLSCAN:
					{
					setState(6463);
					match(FULLSCAN);
					}
					break;
				case SAMPLE:
					{
					setState(6464);
					match(SAMPLE);
					setState(6465);
					match(DECIMAL);
					setState(6466);
					_la = _input.LA(1);
					if ( !(_la==PERCENT || _la==ROWS) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case STATS_STREAM:
					{
					setState(6467);
					match(STATS_STREAM);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6472);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,853,_ctx) ) {
				case 1:
					{
					setState(6470);
					match(COMMA);
					setState(6471);
					match(NORECOMPUTE);
					}
					break;
				}
				setState(6478);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(6474);
					match(COMMA);
					setState(6475);
					match(INCREMENTAL);
					setState(6476);
					match(EQUAL);
					setState(6477);
					on_off();
					}
				}

				}
				break;
			}
			setState(6483);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,856,_ctx) ) {
			case 1:
				{
				setState(6482);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_statisticsContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(TSqlParser.UPDATE, 0); }
		public TerminalNode STATISTICS() { return getToken(TSqlParser.STATISTICS, 0); }
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode USING() { return getToken(TSqlParser.USING, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode VALUES() { return getToken(TSqlParser.VALUES, 0); }
		public TerminalNode INDEX() { return getToken(TSqlParser.INDEX, 0); }
		public TerminalNode ALL() { return getToken(TSqlParser.ALL, 0); }
		public Update_statisticsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_statistics; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterUpdate_statistics(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitUpdate_statistics(this);
		}
	}

	public final Update_statisticsContext update_statistics() throws RecognitionException {
		Update_statisticsContext _localctx = new Update_statisticsContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_update_statistics);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6485);
			match(UPDATE);
			setState(6487);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==INDEX) {
				{
				setState(6486);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==INDEX) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(6489);
			match(STATISTICS);
			setState(6490);
			full_table_name();
			setState(6492);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,858,_ctx) ) {
			case 1:
				{
				setState(6491);
				id();
				}
				break;
			}
			setState(6497);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,859,_ctx) ) {
			case 1:
				{
				setState(6494);
				match(USING);
				setState(6495);
				match(DECIMAL);
				setState(6496);
				match(VALUES);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_tableContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(TSqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Column_def_table_constraintsContext column_def_table_constraints() {
			return getRuleContext(Column_def_table_constraintsContext.class,0);
		}
		public TerminalNode LOCK() { return getToken(TSqlParser.LOCK, 0); }
		public Simple_idContext simple_id() {
			return getRuleContext(Simple_idContext.class,0);
		}
		public List<Table_optionsContext> table_options() {
			return getRuleContexts(Table_optionsContext.class);
		}
		public Table_optionsContext table_options(int i) {
			return getRuleContext(Table_optionsContext.class,i);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(TSqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(TSqlParser.DEFAULT, i);
		}
		public TerminalNode TEXTIMAGE_ON() { return getToken(TSqlParser.TEXTIMAGE_ON, 0); }
		public Create_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_table(this);
		}
	}

	public final Create_tableContext create_table() throws RecognitionException {
		Create_tableContext _localctx = new Create_tableContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_create_table);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6499);
			match(CREATE);
			setState(6500);
			match(TABLE);
			setState(6501);
			table_name();
			setState(6502);
			match(LR_BRACKET);
			setState(6503);
			column_def_table_constraints();
			setState(6505);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(6504);
				match(COMMA);
				}
			}

			setState(6507);
			match(RR_BRACKET);
			setState(6510);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,861,_ctx) ) {
			case 1:
				{
				setState(6508);
				match(LOCK);
				setState(6509);
				simple_id();
				}
				break;
			}
			setState(6515);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,862,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6512);
					table_options();
					}
					} 
				}
				setState(6517);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,862,_ctx);
			}
			setState(6521);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,863,_ctx) ) {
			case 1:
				{
				setState(6518);
				match(ON);
				setState(6519);
				id();
				}
				break;
			case 2:
				{
				setState(6520);
				match(DEFAULT);
				}
				break;
			}
			setState(6526);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,864,_ctx) ) {
			case 1:
				{
				setState(6523);
				match(TEXTIMAGE_ON);
				setState(6524);
				id();
				}
				break;
			case 2:
				{
				setState(6525);
				match(DEFAULT);
				}
				break;
			}
			setState(6529);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,865,_ctx) ) {
			case 1:
				{
				setState(6528);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_optionsContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<Index_optionContext> index_option() {
			return getRuleContexts(Index_optionContext.class);
		}
		public Index_optionContext index_option(int i) {
			return getRuleContext(Index_optionContext.class,i);
		}
		public Table_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTable_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTable_options(this);
		}
	}

	public final Table_optionsContext table_options() throws RecognitionException {
		Table_optionsContext _localctx = new Table_optionsContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_table_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6531);
			match(WITH);
			setState(6551);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LR_BRACKET:
				{
				setState(6532);
				match(LR_BRACKET);
				setState(6533);
				index_option();
				setState(6538);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6534);
					match(COMMA);
					setState(6535);
					index_option();
					}
					}
					setState(6540);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6541);
				match(RR_BRACKET);
				}
				break;
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case START:
			case TARGET:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case ID:
				{
				setState(6543);
				index_option();
				setState(6548);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6544);
					match(COMMA);
					setState(6545);
					index_option();
					}
					}
					setState(6550);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_viewContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode VIEW() { return getToken(TSqlParser.VIEW, 0); }
		public Simple_nameContext simple_name() {
			return getRuleContext(Simple_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public List<TerminalNode> WITH() { return getTokens(TSqlParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(TSqlParser.WITH, i);
		}
		public List<View_attributeContext> view_attribute() {
			return getRuleContexts(View_attributeContext.class);
		}
		public View_attributeContext view_attribute(int i) {
			return getRuleContext(View_attributeContext.class,i);
		}
		public TerminalNode CHECK() { return getToken(TSqlParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(TSqlParser.OPTION, 0); }
		public Create_viewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_view; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_view(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_view(this);
		}
	}

	public final Create_viewContext create_view() throws RecognitionException {
		Create_viewContext _localctx = new Create_viewContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_create_view);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6553);
			match(CREATE);
			setState(6554);
			match(VIEW);
			setState(6555);
			simple_name();
			setState(6560);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(6556);
				match(LR_BRACKET);
				setState(6557);
				column_name_list();
				setState(6558);
				match(RR_BRACKET);
				}
			}

			setState(6571);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6562);
				match(WITH);
				setState(6563);
				view_attribute();
				setState(6568);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6564);
					match(COMMA);
					setState(6565);
					view_attribute();
					}
					}
					setState(6570);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6573);
			match(AS);
			setState(6574);
			select_statement();
			setState(6578);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,872,_ctx) ) {
			case 1:
				{
				setState(6575);
				match(WITH);
				setState(6576);
				match(CHECK);
				setState(6577);
				match(OPTION);
				}
				break;
			}
			setState(6581);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,873,_ctx) ) {
			case 1:
				{
				setState(6580);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class View_attributeContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode SCHEMABINDING() { return getToken(TSqlParser.SCHEMABINDING, 0); }
		public TerminalNode VIEW_METADATA() { return getToken(TSqlParser.VIEW_METADATA, 0); }
		public View_attributeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_view_attribute; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterView_attribute(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitView_attribute(this);
		}
	}

	public final View_attributeContext view_attribute() throws RecognitionException {
		View_attributeContext _localctx = new View_attributeContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_view_attribute);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6583);
			_la = _input.LA(1);
			if ( !(_la==ENCRYPTION || _la==SCHEMABINDING || _la==VIEW_METADATA) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_tableContext extends ParserRuleContext {
		public IdContext constraint;
		public Column_name_listContext fk;
		public Column_name_listContext pk;
		public List<TerminalNode> ALTER() { return getTokens(TSqlParser.ALTER); }
		public TerminalNode ALTER(int i) {
			return getToken(TSqlParser.ALTER, i);
		}
		public List<TerminalNode> TABLE() { return getTokens(TSqlParser.TABLE); }
		public TerminalNode TABLE(int i) {
			return getToken(TSqlParser.TABLE, i);
		}
		public List<Table_nameContext> table_name() {
			return getRuleContexts(Table_nameContext.class);
		}
		public Table_nameContext table_name(int i) {
			return getRuleContext(Table_nameContext.class,i);
		}
		public TerminalNode SET() { return getToken(TSqlParser.SET, 0); }
		public TerminalNode LOCK_ESCALATION() { return getToken(TSqlParser.LOCK_ESCALATION, 0); }
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public Column_def_table_constraintContext column_def_table_constraint() {
			return getRuleContext(Column_def_table_constraintContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(TSqlParser.COLUMN, 0); }
		public Column_definitionContext column_definition() {
			return getRuleContext(Column_definitionContext.class,0);
		}
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(TSqlParser.CONSTRAINT, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(TSqlParser.CHECK, 0); }
		public TerminalNode FOREIGN() { return getToken(TSqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode REFERENCES() { return getToken(TSqlParser.REFERENCES, 0); }
		public TerminalNode TRIGGER() { return getToken(TSqlParser.TRIGGER, 0); }
		public TerminalNode REBUILD() { return getToken(TSqlParser.REBUILD, 0); }
		public Table_optionsContext table_options() {
			return getRuleContext(Table_optionsContext.class,0);
		}
		public TerminalNode AUTO() { return getToken(TSqlParser.AUTO, 0); }
		public TerminalNode DISABLE() { return getToken(TSqlParser.DISABLE, 0); }
		public List<Column_name_listContext> column_name_list() {
			return getRuleContexts(Column_name_listContext.class);
		}
		public Column_name_listContext column_name_list(int i) {
			return getRuleContext(Column_name_listContext.class,i);
		}
		public TerminalNode ENABLE() { return getToken(TSqlParser.ENABLE, 0); }
		public Alter_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_table(this);
		}
	}

	public final Alter_tableContext alter_table() throws RecognitionException {
		Alter_tableContext _localctx = new Alter_tableContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_alter_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6585);
			match(ALTER);
			setState(6586);
			match(TABLE);
			setState(6587);
			table_name();
			setState(6631);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,875,_ctx) ) {
			case 1:
				{
				setState(6588);
				match(SET);
				setState(6589);
				match(LR_BRACKET);
				setState(6590);
				match(LOCK_ESCALATION);
				setState(6591);
				match(EQUAL);
				setState(6592);
				_la = _input.LA(1);
				if ( !(_la==TABLE || _la==AUTO || _la==DISABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6593);
				match(RR_BRACKET);
				}
				break;
			case 2:
				{
				setState(6594);
				match(ADD);
				setState(6595);
				column_def_table_constraint();
				}
				break;
			case 3:
				{
				setState(6596);
				match(ALTER);
				setState(6597);
				match(COLUMN);
				setState(6598);
				column_definition();
				}
				break;
			case 4:
				{
				setState(6599);
				match(DROP);
				setState(6600);
				match(COLUMN);
				setState(6601);
				id();
				}
				break;
			case 5:
				{
				setState(6602);
				match(DROP);
				setState(6603);
				match(CONSTRAINT);
				setState(6604);
				((Alter_tableContext)_localctx).constraint = id();
				}
				break;
			case 6:
				{
				setState(6605);
				match(WITH);
				setState(6606);
				match(CHECK);
				setState(6607);
				match(ADD);
				setState(6608);
				match(CONSTRAINT);
				setState(6609);
				((Alter_tableContext)_localctx).constraint = id();
				setState(6610);
				match(FOREIGN);
				setState(6611);
				match(KEY);
				setState(6612);
				match(LR_BRACKET);
				setState(6613);
				((Alter_tableContext)_localctx).fk = column_name_list();
				setState(6614);
				match(RR_BRACKET);
				setState(6615);
				match(REFERENCES);
				setState(6616);
				table_name();
				setState(6617);
				match(LR_BRACKET);
				setState(6618);
				((Alter_tableContext)_localctx).pk = column_name_list();
				setState(6619);
				match(RR_BRACKET);
				}
				break;
			case 7:
				{
				setState(6621);
				match(CHECK);
				setState(6622);
				match(CONSTRAINT);
				setState(6623);
				((Alter_tableContext)_localctx).constraint = id();
				}
				break;
			case 8:
				{
				setState(6624);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6625);
				match(TRIGGER);
				setState(6627);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,874,_ctx) ) {
				case 1:
					{
					setState(6626);
					id();
					}
					break;
				}
				}
				break;
			case 9:
				{
				setState(6629);
				match(REBUILD);
				setState(6630);
				table_options();
				}
				break;
			}
			setState(6634);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,876,_ctx) ) {
			case 1:
				{
				setState(6633);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_databaseContext extends ParserRuleContext {
		public IdContext database;
		public IdContext new_name;
		public IdContext collation;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode CURRENT() { return getToken(TSqlParser.CURRENT, 0); }
		public TerminalNode MODIFY() { return getToken(TSqlParser.MODIFY, 0); }
		public TerminalNode NAME() { return getToken(TSqlParser.NAME, 0); }
		public TerminalNode COLLATE() { return getToken(TSqlParser.COLLATE, 0); }
		public TerminalNode SET() { return getToken(TSqlParser.SET, 0); }
		public Database_optionspecContext database_optionspec() {
			return getRuleContext(Database_optionspecContext.class,0);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminationContext termination() {
			return getRuleContext(TerminationContext.class,0);
		}
		public Alter_databaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_database; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_database(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_database(this);
		}
	}

	public final Alter_databaseContext alter_database() throws RecognitionException {
		Alter_databaseContext _localctx = new Alter_databaseContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_alter_database);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6636);
			match(ALTER);
			setState(6637);
			match(DATABASE);
			setState(6640);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case START:
			case TARGET:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				setState(6638);
				((Alter_databaseContext)_localctx).database = id();
				}
				break;
			case CURRENT:
				{
				setState(6639);
				match(CURRENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6654);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MODIFY:
				{
				setState(6642);
				match(MODIFY);
				setState(6643);
				match(NAME);
				setState(6644);
				match(EQUAL);
				setState(6645);
				((Alter_databaseContext)_localctx).new_name = id();
				}
				break;
			case COLLATE:
				{
				setState(6646);
				match(COLLATE);
				setState(6647);
				((Alter_databaseContext)_localctx).collation = id();
				}
				break;
			case SET:
				{
				setState(6648);
				match(SET);
				setState(6649);
				database_optionspec();
				setState(6652);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,878,_ctx) ) {
				case 1:
					{
					setState(6650);
					match(WITH);
					setState(6651);
					termination();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6657);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,880,_ctx) ) {
			case 1:
				{
				setState(6656);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Database_optionspecContext extends ParserRuleContext {
		public Auto_optionContext auto_option() {
			return getRuleContext(Auto_optionContext.class,0);
		}
		public Change_tracking_optionContext change_tracking_option() {
			return getRuleContext(Change_tracking_optionContext.class,0);
		}
		public Containment_optionContext containment_option() {
			return getRuleContext(Containment_optionContext.class,0);
		}
		public Cursor_optionContext cursor_option() {
			return getRuleContext(Cursor_optionContext.class,0);
		}
		public Database_mirroring_optionContext database_mirroring_option() {
			return getRuleContext(Database_mirroring_optionContext.class,0);
		}
		public Date_correlation_optimization_optionContext date_correlation_optimization_option() {
			return getRuleContext(Date_correlation_optimization_optionContext.class,0);
		}
		public Db_encryption_optionContext db_encryption_option() {
			return getRuleContext(Db_encryption_optionContext.class,0);
		}
		public Db_state_optionContext db_state_option() {
			return getRuleContext(Db_state_optionContext.class,0);
		}
		public Db_update_optionContext db_update_option() {
			return getRuleContext(Db_update_optionContext.class,0);
		}
		public Db_user_access_optionContext db_user_access_option() {
			return getRuleContext(Db_user_access_optionContext.class,0);
		}
		public Delayed_durability_optionContext delayed_durability_option() {
			return getRuleContext(Delayed_durability_optionContext.class,0);
		}
		public External_access_optionContext external_access_option() {
			return getRuleContext(External_access_optionContext.class,0);
		}
		public TerminalNode FILESTREAM() { return getToken(TSqlParser.FILESTREAM, 0); }
		public Database_filestream_optionContext database_filestream_option() {
			return getRuleContext(Database_filestream_optionContext.class,0);
		}
		public Hadr_optionsContext hadr_options() {
			return getRuleContext(Hadr_optionsContext.class,0);
		}
		public Mixed_page_allocation_optionContext mixed_page_allocation_option() {
			return getRuleContext(Mixed_page_allocation_optionContext.class,0);
		}
		public Parameterization_optionContext parameterization_option() {
			return getRuleContext(Parameterization_optionContext.class,0);
		}
		public Recovery_optionContext recovery_option() {
			return getRuleContext(Recovery_optionContext.class,0);
		}
		public Service_broker_optionContext service_broker_option() {
			return getRuleContext(Service_broker_optionContext.class,0);
		}
		public Snapshot_optionContext snapshot_option() {
			return getRuleContext(Snapshot_optionContext.class,0);
		}
		public Sql_optionContext sql_option() {
			return getRuleContext(Sql_optionContext.class,0);
		}
		public Target_recovery_time_optionContext target_recovery_time_option() {
			return getRuleContext(Target_recovery_time_optionContext.class,0);
		}
		public TerminationContext termination() {
			return getRuleContext(TerminationContext.class,0);
		}
		public Database_optionspecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_database_optionspec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDatabase_optionspec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDatabase_optionspec(this);
		}
	}

	public final Database_optionspecContext database_optionspec() throws RecognitionException {
		Database_optionspecContext _localctx = new Database_optionspecContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_database_optionspec);
		try {
			setState(6682);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,881,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6659);
				auto_option();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6660);
				change_tracking_option();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6661);
				containment_option();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6662);
				cursor_option();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6663);
				database_mirroring_option();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6664);
				date_correlation_optimization_option();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6665);
				db_encryption_option();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6666);
				db_state_option();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6667);
				db_update_option();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6668);
				db_user_access_option();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6669);
				delayed_durability_option();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6670);
				external_access_option();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(6671);
				match(FILESTREAM);
				setState(6672);
				database_filestream_option();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(6673);
				hadr_options();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(6674);
				mixed_page_allocation_option();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(6675);
				parameterization_option();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(6676);
				recovery_option();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(6677);
				service_broker_option();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(6678);
				snapshot_option();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(6679);
				sql_option();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(6680);
				target_recovery_time_option();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(6681);
				termination();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Auto_optionContext extends ParserRuleContext {
		public TerminalNode AUTO_CLOSE() { return getToken(TSqlParser.AUTO_CLOSE, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode AUTO_CREATE_STATISTICS() { return getToken(TSqlParser.AUTO_CREATE_STATISTICS, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public TerminalNode INCREMENTAL() { return getToken(TSqlParser.INCREMENTAL, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode AUTO_SHRINK() { return getToken(TSqlParser.AUTO_SHRINK, 0); }
		public TerminalNode AUTO_UPDATE_STATISTICS() { return getToken(TSqlParser.AUTO_UPDATE_STATISTICS, 0); }
		public TerminalNode AUTO_UPDATE_STATISTICS_ASYNC() { return getToken(TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, 0); }
		public Auto_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_auto_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAuto_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAuto_option(this);
		}
	}

	public final Auto_optionContext auto_option() throws RecognitionException {
		Auto_optionContext _localctx = new Auto_optionContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_auto_option);
		int _la;
		try {
			setState(6701);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AUTO_CLOSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(6684);
				match(AUTO_CLOSE);
				setState(6685);
				on_off();
				}
				break;
			case AUTO_CREATE_STATISTICS:
				enterOuterAlt(_localctx, 2);
				{
				setState(6686);
				match(AUTO_CREATE_STATISTICS);
				setState(6687);
				match(OFF);
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 3);
				{
				setState(6688);
				match(ON);
				setState(6693);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case INCREMENTAL:
					{
					setState(6689);
					match(INCREMENTAL);
					setState(6690);
					match(EQUAL);
					setState(6691);
					match(ON);
					}
					break;
				case OFF:
					{
					setState(6692);
					match(OFF);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case AUTO_SHRINK:
				enterOuterAlt(_localctx, 4);
				{
				setState(6695);
				match(AUTO_SHRINK);
				setState(6696);
				on_off();
				}
				break;
			case AUTO_UPDATE_STATISTICS:
				enterOuterAlt(_localctx, 5);
				{
				setState(6697);
				match(AUTO_UPDATE_STATISTICS);
				setState(6698);
				on_off();
				}
				break;
			case AUTO_UPDATE_STATISTICS_ASYNC:
				enterOuterAlt(_localctx, 6);
				{
				setState(6699);
				match(AUTO_UPDATE_STATISTICS_ASYNC);
				setState(6700);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Change_tracking_optionContext extends ParserRuleContext {
		public TerminalNode CHANGE_TRACKING() { return getToken(TSqlParser.CHANGE_TRACKING, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public List<Change_tracking_option_listContext> change_tracking_option_list() {
			return getRuleContexts(Change_tracking_option_listContext.class);
		}
		public Change_tracking_option_listContext change_tracking_option_list(int i) {
			return getRuleContext(Change_tracking_option_listContext.class,i);
		}
		public Change_tracking_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_change_tracking_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterChange_tracking_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitChange_tracking_option(this);
		}
	}

	public final Change_tracking_optionContext change_tracking_option() throws RecognitionException {
		Change_tracking_optionContext _localctx = new Change_tracking_optionContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_change_tracking_option);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6703);
			match(CHANGE_TRACKING);
			setState(6704);
			match(EQUAL);
			setState(6720);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OFF:
				{
				setState(6705);
				match(OFF);
				}
				break;
			case ON:
				{
				setState(6706);
				match(ON);
				setState(6717);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,885,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(6707);
						change_tracking_option_list();
						setState(6712);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(6708);
							match(COMMA);
							setState(6709);
							change_tracking_option_list();
							}
							}
							setState(6714);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						} 
					}
					setState(6719);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,885,_ctx);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Change_tracking_option_listContext extends ParserRuleContext {
		public TerminalNode AUTO_CLEANUP() { return getToken(TSqlParser.AUTO_CLEANUP, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode CHANGE_RETENTION() { return getToken(TSqlParser.CHANGE_RETENTION, 0); }
		public TerminalNode DAYS() { return getToken(TSqlParser.DAYS, 0); }
		public TerminalNode HOURS() { return getToken(TSqlParser.HOURS, 0); }
		public TerminalNode MINUTES() { return getToken(TSqlParser.MINUTES, 0); }
		public Change_tracking_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_change_tracking_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterChange_tracking_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitChange_tracking_option_list(this);
		}
	}

	public final Change_tracking_option_listContext change_tracking_option_list() throws RecognitionException {
		Change_tracking_option_listContext _localctx = new Change_tracking_option_listContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_change_tracking_option_list);
		int _la;
		try {
			setState(6728);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AUTO_CLEANUP:
				enterOuterAlt(_localctx, 1);
				{
				setState(6722);
				match(AUTO_CLEANUP);
				setState(6723);
				match(EQUAL);
				setState(6724);
				on_off();
				}
				break;
			case CHANGE_RETENTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(6725);
				match(CHANGE_RETENTION);
				setState(6726);
				match(EQUAL);
				setState(6727);
				_la = _input.LA(1);
				if ( !(_la==DAYS || _la==HOURS || _la==MINUTES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Containment_optionContext extends ParserRuleContext {
		public TerminalNode CONTAINMENT() { return getToken(TSqlParser.CONTAINMENT, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode NONE() { return getToken(TSqlParser.NONE, 0); }
		public TerminalNode PARTIAL() { return getToken(TSqlParser.PARTIAL, 0); }
		public Containment_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_containment_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterContainment_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitContainment_option(this);
		}
	}

	public final Containment_optionContext containment_option() throws RecognitionException {
		Containment_optionContext _localctx = new Containment_optionContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_containment_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6730);
			match(CONTAINMENT);
			setState(6731);
			match(EQUAL);
			setState(6732);
			_la = _input.LA(1);
			if ( !(_la==NONE || _la==PARTIAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_optionContext extends ParserRuleContext {
		public TerminalNode CURSOR_CLOSE_ON_COMMIT() { return getToken(TSqlParser.CURSOR_CLOSE_ON_COMMIT, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode CURSOR_DEFAULT() { return getToken(TSqlParser.CURSOR_DEFAULT, 0); }
		public TerminalNode LOCAL() { return getToken(TSqlParser.LOCAL, 0); }
		public TerminalNode GLOBAL() { return getToken(TSqlParser.GLOBAL, 0); }
		public Cursor_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCursor_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCursor_option(this);
		}
	}

	public final Cursor_optionContext cursor_option() throws RecognitionException {
		Cursor_optionContext _localctx = new Cursor_optionContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_cursor_option);
		int _la;
		try {
			setState(6738);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURSOR_CLOSE_ON_COMMIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(6734);
				match(CURSOR_CLOSE_ON_COMMIT);
				setState(6735);
				on_off();
				}
				break;
			case CURSOR_DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(6736);
				match(CURSOR_DEFAULT);
				setState(6737);
				_la = _input.LA(1);
				if ( !(_la==GLOBAL || _la==LOCAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_endpointContext extends ParserRuleContext {
		public IdContext endpointname;
		public IdContext login;
		public Token state;
		public Token port;
		public IdContext cert_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode ENDPOINT() { return getToken(TSqlParser.ENDPOINT, 0); }
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public TerminalNode TCP() { return getToken(TSqlParser.TCP, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public TerminalNode LISTENER_PORT() { return getToken(TSqlParser.LISTENER_PORT, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public TerminalNode TSQL() { return getToken(TSqlParser.TSQL, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode SERVICE_BROKER() { return getToken(TSqlParser.SERVICE_BROKER, 0); }
		public TerminalNode AUTHENTICATION() { return getToken(TSqlParser.AUTHENTICATION, 0); }
		public TerminalNode DATABASE_MIRRORING() { return getToken(TSqlParser.DATABASE_MIRRORING, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode STATE() { return getToken(TSqlParser.STATE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode LISTENER_IP() { return getToken(TSqlParser.LISTENER_IP, 0); }
		public TerminalNode WITNESS() { return getToken(TSqlParser.WITNESS, 0); }
		public TerminalNode PARTNER() { return getToken(TSqlParser.PARTNER, 0); }
		public List<TerminalNode> ALL() { return getTokens(TSqlParser.ALL); }
		public TerminalNode ALL(int i) {
			return getToken(TSqlParser.ALL, i);
		}
		public TerminalNode IPV4_ADDR() { return getToken(TSqlParser.IPV4_ADDR, 0); }
		public TerminalNode IPV6_ADDR() { return getToken(TSqlParser.IPV6_ADDR, 0); }
		public TerminalNode WINDOWS() { return getToken(TSqlParser.WINDOWS, 0); }
		public TerminalNode CERTIFICATE() { return getToken(TSqlParser.CERTIFICATE, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode MESSAGE_FORWARDING() { return getToken(TSqlParser.MESSAGE_FORWARDING, 0); }
		public TerminalNode MESSAGE_FORWARD_SIZE() { return getToken(TSqlParser.MESSAGE_FORWARD_SIZE, 0); }
		public TerminalNode STARTED() { return getToken(TSqlParser.STARTED, 0); }
		public TerminalNode STOPPED() { return getToken(TSqlParser.STOPPED, 0); }
		public List<TerminalNode> DISABLED() { return getTokens(TSqlParser.DISABLED); }
		public TerminalNode DISABLED(int i) {
			return getToken(TSqlParser.DISABLED, i);
		}
		public TerminalNode SUPPORTED() { return getToken(TSqlParser.SUPPORTED, 0); }
		public TerminalNode REQUIRED() { return getToken(TSqlParser.REQUIRED, 0); }
		public TerminalNode ENABLED() { return getToken(TSqlParser.ENABLED, 0); }
		public TerminalNode NTLM() { return getToken(TSqlParser.NTLM, 0); }
		public TerminalNode KERBEROS() { return getToken(TSqlParser.KERBEROS, 0); }
		public TerminalNode NEGOTIATE() { return getToken(TSqlParser.NEGOTIATE, 0); }
		public TerminalNode ALGORITHM() { return getToken(TSqlParser.ALGORITHM, 0); }
		public TerminalNode AES() { return getToken(TSqlParser.AES, 0); }
		public TerminalNode RC4() { return getToken(TSqlParser.RC4, 0); }
		public Alter_endpointContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_endpoint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlter_endpoint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlter_endpoint(this);
		}
	}

	public final Alter_endpointContext alter_endpoint() throws RecognitionException {
		Alter_endpointContext _localctx = new Alter_endpointContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_alter_endpoint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6740);
			match(ALTER);
			setState(6741);
			match(ENDPOINT);
			setState(6742);
			((Alter_endpointContext)_localctx).endpointname = id();
			setState(6745);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(6743);
				match(AUTHORIZATION);
				setState(6744);
				((Alter_endpointContext)_localctx).login = id();
				}
			}

			setState(6754);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STATE) {
				{
				setState(6747);
				match(STATE);
				setState(6748);
				match(EQUAL);
				setState(6752);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STARTED:
					{
					setState(6749);
					((Alter_endpointContext)_localctx).state = match(STARTED);
					}
					break;
				case STOPPED:
					{
					setState(6750);
					((Alter_endpointContext)_localctx).state = match(STOPPED);
					}
					break;
				case DISABLED:
					{
					setState(6751);
					((Alter_endpointContext)_localctx).state = match(DISABLED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(6756);
			match(AS);
			setState(6757);
			match(TCP);
			setState(6758);
			match(LR_BRACKET);
			setState(6759);
			match(LISTENER_PORT);
			setState(6760);
			match(EQUAL);
			setState(6761);
			((Alter_endpointContext)_localctx).port = match(DECIMAL);
			setState(6766);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(6762);
				match(COMMA);
				setState(6763);
				match(LISTENER_IP);
				setState(6764);
				match(EQUAL);
				setState(6765);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==IPV4_ADDR || _la==IPV6_ADDR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(6768);
			match(RR_BRACKET);
			setState(6878);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,916,_ctx) ) {
			case 1:
				{
				setState(6769);
				match(TSQL);
				}
				break;
			case 2:
				{
				setState(6770);
				match(FOR);
				setState(6771);
				match(SERVICE_BROKER);
				setState(6772);
				match(LR_BRACKET);
				setState(6773);
				match(AUTHENTICATION);
				setState(6774);
				match(EQUAL);
				setState(6791);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WINDOWS:
					{
					setState(6775);
					match(WINDOWS);
					setState(6777);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & ((1L << (KERBEROS - 169)) | (1L << (NEGOTIATE - 169)) | (1L << (NTLM - 169)))) != 0)) {
						{
						setState(6776);
						_la = _input.LA(1);
						if ( !(((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & ((1L << (KERBEROS - 169)) | (1L << (NEGOTIATE - 169)) | (1L << (NTLM - 169)))) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(6781);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==CERTIFICATE) {
						{
						setState(6779);
						match(CERTIFICATE);
						setState(6780);
						((Alter_endpointContext)_localctx).cert_name = id();
						}
					}

					}
					break;
				case CERTIFICATE:
					{
					setState(6783);
					match(CERTIFICATE);
					setState(6784);
					((Alter_endpointContext)_localctx).cert_name = id();
					setState(6786);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WINDOWS) {
						{
						setState(6785);
						match(WINDOWS);
						}
					}

					setState(6789);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & ((1L << (KERBEROS - 169)) | (1L << (NEGOTIATE - 169)) | (1L << (NTLM - 169)))) != 0)) {
						{
						setState(6788);
						_la = _input.LA(1);
						if ( !(((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & ((1L << (KERBEROS - 169)) | (1L << (NEGOTIATE - 169)) | (1L << (NTLM - 169)))) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6810);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,901,_ctx) ) {
				case 1:
					{
					setState(6794);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(6793);
						match(COMMA);
						}
					}

					setState(6796);
					match(ENCRYPTION);
					setState(6797);
					match(EQUAL);
					setState(6798);
					_la = _input.LA(1);
					if ( !(_la==REQUIRED || _la==SUPPORTED || _la==DISABLED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(6808);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALGORITHM) {
						{
						setState(6799);
						match(ALGORITHM);
						setState(6806);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,899,_ctx) ) {
						case 1:
							{
							setState(6800);
							match(AES);
							}
							break;
						case 2:
							{
							setState(6801);
							match(RC4);
							}
							break;
						case 3:
							{
							setState(6802);
							match(AES);
							setState(6803);
							match(RC4);
							}
							break;
						case 4:
							{
							setState(6804);
							match(RC4);
							setState(6805);
							match(AES);
							}
							break;
						}
						}
					}

					}
					break;
				}
				setState(6818);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,903,_ctx) ) {
				case 1:
					{
					setState(6813);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(6812);
						match(COMMA);
						}
					}

					setState(6815);
					match(MESSAGE_FORWARDING);
					setState(6816);
					match(EQUAL);
					setState(6817);
					_la = _input.LA(1);
					if ( !(_la==ENABLED || _la==DISABLED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(6826);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MESSAGE_FORWARD_SIZE || _la==COMMA) {
					{
					setState(6821);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(6820);
						match(COMMA);
						}
					}

					setState(6823);
					match(MESSAGE_FORWARD_SIZE);
					setState(6824);
					match(EQUAL);
					setState(6825);
					match(DECIMAL);
					}
				}

				setState(6828);
				match(RR_BRACKET);
				}
				break;
			case 3:
				{
				setState(6829);
				match(FOR);
				setState(6830);
				match(DATABASE_MIRRORING);
				setState(6831);
				match(LR_BRACKET);
				setState(6832);
				match(AUTHENTICATION);
				setState(6833);
				match(EQUAL);
				setState(6850);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WINDOWS:
					{
					setState(6834);
					match(WINDOWS);
					setState(6836);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & ((1L << (KERBEROS - 169)) | (1L << (NEGOTIATE - 169)) | (1L << (NTLM - 169)))) != 0)) {
						{
						setState(6835);
						_la = _input.LA(1);
						if ( !(((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & ((1L << (KERBEROS - 169)) | (1L << (NEGOTIATE - 169)) | (1L << (NTLM - 169)))) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(6840);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==CERTIFICATE) {
						{
						setState(6838);
						match(CERTIFICATE);
						setState(6839);
						((Alter_endpointContext)_localctx).cert_name = id();
						}
					}

					}
					break;
				case CERTIFICATE:
					{
					setState(6842);
					match(CERTIFICATE);
					setState(6843);
					((Alter_endpointContext)_localctx).cert_name = id();
					setState(6845);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WINDOWS) {
						{
						setState(6844);
						match(WINDOWS);
						}
					}

					setState(6848);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & ((1L << (KERBEROS - 169)) | (1L << (NEGOTIATE - 169)) | (1L << (NTLM - 169)))) != 0)) {
						{
						setState(6847);
						_la = _input.LA(1);
						if ( !(((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & ((1L << (KERBEROS - 169)) | (1L << (NEGOTIATE - 169)) | (1L << (NTLM - 169)))) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6869);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,914,_ctx) ) {
				case 1:
					{
					setState(6853);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(6852);
						match(COMMA);
						}
					}

					setState(6855);
					match(ENCRYPTION);
					setState(6856);
					match(EQUAL);
					setState(6857);
					_la = _input.LA(1);
					if ( !(_la==REQUIRED || _la==SUPPORTED || _la==DISABLED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(6867);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALGORITHM) {
						{
						setState(6858);
						match(ALGORITHM);
						setState(6865);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,912,_ctx) ) {
						case 1:
							{
							setState(6859);
							match(AES);
							}
							break;
						case 2:
							{
							setState(6860);
							match(RC4);
							}
							break;
						case 3:
							{
							setState(6861);
							match(AES);
							setState(6862);
							match(RC4);
							}
							break;
						case 4:
							{
							setState(6863);
							match(RC4);
							setState(6864);
							match(AES);
							}
							break;
						}
						}
					}

					}
					break;
				}
				setState(6872);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(6871);
					match(COMMA);
					}
				}

				setState(6874);
				match(ROLE);
				setState(6875);
				match(EQUAL);
				setState(6876);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==WITNESS || _la==PARTNER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6877);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Database_mirroring_optionContext extends ParserRuleContext {
		public Mirroring_set_optionContext mirroring_set_option() {
			return getRuleContext(Mirroring_set_optionContext.class,0);
		}
		public Database_mirroring_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_database_mirroring_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDatabase_mirroring_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDatabase_mirroring_option(this);
		}
	}

	public final Database_mirroring_optionContext database_mirroring_option() throws RecognitionException {
		Database_mirroring_optionContext _localctx = new Database_mirroring_optionContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_database_mirroring_option);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6880);
			mirroring_set_option();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mirroring_set_optionContext extends ParserRuleContext {
		public Mirroring_partnerContext mirroring_partner() {
			return getRuleContext(Mirroring_partnerContext.class,0);
		}
		public Partner_optionContext partner_option() {
			return getRuleContext(Partner_optionContext.class,0);
		}
		public Mirroring_witnessContext mirroring_witness() {
			return getRuleContext(Mirroring_witnessContext.class,0);
		}
		public Witness_optionContext witness_option() {
			return getRuleContext(Witness_optionContext.class,0);
		}
		public Mirroring_set_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mirroring_set_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterMirroring_set_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitMirroring_set_option(this);
		}
	}

	public final Mirroring_set_optionContext mirroring_set_option() throws RecognitionException {
		Mirroring_set_optionContext _localctx = new Mirroring_set_optionContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_mirroring_set_option);
		try {
			setState(6888);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PARTNER:
				enterOuterAlt(_localctx, 1);
				{
				setState(6882);
				mirroring_partner();
				setState(6883);
				partner_option();
				}
				break;
			case WITNESS:
				enterOuterAlt(_localctx, 2);
				{
				setState(6885);
				mirroring_witness();
				setState(6886);
				witness_option();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mirroring_partnerContext extends ParserRuleContext {
		public TerminalNode PARTNER() { return getToken(TSqlParser.PARTNER, 0); }
		public Mirroring_partnerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mirroring_partner; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterMirroring_partner(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitMirroring_partner(this);
		}
	}

	public final Mirroring_partnerContext mirroring_partner() throws RecognitionException {
		Mirroring_partnerContext _localctx = new Mirroring_partnerContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_mirroring_partner);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6890);
			match(PARTNER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mirroring_witnessContext extends ParserRuleContext {
		public TerminalNode WITNESS() { return getToken(TSqlParser.WITNESS, 0); }
		public Mirroring_witnessContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mirroring_witness; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterMirroring_witness(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitMirroring_witness(this);
		}
	}

	public final Mirroring_witnessContext mirroring_witness() throws RecognitionException {
		Mirroring_witnessContext _localctx = new Mirroring_witnessContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_mirroring_witness);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6892);
			match(WITNESS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Witness_partner_equalContext extends ParserRuleContext {
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public Witness_partner_equalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_witness_partner_equal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterWitness_partner_equal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitWitness_partner_equal(this);
		}
	}

	public final Witness_partner_equalContext witness_partner_equal() throws RecognitionException {
		Witness_partner_equalContext _localctx = new Witness_partner_equalContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_witness_partner_equal);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6894);
			match(EQUAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partner_optionContext extends ParserRuleContext {
		public Witness_partner_equalContext witness_partner_equal() {
			return getRuleContext(Witness_partner_equalContext.class,0);
		}
		public Partner_serverContext partner_server() {
			return getRuleContext(Partner_serverContext.class,0);
		}
		public TerminalNode FAILOVER() { return getToken(TSqlParser.FAILOVER, 0); }
		public TerminalNode FORCE_SERVICE_ALLOW_DATA_LOSS() { return getToken(TSqlParser.FORCE_SERVICE_ALLOW_DATA_LOSS, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public TerminalNode RESUME() { return getToken(TSqlParser.RESUME, 0); }
		public TerminalNode SAFETY() { return getToken(TSqlParser.SAFETY, 0); }
		public TerminalNode FULL() { return getToken(TSqlParser.FULL, 0); }
		public TerminalNode SUSPEND() { return getToken(TSqlParser.SUSPEND, 0); }
		public TerminalNode TIMEOUT() { return getToken(TSqlParser.TIMEOUT, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public Partner_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partner_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterPartner_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitPartner_option(this);
		}
	}

	public final Partner_optionContext partner_option() throws RecognitionException {
		Partner_optionContext _localctx = new Partner_optionContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_partner_option);
		int _la;
		try {
			setState(6908);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EQUAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6896);
				witness_partner_equal();
				setState(6897);
				partner_server();
				}
				break;
			case FAILOVER:
				enterOuterAlt(_localctx, 2);
				{
				setState(6899);
				match(FAILOVER);
				}
				break;
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
				enterOuterAlt(_localctx, 3);
				{
				setState(6900);
				match(FORCE_SERVICE_ALLOW_DATA_LOSS);
				}
				break;
			case OFF:
				enterOuterAlt(_localctx, 4);
				{
				setState(6901);
				match(OFF);
				}
				break;
			case RESUME:
				enterOuterAlt(_localctx, 5);
				{
				setState(6902);
				match(RESUME);
				}
				break;
			case SAFETY:
				enterOuterAlt(_localctx, 6);
				{
				setState(6903);
				match(SAFETY);
				setState(6904);
				_la = _input.LA(1);
				if ( !(_la==FULL || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SUSPEND:
				enterOuterAlt(_localctx, 7);
				{
				setState(6905);
				match(SUSPEND);
				}
				break;
			case TIMEOUT:
				enterOuterAlt(_localctx, 8);
				{
				setState(6906);
				match(TIMEOUT);
				setState(6907);
				match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Witness_optionContext extends ParserRuleContext {
		public Witness_partner_equalContext witness_partner_equal() {
			return getRuleContext(Witness_partner_equalContext.class,0);
		}
		public Witness_serverContext witness_server() {
			return getRuleContext(Witness_serverContext.class,0);
		}
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public Witness_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_witness_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterWitness_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitWitness_option(this);
		}
	}

	public final Witness_optionContext witness_option() throws RecognitionException {
		Witness_optionContext _localctx = new Witness_optionContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_witness_option);
		try {
			setState(6914);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EQUAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6910);
				witness_partner_equal();
				setState(6911);
				witness_server();
				}
				break;
			case OFF:
				enterOuterAlt(_localctx, 2);
				{
				setState(6913);
				match(OFF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Witness_serverContext extends ParserRuleContext {
		public Partner_serverContext partner_server() {
			return getRuleContext(Partner_serverContext.class,0);
		}
		public Witness_serverContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_witness_server; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterWitness_server(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitWitness_server(this);
		}
	}

	public final Witness_serverContext witness_server() throws RecognitionException {
		Witness_serverContext _localctx = new Witness_serverContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_witness_server);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6916);
			partner_server();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partner_serverContext extends ParserRuleContext {
		public Partner_server_tcp_prefixContext partner_server_tcp_prefix() {
			return getRuleContext(Partner_server_tcp_prefixContext.class,0);
		}
		public HostContext host() {
			return getRuleContext(HostContext.class,0);
		}
		public Mirroring_host_port_seperatorContext mirroring_host_port_seperator() {
			return getRuleContext(Mirroring_host_port_seperatorContext.class,0);
		}
		public Port_numberContext port_number() {
			return getRuleContext(Port_numberContext.class,0);
		}
		public Partner_serverContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partner_server; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterPartner_server(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitPartner_server(this);
		}
	}

	public final Partner_serverContext partner_server() throws RecognitionException {
		Partner_serverContext _localctx = new Partner_serverContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_partner_server);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6918);
			partner_server_tcp_prefix();
			setState(6919);
			host();
			setState(6920);
			mirroring_host_port_seperator();
			setState(6921);
			port_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mirroring_host_port_seperatorContext extends ParserRuleContext {
		public TerminalNode COLON() { return getToken(TSqlParser.COLON, 0); }
		public Mirroring_host_port_seperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mirroring_host_port_seperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterMirroring_host_port_seperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitMirroring_host_port_seperator(this);
		}
	}

	public final Mirroring_host_port_seperatorContext mirroring_host_port_seperator() throws RecognitionException {
		Mirroring_host_port_seperatorContext _localctx = new Mirroring_host_port_seperatorContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_mirroring_host_port_seperator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6923);
			match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partner_server_tcp_prefixContext extends ParserRuleContext {
		public TerminalNode TCP() { return getToken(TSqlParser.TCP, 0); }
		public TerminalNode COLON() { return getToken(TSqlParser.COLON, 0); }
		public TerminalNode DOUBLE_FORWARD_SLASH() { return getToken(TSqlParser.DOUBLE_FORWARD_SLASH, 0); }
		public Partner_server_tcp_prefixContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partner_server_tcp_prefix; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterPartner_server_tcp_prefix(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitPartner_server_tcp_prefix(this);
		}
	}

	public final Partner_server_tcp_prefixContext partner_server_tcp_prefix() throws RecognitionException {
		Partner_server_tcp_prefixContext _localctx = new Partner_server_tcp_prefixContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_partner_server_tcp_prefix);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6925);
			match(TCP);
			setState(6926);
			match(COLON);
			setState(6927);
			match(DOUBLE_FORWARD_SLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Port_numberContext extends ParserRuleContext {
		public Token port;
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public Port_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_port_number; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterPort_number(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitPort_number(this);
		}
	}

	public final Port_numberContext port_number() throws RecognitionException {
		Port_numberContext _localctx = new Port_numberContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_port_number);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6929);
			((Port_numberContext)_localctx).port = match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HostContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public HostContext host() {
			return getRuleContext(HostContext.class,0);
		}
		public HostContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_host; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterHost(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitHost(this);
		}
	}

	public final HostContext host() throws RecognitionException {
		HostContext _localctx = new HostContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_host);
		try {
			setState(6941);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,921,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6931);
				id();
				setState(6932);
				match(DOT);
				setState(6933);
				host();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6939);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,920,_ctx) ) {
				case 1:
					{
					setState(6935);
					id();
					setState(6936);
					match(DOT);
					}
					break;
				case 2:
					{
					setState(6938);
					id();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Date_correlation_optimization_optionContext extends ParserRuleContext {
		public TerminalNode DATE_CORRELATION_OPTIMIZATION() { return getToken(TSqlParser.DATE_CORRELATION_OPTIMIZATION, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public Date_correlation_optimization_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_date_correlation_optimization_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDate_correlation_optimization_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDate_correlation_optimization_option(this);
		}
	}

	public final Date_correlation_optimization_optionContext date_correlation_optimization_option() throws RecognitionException {
		Date_correlation_optimization_optionContext _localctx = new Date_correlation_optimization_optionContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_date_correlation_optimization_option);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6943);
			match(DATE_CORRELATION_OPTIMIZATION);
			setState(6944);
			on_off();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Db_encryption_optionContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public Db_encryption_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_db_encryption_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDb_encryption_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDb_encryption_option(this);
		}
	}

	public final Db_encryption_optionContext db_encryption_option() throws RecognitionException {
		Db_encryption_optionContext _localctx = new Db_encryption_optionContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_db_encryption_option);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6946);
			match(ENCRYPTION);
			setState(6947);
			on_off();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Db_state_optionContext extends ParserRuleContext {
		public TerminalNode ONLINE() { return getToken(TSqlParser.ONLINE, 0); }
		public TerminalNode OFFLINE() { return getToken(TSqlParser.OFFLINE, 0); }
		public TerminalNode EMERGENCY() { return getToken(TSqlParser.EMERGENCY, 0); }
		public Db_state_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_db_state_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDb_state_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDb_state_option(this);
		}
	}

	public final Db_state_optionContext db_state_option() throws RecognitionException {
		Db_state_optionContext _localctx = new Db_state_optionContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_db_state_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6949);
			_la = _input.LA(1);
			if ( !(_la==EMERGENCY || _la==OFFLINE || _la==ONLINE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Db_update_optionContext extends ParserRuleContext {
		public TerminalNode READ_ONLY() { return getToken(TSqlParser.READ_ONLY, 0); }
		public TerminalNode READ_WRITE() { return getToken(TSqlParser.READ_WRITE, 0); }
		public Db_update_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_db_update_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDb_update_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDb_update_option(this);
		}
	}

	public final Db_update_optionContext db_update_option() throws RecognitionException {
		Db_update_optionContext _localctx = new Db_update_optionContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_db_update_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6951);
			_la = _input.LA(1);
			if ( !(_la==READ_ONLY || _la==READ_WRITE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Db_user_access_optionContext extends ParserRuleContext {
		public TerminalNode SINGLE_USER() { return getToken(TSqlParser.SINGLE_USER, 0); }
		public TerminalNode RESTRICTED_USER() { return getToken(TSqlParser.RESTRICTED_USER, 0); }
		public TerminalNode MULTI_USER() { return getToken(TSqlParser.MULTI_USER, 0); }
		public Db_user_access_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_db_user_access_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDb_user_access_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDb_user_access_option(this);
		}
	}

	public final Db_user_access_optionContext db_user_access_option() throws RecognitionException {
		Db_user_access_optionContext _localctx = new Db_user_access_optionContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_db_user_access_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6953);
			_la = _input.LA(1);
			if ( !(_la==MULTI_USER || _la==RESTRICTED_USER || _la==SINGLE_USER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delayed_durability_optionContext extends ParserRuleContext {
		public TerminalNode DELAYED_DURABILITY() { return getToken(TSqlParser.DELAYED_DURABILITY, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode DISABLED() { return getToken(TSqlParser.DISABLED, 0); }
		public TerminalNode ALLOWED() { return getToken(TSqlParser.ALLOWED, 0); }
		public TerminalNode FORCED() { return getToken(TSqlParser.FORCED, 0); }
		public Delayed_durability_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delayed_durability_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDelayed_durability_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDelayed_durability_option(this);
		}
	}

	public final Delayed_durability_optionContext delayed_durability_option() throws RecognitionException {
		Delayed_durability_optionContext _localctx = new Delayed_durability_optionContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_delayed_durability_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6955);
			match(DELAYED_DURABILITY);
			setState(6956);
			match(EQUAL);
			setState(6957);
			_la = _input.LA(1);
			if ( !(_la==ALLOWED || _la==DISABLED || _la==FORCED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class External_access_optionContext extends ParserRuleContext {
		public TerminalNode DB_CHAINING() { return getToken(TSqlParser.DB_CHAINING, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode TRUSTWORTHY() { return getToken(TSqlParser.TRUSTWORTHY, 0); }
		public TerminalNode DEFAULT_LANGUAGE() { return getToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode DEFAULT_FULLTEXT_LANGUAGE() { return getToken(TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0); }
		public TerminalNode NESTED_TRIGGERS() { return getToken(TSqlParser.NESTED_TRIGGERS, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode TRANSFORM_NOISE_WORDS() { return getToken(TSqlParser.TRANSFORM_NOISE_WORDS, 0); }
		public TerminalNode TWO_DIGIT_YEAR_CUTOFF() { return getToken(TSqlParser.TWO_DIGIT_YEAR_CUTOFF, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public External_access_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_external_access_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterExternal_access_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitExternal_access_option(this);
		}
	}

	public final External_access_optionContext external_access_option() throws RecognitionException {
		External_access_optionContext _localctx = new External_access_optionContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_external_access_option);
		int _la;
		try {
			setState(6984);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DB_CHAINING:
				enterOuterAlt(_localctx, 1);
				{
				setState(6959);
				match(DB_CHAINING);
				setState(6960);
				on_off();
				}
				break;
			case TRUSTWORTHY:
				enterOuterAlt(_localctx, 2);
				{
				setState(6961);
				match(TRUSTWORTHY);
				setState(6962);
				on_off();
				}
				break;
			case DEFAULT_LANGUAGE:
				enterOuterAlt(_localctx, 3);
				{
				setState(6963);
				match(DEFAULT_LANGUAGE);
				setState(6964);
				match(EQUAL);
				setState(6967);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SID:
				case SOURCE:
				case STATE:
				case START:
				case TARGET:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(6965);
					id();
					}
					break;
				case STRING:
					{
					setState(6966);
					match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DEFAULT_FULLTEXT_LANGUAGE:
				enterOuterAlt(_localctx, 4);
				{
				setState(6969);
				match(DEFAULT_FULLTEXT_LANGUAGE);
				setState(6970);
				match(EQUAL);
				setState(6973);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SID:
				case SOURCE:
				case STATE:
				case START:
				case TARGET:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(6971);
					id();
					}
					break;
				case STRING:
					{
					setState(6972);
					match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NESTED_TRIGGERS:
				enterOuterAlt(_localctx, 5);
				{
				setState(6975);
				match(NESTED_TRIGGERS);
				setState(6976);
				match(EQUAL);
				setState(6977);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case TRANSFORM_NOISE_WORDS:
				enterOuterAlt(_localctx, 6);
				{
				setState(6978);
				match(TRANSFORM_NOISE_WORDS);
				setState(6979);
				match(EQUAL);
				setState(6980);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case TWO_DIGIT_YEAR_CUTOFF:
				enterOuterAlt(_localctx, 7);
				{
				setState(6981);
				match(TWO_DIGIT_YEAR_CUTOFF);
				setState(6982);
				match(EQUAL);
				setState(6983);
				match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hadr_optionsContext extends ParserRuleContext {
		public IdContext availability_group_name;
		public TerminalNode HADR() { return getToken(TSqlParser.HADR, 0); }
		public TerminalNode SUSPEND() { return getToken(TSqlParser.SUSPEND, 0); }
		public TerminalNode RESUME() { return getToken(TSqlParser.RESUME, 0); }
		public TerminalNode AVAILABILITY() { return getToken(TSqlParser.AVAILABILITY, 0); }
		public TerminalNode GROUP() { return getToken(TSqlParser.GROUP, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Hadr_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hadr_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterHadr_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitHadr_options(this);
		}
	}

	public final Hadr_optionsContext hadr_options() throws RecognitionException {
		Hadr_optionsContext _localctx = new Hadr_optionsContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_hadr_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6986);
			match(HADR);
			setState(6995);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OFF:
			case AVAILABILITY:
				{
				setState(6992);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AVAILABILITY:
					{
					setState(6987);
					match(AVAILABILITY);
					setState(6988);
					match(GROUP);
					setState(6989);
					match(EQUAL);
					setState(6990);
					((Hadr_optionsContext)_localctx).availability_group_name = id();
					}
					break;
				case OFF:
					{
					setState(6991);
					match(OFF);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case RESUME:
			case SUSPEND:
				{
				setState(6994);
				_la = _input.LA(1);
				if ( !(_la==RESUME || _la==SUSPEND) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mixed_page_allocation_optionContext extends ParserRuleContext {
		public TerminalNode MIXED_PAGE_ALLOCATION() { return getToken(TSqlParser.MIXED_PAGE_ALLOCATION, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public Mixed_page_allocation_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mixed_page_allocation_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterMixed_page_allocation_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitMixed_page_allocation_option(this);
		}
	}

	public final Mixed_page_allocation_optionContext mixed_page_allocation_option() throws RecognitionException {
		Mixed_page_allocation_optionContext _localctx = new Mixed_page_allocation_optionContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_mixed_page_allocation_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6997);
			match(MIXED_PAGE_ALLOCATION);
			setState(6998);
			_la = _input.LA(1);
			if ( !(_la==OFF || _la==ON) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parameterization_optionContext extends ParserRuleContext {
		public TerminalNode PARAMETERIZATION() { return getToken(TSqlParser.PARAMETERIZATION, 0); }
		public TerminalNode SIMPLE() { return getToken(TSqlParser.SIMPLE, 0); }
		public TerminalNode FORCED() { return getToken(TSqlParser.FORCED, 0); }
		public Parameterization_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterization_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterParameterization_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitParameterization_option(this);
		}
	}

	public final Parameterization_optionContext parameterization_option() throws RecognitionException {
		Parameterization_optionContext _localctx = new Parameterization_optionContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_parameterization_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7000);
			match(PARAMETERIZATION);
			setState(7001);
			_la = _input.LA(1);
			if ( !(_la==FORCED || _la==SIMPLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Recovery_optionContext extends ParserRuleContext {
		public TerminalNode RECOVERY() { return getToken(TSqlParser.RECOVERY, 0); }
		public TerminalNode FULL() { return getToken(TSqlParser.FULL, 0); }
		public TerminalNode BULK_LOGGED() { return getToken(TSqlParser.BULK_LOGGED, 0); }
		public TerminalNode SIMPLE() { return getToken(TSqlParser.SIMPLE, 0); }
		public TerminalNode TORN_PAGE_DETECTION() { return getToken(TSqlParser.TORN_PAGE_DETECTION, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode PAGE_VERIFY() { return getToken(TSqlParser.PAGE_VERIFY, 0); }
		public TerminalNode CHECKSUM() { return getToken(TSqlParser.CHECKSUM, 0); }
		public TerminalNode NONE() { return getToken(TSqlParser.NONE, 0); }
		public Recovery_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_recovery_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterRecovery_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitRecovery_option(this);
		}
	}

	public final Recovery_optionContext recovery_option() throws RecognitionException {
		Recovery_optionContext _localctx = new Recovery_optionContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_recovery_option);
		int _la;
		try {
			setState(7009);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RECOVERY:
				enterOuterAlt(_localctx, 1);
				{
				setState(7003);
				match(RECOVERY);
				setState(7004);
				_la = _input.LA(1);
				if ( !(_la==FULL || _la==BULK_LOGGED || _la==SIMPLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case TORN_PAGE_DETECTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(7005);
				match(TORN_PAGE_DETECTION);
				setState(7006);
				on_off();
				}
				break;
			case PAGE_VERIFY:
				enterOuterAlt(_localctx, 3);
				{
				setState(7007);
				match(PAGE_VERIFY);
				setState(7008);
				_la = _input.LA(1);
				if ( !(_la==NONE || _la==CHECKSUM || _la==TORN_PAGE_DETECTION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Service_broker_optionContext extends ParserRuleContext {
		public TerminalNode ENABLE_BROKER() { return getToken(TSqlParser.ENABLE_BROKER, 0); }
		public TerminalNode DISABLE_BROKER() { return getToken(TSqlParser.DISABLE_BROKER, 0); }
		public TerminalNode NEW_BROKER() { return getToken(TSqlParser.NEW_BROKER, 0); }
		public TerminalNode ERROR_BROKER_CONVERSATIONS() { return getToken(TSqlParser.ERROR_BROKER_CONVERSATIONS, 0); }
		public TerminalNode HONOR_BROKER_PRIORITY() { return getToken(TSqlParser.HONOR_BROKER_PRIORITY, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public Service_broker_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_service_broker_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterService_broker_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitService_broker_option(this);
		}
	}

	public final Service_broker_optionContext service_broker_option() throws RecognitionException {
		Service_broker_optionContext _localctx = new Service_broker_optionContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_service_broker_option);
		try {
			setState(7017);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENABLE_BROKER:
				enterOuterAlt(_localctx, 1);
				{
				setState(7011);
				match(ENABLE_BROKER);
				}
				break;
			case DISABLE_BROKER:
				enterOuterAlt(_localctx, 2);
				{
				setState(7012);
				match(DISABLE_BROKER);
				}
				break;
			case NEW_BROKER:
				enterOuterAlt(_localctx, 3);
				{
				setState(7013);
				match(NEW_BROKER);
				}
				break;
			case ERROR_BROKER_CONVERSATIONS:
				enterOuterAlt(_localctx, 4);
				{
				setState(7014);
				match(ERROR_BROKER_CONVERSATIONS);
				}
				break;
			case HONOR_BROKER_PRIORITY:
				enterOuterAlt(_localctx, 5);
				{
				setState(7015);
				match(HONOR_BROKER_PRIORITY);
				setState(7016);
				on_off();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Snapshot_optionContext extends ParserRuleContext {
		public Token MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT;
		public TerminalNode ALLOW_SNAPSHOT_ISOLATION() { return getToken(TSqlParser.ALLOW_SNAPSHOT_ISOLATION, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode READ_COMMITTED_SNAPSHOT() { return getToken(TSqlParser.READ_COMMITTED_SNAPSHOT, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public Snapshot_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_snapshot_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSnapshot_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSnapshot_option(this);
		}
	}

	public final Snapshot_optionContext snapshot_option() throws RecognitionException {
		Snapshot_optionContext _localctx = new Snapshot_optionContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_snapshot_option);
		int _la;
		try {
			setState(7024);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALLOW_SNAPSHOT_ISOLATION:
				enterOuterAlt(_localctx, 1);
				{
				setState(7019);
				match(ALLOW_SNAPSHOT_ISOLATION);
				setState(7020);
				on_off();
				}
				break;
			case READ_COMMITTED_SNAPSHOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(7021);
				match(READ_COMMITTED_SNAPSHOT);
				setState(7022);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case OFF:
			case ON:
				enterOuterAlt(_localctx, 3);
				{
				setState(7023);
				((Snapshot_optionContext)_localctx).MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
					((Snapshot_optionContext)_localctx).MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_optionContext extends ParserRuleContext {
		public TerminalNode ANSI_NULL_DEFAULT() { return getToken(TSqlParser.ANSI_NULL_DEFAULT, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode ANSI_NULLS() { return getToken(TSqlParser.ANSI_NULLS, 0); }
		public TerminalNode ANSI_PADDING() { return getToken(TSqlParser.ANSI_PADDING, 0); }
		public TerminalNode ANSI_WARNINGS() { return getToken(TSqlParser.ANSI_WARNINGS, 0); }
		public TerminalNode ARITHABORT() { return getToken(TSqlParser.ARITHABORT, 0); }
		public TerminalNode COMPATIBILITY_LEVEL() { return getToken(TSqlParser.COMPATIBILITY_LEVEL, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode CONCAT_NULL_YIELDS_NULL() { return getToken(TSqlParser.CONCAT_NULL_YIELDS_NULL, 0); }
		public TerminalNode NUMERIC_ROUNDABORT() { return getToken(TSqlParser.NUMERIC_ROUNDABORT, 0); }
		public TerminalNode QUOTED_IDENTIFIER() { return getToken(TSqlParser.QUOTED_IDENTIFIER, 0); }
		public TerminalNode RECURSIVE_TRIGGERS() { return getToken(TSqlParser.RECURSIVE_TRIGGERS, 0); }
		public Sql_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSql_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSql_option(this);
		}
	}

	public final Sql_optionContext sql_option() throws RecognitionException {
		Sql_optionContext _localctx = new Sql_optionContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_sql_option);
		try {
			setState(7047);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ANSI_NULL_DEFAULT:
				enterOuterAlt(_localctx, 1);
				{
				setState(7026);
				match(ANSI_NULL_DEFAULT);
				setState(7027);
				on_off();
				}
				break;
			case ANSI_NULLS:
				enterOuterAlt(_localctx, 2);
				{
				setState(7028);
				match(ANSI_NULLS);
				setState(7029);
				on_off();
				}
				break;
			case ANSI_PADDING:
				enterOuterAlt(_localctx, 3);
				{
				setState(7030);
				match(ANSI_PADDING);
				setState(7031);
				on_off();
				}
				break;
			case ANSI_WARNINGS:
				enterOuterAlt(_localctx, 4);
				{
				setState(7032);
				match(ANSI_WARNINGS);
				setState(7033);
				on_off();
				}
				break;
			case ARITHABORT:
				enterOuterAlt(_localctx, 5);
				{
				setState(7034);
				match(ARITHABORT);
				setState(7035);
				on_off();
				}
				break;
			case COMPATIBILITY_LEVEL:
				enterOuterAlt(_localctx, 6);
				{
				setState(7036);
				match(COMPATIBILITY_LEVEL);
				setState(7037);
				match(EQUAL);
				setState(7038);
				match(DECIMAL);
				}
				break;
			case CONCAT_NULL_YIELDS_NULL:
				enterOuterAlt(_localctx, 7);
				{
				setState(7039);
				match(CONCAT_NULL_YIELDS_NULL);
				setState(7040);
				on_off();
				}
				break;
			case NUMERIC_ROUNDABORT:
				enterOuterAlt(_localctx, 8);
				{
				setState(7041);
				match(NUMERIC_ROUNDABORT);
				setState(7042);
				on_off();
				}
				break;
			case QUOTED_IDENTIFIER:
				enterOuterAlt(_localctx, 9);
				{
				setState(7043);
				match(QUOTED_IDENTIFIER);
				setState(7044);
				on_off();
				}
				break;
			case RECURSIVE_TRIGGERS:
				enterOuterAlt(_localctx, 10);
				{
				setState(7045);
				match(RECURSIVE_TRIGGERS);
				setState(7046);
				on_off();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Target_recovery_time_optionContext extends ParserRuleContext {
		public TerminalNode TARGET_RECOVERY_TIME() { return getToken(TSqlParser.TARGET_RECOVERY_TIME, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode SECONDS() { return getToken(TSqlParser.SECONDS, 0); }
		public TerminalNode MINUTES() { return getToken(TSqlParser.MINUTES, 0); }
		public Target_recovery_time_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_target_recovery_time_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTarget_recovery_time_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTarget_recovery_time_option(this);
		}
	}

	public final Target_recovery_time_optionContext target_recovery_time_option() throws RecognitionException {
		Target_recovery_time_optionContext _localctx = new Target_recovery_time_optionContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_target_recovery_time_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7049);
			match(TARGET_RECOVERY_TIME);
			setState(7050);
			match(EQUAL);
			setState(7051);
			match(DECIMAL);
			setState(7052);
			_la = _input.LA(1);
			if ( !(_la==MINUTES || _la==SECONDS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TerminationContext extends ParserRuleContext {
		public Token seconds;
		public TerminalNode ROLLBACK() { return getToken(TSqlParser.ROLLBACK, 0); }
		public TerminalNode AFTER() { return getToken(TSqlParser.AFTER, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode IMMEDIATE() { return getToken(TSqlParser.IMMEDIATE, 0); }
		public TerminalNode NO_WAIT() { return getToken(TSqlParser.NO_WAIT, 0); }
		public TerminationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_termination; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTermination(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTermination(this);
		}
	}

	public final TerminationContext termination() throws RecognitionException {
		TerminationContext _localctx = new TerminationContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_termination);
		try {
			setState(7060);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,931,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7054);
				match(ROLLBACK);
				setState(7055);
				match(AFTER);
				setState(7056);
				((TerminationContext)_localctx).seconds = match(DECIMAL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7057);
				match(ROLLBACK);
				setState(7058);
				match(IMMEDIATE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7059);
				match(NO_WAIT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_indexContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode INDEX() { return getToken(TSqlParser.INDEX, 0); }
		public List<Drop_relational_or_xml_or_spatial_indexContext> drop_relational_or_xml_or_spatial_index() {
			return getRuleContexts(Drop_relational_or_xml_or_spatial_indexContext.class);
		}
		public Drop_relational_or_xml_or_spatial_indexContext drop_relational_or_xml_or_spatial_index(int i) {
			return getRuleContext(Drop_relational_or_xml_or_spatial_indexContext.class,i);
		}
		public List<Drop_backward_compatible_indexContext> drop_backward_compatible_index() {
			return getRuleContexts(Drop_backward_compatible_indexContext.class);
		}
		public Drop_backward_compatible_indexContext drop_backward_compatible_index(int i) {
			return getRuleContext(Drop_backward_compatible_indexContext.class,i);
		}
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public Drop_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_index(this);
		}
	}

	public final Drop_indexContext drop_index() throws RecognitionException {
		Drop_indexContext _localctx = new Drop_indexContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_drop_index);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7062);
			match(DROP);
			setState(7063);
			match(INDEX);
			setState(7066);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(7064);
				match(IF);
				setState(7065);
				match(EXISTS);
				}
			}

			setState(7084);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,935,_ctx) ) {
			case 1:
				{
				setState(7068);
				drop_relational_or_xml_or_spatial_index();
				setState(7073);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7069);
					match(COMMA);
					setState(7070);
					drop_relational_or_xml_or_spatial_index();
					}
					}
					setState(7075);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				{
				setState(7076);
				drop_backward_compatible_index();
				setState(7081);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7077);
					match(COMMA);
					setState(7078);
					drop_backward_compatible_index();
					}
					}
					setState(7083);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(7087);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,936,_ctx) ) {
			case 1:
				{
				setState(7086);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_relational_or_xml_or_spatial_indexContext extends ParserRuleContext {
		public IdContext index_name;
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_relational_or_xml_or_spatial_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_relational_or_xml_or_spatial_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_relational_or_xml_or_spatial_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_relational_or_xml_or_spatial_index(this);
		}
	}

	public final Drop_relational_or_xml_or_spatial_indexContext drop_relational_or_xml_or_spatial_index() throws RecognitionException {
		Drop_relational_or_xml_or_spatial_indexContext _localctx = new Drop_relational_or_xml_or_spatial_indexContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_drop_relational_or_xml_or_spatial_index);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7089);
			((Drop_relational_or_xml_or_spatial_indexContext)_localctx).index_name = id();
			setState(7090);
			match(ON);
			setState(7091);
			full_table_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_backward_compatible_indexContext extends ParserRuleContext {
		public IdContext owner_name;
		public IdContext table_or_view_name;
		public IdContext index_name;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Drop_backward_compatible_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_backward_compatible_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_backward_compatible_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_backward_compatible_index(this);
		}
	}

	public final Drop_backward_compatible_indexContext drop_backward_compatible_index() throws RecognitionException {
		Drop_backward_compatible_indexContext _localctx = new Drop_backward_compatible_indexContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_drop_backward_compatible_index);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7096);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,937,_ctx) ) {
			case 1:
				{
				setState(7093);
				((Drop_backward_compatible_indexContext)_localctx).owner_name = id();
				setState(7094);
				match(DOT);
				}
				break;
			}
			setState(7098);
			((Drop_backward_compatible_indexContext)_localctx).table_or_view_name = id();
			setState(7099);
			match(DOT);
			setState(7100);
			((Drop_backward_compatible_indexContext)_localctx).index_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_procedureContext extends ParserRuleContext {
		public Token proc;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public List<Func_proc_nameContext> func_proc_name() {
			return getRuleContexts(Func_proc_nameContext.class);
		}
		public Func_proc_nameContext func_proc_name(int i) {
			return getRuleContext(Func_proc_nameContext.class,i);
		}
		public TerminalNode PROC() { return getToken(TSqlParser.PROC, 0); }
		public TerminalNode PROCEDURE() { return getToken(TSqlParser.PROCEDURE, 0); }
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public Drop_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_procedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_procedure(this);
		}
	}

	public final Drop_procedureContext drop_procedure() throws RecognitionException {
		Drop_procedureContext _localctx = new Drop_procedureContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_drop_procedure);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7102);
			match(DROP);
			setState(7103);
			((Drop_procedureContext)_localctx).proc = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==PROC || _la==PROCEDURE) ) {
				((Drop_procedureContext)_localctx).proc = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(7106);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(7104);
				match(IF);
				setState(7105);
				match(EXISTS);
				}
			}

			setState(7108);
			func_proc_name();
			setState(7113);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7109);
				match(COMMA);
				setState(7110);
				func_proc_name();
				}
				}
				setState(7115);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7117);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,940,_ctx) ) {
			case 1:
				{
				setState(7116);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_triggerContext extends ParserRuleContext {
		public Drop_dml_triggerContext drop_dml_trigger() {
			return getRuleContext(Drop_dml_triggerContext.class,0);
		}
		public Drop_ddl_triggerContext drop_ddl_trigger() {
			return getRuleContext(Drop_ddl_triggerContext.class,0);
		}
		public Drop_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_trigger(this);
		}
	}

	public final Drop_triggerContext drop_trigger() throws RecognitionException {
		Drop_triggerContext _localctx = new Drop_triggerContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_drop_trigger);
		try {
			setState(7121);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,941,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7119);
				drop_dml_trigger();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7120);
				drop_ddl_trigger();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_dml_triggerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode TRIGGER() { return getToken(TSqlParser.TRIGGER, 0); }
		public List<Simple_nameContext> simple_name() {
			return getRuleContexts(Simple_nameContext.class);
		}
		public Simple_nameContext simple_name(int i) {
			return getRuleContext(Simple_nameContext.class,i);
		}
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public Drop_dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_dml_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_dml_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_dml_trigger(this);
		}
	}

	public final Drop_dml_triggerContext drop_dml_trigger() throws RecognitionException {
		Drop_dml_triggerContext _localctx = new Drop_dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_drop_dml_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7123);
			match(DROP);
			setState(7124);
			match(TRIGGER);
			setState(7127);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(7125);
				match(IF);
				setState(7126);
				match(EXISTS);
				}
			}

			setState(7129);
			simple_name();
			setState(7134);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7130);
				match(COMMA);
				setState(7131);
				simple_name();
				}
				}
				setState(7136);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7138);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,944,_ctx) ) {
			case 1:
				{
				setState(7137);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_ddl_triggerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode TRIGGER() { return getToken(TSqlParser.TRIGGER, 0); }
		public List<Simple_nameContext> simple_name() {
			return getRuleContexts(Simple_nameContext.class);
		}
		public Simple_nameContext simple_name(int i) {
			return getRuleContext(Simple_nameContext.class,i);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode ALL() { return getToken(TSqlParser.ALL, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public Drop_ddl_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_ddl_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_ddl_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_ddl_trigger(this);
		}
	}

	public final Drop_ddl_triggerContext drop_ddl_trigger() throws RecognitionException {
		Drop_ddl_triggerContext _localctx = new Drop_ddl_triggerContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_drop_ddl_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7140);
			match(DROP);
			setState(7141);
			match(TRIGGER);
			setState(7144);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(7142);
				match(IF);
				setState(7143);
				match(EXISTS);
				}
			}

			setState(7146);
			simple_name();
			setState(7151);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7147);
				match(COMMA);
				setState(7148);
				simple_name();
				}
				}
				setState(7153);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7154);
			match(ON);
			setState(7158);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATABASE:
				{
				setState(7155);
				match(DATABASE);
				}
				break;
			case ALL:
				{
				setState(7156);
				match(ALL);
				setState(7157);
				match(SERVER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(7161);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,948,_ctx) ) {
			case 1:
				{
				setState(7160);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_functionContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(TSqlParser.FUNCTION, 0); }
		public List<Func_proc_nameContext> func_proc_name() {
			return getRuleContexts(Func_proc_nameContext.class);
		}
		public Func_proc_nameContext func_proc_name(int i) {
			return getRuleContext(Func_proc_nameContext.class,i);
		}
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public Drop_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_function(this);
		}
	}

	public final Drop_functionContext drop_function() throws RecognitionException {
		Drop_functionContext _localctx = new Drop_functionContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_drop_function);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7163);
			match(DROP);
			setState(7164);
			match(FUNCTION);
			setState(7167);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(7165);
				match(IF);
				setState(7166);
				match(EXISTS);
				}
			}

			setState(7169);
			func_proc_name();
			setState(7174);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7170);
				match(COMMA);
				setState(7171);
				func_proc_name();
				}
				}
				setState(7176);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7178);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,951,_ctx) ) {
			case 1:
				{
				setState(7177);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_statisticsContext extends ParserRuleContext {
		public IdContext name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode STATISTICS() { return getToken(TSqlParser.STATISTICS, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<Table_nameContext> table_name() {
			return getRuleContexts(Table_nameContext.class);
		}
		public Table_nameContext table_name(int i) {
			return getRuleContext(Table_nameContext.class,i);
		}
		public Drop_statisticsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_statistics; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_statistics(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_statistics(this);
		}
	}

	public final Drop_statisticsContext drop_statistics() throws RecognitionException {
		Drop_statisticsContext _localctx = new Drop_statisticsContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_drop_statistics);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7180);
			match(DROP);
			setState(7181);
			match(STATISTICS);
			setState(7191); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(7183);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(7182);
					match(COMMA);
					}
				}

				setState(7188);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,953,_ctx) ) {
				case 1:
					{
					setState(7185);
					table_name();
					setState(7186);
					match(DOT);
					}
					break;
				}
				setState(7190);
				((Drop_statisticsContext)_localctx).name = id();
				}
				}
				setState(7193); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==BLOCKING_HIERARCHY || _la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (EVENTDATA - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & ((1L << (INIT - 158)) | (1L << (KEY - 158)) | (1L << (MASTER - 158)) | (1L << (MAX_MEMORY - 158)))) != 0) || ((((_la - 225)) & ~0x3f) == 0 && ((1L << (_la - 225)) & ((1L << (OFFSETS - 225)) | (1L << (PAGE - 225)) | (1L << (PUBLIC - 225)) | (1L << (R - 225)) | (1L << (RAW - 225)) | (1L << (RETURN - 225)) | (1L << (RETURNS - 225)) | (1L << (ROWCOUNT - 225)))) != 0) || ((((_la - 295)) & ~0x3f) == 0 && ((1L << (_la - 295)) & ((1L << (SAFETY - 295)) | (1L << (SERVER - 295)) | (1L << (SID - 295)) | (1L << (SOURCE - 295)) | (1L << (STATE - 295)) | (1L << (START - 295)) | (1L << (TARGET - 295)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (ABSOLUTE - 383)) | (1L << (ACCENT_SENSITIVITY - 383)) | (1L << (ACTION - 383)) | (1L << (ACTIVATION - 383)) | (1L << (ACTIVE - 383)) | (1L << (ADDRESS - 383)) | (1L << (AES_128 - 383)) | (1L << (AES_192 - 383)) | (1L << (AES_256 - 383)) | (1L << (AFFINITY - 383)) | (1L << (AFTER - 383)) | (1L << (AGGREGATE - 383)) | (1L << (ALGORITHM - 383)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 383)) | (1L << (ALLOWED - 383)) | (1L << (ANSI_NULL_DEFAULT - 383)) | (1L << (ANSI_NULLS - 383)) | (1L << (ANSI_PADDING - 383)) | (1L << (ANSI_WARNINGS - 383)) | (1L << (APPLICATION_LOG - 383)) | (1L << (APPLY - 383)) | (1L << (ARITHABORT - 383)) | (1L << (ASSEMBLY - 383)) | (1L << (AUDIT - 383)) | (1L << (AUDIT_GUID - 383)) | (1L << (AUTO - 383)) | (1L << (AUTO_CLEANUP - 383)) | (1L << (AUTO_CLOSE - 383)) | (1L << (AUTO_CREATE_STATISTICS - 383)) | (1L << (AUTO_SHRINK - 383)) | (1L << (AUTO_UPDATE_STATISTICS - 383)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 383)) | (1L << (AVAILABILITY - 383)) | (1L << (AVG - 383)) | (1L << (BACKUP_PRIORITY - 383)) | (1L << (BEGIN_DIALOG - 383)) | (1L << (BIGINT - 383)) | (1L << (BINARY_BASE64 - 383)) | (1L << (BINARY_CHECKSUM - 383)) | (1L << (BINDING - 383)) | (1L << (BLOB_STORAGE - 383)) | (1L << (BROKER - 383)) | (1L << (BROKER_INSTANCE - 383)) | (1L << (BULK_LOGGED - 383)) | (1L << (CALLER - 383)) | (1L << (CAP_CPU_PERCENT - 383)) | (1L << (CAST - 383)) | (1L << (CATALOG - 383)) | (1L << (CATCH - 383)) | (1L << (CHANGE_RETENTION - 383)) | (1L << (CHANGE_TRACKING - 383)) | (1L << (CHECKSUM - 383)) | (1L << (CHECKSUM_AGG - 383)) | (1L << (CLEANUP - 383)) | (1L << (COLLECTION - 383)) | (1L << (COLUMN_MASTER_KEY - 383)) | (1L << (COMMITTED - 383)) | (1L << (COMPATIBILITY_LEVEL - 383)) | (1L << (CONCAT - 383)) | (1L << (CONCAT_NULL_YIELDS_NULL - 383)) | (1L << (CONTENT - 383)) | (1L << (CONTROL - 383)) | (1L << (COOKIE - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (COUNT - 447)) | (1L << (COUNT_BIG - 447)) | (1L << (COUNTER - 447)) | (1L << (CPU - 447)) | (1L << (CREATE_NEW - 447)) | (1L << (CREATION_DISPOSITION - 447)) | (1L << (CREDENTIAL - 447)) | (1L << (CRYPTOGRAPHIC - 447)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 447)) | (1L << (CURSOR_DEFAULT - 447)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 447)) | (1L << (DATEADD - 447)) | (1L << (DATEDIFF - 447)) | (1L << (DATENAME - 447)) | (1L << (DATEPART - 447)) | (1L << (DAYS - 447)) | (1L << (DB_CHAINING - 447)) | (1L << (DB_FAILOVER - 447)) | (1L << (DECRYPTION - 447)) | (1L << (DEFAULT_DOUBLE_QUOTE - 447)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1L << (DEFAULT_LANGUAGE - 447)) | (1L << (DELAY - 447)) | (1L << (DELAYED_DURABILITY - 447)) | (1L << (DELETED - 447)) | (1L << (DENSE_RANK - 447)) | (1L << (DEPENDENTS - 447)) | (1L << (DES - 447)) | (1L << (DESCRIPTION - 447)) | (1L << (DESX - 447)) | (1L << (DHCP - 447)) | (1L << (DIALOG - 447)) | (1L << (DIRECTORY_NAME - 447)) | (1L << (DISABLE - 447)) | (1L << (DISABLE_BROKER - 447)) | (1L << (DISABLED - 447)) | (1L << (DISK_DRIVE - 447)) | (1L << (DOCUMENT - 447)) | (1L << (DYNAMIC - 447)) | (1L << (EMERGENCY - 447)) | (1L << (EMPTY - 447)) | (1L << (ENABLE - 447)) | (1L << (ENABLE_BROKER - 447)) | (1L << (ENCRYPTED_VALUE - 447)) | (1L << (ENCRYPTION - 447)) | (1L << (ENDPOINT_URL - 447)) | (1L << (ERROR_BROKER_CONVERSATIONS - 447)) | (1L << (EXCLUSIVE - 447)) | (1L << (EXECUTABLE - 447)) | (1L << (EXIST - 447)) | (1L << (EXPAND - 447)) | (1L << (EXPIRY_DATE - 447)) | (1L << (EXPLICIT - 447)) | (1L << (FAIL_OPERATION - 447)) | (1L << (FAILOVER_MODE - 447)) | (1L << (FAILURE - 447)) | (1L << (FAILURE_CONDITION_LEVEL - 447)) | (1L << (FAST - 447)) | (1L << (FAST_FORWARD - 447)) | (1L << (FILEGROUP - 447)) | (1L << (FILEGROWTH - 447)) | (1L << (FILEPATH - 447)) | (1L << (FILESTREAM - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (FILTER - 511)) | (1L << (FIRST - 511)) | (1L << (FIRST_VALUE - 511)) | (1L << (FOLLOWING - 511)) | (1L << (FORCE - 511)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1L << (FORCED - 511)) | (1L << (FORMAT - 511)) | (1L << (FORWARD_ONLY - 511)) | (1L << (FULLSCAN - 511)) | (1L << (FULLTEXT - 511)) | (1L << (GB - 511)) | (1L << (GETDATE - 511)) | (1L << (GETUTCDATE - 511)) | (1L << (GLOBAL - 511)) | (1L << (GO - 511)) | (1L << (GROUP_MAX_REQUESTS - 511)) | (1L << (GROUPING - 511)) | (1L << (GROUPING_ID - 511)) | (1L << (HADR - 511)) | (1L << (HASH - 511)) | (1L << (HEALTH_CHECK_TIMEOUT - 511)) | (1L << (HIGH - 511)) | (1L << (HONOR_BROKER_PRIORITY - 511)) | (1L << (HOURS - 511)) | (1L << (IDENTITY_VALUE - 511)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1L << (IMMEDIATE - 511)) | (1L << (IMPERSONATE - 511)) | (1L << (IMPORTANCE - 511)) | (1L << (INCREMENTAL - 511)) | (1L << (INITIATOR - 511)) | (1L << (INPUT - 511)) | (1L << (INSENSITIVE - 511)) | (1L << (INSERTED - 511)) | (1L << (INT - 511)) | (1L << (IP - 511)) | (1L << (ISOLATION - 511)) | (1L << (KB - 511)) | (1L << (KEEP - 511)) | (1L << (KEEPFIXED - 511)) | (1L << (KEY_SOURCE - 511)) | (1L << (KEYS - 511)) | (1L << (KEYSET - 511)) | (1L << (LAG - 511)) | (1L << (LAST - 511)) | (1L << (LAST_VALUE - 511)) | (1L << (LEAD - 511)) | (1L << (LEVEL - 511)) | (1L << (LIST - 511)) | (1L << (LISTENER - 511)) | (1L << (LISTENER_URL - 511)) | (1L << (LOB_COMPACTION - 511)) | (1L << (LOCAL - 511)) | (1L << (LOCATION - 511)) | (1L << (LOCK - 511)) | (1L << (LOCK_ESCALATION - 511)) | (1L << (LOGIN - 511)) | (1L << (LOOP - 511)) | (1L << (LOW - 511)) | (1L << (MANUAL - 511)) | (1L << (MARK - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (MATERIALIZED - 575)) | (1L << (MAX - 575)) | (1L << (MAX_CPU_PERCENT - 575)) | (1L << (MAX_DOP - 575)) | (1L << (MAX_FILES - 575)) | (1L << (MAX_IOPS_PER_VOLUME - 575)) | (1L << (MAX_MEMORY_PERCENT - 575)) | (1L << (MAX_PROCESSES - 575)) | (1L << (MAX_QUEUE_READERS - 575)) | (1L << (MAX_ROLLOVER_FILES - 575)) | (1L << (MAXDOP - 575)) | (1L << (MAXRECURSION - 575)) | (1L << (MAXSIZE - 575)) | (1L << (MB - 575)) | (1L << (MEDIUM - 575)) | (1L << (MEMORY_OPTIMIZED_DATA - 575)) | (1L << (MESSAGE - 575)) | (1L << (MIN - 575)) | (1L << (MIN_ACTIVE_ROWVERSION - 575)) | (1L << (MIN_CPU_PERCENT - 575)) | (1L << (MIN_IOPS_PER_VOLUME - 575)) | (1L << (MIN_MEMORY_PERCENT - 575)) | (1L << (MINUTES - 575)) | (1L << (MIRROR_ADDRESS - 575)) | (1L << (MIXED_PAGE_ALLOCATION - 575)) | (1L << (MODE - 575)) | (1L << (MODIFY - 575)) | (1L << (MOVE - 575)) | (1L << (MULTI_USER - 575)) | (1L << (NAME - 575)) | (1L << (NESTED_TRIGGERS - 575)) | (1L << (NEW_ACCOUNT - 575)) | (1L << (NEW_BROKER - 575)) | (1L << (NEW_PASSWORD - 575)) | (1L << (NEXT - 575)) | (1L << (NO - 575)) | (1L << (NO_TRUNCATE - 575)) | (1L << (NO_WAIT - 575)) | (1L << (NOCOUNT - 575)) | (1L << (NODES - 575)) | (1L << (NOEXPAND - 575)) | (1L << (NON_TRANSACTED_ACCESS - 575)) | (1L << (NORECOMPUTE - 575)) | (1L << (NORECOVERY - 575)) | (1L << (NOWAIT - 575)) | (1L << (NTILE - 575)) | (1L << (NUMANODE - 575)) | (1L << (NUMBER - 575)) | (1L << (NUMERIC_ROUNDABORT - 575)) | (1L << (OBJECT - 575)) | (1L << (OFFLINE - 575)) | (1L << (OFFSET - 575)) | (1L << (OLD_ACCOUNT - 575)) | (1L << (ONLINE - 575)) | (1L << (ONLY - 575)) | (1L << (OPEN_EXISTING - 575)) | (1L << (OPTIMISTIC - 575)) | (1L << (OPTIMIZE - 575)) | (1L << (OUT - 575)) | (1L << (OUTPUT - 575)) | (1L << (OWNER - 575)) | (1L << (PAGE_VERIFY - 575)) | (1L << (PARAMETERIZATION - 575)) | (1L << (PARTITION - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (PARTITIONS - 639)) | (1L << (PARTNER - 639)) | (1L << (PATH - 639)) | (1L << (POISON_MESSAGE_HANDLING - 639)) | (1L << (POOL - 639)) | (1L << (PORT - 639)) | (1L << (PRECEDING - 639)) | (1L << (PRIMARY_ROLE - 639)) | (1L << (PRIOR - 639)) | (1L << (PRIORITY - 639)) | (1L << (PRIORITY_LEVEL - 639)) | (1L << (PRIVATE - 639)) | (1L << (PRIVATE_KEY - 639)) | (1L << (PRIVILEGES - 639)) | (1L << (PROCEDURE_NAME - 639)) | (1L << (PROPERTY - 639)) | (1L << (PROVIDER - 639)) | (1L << (PROVIDER_KEY_NAME - 639)) | (1L << (QUERY - 639)) | (1L << (QUEUE - 639)) | (1L << (QUEUE_DELAY - 639)) | (1L << (QUOTED_IDENTIFIER - 639)) | (1L << (RANGE - 639)) | (1L << (RANK - 639)) | (1L << (RC2 - 639)) | (1L << (RC4 - 639)) | (1L << (RC4_128 - 639)) | (1L << (READ_COMMITTED_SNAPSHOT - 639)) | (1L << (READ_ONLY - 639)) | (1L << (READ_ONLY_ROUTING_LIST - 639)) | (1L << (READ_WRITE - 639)) | (1L << (READONLY - 639)) | (1L << (REBUILD - 639)) | (1L << (RECEIVE - 639)) | (1L << (RECOMPILE - 639)) | (1L << (RECOVERY - 639)) | (1L << (RECURSIVE_TRIGGERS - 639)) | (1L << (RELATIVE - 639)) | (1L << (REMOTE - 639)) | (1L << (REMOTE_SERVICE_NAME - 639)) | (1L << (REMOVE - 639)) | (1L << (REORGANIZE - 639)) | (1L << (REPEATABLE - 639)) | (1L << (REPLICA - 639)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 639)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 639)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 639)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 639)) | (1L << (RESERVE_DISK_SPACE - 639)) | (1L << (RESOURCE - 639)) | (1L << (RESOURCE_MANAGER_LOCATION - 639)) | (1L << (RESTRICTED_USER - 639)) | (1L << (RETENTION - 639)) | (1L << (ROBUST - 639)) | (1L << (ROOT - 639)) | (1L << (ROUTE - 639)) | (1L << (ROW - 639)) | (1L << (ROW_NUMBER - 639)) | (1L << (ROWGUID - 639)) | (1L << (ROWS - 639)) | (1L << (SAMPLE - 639)) | (1L << (SCHEMABINDING - 639)) | (1L << (SCOPED - 639)) | (1L << (SCROLL - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (SCROLL_LOCKS - 703)) | (1L << (SEARCH - 703)) | (1L << (SECONDARY - 703)) | (1L << (SECONDARY_ONLY - 703)) | (1L << (SECONDARY_ROLE - 703)) | (1L << (SECONDS - 703)) | (1L << (SECRET - 703)) | (1L << (SECURITY_LOG - 703)) | (1L << (SEEDING_MODE - 703)) | (1L << (SELF - 703)) | (1L << (SEMI_SENSITIVE - 703)) | (1L << (SEND - 703)) | (1L << (SENT - 703)) | (1L << (SERIALIZABLE - 703)) | (1L << (SESSION_TIMEOUT - 703)) | (1L << (SETERROR - 703)) | (1L << (SHARE - 703)) | (1L << (SHOWPLAN - 703)) | (1L << (SIGNATURE - 703)) | (1L << (SIMPLE - 703)) | (1L << (SINGLE_USER - 703)) | (1L << (SIZE - 703)) | (1L << (SMALLINT - 703)) | (1L << (SNAPSHOT - 703)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 703)) | (1L << (STANDBY - 703)) | (1L << (START_DATE - 703)) | (1L << (STATIC - 703)) | (1L << (STATS_STREAM - 703)) | (1L << (STATUS - 703)) | (1L << (STDEV - 703)) | (1L << (STDEVP - 703)) | (1L << (STOPLIST - 703)) | (1L << (STUFF - 703)) | (1L << (SUBJECT - 703)) | (1L << (SUM - 703)) | (1L << (SUSPEND - 703)) | (1L << (SYMMETRIC - 703)) | (1L << (SYNCHRONOUS_COMMIT - 703)) | (1L << (SYNONYM - 703)) | (1L << (TAKE - 703)) | (1L << (TARGET_RECOVERY_TIME - 703)) | (1L << (TB - 703)) | (1L << (TEXTIMAGE_ON - 703)) | (1L << (THROW - 703)) | (1L << (TIES - 703)) | (1L << (TIME - 703)) | (1L << (TIMEOUT - 703)) | (1L << (TIMER - 703)) | (1L << (TINYINT - 703)) | (1L << (TORN_PAGE_DETECTION - 703)) | (1L << (TRANSFORM_NOISE_WORDS - 703)) | (1L << (TRIPLE_DES - 703)) | (1L << (TRIPLE_DES_3KEY - 703)) | (1L << (TRUSTWORTHY - 703)) | (1L << (TRY - 703)) | (1L << (TSQL - 703)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 703)) | (1L << (TYPE - 703)) | (1L << (TYPE_WARNING - 703)) | (1L << (UNBOUNDED - 703)) | (1L << (UNCOMMITTED - 703)) | (1L << (UNKNOWN - 703)) | (1L << (UNLIMITED - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (USING - 767)) | (1L << (VALID_XML - 767)) | (1L << (VALIDATION - 767)) | (1L << (VALUE - 767)) | (1L << (VAR - 767)) | (1L << (VARP - 767)) | (1L << (VIEW_METADATA - 767)) | (1L << (VIEWS - 767)) | (1L << (WAIT - 767)) | (1L << (WELL_FORMED_XML - 767)) | (1L << (WORK - 767)) | (1L << (WORKLOAD - 767)) | (1L << (XML - 767)) | (1L << (XMLNAMESPACES - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)) | (1L << (COMMA - 767)))) != 0) );
			setState(7195);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_tableContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode TABLE() { return getToken(TSqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public Drop_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_table(this);
		}
	}

	public final Drop_tableContext drop_table() throws RecognitionException {
		Drop_tableContext _localctx = new Drop_tableContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_drop_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7197);
			match(DROP);
			setState(7198);
			match(TABLE);
			setState(7201);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(7199);
				match(IF);
				setState(7200);
				match(EXISTS);
				}
			}

			setState(7203);
			table_name();
			setState(7205);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,956,_ctx) ) {
			case 1:
				{
				setState(7204);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_viewContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode VIEW() { return getToken(TSqlParser.VIEW, 0); }
		public List<Simple_nameContext> simple_name() {
			return getRuleContexts(Simple_nameContext.class);
		}
		public Simple_nameContext simple_name(int i) {
			return getRuleContext(Simple_nameContext.class,i);
		}
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public Drop_viewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_view; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_view(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_view(this);
		}
	}

	public final Drop_viewContext drop_view() throws RecognitionException {
		Drop_viewContext _localctx = new Drop_viewContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_drop_view);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7207);
			match(DROP);
			setState(7208);
			match(VIEW);
			setState(7211);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(7209);
				match(IF);
				setState(7210);
				match(EXISTS);
				}
			}

			setState(7213);
			simple_name();
			setState(7218);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7214);
				match(COMMA);
				setState(7215);
				simple_name();
				}
				}
				setState(7220);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7222);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,959,_ctx) ) {
			case 1:
				{
				setState(7221);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_typeContext extends ParserRuleContext {
		public Simple_nameContext name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode TYPE() { return getToken(TSqlParser.TYPE, 0); }
		public Simple_nameContext simple_name() {
			return getRuleContext(Simple_nameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public Default_valueContext default_value() {
			return getRuleContext(Default_valueContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public TerminalNode TABLE() { return getToken(TSqlParser.TABLE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public Column_def_table_constraintsContext column_def_table_constraints() {
			return getRuleContext(Column_def_table_constraintsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public Create_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_type(this);
		}
	}

	public final Create_typeContext create_type() throws RecognitionException {
		Create_typeContext _localctx = new Create_typeContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_create_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7224);
			match(CREATE);
			setState(7225);
			match(TYPE);
			setState(7226);
			((Create_typeContext)_localctx).name = simple_name();
			setState(7231);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(7227);
				match(FROM);
				setState(7228);
				data_type();
				setState(7229);
				default_value();
				}
			}

			setState(7239);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(7233);
				match(AS);
				setState(7234);
				match(TABLE);
				setState(7235);
				match(LR_BRACKET);
				setState(7236);
				column_def_table_constraints();
				setState(7237);
				match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_typeContext extends ParserRuleContext {
		public Simple_nameContext name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode TYPE() { return getToken(TSqlParser.TYPE, 0); }
		public Simple_nameContext simple_name() {
			return getRuleContext(Simple_nameContext.class,0);
		}
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public Drop_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDrop_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDrop_type(this);
		}
	}

	public final Drop_typeContext drop_type() throws RecognitionException {
		Drop_typeContext _localctx = new Drop_typeContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_drop_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7241);
			match(DROP);
			setState(7242);
			match(TYPE);
			setState(7245);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(7243);
				match(IF);
				setState(7244);
				match(EXISTS);
				}
			}

			setState(7247);
			((Drop_typeContext)_localctx).name = simple_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rowset_function_limitedContext extends ParserRuleContext {
		public OpenqueryContext openquery() {
			return getRuleContext(OpenqueryContext.class,0);
		}
		public OpendatasourceContext opendatasource() {
			return getRuleContext(OpendatasourceContext.class,0);
		}
		public Rowset_function_limitedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowset_function_limited; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterRowset_function_limited(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitRowset_function_limited(this);
		}
	}

	public final Rowset_function_limitedContext rowset_function_limited() throws RecognitionException {
		Rowset_function_limitedContext _localctx = new Rowset_function_limitedContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_rowset_function_limited);
		try {
			setState(7251);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPENQUERY:
				enterOuterAlt(_localctx, 1);
				{
				setState(7249);
				openquery();
				}
				break;
			case OPENDATASOURCE:
				enterOuterAlt(_localctx, 2);
				{
				setState(7250);
				opendatasource();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpenqueryContext extends ParserRuleContext {
		public IdContext linked_server;
		public Token query;
		public TerminalNode OPENQUERY() { return getToken(TSqlParser.OPENQUERY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public OpenqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_openquery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterOpenquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitOpenquery(this);
		}
	}

	public final OpenqueryContext openquery() throws RecognitionException {
		OpenqueryContext _localctx = new OpenqueryContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_openquery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7253);
			match(OPENQUERY);
			setState(7254);
			match(LR_BRACKET);
			setState(7255);
			((OpenqueryContext)_localctx).linked_server = id();
			setState(7256);
			match(COMMA);
			setState(7257);
			((OpenqueryContext)_localctx).query = match(STRING);
			setState(7258);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpendatasourceContext extends ParserRuleContext {
		public Token provider;
		public Token init;
		public IdContext database;
		public IdContext scheme;
		public IdContext table;
		public TerminalNode OPENDATASOURCE() { return getToken(TSqlParser.OPENDATASOURCE, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public OpendatasourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opendatasource; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterOpendatasource(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitOpendatasource(this);
		}
	}

	public final OpendatasourceContext opendatasource() throws RecognitionException {
		OpendatasourceContext _localctx = new OpendatasourceContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_opendatasource);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7260);
			match(OPENDATASOURCE);
			setState(7261);
			match(LR_BRACKET);
			setState(7262);
			((OpendatasourceContext)_localctx).provider = match(STRING);
			setState(7263);
			match(COMMA);
			setState(7264);
			((OpendatasourceContext)_localctx).init = match(STRING);
			setState(7265);
			match(RR_BRACKET);
			setState(7266);
			match(DOT);
			setState(7268);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (EVENTDATA - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & ((1L << (INIT - 158)) | (1L << (KEY - 158)) | (1L << (MASTER - 158)) | (1L << (MAX_MEMORY - 158)))) != 0) || ((((_la - 225)) & ~0x3f) == 0 && ((1L << (_la - 225)) & ((1L << (OFFSETS - 225)) | (1L << (PAGE - 225)) | (1L << (PUBLIC - 225)) | (1L << (R - 225)) | (1L << (RAW - 225)) | (1L << (RETURN - 225)) | (1L << (RETURNS - 225)) | (1L << (ROWCOUNT - 225)))) != 0) || ((((_la - 295)) & ~0x3f) == 0 && ((1L << (_la - 295)) & ((1L << (SAFETY - 295)) | (1L << (SERVER - 295)) | (1L << (SID - 295)) | (1L << (SOURCE - 295)) | (1L << (STATE - 295)) | (1L << (START - 295)) | (1L << (TARGET - 295)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (ABSOLUTE - 383)) | (1L << (ACCENT_SENSITIVITY - 383)) | (1L << (ACTION - 383)) | (1L << (ACTIVATION - 383)) | (1L << (ACTIVE - 383)) | (1L << (ADDRESS - 383)) | (1L << (AES_128 - 383)) | (1L << (AES_192 - 383)) | (1L << (AES_256 - 383)) | (1L << (AFFINITY - 383)) | (1L << (AFTER - 383)) | (1L << (AGGREGATE - 383)) | (1L << (ALGORITHM - 383)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 383)) | (1L << (ALLOWED - 383)) | (1L << (ANSI_NULL_DEFAULT - 383)) | (1L << (ANSI_NULLS - 383)) | (1L << (ANSI_PADDING - 383)) | (1L << (ANSI_WARNINGS - 383)) | (1L << (APPLICATION_LOG - 383)) | (1L << (APPLY - 383)) | (1L << (ARITHABORT - 383)) | (1L << (ASSEMBLY - 383)) | (1L << (AUDIT - 383)) | (1L << (AUDIT_GUID - 383)) | (1L << (AUTO - 383)) | (1L << (AUTO_CLEANUP - 383)) | (1L << (AUTO_CLOSE - 383)) | (1L << (AUTO_CREATE_STATISTICS - 383)) | (1L << (AUTO_SHRINK - 383)) | (1L << (AUTO_UPDATE_STATISTICS - 383)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 383)) | (1L << (AVAILABILITY - 383)) | (1L << (AVG - 383)) | (1L << (BACKUP_PRIORITY - 383)) | (1L << (BEGIN_DIALOG - 383)) | (1L << (BIGINT - 383)) | (1L << (BINARY_BASE64 - 383)) | (1L << (BINARY_CHECKSUM - 383)) | (1L << (BINDING - 383)) | (1L << (BLOB_STORAGE - 383)) | (1L << (BROKER - 383)) | (1L << (BROKER_INSTANCE - 383)) | (1L << (BULK_LOGGED - 383)) | (1L << (CALLER - 383)) | (1L << (CAP_CPU_PERCENT - 383)) | (1L << (CAST - 383)) | (1L << (CATALOG - 383)) | (1L << (CATCH - 383)) | (1L << (CHANGE_RETENTION - 383)) | (1L << (CHANGE_TRACKING - 383)) | (1L << (CHECKSUM - 383)) | (1L << (CHECKSUM_AGG - 383)) | (1L << (CLEANUP - 383)) | (1L << (COLLECTION - 383)) | (1L << (COLUMN_MASTER_KEY - 383)) | (1L << (COMMITTED - 383)) | (1L << (COMPATIBILITY_LEVEL - 383)) | (1L << (CONCAT - 383)) | (1L << (CONCAT_NULL_YIELDS_NULL - 383)) | (1L << (CONTENT - 383)) | (1L << (CONTROL - 383)) | (1L << (COOKIE - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (COUNT - 447)) | (1L << (COUNT_BIG - 447)) | (1L << (COUNTER - 447)) | (1L << (CPU - 447)) | (1L << (CREATE_NEW - 447)) | (1L << (CREATION_DISPOSITION - 447)) | (1L << (CREDENTIAL - 447)) | (1L << (CRYPTOGRAPHIC - 447)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 447)) | (1L << (CURSOR_DEFAULT - 447)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 447)) | (1L << (DATEADD - 447)) | (1L << (DATEDIFF - 447)) | (1L << (DATENAME - 447)) | (1L << (DATEPART - 447)) | (1L << (DAYS - 447)) | (1L << (DB_CHAINING - 447)) | (1L << (DB_FAILOVER - 447)) | (1L << (DECRYPTION - 447)) | (1L << (DEFAULT_DOUBLE_QUOTE - 447)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1L << (DEFAULT_LANGUAGE - 447)) | (1L << (DELAY - 447)) | (1L << (DELAYED_DURABILITY - 447)) | (1L << (DELETED - 447)) | (1L << (DENSE_RANK - 447)) | (1L << (DEPENDENTS - 447)) | (1L << (DES - 447)) | (1L << (DESCRIPTION - 447)) | (1L << (DESX - 447)) | (1L << (DHCP - 447)) | (1L << (DIALOG - 447)) | (1L << (DIRECTORY_NAME - 447)) | (1L << (DISABLE - 447)) | (1L << (DISABLE_BROKER - 447)) | (1L << (DISABLED - 447)) | (1L << (DISK_DRIVE - 447)) | (1L << (DOCUMENT - 447)) | (1L << (DYNAMIC - 447)) | (1L << (EMERGENCY - 447)) | (1L << (EMPTY - 447)) | (1L << (ENABLE - 447)) | (1L << (ENABLE_BROKER - 447)) | (1L << (ENCRYPTED_VALUE - 447)) | (1L << (ENCRYPTION - 447)) | (1L << (ENDPOINT_URL - 447)) | (1L << (ERROR_BROKER_CONVERSATIONS - 447)) | (1L << (EXCLUSIVE - 447)) | (1L << (EXECUTABLE - 447)) | (1L << (EXIST - 447)) | (1L << (EXPAND - 447)) | (1L << (EXPIRY_DATE - 447)) | (1L << (EXPLICIT - 447)) | (1L << (FAIL_OPERATION - 447)) | (1L << (FAILOVER_MODE - 447)) | (1L << (FAILURE - 447)) | (1L << (FAILURE_CONDITION_LEVEL - 447)) | (1L << (FAST - 447)) | (1L << (FAST_FORWARD - 447)) | (1L << (FILEGROUP - 447)) | (1L << (FILEGROWTH - 447)) | (1L << (FILEPATH - 447)) | (1L << (FILESTREAM - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (FILTER - 511)) | (1L << (FIRST - 511)) | (1L << (FIRST_VALUE - 511)) | (1L << (FOLLOWING - 511)) | (1L << (FORCE - 511)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1L << (FORCED - 511)) | (1L << (FORMAT - 511)) | (1L << (FORWARD_ONLY - 511)) | (1L << (FULLSCAN - 511)) | (1L << (FULLTEXT - 511)) | (1L << (GB - 511)) | (1L << (GETDATE - 511)) | (1L << (GETUTCDATE - 511)) | (1L << (GLOBAL - 511)) | (1L << (GO - 511)) | (1L << (GROUP_MAX_REQUESTS - 511)) | (1L << (GROUPING - 511)) | (1L << (GROUPING_ID - 511)) | (1L << (HADR - 511)) | (1L << (HASH - 511)) | (1L << (HEALTH_CHECK_TIMEOUT - 511)) | (1L << (HIGH - 511)) | (1L << (HONOR_BROKER_PRIORITY - 511)) | (1L << (HOURS - 511)) | (1L << (IDENTITY_VALUE - 511)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1L << (IMMEDIATE - 511)) | (1L << (IMPERSONATE - 511)) | (1L << (IMPORTANCE - 511)) | (1L << (INCREMENTAL - 511)) | (1L << (INITIATOR - 511)) | (1L << (INPUT - 511)) | (1L << (INSENSITIVE - 511)) | (1L << (INSERTED - 511)) | (1L << (INT - 511)) | (1L << (IP - 511)) | (1L << (ISOLATION - 511)) | (1L << (KB - 511)) | (1L << (KEEP - 511)) | (1L << (KEEPFIXED - 511)) | (1L << (KEY_SOURCE - 511)) | (1L << (KEYS - 511)) | (1L << (KEYSET - 511)) | (1L << (LAG - 511)) | (1L << (LAST - 511)) | (1L << (LAST_VALUE - 511)) | (1L << (LEAD - 511)) | (1L << (LEVEL - 511)) | (1L << (LIST - 511)) | (1L << (LISTENER - 511)) | (1L << (LISTENER_URL - 511)) | (1L << (LOB_COMPACTION - 511)) | (1L << (LOCAL - 511)) | (1L << (LOCATION - 511)) | (1L << (LOCK - 511)) | (1L << (LOCK_ESCALATION - 511)) | (1L << (LOGIN - 511)) | (1L << (LOOP - 511)) | (1L << (LOW - 511)) | (1L << (MANUAL - 511)) | (1L << (MARK - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (MATERIALIZED - 575)) | (1L << (MAX - 575)) | (1L << (MAX_CPU_PERCENT - 575)) | (1L << (MAX_DOP - 575)) | (1L << (MAX_FILES - 575)) | (1L << (MAX_IOPS_PER_VOLUME - 575)) | (1L << (MAX_MEMORY_PERCENT - 575)) | (1L << (MAX_PROCESSES - 575)) | (1L << (MAX_QUEUE_READERS - 575)) | (1L << (MAX_ROLLOVER_FILES - 575)) | (1L << (MAXDOP - 575)) | (1L << (MAXRECURSION - 575)) | (1L << (MAXSIZE - 575)) | (1L << (MB - 575)) | (1L << (MEDIUM - 575)) | (1L << (MEMORY_OPTIMIZED_DATA - 575)) | (1L << (MESSAGE - 575)) | (1L << (MIN - 575)) | (1L << (MIN_ACTIVE_ROWVERSION - 575)) | (1L << (MIN_CPU_PERCENT - 575)) | (1L << (MIN_IOPS_PER_VOLUME - 575)) | (1L << (MIN_MEMORY_PERCENT - 575)) | (1L << (MINUTES - 575)) | (1L << (MIRROR_ADDRESS - 575)) | (1L << (MIXED_PAGE_ALLOCATION - 575)) | (1L << (MODE - 575)) | (1L << (MODIFY - 575)) | (1L << (MOVE - 575)) | (1L << (MULTI_USER - 575)) | (1L << (NAME - 575)) | (1L << (NESTED_TRIGGERS - 575)) | (1L << (NEW_ACCOUNT - 575)) | (1L << (NEW_BROKER - 575)) | (1L << (NEW_PASSWORD - 575)) | (1L << (NEXT - 575)) | (1L << (NO - 575)) | (1L << (NO_TRUNCATE - 575)) | (1L << (NO_WAIT - 575)) | (1L << (NOCOUNT - 575)) | (1L << (NODES - 575)) | (1L << (NOEXPAND - 575)) | (1L << (NON_TRANSACTED_ACCESS - 575)) | (1L << (NORECOMPUTE - 575)) | (1L << (NORECOVERY - 575)) | (1L << (NOWAIT - 575)) | (1L << (NTILE - 575)) | (1L << (NUMANODE - 575)) | (1L << (NUMBER - 575)) | (1L << (NUMERIC_ROUNDABORT - 575)) | (1L << (OBJECT - 575)) | (1L << (OFFLINE - 575)) | (1L << (OFFSET - 575)) | (1L << (OLD_ACCOUNT - 575)) | (1L << (ONLINE - 575)) | (1L << (ONLY - 575)) | (1L << (OPEN_EXISTING - 575)) | (1L << (OPTIMISTIC - 575)) | (1L << (OPTIMIZE - 575)) | (1L << (OUT - 575)) | (1L << (OUTPUT - 575)) | (1L << (OWNER - 575)) | (1L << (PAGE_VERIFY - 575)) | (1L << (PARAMETERIZATION - 575)) | (1L << (PARTITION - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (PARTITIONS - 639)) | (1L << (PARTNER - 639)) | (1L << (PATH - 639)) | (1L << (POISON_MESSAGE_HANDLING - 639)) | (1L << (POOL - 639)) | (1L << (PORT - 639)) | (1L << (PRECEDING - 639)) | (1L << (PRIMARY_ROLE - 639)) | (1L << (PRIOR - 639)) | (1L << (PRIORITY - 639)) | (1L << (PRIORITY_LEVEL - 639)) | (1L << (PRIVATE - 639)) | (1L << (PRIVATE_KEY - 639)) | (1L << (PRIVILEGES - 639)) | (1L << (PROCEDURE_NAME - 639)) | (1L << (PROPERTY - 639)) | (1L << (PROVIDER - 639)) | (1L << (PROVIDER_KEY_NAME - 639)) | (1L << (QUERY - 639)) | (1L << (QUEUE - 639)) | (1L << (QUEUE_DELAY - 639)) | (1L << (QUOTED_IDENTIFIER - 639)) | (1L << (RANGE - 639)) | (1L << (RANK - 639)) | (1L << (RC2 - 639)) | (1L << (RC4 - 639)) | (1L << (RC4_128 - 639)) | (1L << (READ_COMMITTED_SNAPSHOT - 639)) | (1L << (READ_ONLY - 639)) | (1L << (READ_ONLY_ROUTING_LIST - 639)) | (1L << (READ_WRITE - 639)) | (1L << (READONLY - 639)) | (1L << (REBUILD - 639)) | (1L << (RECEIVE - 639)) | (1L << (RECOMPILE - 639)) | (1L << (RECOVERY - 639)) | (1L << (RECURSIVE_TRIGGERS - 639)) | (1L << (RELATIVE - 639)) | (1L << (REMOTE - 639)) | (1L << (REMOTE_SERVICE_NAME - 639)) | (1L << (REMOVE - 639)) | (1L << (REORGANIZE - 639)) | (1L << (REPEATABLE - 639)) | (1L << (REPLICA - 639)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 639)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 639)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 639)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 639)) | (1L << (RESERVE_DISK_SPACE - 639)) | (1L << (RESOURCE - 639)) | (1L << (RESOURCE_MANAGER_LOCATION - 639)) | (1L << (RESTRICTED_USER - 639)) | (1L << (RETENTION - 639)) | (1L << (ROBUST - 639)) | (1L << (ROOT - 639)) | (1L << (ROUTE - 639)) | (1L << (ROW - 639)) | (1L << (ROW_NUMBER - 639)) | (1L << (ROWGUID - 639)) | (1L << (ROWS - 639)) | (1L << (SAMPLE - 639)) | (1L << (SCHEMABINDING - 639)) | (1L << (SCOPED - 639)) | (1L << (SCROLL - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (SCROLL_LOCKS - 703)) | (1L << (SEARCH - 703)) | (1L << (SECONDARY - 703)) | (1L << (SECONDARY_ONLY - 703)) | (1L << (SECONDARY_ROLE - 703)) | (1L << (SECONDS - 703)) | (1L << (SECRET - 703)) | (1L << (SECURITY_LOG - 703)) | (1L << (SEEDING_MODE - 703)) | (1L << (SELF - 703)) | (1L << (SEMI_SENSITIVE - 703)) | (1L << (SEND - 703)) | (1L << (SENT - 703)) | (1L << (SERIALIZABLE - 703)) | (1L << (SESSION_TIMEOUT - 703)) | (1L << (SETERROR - 703)) | (1L << (SHARE - 703)) | (1L << (SHOWPLAN - 703)) | (1L << (SIGNATURE - 703)) | (1L << (SIMPLE - 703)) | (1L << (SINGLE_USER - 703)) | (1L << (SIZE - 703)) | (1L << (SMALLINT - 703)) | (1L << (SNAPSHOT - 703)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 703)) | (1L << (STANDBY - 703)) | (1L << (START_DATE - 703)) | (1L << (STATIC - 703)) | (1L << (STATS_STREAM - 703)) | (1L << (STATUS - 703)) | (1L << (STDEV - 703)) | (1L << (STDEVP - 703)) | (1L << (STOPLIST - 703)) | (1L << (STUFF - 703)) | (1L << (SUBJECT - 703)) | (1L << (SUM - 703)) | (1L << (SUSPEND - 703)) | (1L << (SYMMETRIC - 703)) | (1L << (SYNCHRONOUS_COMMIT - 703)) | (1L << (SYNONYM - 703)) | (1L << (TAKE - 703)) | (1L << (TARGET_RECOVERY_TIME - 703)) | (1L << (TB - 703)) | (1L << (TEXTIMAGE_ON - 703)) | (1L << (THROW - 703)) | (1L << (TIES - 703)) | (1L << (TIME - 703)) | (1L << (TIMEOUT - 703)) | (1L << (TIMER - 703)) | (1L << (TINYINT - 703)) | (1L << (TORN_PAGE_DETECTION - 703)) | (1L << (TRANSFORM_NOISE_WORDS - 703)) | (1L << (TRIPLE_DES - 703)) | (1L << (TRIPLE_DES_3KEY - 703)) | (1L << (TRUSTWORTHY - 703)) | (1L << (TRY - 703)) | (1L << (TSQL - 703)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 703)) | (1L << (TYPE - 703)) | (1L << (TYPE_WARNING - 703)) | (1L << (UNBOUNDED - 703)) | (1L << (UNCOMMITTED - 703)) | (1L << (UNKNOWN - 703)) | (1L << (UNLIMITED - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (USING - 767)) | (1L << (VALID_XML - 767)) | (1L << (VALIDATION - 767)) | (1L << (VALUE - 767)) | (1L << (VAR - 767)) | (1L << (VARP - 767)) | (1L << (VIEW_METADATA - 767)) | (1L << (VIEWS - 767)) | (1L << (WAIT - 767)) | (1L << (WELL_FORMED_XML - 767)) | (1L << (WORK - 767)) | (1L << (WORKLOAD - 767)) | (1L << (XML - 767)) | (1L << (XMLNAMESPACES - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)))) != 0)) {
				{
				setState(7267);
				((OpendatasourceContext)_localctx).database = id();
				}
			}

			setState(7270);
			match(DOT);
			setState(7272);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (EVENTDATA - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & ((1L << (INIT - 158)) | (1L << (KEY - 158)) | (1L << (MASTER - 158)) | (1L << (MAX_MEMORY - 158)))) != 0) || ((((_la - 225)) & ~0x3f) == 0 && ((1L << (_la - 225)) & ((1L << (OFFSETS - 225)) | (1L << (PAGE - 225)) | (1L << (PUBLIC - 225)) | (1L << (R - 225)) | (1L << (RAW - 225)) | (1L << (RETURN - 225)) | (1L << (RETURNS - 225)) | (1L << (ROWCOUNT - 225)))) != 0) || ((((_la - 295)) & ~0x3f) == 0 && ((1L << (_la - 295)) & ((1L << (SAFETY - 295)) | (1L << (SERVER - 295)) | (1L << (SID - 295)) | (1L << (SOURCE - 295)) | (1L << (STATE - 295)) | (1L << (START - 295)) | (1L << (TARGET - 295)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (ABSOLUTE - 383)) | (1L << (ACCENT_SENSITIVITY - 383)) | (1L << (ACTION - 383)) | (1L << (ACTIVATION - 383)) | (1L << (ACTIVE - 383)) | (1L << (ADDRESS - 383)) | (1L << (AES_128 - 383)) | (1L << (AES_192 - 383)) | (1L << (AES_256 - 383)) | (1L << (AFFINITY - 383)) | (1L << (AFTER - 383)) | (1L << (AGGREGATE - 383)) | (1L << (ALGORITHM - 383)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 383)) | (1L << (ALLOWED - 383)) | (1L << (ANSI_NULL_DEFAULT - 383)) | (1L << (ANSI_NULLS - 383)) | (1L << (ANSI_PADDING - 383)) | (1L << (ANSI_WARNINGS - 383)) | (1L << (APPLICATION_LOG - 383)) | (1L << (APPLY - 383)) | (1L << (ARITHABORT - 383)) | (1L << (ASSEMBLY - 383)) | (1L << (AUDIT - 383)) | (1L << (AUDIT_GUID - 383)) | (1L << (AUTO - 383)) | (1L << (AUTO_CLEANUP - 383)) | (1L << (AUTO_CLOSE - 383)) | (1L << (AUTO_CREATE_STATISTICS - 383)) | (1L << (AUTO_SHRINK - 383)) | (1L << (AUTO_UPDATE_STATISTICS - 383)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 383)) | (1L << (AVAILABILITY - 383)) | (1L << (AVG - 383)) | (1L << (BACKUP_PRIORITY - 383)) | (1L << (BEGIN_DIALOG - 383)) | (1L << (BIGINT - 383)) | (1L << (BINARY_BASE64 - 383)) | (1L << (BINARY_CHECKSUM - 383)) | (1L << (BINDING - 383)) | (1L << (BLOB_STORAGE - 383)) | (1L << (BROKER - 383)) | (1L << (BROKER_INSTANCE - 383)) | (1L << (BULK_LOGGED - 383)) | (1L << (CALLER - 383)) | (1L << (CAP_CPU_PERCENT - 383)) | (1L << (CAST - 383)) | (1L << (CATALOG - 383)) | (1L << (CATCH - 383)) | (1L << (CHANGE_RETENTION - 383)) | (1L << (CHANGE_TRACKING - 383)) | (1L << (CHECKSUM - 383)) | (1L << (CHECKSUM_AGG - 383)) | (1L << (CLEANUP - 383)) | (1L << (COLLECTION - 383)) | (1L << (COLUMN_MASTER_KEY - 383)) | (1L << (COMMITTED - 383)) | (1L << (COMPATIBILITY_LEVEL - 383)) | (1L << (CONCAT - 383)) | (1L << (CONCAT_NULL_YIELDS_NULL - 383)) | (1L << (CONTENT - 383)) | (1L << (CONTROL - 383)) | (1L << (COOKIE - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (COUNT - 447)) | (1L << (COUNT_BIG - 447)) | (1L << (COUNTER - 447)) | (1L << (CPU - 447)) | (1L << (CREATE_NEW - 447)) | (1L << (CREATION_DISPOSITION - 447)) | (1L << (CREDENTIAL - 447)) | (1L << (CRYPTOGRAPHIC - 447)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 447)) | (1L << (CURSOR_DEFAULT - 447)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 447)) | (1L << (DATEADD - 447)) | (1L << (DATEDIFF - 447)) | (1L << (DATENAME - 447)) | (1L << (DATEPART - 447)) | (1L << (DAYS - 447)) | (1L << (DB_CHAINING - 447)) | (1L << (DB_FAILOVER - 447)) | (1L << (DECRYPTION - 447)) | (1L << (DEFAULT_DOUBLE_QUOTE - 447)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1L << (DEFAULT_LANGUAGE - 447)) | (1L << (DELAY - 447)) | (1L << (DELAYED_DURABILITY - 447)) | (1L << (DELETED - 447)) | (1L << (DENSE_RANK - 447)) | (1L << (DEPENDENTS - 447)) | (1L << (DES - 447)) | (1L << (DESCRIPTION - 447)) | (1L << (DESX - 447)) | (1L << (DHCP - 447)) | (1L << (DIALOG - 447)) | (1L << (DIRECTORY_NAME - 447)) | (1L << (DISABLE - 447)) | (1L << (DISABLE_BROKER - 447)) | (1L << (DISABLED - 447)) | (1L << (DISK_DRIVE - 447)) | (1L << (DOCUMENT - 447)) | (1L << (DYNAMIC - 447)) | (1L << (EMERGENCY - 447)) | (1L << (EMPTY - 447)) | (1L << (ENABLE - 447)) | (1L << (ENABLE_BROKER - 447)) | (1L << (ENCRYPTED_VALUE - 447)) | (1L << (ENCRYPTION - 447)) | (1L << (ENDPOINT_URL - 447)) | (1L << (ERROR_BROKER_CONVERSATIONS - 447)) | (1L << (EXCLUSIVE - 447)) | (1L << (EXECUTABLE - 447)) | (1L << (EXIST - 447)) | (1L << (EXPAND - 447)) | (1L << (EXPIRY_DATE - 447)) | (1L << (EXPLICIT - 447)) | (1L << (FAIL_OPERATION - 447)) | (1L << (FAILOVER_MODE - 447)) | (1L << (FAILURE - 447)) | (1L << (FAILURE_CONDITION_LEVEL - 447)) | (1L << (FAST - 447)) | (1L << (FAST_FORWARD - 447)) | (1L << (FILEGROUP - 447)) | (1L << (FILEGROWTH - 447)) | (1L << (FILEPATH - 447)) | (1L << (FILESTREAM - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (FILTER - 511)) | (1L << (FIRST - 511)) | (1L << (FIRST_VALUE - 511)) | (1L << (FOLLOWING - 511)) | (1L << (FORCE - 511)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1L << (FORCED - 511)) | (1L << (FORMAT - 511)) | (1L << (FORWARD_ONLY - 511)) | (1L << (FULLSCAN - 511)) | (1L << (FULLTEXT - 511)) | (1L << (GB - 511)) | (1L << (GETDATE - 511)) | (1L << (GETUTCDATE - 511)) | (1L << (GLOBAL - 511)) | (1L << (GO - 511)) | (1L << (GROUP_MAX_REQUESTS - 511)) | (1L << (GROUPING - 511)) | (1L << (GROUPING_ID - 511)) | (1L << (HADR - 511)) | (1L << (HASH - 511)) | (1L << (HEALTH_CHECK_TIMEOUT - 511)) | (1L << (HIGH - 511)) | (1L << (HONOR_BROKER_PRIORITY - 511)) | (1L << (HOURS - 511)) | (1L << (IDENTITY_VALUE - 511)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1L << (IMMEDIATE - 511)) | (1L << (IMPERSONATE - 511)) | (1L << (IMPORTANCE - 511)) | (1L << (INCREMENTAL - 511)) | (1L << (INITIATOR - 511)) | (1L << (INPUT - 511)) | (1L << (INSENSITIVE - 511)) | (1L << (INSERTED - 511)) | (1L << (INT - 511)) | (1L << (IP - 511)) | (1L << (ISOLATION - 511)) | (1L << (KB - 511)) | (1L << (KEEP - 511)) | (1L << (KEEPFIXED - 511)) | (1L << (KEY_SOURCE - 511)) | (1L << (KEYS - 511)) | (1L << (KEYSET - 511)) | (1L << (LAG - 511)) | (1L << (LAST - 511)) | (1L << (LAST_VALUE - 511)) | (1L << (LEAD - 511)) | (1L << (LEVEL - 511)) | (1L << (LIST - 511)) | (1L << (LISTENER - 511)) | (1L << (LISTENER_URL - 511)) | (1L << (LOB_COMPACTION - 511)) | (1L << (LOCAL - 511)) | (1L << (LOCATION - 511)) | (1L << (LOCK - 511)) | (1L << (LOCK_ESCALATION - 511)) | (1L << (LOGIN - 511)) | (1L << (LOOP - 511)) | (1L << (LOW - 511)) | (1L << (MANUAL - 511)) | (1L << (MARK - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (MATERIALIZED - 575)) | (1L << (MAX - 575)) | (1L << (MAX_CPU_PERCENT - 575)) | (1L << (MAX_DOP - 575)) | (1L << (MAX_FILES - 575)) | (1L << (MAX_IOPS_PER_VOLUME - 575)) | (1L << (MAX_MEMORY_PERCENT - 575)) | (1L << (MAX_PROCESSES - 575)) | (1L << (MAX_QUEUE_READERS - 575)) | (1L << (MAX_ROLLOVER_FILES - 575)) | (1L << (MAXDOP - 575)) | (1L << (MAXRECURSION - 575)) | (1L << (MAXSIZE - 575)) | (1L << (MB - 575)) | (1L << (MEDIUM - 575)) | (1L << (MEMORY_OPTIMIZED_DATA - 575)) | (1L << (MESSAGE - 575)) | (1L << (MIN - 575)) | (1L << (MIN_ACTIVE_ROWVERSION - 575)) | (1L << (MIN_CPU_PERCENT - 575)) | (1L << (MIN_IOPS_PER_VOLUME - 575)) | (1L << (MIN_MEMORY_PERCENT - 575)) | (1L << (MINUTES - 575)) | (1L << (MIRROR_ADDRESS - 575)) | (1L << (MIXED_PAGE_ALLOCATION - 575)) | (1L << (MODE - 575)) | (1L << (MODIFY - 575)) | (1L << (MOVE - 575)) | (1L << (MULTI_USER - 575)) | (1L << (NAME - 575)) | (1L << (NESTED_TRIGGERS - 575)) | (1L << (NEW_ACCOUNT - 575)) | (1L << (NEW_BROKER - 575)) | (1L << (NEW_PASSWORD - 575)) | (1L << (NEXT - 575)) | (1L << (NO - 575)) | (1L << (NO_TRUNCATE - 575)) | (1L << (NO_WAIT - 575)) | (1L << (NOCOUNT - 575)) | (1L << (NODES - 575)) | (1L << (NOEXPAND - 575)) | (1L << (NON_TRANSACTED_ACCESS - 575)) | (1L << (NORECOMPUTE - 575)) | (1L << (NORECOVERY - 575)) | (1L << (NOWAIT - 575)) | (1L << (NTILE - 575)) | (1L << (NUMANODE - 575)) | (1L << (NUMBER - 575)) | (1L << (NUMERIC_ROUNDABORT - 575)) | (1L << (OBJECT - 575)) | (1L << (OFFLINE - 575)) | (1L << (OFFSET - 575)) | (1L << (OLD_ACCOUNT - 575)) | (1L << (ONLINE - 575)) | (1L << (ONLY - 575)) | (1L << (OPEN_EXISTING - 575)) | (1L << (OPTIMISTIC - 575)) | (1L << (OPTIMIZE - 575)) | (1L << (OUT - 575)) | (1L << (OUTPUT - 575)) | (1L << (OWNER - 575)) | (1L << (PAGE_VERIFY - 575)) | (1L << (PARAMETERIZATION - 575)) | (1L << (PARTITION - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (PARTITIONS - 639)) | (1L << (PARTNER - 639)) | (1L << (PATH - 639)) | (1L << (POISON_MESSAGE_HANDLING - 639)) | (1L << (POOL - 639)) | (1L << (PORT - 639)) | (1L << (PRECEDING - 639)) | (1L << (PRIMARY_ROLE - 639)) | (1L << (PRIOR - 639)) | (1L << (PRIORITY - 639)) | (1L << (PRIORITY_LEVEL - 639)) | (1L << (PRIVATE - 639)) | (1L << (PRIVATE_KEY - 639)) | (1L << (PRIVILEGES - 639)) | (1L << (PROCEDURE_NAME - 639)) | (1L << (PROPERTY - 639)) | (1L << (PROVIDER - 639)) | (1L << (PROVIDER_KEY_NAME - 639)) | (1L << (QUERY - 639)) | (1L << (QUEUE - 639)) | (1L << (QUEUE_DELAY - 639)) | (1L << (QUOTED_IDENTIFIER - 639)) | (1L << (RANGE - 639)) | (1L << (RANK - 639)) | (1L << (RC2 - 639)) | (1L << (RC4 - 639)) | (1L << (RC4_128 - 639)) | (1L << (READ_COMMITTED_SNAPSHOT - 639)) | (1L << (READ_ONLY - 639)) | (1L << (READ_ONLY_ROUTING_LIST - 639)) | (1L << (READ_WRITE - 639)) | (1L << (READONLY - 639)) | (1L << (REBUILD - 639)) | (1L << (RECEIVE - 639)) | (1L << (RECOMPILE - 639)) | (1L << (RECOVERY - 639)) | (1L << (RECURSIVE_TRIGGERS - 639)) | (1L << (RELATIVE - 639)) | (1L << (REMOTE - 639)) | (1L << (REMOTE_SERVICE_NAME - 639)) | (1L << (REMOVE - 639)) | (1L << (REORGANIZE - 639)) | (1L << (REPEATABLE - 639)) | (1L << (REPLICA - 639)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 639)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 639)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 639)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 639)) | (1L << (RESERVE_DISK_SPACE - 639)) | (1L << (RESOURCE - 639)) | (1L << (RESOURCE_MANAGER_LOCATION - 639)) | (1L << (RESTRICTED_USER - 639)) | (1L << (RETENTION - 639)) | (1L << (ROBUST - 639)) | (1L << (ROOT - 639)) | (1L << (ROUTE - 639)) | (1L << (ROW - 639)) | (1L << (ROW_NUMBER - 639)) | (1L << (ROWGUID - 639)) | (1L << (ROWS - 639)) | (1L << (SAMPLE - 639)) | (1L << (SCHEMABINDING - 639)) | (1L << (SCOPED - 639)) | (1L << (SCROLL - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (SCROLL_LOCKS - 703)) | (1L << (SEARCH - 703)) | (1L << (SECONDARY - 703)) | (1L << (SECONDARY_ONLY - 703)) | (1L << (SECONDARY_ROLE - 703)) | (1L << (SECONDS - 703)) | (1L << (SECRET - 703)) | (1L << (SECURITY_LOG - 703)) | (1L << (SEEDING_MODE - 703)) | (1L << (SELF - 703)) | (1L << (SEMI_SENSITIVE - 703)) | (1L << (SEND - 703)) | (1L << (SENT - 703)) | (1L << (SERIALIZABLE - 703)) | (1L << (SESSION_TIMEOUT - 703)) | (1L << (SETERROR - 703)) | (1L << (SHARE - 703)) | (1L << (SHOWPLAN - 703)) | (1L << (SIGNATURE - 703)) | (1L << (SIMPLE - 703)) | (1L << (SINGLE_USER - 703)) | (1L << (SIZE - 703)) | (1L << (SMALLINT - 703)) | (1L << (SNAPSHOT - 703)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 703)) | (1L << (STANDBY - 703)) | (1L << (START_DATE - 703)) | (1L << (STATIC - 703)) | (1L << (STATS_STREAM - 703)) | (1L << (STATUS - 703)) | (1L << (STDEV - 703)) | (1L << (STDEVP - 703)) | (1L << (STOPLIST - 703)) | (1L << (STUFF - 703)) | (1L << (SUBJECT - 703)) | (1L << (SUM - 703)) | (1L << (SUSPEND - 703)) | (1L << (SYMMETRIC - 703)) | (1L << (SYNCHRONOUS_COMMIT - 703)) | (1L << (SYNONYM - 703)) | (1L << (TAKE - 703)) | (1L << (TARGET_RECOVERY_TIME - 703)) | (1L << (TB - 703)) | (1L << (TEXTIMAGE_ON - 703)) | (1L << (THROW - 703)) | (1L << (TIES - 703)) | (1L << (TIME - 703)) | (1L << (TIMEOUT - 703)) | (1L << (TIMER - 703)) | (1L << (TINYINT - 703)) | (1L << (TORN_PAGE_DETECTION - 703)) | (1L << (TRANSFORM_NOISE_WORDS - 703)) | (1L << (TRIPLE_DES - 703)) | (1L << (TRIPLE_DES_3KEY - 703)) | (1L << (TRUSTWORTHY - 703)) | (1L << (TRY - 703)) | (1L << (TSQL - 703)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 703)) | (1L << (TYPE - 703)) | (1L << (TYPE_WARNING - 703)) | (1L << (UNBOUNDED - 703)) | (1L << (UNCOMMITTED - 703)) | (1L << (UNKNOWN - 703)) | (1L << (UNLIMITED - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (USING - 767)) | (1L << (VALID_XML - 767)) | (1L << (VALIDATION - 767)) | (1L << (VALUE - 767)) | (1L << (VAR - 767)) | (1L << (VARP - 767)) | (1L << (VIEW_METADATA - 767)) | (1L << (VIEWS - 767)) | (1L << (WAIT - 767)) | (1L << (WELL_FORMED_XML - 767)) | (1L << (WORK - 767)) | (1L << (WORKLOAD - 767)) | (1L << (XML - 767)) | (1L << (XMLNAMESPACES - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)))) != 0)) {
				{
				setState(7271);
				((OpendatasourceContext)_localctx).scheme = id();
				}
			}

			setState(7274);
			match(DOT);
			{
			setState(7275);
			((OpendatasourceContext)_localctx).table = id();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_statementContext extends ParserRuleContext {
		public Token xml_namespace_uri;
		public TerminalNode DECLARE() { return getToken(TSqlParser.DECLARE, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Table_type_definitionContext table_type_definition() {
			return getRuleContext(Table_type_definitionContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public List<Declare_localContext> declare_local() {
			return getRuleContexts(Declare_localContext.class);
		}
		public Declare_localContext declare_local(int i) {
			return getRuleContext(Declare_localContext.class,i);
		}
		public Xml_type_definitionContext xml_type_definition() {
			return getRuleContext(Xml_type_definitionContext.class,0);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(TSqlParser.XMLNAMESPACES, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Declare_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDeclare_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDeclare_statement(this);
		}
	}

	public final Declare_statementContext declare_statement() throws RecognitionException {
		Declare_statementContext _localctx = new Declare_statementContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_declare_statement);
		int _la;
		try {
			setState(7320);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,974,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7277);
				match(DECLARE);
				setState(7278);
				match(LOCAL_ID);
				setState(7280);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(7279);
					match(AS);
					}
				}

				setState(7282);
				table_type_definition();
				setState(7284);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,967,_ctx) ) {
				case 1:
					{
					setState(7283);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7286);
				match(DECLARE);
				setState(7287);
				declare_local();
				setState(7292);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7288);
					match(COMMA);
					setState(7289);
					declare_local();
					}
					}
					setState(7294);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(7296);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,969,_ctx) ) {
				case 1:
					{
					setState(7295);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7298);
				match(DECLARE);
				setState(7299);
				match(LOCAL_ID);
				setState(7301);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(7300);
					match(AS);
					}
				}

				setState(7303);
				xml_type_definition();
				setState(7305);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,971,_ctx) ) {
				case 1:
					{
					setState(7304);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7307);
				match(WITH);
				setState(7308);
				match(XMLNAMESPACES);
				setState(7309);
				match(LR_BRACKET);
				setState(7310);
				((Declare_statementContext)_localctx).xml_namespace_uri = match(STRING);
				setState(7312);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(7311);
					match(COMMA);
					}
				}

				setState(7314);
				match(AS);
				setState(7315);
				id();
				setState(7316);
				match(RR_BRACKET);
				setState(7318);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,973,_ctx) ) {
				case 1:
					{
					setState(7317);
					match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_statementContext extends ParserRuleContext {
		public TerminalNode CLOSE() { return getToken(TSqlParser.CLOSE, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode GLOBAL() { return getToken(TSqlParser.GLOBAL, 0); }
		public TerminalNode DEALLOCATE() { return getToken(TSqlParser.DEALLOCATE, 0); }
		public TerminalNode CURSOR() { return getToken(TSqlParser.CURSOR, 0); }
		public Declare_cursorContext declare_cursor() {
			return getRuleContext(Declare_cursorContext.class,0);
		}
		public Fetch_cursorContext fetch_cursor() {
			return getRuleContext(Fetch_cursorContext.class,0);
		}
		public TerminalNode OPEN() { return getToken(TSqlParser.OPEN, 0); }
		public Cursor_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCursor_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCursor_statement(this);
		}
	}

	public final Cursor_statementContext cursor_statement() throws RecognitionException {
		Cursor_statementContext _localctx = new Cursor_statementContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_cursor_statement);
		int _la;
		try {
			setState(7351);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CLOSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(7322);
				match(CLOSE);
				setState(7324);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,975,_ctx) ) {
				case 1:
					{
					setState(7323);
					match(GLOBAL);
					}
					break;
				}
				setState(7326);
				cursor_name();
				setState(7328);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,976,_ctx) ) {
				case 1:
					{
					setState(7327);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case DEALLOCATE:
				enterOuterAlt(_localctx, 2);
				{
				setState(7330);
				match(DEALLOCATE);
				setState(7332);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,977,_ctx) ) {
				case 1:
					{
					setState(7331);
					match(GLOBAL);
					}
					break;
				}
				setState(7335);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CURSOR) {
					{
					setState(7334);
					match(CURSOR);
					}
				}

				setState(7337);
				cursor_name();
				setState(7339);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,979,_ctx) ) {
				case 1:
					{
					setState(7338);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case DECLARE:
				enterOuterAlt(_localctx, 3);
				{
				setState(7341);
				declare_cursor();
				}
				break;
			case FETCH:
				enterOuterAlt(_localctx, 4);
				{
				setState(7342);
				fetch_cursor();
				}
				break;
			case OPEN:
				enterOuterAlt(_localctx, 5);
				{
				setState(7343);
				match(OPEN);
				setState(7345);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,980,_ctx) ) {
				case 1:
					{
					setState(7344);
					match(GLOBAL);
					}
					break;
				}
				setState(7347);
				cursor_name();
				setState(7349);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,981,_ctx) ) {
				case 1:
					{
					setState(7348);
					match(SEMI);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Backup_databaseContext extends ParserRuleContext {
		public IdContext database_name;
		public Token file_or_filegroup;
		public IdContext logical_device_name;
		public IdContext backup_set_name;
		public Token medianame;
		public Token stats_percent;
		public IdContext encryptor_name;
		public TerminalNode BACKUP() { return getToken(TSqlParser.BACKUP, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public List<TerminalNode> TO() { return getTokens(TSqlParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(TSqlParser.TO, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode READ_WRITE_FILEGROUPS() { return getToken(TSqlParser.READ_WRITE_FILEGROUPS, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<TerminalNode> FILE() { return getTokens(TSqlParser.FILE); }
		public TerminalNode FILE(int i) {
			return getToken(TSqlParser.FILE, i);
		}
		public List<TerminalNode> FILEGROUP() { return getTokens(TSqlParser.FILEGROUP); }
		public TerminalNode FILEGROUP(int i) {
			return getToken(TSqlParser.FILEGROUP, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<TerminalNode> DISK() { return getTokens(TSqlParser.DISK); }
		public TerminalNode DISK(int i) {
			return getToken(TSqlParser.DISK, i);
		}
		public List<TerminalNode> TAPE() { return getTokens(TSqlParser.TAPE); }
		public TerminalNode TAPE(int i) {
			return getToken(TSqlParser.TAPE, i);
		}
		public List<TerminalNode> URL() { return getTokens(TSqlParser.URL); }
		public TerminalNode URL(int i) {
			return getToken(TSqlParser.URL, i);
		}
		public List<TerminalNode> MIRROR() { return getTokens(TSqlParser.MIRROR); }
		public TerminalNode MIRROR(int i) {
			return getToken(TSqlParser.MIRROR, i);
		}
		public List<TerminalNode> DIFFERENTIAL() { return getTokens(TSqlParser.DIFFERENTIAL); }
		public TerminalNode DIFFERENTIAL(int i) {
			return getToken(TSqlParser.DIFFERENTIAL, i);
		}
		public List<TerminalNode> COPY_ONLY() { return getTokens(TSqlParser.COPY_ONLY); }
		public TerminalNode COPY_ONLY(int i) {
			return getToken(TSqlParser.COPY_ONLY, i);
		}
		public List<TerminalNode> DESCRIPTION() { return getTokens(TSqlParser.DESCRIPTION); }
		public TerminalNode DESCRIPTION(int i) {
			return getToken(TSqlParser.DESCRIPTION, i);
		}
		public List<TerminalNode> NAME() { return getTokens(TSqlParser.NAME); }
		public TerminalNode NAME(int i) {
			return getToken(TSqlParser.NAME, i);
		}
		public List<TerminalNode> CREDENTIAL() { return getTokens(TSqlParser.CREDENTIAL); }
		public TerminalNode CREDENTIAL(int i) {
			return getToken(TSqlParser.CREDENTIAL, i);
		}
		public List<TerminalNode> FILE_SNAPSHOT() { return getTokens(TSqlParser.FILE_SNAPSHOT); }
		public TerminalNode FILE_SNAPSHOT(int i) {
			return getToken(TSqlParser.FILE_SNAPSHOT, i);
		}
		public List<TerminalNode> MEDIADESCRIPTION() { return getTokens(TSqlParser.MEDIADESCRIPTION); }
		public TerminalNode MEDIADESCRIPTION(int i) {
			return getToken(TSqlParser.MEDIADESCRIPTION, i);
		}
		public List<TerminalNode> MEDIANAME() { return getTokens(TSqlParser.MEDIANAME); }
		public TerminalNode MEDIANAME(int i) {
			return getToken(TSqlParser.MEDIANAME, i);
		}
		public List<TerminalNode> BLOCKSIZE() { return getTokens(TSqlParser.BLOCKSIZE); }
		public TerminalNode BLOCKSIZE(int i) {
			return getToken(TSqlParser.BLOCKSIZE, i);
		}
		public List<TerminalNode> BUFFERCOUNT() { return getTokens(TSqlParser.BUFFERCOUNT); }
		public TerminalNode BUFFERCOUNT(int i) {
			return getToken(TSqlParser.BUFFERCOUNT, i);
		}
		public List<TerminalNode> MAXTRANSFER() { return getTokens(TSqlParser.MAXTRANSFER); }
		public TerminalNode MAXTRANSFER(int i) {
			return getToken(TSqlParser.MAXTRANSFER, i);
		}
		public List<TerminalNode> RESTART() { return getTokens(TSqlParser.RESTART); }
		public TerminalNode RESTART(int i) {
			return getToken(TSqlParser.RESTART, i);
		}
		public List<TerminalNode> STATS() { return getTokens(TSqlParser.STATS); }
		public TerminalNode STATS(int i) {
			return getToken(TSqlParser.STATS, i);
		}
		public List<TerminalNode> ENCRYPTION() { return getTokens(TSqlParser.ENCRYPTION); }
		public TerminalNode ENCRYPTION(int i) {
			return getToken(TSqlParser.ENCRYPTION, i);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> ALGORITHM() { return getTokens(TSqlParser.ALGORITHM); }
		public TerminalNode ALGORITHM(int i) {
			return getToken(TSqlParser.ALGORITHM, i);
		}
		public List<TerminalNode> SERVER() { return getTokens(TSqlParser.SERVER); }
		public TerminalNode SERVER(int i) {
			return getToken(TSqlParser.SERVER, i);
		}
		public List<TerminalNode> CERTIFICATE() { return getTokens(TSqlParser.CERTIFICATE); }
		public TerminalNode CERTIFICATE(int i) {
			return getToken(TSqlParser.CERTIFICATE, i);
		}
		public List<TerminalNode> COMPRESSION() { return getTokens(TSqlParser.COMPRESSION); }
		public TerminalNode COMPRESSION(int i) {
			return getToken(TSqlParser.COMPRESSION, i);
		}
		public List<TerminalNode> NO_COMPRESSION() { return getTokens(TSqlParser.NO_COMPRESSION); }
		public TerminalNode NO_COMPRESSION(int i) {
			return getToken(TSqlParser.NO_COMPRESSION, i);
		}
		public List<TerminalNode> NOINIT() { return getTokens(TSqlParser.NOINIT); }
		public TerminalNode NOINIT(int i) {
			return getToken(TSqlParser.NOINIT, i);
		}
		public List<TerminalNode> INIT() { return getTokens(TSqlParser.INIT); }
		public TerminalNode INIT(int i) {
			return getToken(TSqlParser.INIT, i);
		}
		public List<TerminalNode> NOSKIP() { return getTokens(TSqlParser.NOSKIP); }
		public TerminalNode NOSKIP(int i) {
			return getToken(TSqlParser.NOSKIP, i);
		}
		public List<TerminalNode> SKIP_KEYWORD() { return getTokens(TSqlParser.SKIP_KEYWORD); }
		public TerminalNode SKIP_KEYWORD(int i) {
			return getToken(TSqlParser.SKIP_KEYWORD, i);
		}
		public List<TerminalNode> NOFORMAT() { return getTokens(TSqlParser.NOFORMAT); }
		public TerminalNode NOFORMAT(int i) {
			return getToken(TSqlParser.NOFORMAT, i);
		}
		public List<TerminalNode> FORMAT() { return getTokens(TSqlParser.FORMAT); }
		public TerminalNode FORMAT(int i) {
			return getToken(TSqlParser.FORMAT, i);
		}
		public List<TerminalNode> NO_CHECKSUM() { return getTokens(TSqlParser.NO_CHECKSUM); }
		public TerminalNode NO_CHECKSUM(int i) {
			return getToken(TSqlParser.NO_CHECKSUM, i);
		}
		public List<TerminalNode> CHECKSUM() { return getTokens(TSqlParser.CHECKSUM); }
		public TerminalNode CHECKSUM(int i) {
			return getToken(TSqlParser.CHECKSUM, i);
		}
		public List<TerminalNode> STOP_ON_ERROR() { return getTokens(TSqlParser.STOP_ON_ERROR); }
		public TerminalNode STOP_ON_ERROR(int i) {
			return getToken(TSqlParser.STOP_ON_ERROR, i);
		}
		public List<TerminalNode> CONTINUE_AFTER_ERROR() { return getTokens(TSqlParser.CONTINUE_AFTER_ERROR); }
		public TerminalNode CONTINUE_AFTER_ERROR(int i) {
			return getToken(TSqlParser.CONTINUE_AFTER_ERROR, i);
		}
		public List<TerminalNode> REWIND() { return getTokens(TSqlParser.REWIND); }
		public TerminalNode REWIND(int i) {
			return getToken(TSqlParser.REWIND, i);
		}
		public List<TerminalNode> NOREWIND() { return getTokens(TSqlParser.NOREWIND); }
		public TerminalNode NOREWIND(int i) {
			return getToken(TSqlParser.NOREWIND, i);
		}
		public List<TerminalNode> LOAD() { return getTokens(TSqlParser.LOAD); }
		public TerminalNode LOAD(int i) {
			return getToken(TSqlParser.LOAD, i);
		}
		public List<TerminalNode> NOUNLOAD() { return getTokens(TSqlParser.NOUNLOAD); }
		public TerminalNode NOUNLOAD(int i) {
			return getToken(TSqlParser.NOUNLOAD, i);
		}
		public List<TerminalNode> AES_128() { return getTokens(TSqlParser.AES_128); }
		public TerminalNode AES_128(int i) {
			return getToken(TSqlParser.AES_128, i);
		}
		public List<TerminalNode> AES_192() { return getTokens(TSqlParser.AES_192); }
		public TerminalNode AES_192(int i) {
			return getToken(TSqlParser.AES_192, i);
		}
		public List<TerminalNode> AES_256() { return getTokens(TSqlParser.AES_256); }
		public TerminalNode AES_256(int i) {
			return getToken(TSqlParser.AES_256, i);
		}
		public List<TerminalNode> TRIPLE_DES_3KEY() { return getTokens(TSqlParser.TRIPLE_DES_3KEY); }
		public TerminalNode TRIPLE_DES_3KEY(int i) {
			return getToken(TSqlParser.TRIPLE_DES_3KEY, i);
		}
		public List<TerminalNode> EXPIREDATE() { return getTokens(TSqlParser.EXPIREDATE); }
		public TerminalNode EXPIREDATE(int i) {
			return getToken(TSqlParser.EXPIREDATE, i);
		}
		public List<TerminalNode> RETAINDAYS() { return getTokens(TSqlParser.RETAINDAYS); }
		public TerminalNode RETAINDAYS(int i) {
			return getToken(TSqlParser.RETAINDAYS, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public List<TerminalNode> ASYMMETRIC() { return getTokens(TSqlParser.ASYMMETRIC); }
		public TerminalNode ASYMMETRIC(int i) {
			return getToken(TSqlParser.ASYMMETRIC, i);
		}
		public List<TerminalNode> KEY() { return getTokens(TSqlParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(TSqlParser.KEY, i);
		}
		public Backup_databaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_backup_database; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterBackup_database(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitBackup_database(this);
		}
	}

	public final Backup_databaseContext backup_database() throws RecognitionException {
		Backup_databaseContext _localctx = new Backup_databaseContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_backup_database);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7353);
			match(BACKUP);
			setState(7354);
			match(DATABASE);
			{
			setState(7355);
			((Backup_databaseContext)_localctx).database_name = id();
			}
			setState(7368);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==READ_WRITE_FILEGROUPS) {
				{
				setState(7356);
				match(READ_WRITE_FILEGROUPS);
				setState(7365);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,984,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(7358);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7357);
							match(COMMA);
							}
						}

						setState(7360);
						_la = _input.LA(1);
						if ( !(_la==FILE || _la==FILEGROUP) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(7361);
						match(EQUAL);
						setState(7362);
						((Backup_databaseContext)_localctx).file_or_filegroup = match(STRING);
						}
						} 
					}
					setState(7367);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,984,_ctx);
				}
				}
			}

			setState(7378);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FILE || _la==FILEGROUP || _la==COMMA) {
				{
				{
				setState(7371);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(7370);
					match(COMMA);
					}
				}

				setState(7373);
				_la = _input.LA(1);
				if ( !(_la==FILE || _la==FILEGROUP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7374);
				match(EQUAL);
				setState(7375);
				((Backup_databaseContext)_localctx).file_or_filegroup = match(STRING);
				}
				}
				setState(7380);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7404);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,993,_ctx) ) {
			case 1:
				{
				setState(7381);
				match(TO);
				setState(7386); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(7383);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7382);
							match(COMMA);
							}
						}

						setState(7385);
						((Backup_databaseContext)_localctx).logical_device_name = id();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(7388); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,989,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				{
				setState(7390);
				match(TO);
				setState(7400); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(7392);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(7391);
						match(COMMA);
						}
					}

					setState(7394);
					_la = _input.LA(1);
					if ( !(_la==DISK || _la==TAPE || _la==URL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(7395);
					match(EQUAL);
					setState(7398);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case STRING:
						{
						setState(7396);
						match(STRING);
						}
						break;
					case CALLED:
					case DATA_COMPRESSION:
					case EVENTDATA:
					case FILENAME:
					case FILLFACTOR:
					case FORCESEEK:
					case INIT:
					case KEY:
					case MASTER:
					case MAX_MEMORY:
					case OFFSETS:
					case PAGE:
					case PUBLIC:
					case R:
					case RAW:
					case RETURN:
					case RETURNS:
					case ROWCOUNT:
					case SAFETY:
					case SERVER:
					case SID:
					case SOURCE:
					case STATE:
					case START:
					case TARGET:
					case ABSOLUTE:
					case ACCENT_SENSITIVITY:
					case ACTION:
					case ACTIVATION:
					case ACTIVE:
					case ADDRESS:
					case AES_128:
					case AES_192:
					case AES_256:
					case AFFINITY:
					case AFTER:
					case AGGREGATE:
					case ALGORITHM:
					case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
					case ALLOW_SNAPSHOT_ISOLATION:
					case ALLOWED:
					case ANSI_NULL_DEFAULT:
					case ANSI_NULLS:
					case ANSI_PADDING:
					case ANSI_WARNINGS:
					case APPLICATION_LOG:
					case APPLY:
					case ARITHABORT:
					case ASSEMBLY:
					case AUDIT:
					case AUDIT_GUID:
					case AUTO:
					case AUTO_CLEANUP:
					case AUTO_CLOSE:
					case AUTO_CREATE_STATISTICS:
					case AUTO_SHRINK:
					case AUTO_UPDATE_STATISTICS:
					case AUTO_UPDATE_STATISTICS_ASYNC:
					case AVAILABILITY:
					case AVG:
					case BACKUP_PRIORITY:
					case BEGIN_DIALOG:
					case BIGINT:
					case BINARY_BASE64:
					case BINARY_CHECKSUM:
					case BINDING:
					case BLOB_STORAGE:
					case BROKER:
					case BROKER_INSTANCE:
					case BULK_LOGGED:
					case CALLER:
					case CAP_CPU_PERCENT:
					case CAST:
					case CATALOG:
					case CATCH:
					case CHANGE_RETENTION:
					case CHANGE_TRACKING:
					case CHECKSUM:
					case CHECKSUM_AGG:
					case CLEANUP:
					case COLLECTION:
					case COLUMN_MASTER_KEY:
					case COMMITTED:
					case COMPATIBILITY_LEVEL:
					case CONCAT:
					case CONCAT_NULL_YIELDS_NULL:
					case CONTENT:
					case CONTROL:
					case COOKIE:
					case COUNT:
					case COUNT_BIG:
					case COUNTER:
					case CPU:
					case CREATE_NEW:
					case CREATION_DISPOSITION:
					case CREDENTIAL:
					case CRYPTOGRAPHIC:
					case CURSOR_CLOSE_ON_COMMIT:
					case CURSOR_DEFAULT:
					case DATE_CORRELATION_OPTIMIZATION:
					case DATEADD:
					case DATEDIFF:
					case DATENAME:
					case DATEPART:
					case DAYS:
					case DB_CHAINING:
					case DB_FAILOVER:
					case DECRYPTION:
					case DEFAULT_DOUBLE_QUOTE:
					case DEFAULT_FULLTEXT_LANGUAGE:
					case DEFAULT_LANGUAGE:
					case DELAY:
					case DELAYED_DURABILITY:
					case DELETED:
					case DENSE_RANK:
					case DEPENDENTS:
					case DES:
					case DESCRIPTION:
					case DESX:
					case DHCP:
					case DIALOG:
					case DIRECTORY_NAME:
					case DISABLE:
					case DISABLE_BROKER:
					case DISABLED:
					case DISK_DRIVE:
					case DOCUMENT:
					case DYNAMIC:
					case EMERGENCY:
					case EMPTY:
					case ENABLE:
					case ENABLE_BROKER:
					case ENCRYPTED_VALUE:
					case ENCRYPTION:
					case ENDPOINT_URL:
					case ERROR_BROKER_CONVERSATIONS:
					case EXCLUSIVE:
					case EXECUTABLE:
					case EXIST:
					case EXPAND:
					case EXPIRY_DATE:
					case EXPLICIT:
					case FAIL_OPERATION:
					case FAILOVER_MODE:
					case FAILURE:
					case FAILURE_CONDITION_LEVEL:
					case FAST:
					case FAST_FORWARD:
					case FILEGROUP:
					case FILEGROWTH:
					case FILEPATH:
					case FILESTREAM:
					case FILTER:
					case FIRST:
					case FIRST_VALUE:
					case FOLLOWING:
					case FORCE:
					case FORCE_FAILOVER_ALLOW_DATA_LOSS:
					case FORCED:
					case FORMAT:
					case FORWARD_ONLY:
					case FULLSCAN:
					case FULLTEXT:
					case GB:
					case GETDATE:
					case GETUTCDATE:
					case GLOBAL:
					case GO:
					case GROUP_MAX_REQUESTS:
					case GROUPING:
					case GROUPING_ID:
					case HADR:
					case HASH:
					case HEALTH_CHECK_TIMEOUT:
					case HIGH:
					case HONOR_BROKER_PRIORITY:
					case HOURS:
					case IDENTITY_VALUE:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMMEDIATE:
					case IMPERSONATE:
					case IMPORTANCE:
					case INCREMENTAL:
					case INITIATOR:
					case INPUT:
					case INSENSITIVE:
					case INSERTED:
					case INT:
					case IP:
					case ISOLATION:
					case KB:
					case KEEP:
					case KEEPFIXED:
					case KEY_SOURCE:
					case KEYS:
					case KEYSET:
					case LAG:
					case LAST:
					case LAST_VALUE:
					case LEAD:
					case LEVEL:
					case LIST:
					case LISTENER:
					case LISTENER_URL:
					case LOB_COMPACTION:
					case LOCAL:
					case LOCATION:
					case LOCK:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case LOW:
					case MANUAL:
					case MARK:
					case MATERIALIZED:
					case MAX:
					case MAX_CPU_PERCENT:
					case MAX_DOP:
					case MAX_FILES:
					case MAX_IOPS_PER_VOLUME:
					case MAX_MEMORY_PERCENT:
					case MAX_PROCESSES:
					case MAX_QUEUE_READERS:
					case MAX_ROLLOVER_FILES:
					case MAXDOP:
					case MAXRECURSION:
					case MAXSIZE:
					case MB:
					case MEDIUM:
					case MEMORY_OPTIMIZED_DATA:
					case MESSAGE:
					case MIN:
					case MIN_ACTIVE_ROWVERSION:
					case MIN_CPU_PERCENT:
					case MIN_IOPS_PER_VOLUME:
					case MIN_MEMORY_PERCENT:
					case MINUTES:
					case MIRROR_ADDRESS:
					case MIXED_PAGE_ALLOCATION:
					case MODE:
					case MODIFY:
					case MOVE:
					case MULTI_USER:
					case NAME:
					case NESTED_TRIGGERS:
					case NEW_ACCOUNT:
					case NEW_BROKER:
					case NEW_PASSWORD:
					case NEXT:
					case NO:
					case NO_TRUNCATE:
					case NO_WAIT:
					case NOCOUNT:
					case NODES:
					case NOEXPAND:
					case NON_TRANSACTED_ACCESS:
					case NORECOMPUTE:
					case NORECOVERY:
					case NOWAIT:
					case NTILE:
					case NUMANODE:
					case NUMBER:
					case NUMERIC_ROUNDABORT:
					case OBJECT:
					case OFFLINE:
					case OFFSET:
					case OLD_ACCOUNT:
					case ONLINE:
					case ONLY:
					case OPEN_EXISTING:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OWNER:
					case PAGE_VERIFY:
					case PARAMETERIZATION:
					case PARTITION:
					case PARTITIONS:
					case PARTNER:
					case PATH:
					case POISON_MESSAGE_HANDLING:
					case POOL:
					case PORT:
					case PRECEDING:
					case PRIMARY_ROLE:
					case PRIOR:
					case PRIORITY:
					case PRIORITY_LEVEL:
					case PRIVATE:
					case PRIVATE_KEY:
					case PRIVILEGES:
					case PROCEDURE_NAME:
					case PROPERTY:
					case PROVIDER:
					case PROVIDER_KEY_NAME:
					case QUERY:
					case QUEUE:
					case QUEUE_DELAY:
					case QUOTED_IDENTIFIER:
					case RANGE:
					case RANK:
					case RC2:
					case RC4:
					case RC4_128:
					case READ_COMMITTED_SNAPSHOT:
					case READ_ONLY:
					case READ_ONLY_ROUTING_LIST:
					case READ_WRITE:
					case READONLY:
					case REBUILD:
					case RECEIVE:
					case RECOMPILE:
					case RECOVERY:
					case RECURSIVE_TRIGGERS:
					case RELATIVE:
					case REMOTE:
					case REMOTE_SERVICE_NAME:
					case REMOVE:
					case REORGANIZE:
					case REPEATABLE:
					case REPLICA:
					case REQUEST_MAX_CPU_TIME_SEC:
					case REQUEST_MAX_MEMORY_GRANT_PERCENT:
					case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
					case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					case RESERVE_DISK_SPACE:
					case RESOURCE:
					case RESOURCE_MANAGER_LOCATION:
					case RESTRICTED_USER:
					case RETENTION:
					case ROBUST:
					case ROOT:
					case ROUTE:
					case ROW:
					case ROW_NUMBER:
					case ROWGUID:
					case ROWS:
					case SAMPLE:
					case SCHEMABINDING:
					case SCOPED:
					case SCROLL:
					case SCROLL_LOCKS:
					case SEARCH:
					case SECONDARY:
					case SECONDARY_ONLY:
					case SECONDARY_ROLE:
					case SECONDS:
					case SECRET:
					case SECURITY_LOG:
					case SEEDING_MODE:
					case SELF:
					case SEMI_SENSITIVE:
					case SEND:
					case SENT:
					case SERIALIZABLE:
					case SESSION_TIMEOUT:
					case SETERROR:
					case SHARE:
					case SHOWPLAN:
					case SIGNATURE:
					case SIMPLE:
					case SINGLE_USER:
					case SIZE:
					case SMALLINT:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STANDBY:
					case START_DATE:
					case STATIC:
					case STATS_STREAM:
					case STATUS:
					case STDEV:
					case STDEVP:
					case STOPLIST:
					case STUFF:
					case SUBJECT:
					case SUM:
					case SUSPEND:
					case SYMMETRIC:
					case SYNCHRONOUS_COMMIT:
					case SYNONYM:
					case TAKE:
					case TARGET_RECOVERY_TIME:
					case TB:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TIMEOUT:
					case TIMER:
					case TINYINT:
					case TORN_PAGE_DETECTION:
					case TRANSFORM_NOISE_WORDS:
					case TRIPLE_DES:
					case TRIPLE_DES_3KEY:
					case TRUSTWORTHY:
					case TRY:
					case TSQL:
					case TWO_DIGIT_YEAR_CUTOFF:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case UNLIMITED:
					case USING:
					case VALID_XML:
					case VALIDATION:
					case VALUE:
					case VAR:
					case VARP:
					case VIEW_METADATA:
					case VIEWS:
					case WAIT:
					case WELL_FORMED_XML:
					case WORK:
					case WORKLOAD:
					case XML:
					case XMLNAMESPACES:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case ID:
						{
						setState(7397);
						id();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					setState(7402); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==DISK || _la==TAPE || _la==URL || _la==COMMA );
				}
				break;
			}
			setState(7439);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1001,_ctx) ) {
			case 1:
				{
				setState(7416); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(7406);
					match(MIRROR);
					setState(7407);
					match(TO);
					setState(7412); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(7409);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7408);
								match(COMMA);
								}
							}

							setState(7411);
							((Backup_databaseContext)_localctx).logical_device_name = id();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(7414); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,995,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					}
					setState(7418); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==MIRROR );
				}
				break;
			case 2:
				{
				setState(7435); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(7420);
					match(MIRROR);
					setState(7421);
					match(TO);
					setState(7431); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(7423);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7422);
							match(COMMA);
							}
						}

						setState(7425);
						_la = _input.LA(1);
						if ( !(_la==DISK || _la==TAPE || _la==URL) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(7426);
						match(EQUAL);
						setState(7429);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case STRING:
							{
							setState(7427);
							match(STRING);
							}
							break;
						case CALLED:
						case DATA_COMPRESSION:
						case EVENTDATA:
						case FILENAME:
						case FILLFACTOR:
						case FORCESEEK:
						case INIT:
						case KEY:
						case MASTER:
						case MAX_MEMORY:
						case OFFSETS:
						case PAGE:
						case PUBLIC:
						case R:
						case RAW:
						case RETURN:
						case RETURNS:
						case ROWCOUNT:
						case SAFETY:
						case SERVER:
						case SID:
						case SOURCE:
						case STATE:
						case START:
						case TARGET:
						case ABSOLUTE:
						case ACCENT_SENSITIVITY:
						case ACTION:
						case ACTIVATION:
						case ACTIVE:
						case ADDRESS:
						case AES_128:
						case AES_192:
						case AES_256:
						case AFFINITY:
						case AFTER:
						case AGGREGATE:
						case ALGORITHM:
						case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
						case ALLOW_SNAPSHOT_ISOLATION:
						case ALLOWED:
						case ANSI_NULL_DEFAULT:
						case ANSI_NULLS:
						case ANSI_PADDING:
						case ANSI_WARNINGS:
						case APPLICATION_LOG:
						case APPLY:
						case ARITHABORT:
						case ASSEMBLY:
						case AUDIT:
						case AUDIT_GUID:
						case AUTO:
						case AUTO_CLEANUP:
						case AUTO_CLOSE:
						case AUTO_CREATE_STATISTICS:
						case AUTO_SHRINK:
						case AUTO_UPDATE_STATISTICS:
						case AUTO_UPDATE_STATISTICS_ASYNC:
						case AVAILABILITY:
						case AVG:
						case BACKUP_PRIORITY:
						case BEGIN_DIALOG:
						case BIGINT:
						case BINARY_BASE64:
						case BINARY_CHECKSUM:
						case BINDING:
						case BLOB_STORAGE:
						case BROKER:
						case BROKER_INSTANCE:
						case BULK_LOGGED:
						case CALLER:
						case CAP_CPU_PERCENT:
						case CAST:
						case CATALOG:
						case CATCH:
						case CHANGE_RETENTION:
						case CHANGE_TRACKING:
						case CHECKSUM:
						case CHECKSUM_AGG:
						case CLEANUP:
						case COLLECTION:
						case COLUMN_MASTER_KEY:
						case COMMITTED:
						case COMPATIBILITY_LEVEL:
						case CONCAT:
						case CONCAT_NULL_YIELDS_NULL:
						case CONTENT:
						case CONTROL:
						case COOKIE:
						case COUNT:
						case COUNT_BIG:
						case COUNTER:
						case CPU:
						case CREATE_NEW:
						case CREATION_DISPOSITION:
						case CREDENTIAL:
						case CRYPTOGRAPHIC:
						case CURSOR_CLOSE_ON_COMMIT:
						case CURSOR_DEFAULT:
						case DATE_CORRELATION_OPTIMIZATION:
						case DATEADD:
						case DATEDIFF:
						case DATENAME:
						case DATEPART:
						case DAYS:
						case DB_CHAINING:
						case DB_FAILOVER:
						case DECRYPTION:
						case DEFAULT_DOUBLE_QUOTE:
						case DEFAULT_FULLTEXT_LANGUAGE:
						case DEFAULT_LANGUAGE:
						case DELAY:
						case DELAYED_DURABILITY:
						case DELETED:
						case DENSE_RANK:
						case DEPENDENTS:
						case DES:
						case DESCRIPTION:
						case DESX:
						case DHCP:
						case DIALOG:
						case DIRECTORY_NAME:
						case DISABLE:
						case DISABLE_BROKER:
						case DISABLED:
						case DISK_DRIVE:
						case DOCUMENT:
						case DYNAMIC:
						case EMERGENCY:
						case EMPTY:
						case ENABLE:
						case ENABLE_BROKER:
						case ENCRYPTED_VALUE:
						case ENCRYPTION:
						case ENDPOINT_URL:
						case ERROR_BROKER_CONVERSATIONS:
						case EXCLUSIVE:
						case EXECUTABLE:
						case EXIST:
						case EXPAND:
						case EXPIRY_DATE:
						case EXPLICIT:
						case FAIL_OPERATION:
						case FAILOVER_MODE:
						case FAILURE:
						case FAILURE_CONDITION_LEVEL:
						case FAST:
						case FAST_FORWARD:
						case FILEGROUP:
						case FILEGROWTH:
						case FILEPATH:
						case FILESTREAM:
						case FILTER:
						case FIRST:
						case FIRST_VALUE:
						case FOLLOWING:
						case FORCE:
						case FORCE_FAILOVER_ALLOW_DATA_LOSS:
						case FORCED:
						case FORMAT:
						case FORWARD_ONLY:
						case FULLSCAN:
						case FULLTEXT:
						case GB:
						case GETDATE:
						case GETUTCDATE:
						case GLOBAL:
						case GO:
						case GROUP_MAX_REQUESTS:
						case GROUPING:
						case GROUPING_ID:
						case HADR:
						case HASH:
						case HEALTH_CHECK_TIMEOUT:
						case HIGH:
						case HONOR_BROKER_PRIORITY:
						case HOURS:
						case IDENTITY_VALUE:
						case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
						case IMMEDIATE:
						case IMPERSONATE:
						case IMPORTANCE:
						case INCREMENTAL:
						case INITIATOR:
						case INPUT:
						case INSENSITIVE:
						case INSERTED:
						case INT:
						case IP:
						case ISOLATION:
						case KB:
						case KEEP:
						case KEEPFIXED:
						case KEY_SOURCE:
						case KEYS:
						case KEYSET:
						case LAG:
						case LAST:
						case LAST_VALUE:
						case LEAD:
						case LEVEL:
						case LIST:
						case LISTENER:
						case LISTENER_URL:
						case LOB_COMPACTION:
						case LOCAL:
						case LOCATION:
						case LOCK:
						case LOCK_ESCALATION:
						case LOGIN:
						case LOOP:
						case LOW:
						case MANUAL:
						case MARK:
						case MATERIALIZED:
						case MAX:
						case MAX_CPU_PERCENT:
						case MAX_DOP:
						case MAX_FILES:
						case MAX_IOPS_PER_VOLUME:
						case MAX_MEMORY_PERCENT:
						case MAX_PROCESSES:
						case MAX_QUEUE_READERS:
						case MAX_ROLLOVER_FILES:
						case MAXDOP:
						case MAXRECURSION:
						case MAXSIZE:
						case MB:
						case MEDIUM:
						case MEMORY_OPTIMIZED_DATA:
						case MESSAGE:
						case MIN:
						case MIN_ACTIVE_ROWVERSION:
						case MIN_CPU_PERCENT:
						case MIN_IOPS_PER_VOLUME:
						case MIN_MEMORY_PERCENT:
						case MINUTES:
						case MIRROR_ADDRESS:
						case MIXED_PAGE_ALLOCATION:
						case MODE:
						case MODIFY:
						case MOVE:
						case MULTI_USER:
						case NAME:
						case NESTED_TRIGGERS:
						case NEW_ACCOUNT:
						case NEW_BROKER:
						case NEW_PASSWORD:
						case NEXT:
						case NO:
						case NO_TRUNCATE:
						case NO_WAIT:
						case NOCOUNT:
						case NODES:
						case NOEXPAND:
						case NON_TRANSACTED_ACCESS:
						case NORECOMPUTE:
						case NORECOVERY:
						case NOWAIT:
						case NTILE:
						case NUMANODE:
						case NUMBER:
						case NUMERIC_ROUNDABORT:
						case OBJECT:
						case OFFLINE:
						case OFFSET:
						case OLD_ACCOUNT:
						case ONLINE:
						case ONLY:
						case OPEN_EXISTING:
						case OPTIMISTIC:
						case OPTIMIZE:
						case OUT:
						case OUTPUT:
						case OWNER:
						case PAGE_VERIFY:
						case PARAMETERIZATION:
						case PARTITION:
						case PARTITIONS:
						case PARTNER:
						case PATH:
						case POISON_MESSAGE_HANDLING:
						case POOL:
						case PORT:
						case PRECEDING:
						case PRIMARY_ROLE:
						case PRIOR:
						case PRIORITY:
						case PRIORITY_LEVEL:
						case PRIVATE:
						case PRIVATE_KEY:
						case PRIVILEGES:
						case PROCEDURE_NAME:
						case PROPERTY:
						case PROVIDER:
						case PROVIDER_KEY_NAME:
						case QUERY:
						case QUEUE:
						case QUEUE_DELAY:
						case QUOTED_IDENTIFIER:
						case RANGE:
						case RANK:
						case RC2:
						case RC4:
						case RC4_128:
						case READ_COMMITTED_SNAPSHOT:
						case READ_ONLY:
						case READ_ONLY_ROUTING_LIST:
						case READ_WRITE:
						case READONLY:
						case REBUILD:
						case RECEIVE:
						case RECOMPILE:
						case RECOVERY:
						case RECURSIVE_TRIGGERS:
						case RELATIVE:
						case REMOTE:
						case REMOTE_SERVICE_NAME:
						case REMOVE:
						case REORGANIZE:
						case REPEATABLE:
						case REPLICA:
						case REQUEST_MAX_CPU_TIME_SEC:
						case REQUEST_MAX_MEMORY_GRANT_PERCENT:
						case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
						case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
						case RESERVE_DISK_SPACE:
						case RESOURCE:
						case RESOURCE_MANAGER_LOCATION:
						case RESTRICTED_USER:
						case RETENTION:
						case ROBUST:
						case ROOT:
						case ROUTE:
						case ROW:
						case ROW_NUMBER:
						case ROWGUID:
						case ROWS:
						case SAMPLE:
						case SCHEMABINDING:
						case SCOPED:
						case SCROLL:
						case SCROLL_LOCKS:
						case SEARCH:
						case SECONDARY:
						case SECONDARY_ONLY:
						case SECONDARY_ROLE:
						case SECONDS:
						case SECRET:
						case SECURITY_LOG:
						case SEEDING_MODE:
						case SELF:
						case SEMI_SENSITIVE:
						case SEND:
						case SENT:
						case SERIALIZABLE:
						case SESSION_TIMEOUT:
						case SETERROR:
						case SHARE:
						case SHOWPLAN:
						case SIGNATURE:
						case SIMPLE:
						case SINGLE_USER:
						case SIZE:
						case SMALLINT:
						case SNAPSHOT:
						case SPATIAL_WINDOW_MAX_CELLS:
						case STANDBY:
						case START_DATE:
						case STATIC:
						case STATS_STREAM:
						case STATUS:
						case STDEV:
						case STDEVP:
						case STOPLIST:
						case STUFF:
						case SUBJECT:
						case SUM:
						case SUSPEND:
						case SYMMETRIC:
						case SYNCHRONOUS_COMMIT:
						case SYNONYM:
						case TAKE:
						case TARGET_RECOVERY_TIME:
						case TB:
						case TEXTIMAGE_ON:
						case THROW:
						case TIES:
						case TIME:
						case TIMEOUT:
						case TIMER:
						case TINYINT:
						case TORN_PAGE_DETECTION:
						case TRANSFORM_NOISE_WORDS:
						case TRIPLE_DES:
						case TRIPLE_DES_3KEY:
						case TRUSTWORTHY:
						case TRY:
						case TSQL:
						case TWO_DIGIT_YEAR_CUTOFF:
						case TYPE:
						case TYPE_WARNING:
						case UNBOUNDED:
						case UNCOMMITTED:
						case UNKNOWN:
						case UNLIMITED:
						case USING:
						case VALID_XML:
						case VALIDATION:
						case VALUE:
						case VAR:
						case VARP:
						case VIEW_METADATA:
						case VIEWS:
						case WAIT:
						case WELL_FORMED_XML:
						case WORK:
						case WORKLOAD:
						case XML:
						case XMLNAMESPACES:
						case DOUBLE_QUOTE_ID:
						case SQUARE_BRACKET_ID:
						case ID:
							{
							setState(7428);
							id();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						}
						setState(7433); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==DISK || _la==TAPE || _la==URL || _la==COMMA );
					}
					}
					setState(7437); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==MIRROR );
				}
				break;
			}
			setState(7601);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1037,_ctx) ) {
			case 1:
				{
				setState(7441);
				match(WITH);
				setState(7598);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1036,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						setState(7596);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,1035,_ctx) ) {
						case 1:
							{
							setState(7443);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7442);
								match(COMMA);
								}
							}

							setState(7445);
							match(DIFFERENTIAL);
							}
							break;
						case 2:
							{
							setState(7447);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7446);
								match(COMMA);
								}
							}

							setState(7449);
							match(COPY_ONLY);
							}
							break;
						case 3:
							{
							setState(7451);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7450);
								match(COMMA);
								}
							}

							setState(7453);
							_la = _input.LA(1);
							if ( !(_la==COMPRESSION || _la==NO_COMPRESSION) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 4:
							{
							setState(7455);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7454);
								match(COMMA);
								}
							}

							setState(7457);
							match(DESCRIPTION);
							setState(7458);
							match(EQUAL);
							setState(7461);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case STRING:
								{
								setState(7459);
								match(STRING);
								}
								break;
							case CALLED:
							case DATA_COMPRESSION:
							case EVENTDATA:
							case FILENAME:
							case FILLFACTOR:
							case FORCESEEK:
							case INIT:
							case KEY:
							case MASTER:
							case MAX_MEMORY:
							case OFFSETS:
							case PAGE:
							case PUBLIC:
							case R:
							case RAW:
							case RETURN:
							case RETURNS:
							case ROWCOUNT:
							case SAFETY:
							case SERVER:
							case SID:
							case SOURCE:
							case STATE:
							case START:
							case TARGET:
							case ABSOLUTE:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STUFF:
							case SUBJECT:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLNAMESPACES:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								setState(7460);
								id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 5:
							{
							setState(7464);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7463);
								match(COMMA);
								}
							}

							setState(7466);
							match(NAME);
							setState(7467);
							match(EQUAL);
							setState(7468);
							((Backup_databaseContext)_localctx).backup_set_name = id();
							}
							break;
						case 6:
							{
							setState(7470);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7469);
								match(COMMA);
								}
							}

							setState(7472);
							match(CREDENTIAL);
							}
							break;
						case 7:
							{
							setState(7474);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7473);
								match(COMMA);
								}
							}

							setState(7476);
							match(FILE_SNAPSHOT);
							}
							break;
						case 8:
							{
							setState(7478);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7477);
								match(COMMA);
								}
							}

							setState(7492);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case EXPIREDATE:
								{
								setState(7480);
								match(EXPIREDATE);
								setState(7481);
								match(EQUAL);
								setState(7484);
								_errHandler.sync(this);
								switch (_input.LA(1)) {
								case STRING:
									{
									setState(7482);
									match(STRING);
									}
									break;
								case CALLED:
								case DATA_COMPRESSION:
								case EVENTDATA:
								case FILENAME:
								case FILLFACTOR:
								case FORCESEEK:
								case INIT:
								case KEY:
								case MASTER:
								case MAX_MEMORY:
								case OFFSETS:
								case PAGE:
								case PUBLIC:
								case R:
								case RAW:
								case RETURN:
								case RETURNS:
								case ROWCOUNT:
								case SAFETY:
								case SERVER:
								case SID:
								case SOURCE:
								case STATE:
								case START:
								case TARGET:
								case ABSOLUTE:
								case ACCENT_SENSITIVITY:
								case ACTION:
								case ACTIVATION:
								case ACTIVE:
								case ADDRESS:
								case AES_128:
								case AES_192:
								case AES_256:
								case AFFINITY:
								case AFTER:
								case AGGREGATE:
								case ALGORITHM:
								case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
								case ALLOW_SNAPSHOT_ISOLATION:
								case ALLOWED:
								case ANSI_NULL_DEFAULT:
								case ANSI_NULLS:
								case ANSI_PADDING:
								case ANSI_WARNINGS:
								case APPLICATION_LOG:
								case APPLY:
								case ARITHABORT:
								case ASSEMBLY:
								case AUDIT:
								case AUDIT_GUID:
								case AUTO:
								case AUTO_CLEANUP:
								case AUTO_CLOSE:
								case AUTO_CREATE_STATISTICS:
								case AUTO_SHRINK:
								case AUTO_UPDATE_STATISTICS:
								case AUTO_UPDATE_STATISTICS_ASYNC:
								case AVAILABILITY:
								case AVG:
								case BACKUP_PRIORITY:
								case BEGIN_DIALOG:
								case BIGINT:
								case BINARY_BASE64:
								case BINARY_CHECKSUM:
								case BINDING:
								case BLOB_STORAGE:
								case BROKER:
								case BROKER_INSTANCE:
								case BULK_LOGGED:
								case CALLER:
								case CAP_CPU_PERCENT:
								case CAST:
								case CATALOG:
								case CATCH:
								case CHANGE_RETENTION:
								case CHANGE_TRACKING:
								case CHECKSUM:
								case CHECKSUM_AGG:
								case CLEANUP:
								case COLLECTION:
								case COLUMN_MASTER_KEY:
								case COMMITTED:
								case COMPATIBILITY_LEVEL:
								case CONCAT:
								case CONCAT_NULL_YIELDS_NULL:
								case CONTENT:
								case CONTROL:
								case COOKIE:
								case COUNT:
								case COUNT_BIG:
								case COUNTER:
								case CPU:
								case CREATE_NEW:
								case CREATION_DISPOSITION:
								case CREDENTIAL:
								case CRYPTOGRAPHIC:
								case CURSOR_CLOSE_ON_COMMIT:
								case CURSOR_DEFAULT:
								case DATE_CORRELATION_OPTIMIZATION:
								case DATEADD:
								case DATEDIFF:
								case DATENAME:
								case DATEPART:
								case DAYS:
								case DB_CHAINING:
								case DB_FAILOVER:
								case DECRYPTION:
								case DEFAULT_DOUBLE_QUOTE:
								case DEFAULT_FULLTEXT_LANGUAGE:
								case DEFAULT_LANGUAGE:
								case DELAY:
								case DELAYED_DURABILITY:
								case DELETED:
								case DENSE_RANK:
								case DEPENDENTS:
								case DES:
								case DESCRIPTION:
								case DESX:
								case DHCP:
								case DIALOG:
								case DIRECTORY_NAME:
								case DISABLE:
								case DISABLE_BROKER:
								case DISABLED:
								case DISK_DRIVE:
								case DOCUMENT:
								case DYNAMIC:
								case EMERGENCY:
								case EMPTY:
								case ENABLE:
								case ENABLE_BROKER:
								case ENCRYPTED_VALUE:
								case ENCRYPTION:
								case ENDPOINT_URL:
								case ERROR_BROKER_CONVERSATIONS:
								case EXCLUSIVE:
								case EXECUTABLE:
								case EXIST:
								case EXPAND:
								case EXPIRY_DATE:
								case EXPLICIT:
								case FAIL_OPERATION:
								case FAILOVER_MODE:
								case FAILURE:
								case FAILURE_CONDITION_LEVEL:
								case FAST:
								case FAST_FORWARD:
								case FILEGROUP:
								case FILEGROWTH:
								case FILEPATH:
								case FILESTREAM:
								case FILTER:
								case FIRST:
								case FIRST_VALUE:
								case FOLLOWING:
								case FORCE:
								case FORCE_FAILOVER_ALLOW_DATA_LOSS:
								case FORCED:
								case FORMAT:
								case FORWARD_ONLY:
								case FULLSCAN:
								case FULLTEXT:
								case GB:
								case GETDATE:
								case GETUTCDATE:
								case GLOBAL:
								case GO:
								case GROUP_MAX_REQUESTS:
								case GROUPING:
								case GROUPING_ID:
								case HADR:
								case HASH:
								case HEALTH_CHECK_TIMEOUT:
								case HIGH:
								case HONOR_BROKER_PRIORITY:
								case HOURS:
								case IDENTITY_VALUE:
								case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
								case IMMEDIATE:
								case IMPERSONATE:
								case IMPORTANCE:
								case INCREMENTAL:
								case INITIATOR:
								case INPUT:
								case INSENSITIVE:
								case INSERTED:
								case INT:
								case IP:
								case ISOLATION:
								case KB:
								case KEEP:
								case KEEPFIXED:
								case KEY_SOURCE:
								case KEYS:
								case KEYSET:
								case LAG:
								case LAST:
								case LAST_VALUE:
								case LEAD:
								case LEVEL:
								case LIST:
								case LISTENER:
								case LISTENER_URL:
								case LOB_COMPACTION:
								case LOCAL:
								case LOCATION:
								case LOCK:
								case LOCK_ESCALATION:
								case LOGIN:
								case LOOP:
								case LOW:
								case MANUAL:
								case MARK:
								case MATERIALIZED:
								case MAX:
								case MAX_CPU_PERCENT:
								case MAX_DOP:
								case MAX_FILES:
								case MAX_IOPS_PER_VOLUME:
								case MAX_MEMORY_PERCENT:
								case MAX_PROCESSES:
								case MAX_QUEUE_READERS:
								case MAX_ROLLOVER_FILES:
								case MAXDOP:
								case MAXRECURSION:
								case MAXSIZE:
								case MB:
								case MEDIUM:
								case MEMORY_OPTIMIZED_DATA:
								case MESSAGE:
								case MIN:
								case MIN_ACTIVE_ROWVERSION:
								case MIN_CPU_PERCENT:
								case MIN_IOPS_PER_VOLUME:
								case MIN_MEMORY_PERCENT:
								case MINUTES:
								case MIRROR_ADDRESS:
								case MIXED_PAGE_ALLOCATION:
								case MODE:
								case MODIFY:
								case MOVE:
								case MULTI_USER:
								case NAME:
								case NESTED_TRIGGERS:
								case NEW_ACCOUNT:
								case NEW_BROKER:
								case NEW_PASSWORD:
								case NEXT:
								case NO:
								case NO_TRUNCATE:
								case NO_WAIT:
								case NOCOUNT:
								case NODES:
								case NOEXPAND:
								case NON_TRANSACTED_ACCESS:
								case NORECOMPUTE:
								case NORECOVERY:
								case NOWAIT:
								case NTILE:
								case NUMANODE:
								case NUMBER:
								case NUMERIC_ROUNDABORT:
								case OBJECT:
								case OFFLINE:
								case OFFSET:
								case OLD_ACCOUNT:
								case ONLINE:
								case ONLY:
								case OPEN_EXISTING:
								case OPTIMISTIC:
								case OPTIMIZE:
								case OUT:
								case OUTPUT:
								case OWNER:
								case PAGE_VERIFY:
								case PARAMETERIZATION:
								case PARTITION:
								case PARTITIONS:
								case PARTNER:
								case PATH:
								case POISON_MESSAGE_HANDLING:
								case POOL:
								case PORT:
								case PRECEDING:
								case PRIMARY_ROLE:
								case PRIOR:
								case PRIORITY:
								case PRIORITY_LEVEL:
								case PRIVATE:
								case PRIVATE_KEY:
								case PRIVILEGES:
								case PROCEDURE_NAME:
								case PROPERTY:
								case PROVIDER:
								case PROVIDER_KEY_NAME:
								case QUERY:
								case QUEUE:
								case QUEUE_DELAY:
								case QUOTED_IDENTIFIER:
								case RANGE:
								case RANK:
								case RC2:
								case RC4:
								case RC4_128:
								case READ_COMMITTED_SNAPSHOT:
								case READ_ONLY:
								case READ_ONLY_ROUTING_LIST:
								case READ_WRITE:
								case READONLY:
								case REBUILD:
								case RECEIVE:
								case RECOMPILE:
								case RECOVERY:
								case RECURSIVE_TRIGGERS:
								case RELATIVE:
								case REMOTE:
								case REMOTE_SERVICE_NAME:
								case REMOVE:
								case REORGANIZE:
								case REPEATABLE:
								case REPLICA:
								case REQUEST_MAX_CPU_TIME_SEC:
								case REQUEST_MAX_MEMORY_GRANT_PERCENT:
								case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
								case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
								case RESERVE_DISK_SPACE:
								case RESOURCE:
								case RESOURCE_MANAGER_LOCATION:
								case RESTRICTED_USER:
								case RETENTION:
								case ROBUST:
								case ROOT:
								case ROUTE:
								case ROW:
								case ROW_NUMBER:
								case ROWGUID:
								case ROWS:
								case SAMPLE:
								case SCHEMABINDING:
								case SCOPED:
								case SCROLL:
								case SCROLL_LOCKS:
								case SEARCH:
								case SECONDARY:
								case SECONDARY_ONLY:
								case SECONDARY_ROLE:
								case SECONDS:
								case SECRET:
								case SECURITY_LOG:
								case SEEDING_MODE:
								case SELF:
								case SEMI_SENSITIVE:
								case SEND:
								case SENT:
								case SERIALIZABLE:
								case SESSION_TIMEOUT:
								case SETERROR:
								case SHARE:
								case SHOWPLAN:
								case SIGNATURE:
								case SIMPLE:
								case SINGLE_USER:
								case SIZE:
								case SMALLINT:
								case SNAPSHOT:
								case SPATIAL_WINDOW_MAX_CELLS:
								case STANDBY:
								case START_DATE:
								case STATIC:
								case STATS_STREAM:
								case STATUS:
								case STDEV:
								case STDEVP:
								case STOPLIST:
								case STUFF:
								case SUBJECT:
								case SUM:
								case SUSPEND:
								case SYMMETRIC:
								case SYNCHRONOUS_COMMIT:
								case SYNONYM:
								case TAKE:
								case TARGET_RECOVERY_TIME:
								case TB:
								case TEXTIMAGE_ON:
								case THROW:
								case TIES:
								case TIME:
								case TIMEOUT:
								case TIMER:
								case TINYINT:
								case TORN_PAGE_DETECTION:
								case TRANSFORM_NOISE_WORDS:
								case TRIPLE_DES:
								case TRIPLE_DES_3KEY:
								case TRUSTWORTHY:
								case TRY:
								case TSQL:
								case TWO_DIGIT_YEAR_CUTOFF:
								case TYPE:
								case TYPE_WARNING:
								case UNBOUNDED:
								case UNCOMMITTED:
								case UNKNOWN:
								case UNLIMITED:
								case USING:
								case VALID_XML:
								case VALIDATION:
								case VALUE:
								case VAR:
								case VARP:
								case VIEW_METADATA:
								case VIEWS:
								case WAIT:
								case WELL_FORMED_XML:
								case WORK:
								case WORKLOAD:
								case XML:
								case XMLNAMESPACES:
								case DOUBLE_QUOTE_ID:
								case SQUARE_BRACKET_ID:
								case ID:
									{
									setState(7483);
									id();
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								break;
							case RETAINDAYS:
								{
								setState(7486);
								match(RETAINDAYS);
								setState(7487);
								match(EQUAL);
								setState(7490);
								_errHandler.sync(this);
								switch (_input.LA(1)) {
								case DECIMAL:
									{
									setState(7488);
									match(DECIMAL);
									}
									break;
								case CALLED:
								case DATA_COMPRESSION:
								case EVENTDATA:
								case FILENAME:
								case FILLFACTOR:
								case FORCESEEK:
								case INIT:
								case KEY:
								case MASTER:
								case MAX_MEMORY:
								case OFFSETS:
								case PAGE:
								case PUBLIC:
								case R:
								case RAW:
								case RETURN:
								case RETURNS:
								case ROWCOUNT:
								case SAFETY:
								case SERVER:
								case SID:
								case SOURCE:
								case STATE:
								case START:
								case TARGET:
								case ABSOLUTE:
								case ACCENT_SENSITIVITY:
								case ACTION:
								case ACTIVATION:
								case ACTIVE:
								case ADDRESS:
								case AES_128:
								case AES_192:
								case AES_256:
								case AFFINITY:
								case AFTER:
								case AGGREGATE:
								case ALGORITHM:
								case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
								case ALLOW_SNAPSHOT_ISOLATION:
								case ALLOWED:
								case ANSI_NULL_DEFAULT:
								case ANSI_NULLS:
								case ANSI_PADDING:
								case ANSI_WARNINGS:
								case APPLICATION_LOG:
								case APPLY:
								case ARITHABORT:
								case ASSEMBLY:
								case AUDIT:
								case AUDIT_GUID:
								case AUTO:
								case AUTO_CLEANUP:
								case AUTO_CLOSE:
								case AUTO_CREATE_STATISTICS:
								case AUTO_SHRINK:
								case AUTO_UPDATE_STATISTICS:
								case AUTO_UPDATE_STATISTICS_ASYNC:
								case AVAILABILITY:
								case AVG:
								case BACKUP_PRIORITY:
								case BEGIN_DIALOG:
								case BIGINT:
								case BINARY_BASE64:
								case BINARY_CHECKSUM:
								case BINDING:
								case BLOB_STORAGE:
								case BROKER:
								case BROKER_INSTANCE:
								case BULK_LOGGED:
								case CALLER:
								case CAP_CPU_PERCENT:
								case CAST:
								case CATALOG:
								case CATCH:
								case CHANGE_RETENTION:
								case CHANGE_TRACKING:
								case CHECKSUM:
								case CHECKSUM_AGG:
								case CLEANUP:
								case COLLECTION:
								case COLUMN_MASTER_KEY:
								case COMMITTED:
								case COMPATIBILITY_LEVEL:
								case CONCAT:
								case CONCAT_NULL_YIELDS_NULL:
								case CONTENT:
								case CONTROL:
								case COOKIE:
								case COUNT:
								case COUNT_BIG:
								case COUNTER:
								case CPU:
								case CREATE_NEW:
								case CREATION_DISPOSITION:
								case CREDENTIAL:
								case CRYPTOGRAPHIC:
								case CURSOR_CLOSE_ON_COMMIT:
								case CURSOR_DEFAULT:
								case DATE_CORRELATION_OPTIMIZATION:
								case DATEADD:
								case DATEDIFF:
								case DATENAME:
								case DATEPART:
								case DAYS:
								case DB_CHAINING:
								case DB_FAILOVER:
								case DECRYPTION:
								case DEFAULT_DOUBLE_QUOTE:
								case DEFAULT_FULLTEXT_LANGUAGE:
								case DEFAULT_LANGUAGE:
								case DELAY:
								case DELAYED_DURABILITY:
								case DELETED:
								case DENSE_RANK:
								case DEPENDENTS:
								case DES:
								case DESCRIPTION:
								case DESX:
								case DHCP:
								case DIALOG:
								case DIRECTORY_NAME:
								case DISABLE:
								case DISABLE_BROKER:
								case DISABLED:
								case DISK_DRIVE:
								case DOCUMENT:
								case DYNAMIC:
								case EMERGENCY:
								case EMPTY:
								case ENABLE:
								case ENABLE_BROKER:
								case ENCRYPTED_VALUE:
								case ENCRYPTION:
								case ENDPOINT_URL:
								case ERROR_BROKER_CONVERSATIONS:
								case EXCLUSIVE:
								case EXECUTABLE:
								case EXIST:
								case EXPAND:
								case EXPIRY_DATE:
								case EXPLICIT:
								case FAIL_OPERATION:
								case FAILOVER_MODE:
								case FAILURE:
								case FAILURE_CONDITION_LEVEL:
								case FAST:
								case FAST_FORWARD:
								case FILEGROUP:
								case FILEGROWTH:
								case FILEPATH:
								case FILESTREAM:
								case FILTER:
								case FIRST:
								case FIRST_VALUE:
								case FOLLOWING:
								case FORCE:
								case FORCE_FAILOVER_ALLOW_DATA_LOSS:
								case FORCED:
								case FORMAT:
								case FORWARD_ONLY:
								case FULLSCAN:
								case FULLTEXT:
								case GB:
								case GETDATE:
								case GETUTCDATE:
								case GLOBAL:
								case GO:
								case GROUP_MAX_REQUESTS:
								case GROUPING:
								case GROUPING_ID:
								case HADR:
								case HASH:
								case HEALTH_CHECK_TIMEOUT:
								case HIGH:
								case HONOR_BROKER_PRIORITY:
								case HOURS:
								case IDENTITY_VALUE:
								case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
								case IMMEDIATE:
								case IMPERSONATE:
								case IMPORTANCE:
								case INCREMENTAL:
								case INITIATOR:
								case INPUT:
								case INSENSITIVE:
								case INSERTED:
								case INT:
								case IP:
								case ISOLATION:
								case KB:
								case KEEP:
								case KEEPFIXED:
								case KEY_SOURCE:
								case KEYS:
								case KEYSET:
								case LAG:
								case LAST:
								case LAST_VALUE:
								case LEAD:
								case LEVEL:
								case LIST:
								case LISTENER:
								case LISTENER_URL:
								case LOB_COMPACTION:
								case LOCAL:
								case LOCATION:
								case LOCK:
								case LOCK_ESCALATION:
								case LOGIN:
								case LOOP:
								case LOW:
								case MANUAL:
								case MARK:
								case MATERIALIZED:
								case MAX:
								case MAX_CPU_PERCENT:
								case MAX_DOP:
								case MAX_FILES:
								case MAX_IOPS_PER_VOLUME:
								case MAX_MEMORY_PERCENT:
								case MAX_PROCESSES:
								case MAX_QUEUE_READERS:
								case MAX_ROLLOVER_FILES:
								case MAXDOP:
								case MAXRECURSION:
								case MAXSIZE:
								case MB:
								case MEDIUM:
								case MEMORY_OPTIMIZED_DATA:
								case MESSAGE:
								case MIN:
								case MIN_ACTIVE_ROWVERSION:
								case MIN_CPU_PERCENT:
								case MIN_IOPS_PER_VOLUME:
								case MIN_MEMORY_PERCENT:
								case MINUTES:
								case MIRROR_ADDRESS:
								case MIXED_PAGE_ALLOCATION:
								case MODE:
								case MODIFY:
								case MOVE:
								case MULTI_USER:
								case NAME:
								case NESTED_TRIGGERS:
								case NEW_ACCOUNT:
								case NEW_BROKER:
								case NEW_PASSWORD:
								case NEXT:
								case NO:
								case NO_TRUNCATE:
								case NO_WAIT:
								case NOCOUNT:
								case NODES:
								case NOEXPAND:
								case NON_TRANSACTED_ACCESS:
								case NORECOMPUTE:
								case NORECOVERY:
								case NOWAIT:
								case NTILE:
								case NUMANODE:
								case NUMBER:
								case NUMERIC_ROUNDABORT:
								case OBJECT:
								case OFFLINE:
								case OFFSET:
								case OLD_ACCOUNT:
								case ONLINE:
								case ONLY:
								case OPEN_EXISTING:
								case OPTIMISTIC:
								case OPTIMIZE:
								case OUT:
								case OUTPUT:
								case OWNER:
								case PAGE_VERIFY:
								case PARAMETERIZATION:
								case PARTITION:
								case PARTITIONS:
								case PARTNER:
								case PATH:
								case POISON_MESSAGE_HANDLING:
								case POOL:
								case PORT:
								case PRECEDING:
								case PRIMARY_ROLE:
								case PRIOR:
								case PRIORITY:
								case PRIORITY_LEVEL:
								case PRIVATE:
								case PRIVATE_KEY:
								case PRIVILEGES:
								case PROCEDURE_NAME:
								case PROPERTY:
								case PROVIDER:
								case PROVIDER_KEY_NAME:
								case QUERY:
								case QUEUE:
								case QUEUE_DELAY:
								case QUOTED_IDENTIFIER:
								case RANGE:
								case RANK:
								case RC2:
								case RC4:
								case RC4_128:
								case READ_COMMITTED_SNAPSHOT:
								case READ_ONLY:
								case READ_ONLY_ROUTING_LIST:
								case READ_WRITE:
								case READONLY:
								case REBUILD:
								case RECEIVE:
								case RECOMPILE:
								case RECOVERY:
								case RECURSIVE_TRIGGERS:
								case RELATIVE:
								case REMOTE:
								case REMOTE_SERVICE_NAME:
								case REMOVE:
								case REORGANIZE:
								case REPEATABLE:
								case REPLICA:
								case REQUEST_MAX_CPU_TIME_SEC:
								case REQUEST_MAX_MEMORY_GRANT_PERCENT:
								case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
								case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
								case RESERVE_DISK_SPACE:
								case RESOURCE:
								case RESOURCE_MANAGER_LOCATION:
								case RESTRICTED_USER:
								case RETENTION:
								case ROBUST:
								case ROOT:
								case ROUTE:
								case ROW:
								case ROW_NUMBER:
								case ROWGUID:
								case ROWS:
								case SAMPLE:
								case SCHEMABINDING:
								case SCOPED:
								case SCROLL:
								case SCROLL_LOCKS:
								case SEARCH:
								case SECONDARY:
								case SECONDARY_ONLY:
								case SECONDARY_ROLE:
								case SECONDS:
								case SECRET:
								case SECURITY_LOG:
								case SEEDING_MODE:
								case SELF:
								case SEMI_SENSITIVE:
								case SEND:
								case SENT:
								case SERIALIZABLE:
								case SESSION_TIMEOUT:
								case SETERROR:
								case SHARE:
								case SHOWPLAN:
								case SIGNATURE:
								case SIMPLE:
								case SINGLE_USER:
								case SIZE:
								case SMALLINT:
								case SNAPSHOT:
								case SPATIAL_WINDOW_MAX_CELLS:
								case STANDBY:
								case START_DATE:
								case STATIC:
								case STATS_STREAM:
								case STATUS:
								case STDEV:
								case STDEVP:
								case STOPLIST:
								case STUFF:
								case SUBJECT:
								case SUM:
								case SUSPEND:
								case SYMMETRIC:
								case SYNCHRONOUS_COMMIT:
								case SYNONYM:
								case TAKE:
								case TARGET_RECOVERY_TIME:
								case TB:
								case TEXTIMAGE_ON:
								case THROW:
								case TIES:
								case TIME:
								case TIMEOUT:
								case TIMER:
								case TINYINT:
								case TORN_PAGE_DETECTION:
								case TRANSFORM_NOISE_WORDS:
								case TRIPLE_DES:
								case TRIPLE_DES_3KEY:
								case TRUSTWORTHY:
								case TRY:
								case TSQL:
								case TWO_DIGIT_YEAR_CUTOFF:
								case TYPE:
								case TYPE_WARNING:
								case UNBOUNDED:
								case UNCOMMITTED:
								case UNKNOWN:
								case UNLIMITED:
								case USING:
								case VALID_XML:
								case VALIDATION:
								case VALUE:
								case VAR:
								case VARP:
								case VIEW_METADATA:
								case VIEWS:
								case WAIT:
								case WELL_FORMED_XML:
								case WORK:
								case WORKLOAD:
								case XML:
								case XMLNAMESPACES:
								case DOUBLE_QUOTE_ID:
								case SQUARE_BRACKET_ID:
								case ID:
									{
									setState(7489);
									id();
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 9:
							{
							setState(7495);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7494);
								match(COMMA);
								}
							}

							setState(7497);
							_la = _input.LA(1);
							if ( !(_la==INIT || _la==NOINIT) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 10:
							{
							setState(7499);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7498);
								match(COMMA);
								}
							}

							setState(7501);
							_la = _input.LA(1);
							if ( !(_la==NOSKIP || _la==SKIP_KEYWORD) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 11:
							{
							setState(7503);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7502);
								match(COMMA);
								}
							}

							setState(7505);
							_la = _input.LA(1);
							if ( !(_la==NOFORMAT || _la==FORMAT) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 12:
							{
							setState(7507);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7506);
								match(COMMA);
								}
							}

							setState(7509);
							match(MEDIADESCRIPTION);
							setState(7510);
							match(EQUAL);
							setState(7513);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case STRING:
								{
								setState(7511);
								match(STRING);
								}
								break;
							case CALLED:
							case DATA_COMPRESSION:
							case EVENTDATA:
							case FILENAME:
							case FILLFACTOR:
							case FORCESEEK:
							case INIT:
							case KEY:
							case MASTER:
							case MAX_MEMORY:
							case OFFSETS:
							case PAGE:
							case PUBLIC:
							case R:
							case RAW:
							case RETURN:
							case RETURNS:
							case ROWCOUNT:
							case SAFETY:
							case SERVER:
							case SID:
							case SOURCE:
							case STATE:
							case START:
							case TARGET:
							case ABSOLUTE:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STUFF:
							case SUBJECT:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLNAMESPACES:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								setState(7512);
								id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 13:
							{
							setState(7516);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7515);
								match(COMMA);
								}
							}

							setState(7518);
							match(MEDIANAME);
							setState(7519);
							match(EQUAL);
							{
							setState(7520);
							((Backup_databaseContext)_localctx).medianame = match(STRING);
							}
							}
							break;
						case 14:
							{
							setState(7522);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7521);
								match(COMMA);
								}
							}

							setState(7524);
							match(BLOCKSIZE);
							setState(7525);
							match(EQUAL);
							setState(7528);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case DECIMAL:
								{
								setState(7526);
								match(DECIMAL);
								}
								break;
							case CALLED:
							case DATA_COMPRESSION:
							case EVENTDATA:
							case FILENAME:
							case FILLFACTOR:
							case FORCESEEK:
							case INIT:
							case KEY:
							case MASTER:
							case MAX_MEMORY:
							case OFFSETS:
							case PAGE:
							case PUBLIC:
							case R:
							case RAW:
							case RETURN:
							case RETURNS:
							case ROWCOUNT:
							case SAFETY:
							case SERVER:
							case SID:
							case SOURCE:
							case STATE:
							case START:
							case TARGET:
							case ABSOLUTE:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STUFF:
							case SUBJECT:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLNAMESPACES:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								setState(7527);
								id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 15:
							{
							setState(7531);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7530);
								match(COMMA);
								}
							}

							setState(7533);
							match(BUFFERCOUNT);
							setState(7534);
							match(EQUAL);
							setState(7537);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case DECIMAL:
								{
								setState(7535);
								match(DECIMAL);
								}
								break;
							case CALLED:
							case DATA_COMPRESSION:
							case EVENTDATA:
							case FILENAME:
							case FILLFACTOR:
							case FORCESEEK:
							case INIT:
							case KEY:
							case MASTER:
							case MAX_MEMORY:
							case OFFSETS:
							case PAGE:
							case PUBLIC:
							case R:
							case RAW:
							case RETURN:
							case RETURNS:
							case ROWCOUNT:
							case SAFETY:
							case SERVER:
							case SID:
							case SOURCE:
							case STATE:
							case START:
							case TARGET:
							case ABSOLUTE:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STUFF:
							case SUBJECT:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLNAMESPACES:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								setState(7536);
								id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 16:
							{
							setState(7540);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7539);
								match(COMMA);
								}
							}

							setState(7542);
							match(MAXTRANSFER);
							setState(7543);
							match(EQUAL);
							setState(7546);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case DECIMAL:
								{
								setState(7544);
								match(DECIMAL);
								}
								break;
							case CALLED:
							case DATA_COMPRESSION:
							case EVENTDATA:
							case FILENAME:
							case FILLFACTOR:
							case FORCESEEK:
							case INIT:
							case KEY:
							case MASTER:
							case MAX_MEMORY:
							case OFFSETS:
							case PAGE:
							case PUBLIC:
							case R:
							case RAW:
							case RETURN:
							case RETURNS:
							case ROWCOUNT:
							case SAFETY:
							case SERVER:
							case SID:
							case SOURCE:
							case STATE:
							case START:
							case TARGET:
							case ABSOLUTE:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STUFF:
							case SUBJECT:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLNAMESPACES:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								setState(7545);
								id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 17:
							{
							setState(7549);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7548);
								match(COMMA);
								}
							}

							setState(7551);
							_la = _input.LA(1);
							if ( !(_la==NO_CHECKSUM || _la==CHECKSUM) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 18:
							{
							setState(7553);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7552);
								match(COMMA);
								}
							}

							setState(7555);
							_la = _input.LA(1);
							if ( !(_la==CONTINUE_AFTER_ERROR || _la==STOP_ON_ERROR) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 19:
							{
							setState(7557);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7556);
								match(COMMA);
								}
							}

							setState(7559);
							match(RESTART);
							}
							break;
						case 20:
							{
							setState(7561);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7560);
								match(COMMA);
								}
							}

							setState(7563);
							match(STATS);
							setState(7566);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==EQUAL) {
								{
								setState(7564);
								match(EQUAL);
								setState(7565);
								((Backup_databaseContext)_localctx).stats_percent = match(DECIMAL);
								}
							}

							}
							break;
						case 21:
							{
							setState(7569);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7568);
								match(COMMA);
								}
							}

							setState(7571);
							_la = _input.LA(1);
							if ( !(_la==NOREWIND || _la==REWIND) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 22:
							{
							setState(7573);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7572);
								match(COMMA);
								}
							}

							setState(7575);
							_la = _input.LA(1);
							if ( !(_la==LOAD || _la==NOUNLOAD) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 23:
							{
							setState(7577);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7576);
								match(COMMA);
								}
							}

							setState(7579);
							match(ENCRYPTION);
							setState(7580);
							match(LR_BRACKET);
							setState(7581);
							match(ALGORITHM);
							setState(7582);
							match(EQUAL);
							setState(7583);
							_la = _input.LA(1);
							if ( !(((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (AES_128 - 389)) | (1L << (AES_192 - 389)) | (1L << (AES_256 - 389)))) != 0) || _la==TRIPLE_DES_3KEY) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							setState(7584);
							match(COMMA);
							setState(7585);
							match(SERVER);
							setState(7586);
							match(CERTIFICATE);
							setState(7587);
							match(EQUAL);
							setState(7594);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,1034,_ctx) ) {
							case 1:
								{
								setState(7588);
								((Backup_databaseContext)_localctx).encryptor_name = id();
								}
								break;
							case 2:
								{
								setState(7589);
								match(SERVER);
								setState(7590);
								match(ASYMMETRIC);
								setState(7591);
								match(KEY);
								setState(7592);
								match(EQUAL);
								setState(7593);
								((Backup_databaseContext)_localctx).encryptor_name = id();
								}
								break;
							}
							}
							break;
						}
						} 
					}
					setState(7600);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1036,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Backup_logContext extends ParserRuleContext {
		public IdContext database_name;
		public IdContext logical_device_name;
		public IdContext backup_set_name;
		public Token medianame;
		public Token stats_percent;
		public Token undo_file_name;
		public IdContext encryptor_name;
		public TerminalNode BACKUP() { return getToken(TSqlParser.BACKUP, 0); }
		public TerminalNode LOG() { return getToken(TSqlParser.LOG, 0); }
		public List<TerminalNode> TO() { return getTokens(TSqlParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(TSqlParser.TO, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public List<TerminalNode> DISK() { return getTokens(TSqlParser.DISK); }
		public TerminalNode DISK(int i) {
			return getToken(TSqlParser.DISK, i);
		}
		public List<TerminalNode> TAPE() { return getTokens(TSqlParser.TAPE); }
		public TerminalNode TAPE(int i) {
			return getToken(TSqlParser.TAPE, i);
		}
		public List<TerminalNode> URL() { return getTokens(TSqlParser.URL); }
		public TerminalNode URL(int i) {
			return getToken(TSqlParser.URL, i);
		}
		public List<TerminalNode> MIRROR() { return getTokens(TSqlParser.MIRROR); }
		public TerminalNode MIRROR(int i) {
			return getToken(TSqlParser.MIRROR, i);
		}
		public List<TerminalNode> DIFFERENTIAL() { return getTokens(TSqlParser.DIFFERENTIAL); }
		public TerminalNode DIFFERENTIAL(int i) {
			return getToken(TSqlParser.DIFFERENTIAL, i);
		}
		public List<TerminalNode> COPY_ONLY() { return getTokens(TSqlParser.COPY_ONLY); }
		public TerminalNode COPY_ONLY(int i) {
			return getToken(TSqlParser.COPY_ONLY, i);
		}
		public List<TerminalNode> DESCRIPTION() { return getTokens(TSqlParser.DESCRIPTION); }
		public TerminalNode DESCRIPTION(int i) {
			return getToken(TSqlParser.DESCRIPTION, i);
		}
		public List<TerminalNode> NAME() { return getTokens(TSqlParser.NAME); }
		public TerminalNode NAME(int i) {
			return getToken(TSqlParser.NAME, i);
		}
		public List<TerminalNode> CREDENTIAL() { return getTokens(TSqlParser.CREDENTIAL); }
		public TerminalNode CREDENTIAL(int i) {
			return getToken(TSqlParser.CREDENTIAL, i);
		}
		public List<TerminalNode> FILE_SNAPSHOT() { return getTokens(TSqlParser.FILE_SNAPSHOT); }
		public TerminalNode FILE_SNAPSHOT(int i) {
			return getToken(TSqlParser.FILE_SNAPSHOT, i);
		}
		public List<TerminalNode> MEDIADESCRIPTION() { return getTokens(TSqlParser.MEDIADESCRIPTION); }
		public TerminalNode MEDIADESCRIPTION(int i) {
			return getToken(TSqlParser.MEDIADESCRIPTION, i);
		}
		public List<TerminalNode> MEDIANAME() { return getTokens(TSqlParser.MEDIANAME); }
		public TerminalNode MEDIANAME(int i) {
			return getToken(TSqlParser.MEDIANAME, i);
		}
		public List<TerminalNode> BLOCKSIZE() { return getTokens(TSqlParser.BLOCKSIZE); }
		public TerminalNode BLOCKSIZE(int i) {
			return getToken(TSqlParser.BLOCKSIZE, i);
		}
		public List<TerminalNode> BUFFERCOUNT() { return getTokens(TSqlParser.BUFFERCOUNT); }
		public TerminalNode BUFFERCOUNT(int i) {
			return getToken(TSqlParser.BUFFERCOUNT, i);
		}
		public List<TerminalNode> MAXTRANSFER() { return getTokens(TSqlParser.MAXTRANSFER); }
		public TerminalNode MAXTRANSFER(int i) {
			return getToken(TSqlParser.MAXTRANSFER, i);
		}
		public List<TerminalNode> RESTART() { return getTokens(TSqlParser.RESTART); }
		public TerminalNode RESTART(int i) {
			return getToken(TSqlParser.RESTART, i);
		}
		public List<TerminalNode> STATS() { return getTokens(TSqlParser.STATS); }
		public TerminalNode STATS(int i) {
			return getToken(TSqlParser.STATS, i);
		}
		public List<TerminalNode> NO_TRUNCATE() { return getTokens(TSqlParser.NO_TRUNCATE); }
		public TerminalNode NO_TRUNCATE(int i) {
			return getToken(TSqlParser.NO_TRUNCATE, i);
		}
		public List<TerminalNode> ENCRYPTION() { return getTokens(TSqlParser.ENCRYPTION); }
		public TerminalNode ENCRYPTION(int i) {
			return getToken(TSqlParser.ENCRYPTION, i);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> ALGORITHM() { return getTokens(TSqlParser.ALGORITHM); }
		public TerminalNode ALGORITHM(int i) {
			return getToken(TSqlParser.ALGORITHM, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<TerminalNode> SERVER() { return getTokens(TSqlParser.SERVER); }
		public TerminalNode SERVER(int i) {
			return getToken(TSqlParser.SERVER, i);
		}
		public List<TerminalNode> CERTIFICATE() { return getTokens(TSqlParser.CERTIFICATE); }
		public TerminalNode CERTIFICATE(int i) {
			return getToken(TSqlParser.CERTIFICATE, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public List<TerminalNode> COMPRESSION() { return getTokens(TSqlParser.COMPRESSION); }
		public TerminalNode COMPRESSION(int i) {
			return getToken(TSqlParser.COMPRESSION, i);
		}
		public List<TerminalNode> NO_COMPRESSION() { return getTokens(TSqlParser.NO_COMPRESSION); }
		public TerminalNode NO_COMPRESSION(int i) {
			return getToken(TSqlParser.NO_COMPRESSION, i);
		}
		public List<TerminalNode> NOINIT() { return getTokens(TSqlParser.NOINIT); }
		public TerminalNode NOINIT(int i) {
			return getToken(TSqlParser.NOINIT, i);
		}
		public List<TerminalNode> INIT() { return getTokens(TSqlParser.INIT); }
		public TerminalNode INIT(int i) {
			return getToken(TSqlParser.INIT, i);
		}
		public List<TerminalNode> NOSKIP() { return getTokens(TSqlParser.NOSKIP); }
		public TerminalNode NOSKIP(int i) {
			return getToken(TSqlParser.NOSKIP, i);
		}
		public List<TerminalNode> SKIP_KEYWORD() { return getTokens(TSqlParser.SKIP_KEYWORD); }
		public TerminalNode SKIP_KEYWORD(int i) {
			return getToken(TSqlParser.SKIP_KEYWORD, i);
		}
		public List<TerminalNode> NOFORMAT() { return getTokens(TSqlParser.NOFORMAT); }
		public TerminalNode NOFORMAT(int i) {
			return getToken(TSqlParser.NOFORMAT, i);
		}
		public List<TerminalNode> FORMAT() { return getTokens(TSqlParser.FORMAT); }
		public TerminalNode FORMAT(int i) {
			return getToken(TSqlParser.FORMAT, i);
		}
		public List<TerminalNode> NO_CHECKSUM() { return getTokens(TSqlParser.NO_CHECKSUM); }
		public TerminalNode NO_CHECKSUM(int i) {
			return getToken(TSqlParser.NO_CHECKSUM, i);
		}
		public List<TerminalNode> CHECKSUM() { return getTokens(TSqlParser.CHECKSUM); }
		public TerminalNode CHECKSUM(int i) {
			return getToken(TSqlParser.CHECKSUM, i);
		}
		public List<TerminalNode> STOP_ON_ERROR() { return getTokens(TSqlParser.STOP_ON_ERROR); }
		public TerminalNode STOP_ON_ERROR(int i) {
			return getToken(TSqlParser.STOP_ON_ERROR, i);
		}
		public List<TerminalNode> CONTINUE_AFTER_ERROR() { return getTokens(TSqlParser.CONTINUE_AFTER_ERROR); }
		public TerminalNode CONTINUE_AFTER_ERROR(int i) {
			return getToken(TSqlParser.CONTINUE_AFTER_ERROR, i);
		}
		public List<TerminalNode> REWIND() { return getTokens(TSqlParser.REWIND); }
		public TerminalNode REWIND(int i) {
			return getToken(TSqlParser.REWIND, i);
		}
		public List<TerminalNode> NOREWIND() { return getTokens(TSqlParser.NOREWIND); }
		public TerminalNode NOREWIND(int i) {
			return getToken(TSqlParser.NOREWIND, i);
		}
		public List<TerminalNode> LOAD() { return getTokens(TSqlParser.LOAD); }
		public TerminalNode LOAD(int i) {
			return getToken(TSqlParser.LOAD, i);
		}
		public List<TerminalNode> NOUNLOAD() { return getTokens(TSqlParser.NOUNLOAD); }
		public TerminalNode NOUNLOAD(int i) {
			return getToken(TSqlParser.NOUNLOAD, i);
		}
		public List<TerminalNode> AES_128() { return getTokens(TSqlParser.AES_128); }
		public TerminalNode AES_128(int i) {
			return getToken(TSqlParser.AES_128, i);
		}
		public List<TerminalNode> AES_192() { return getTokens(TSqlParser.AES_192); }
		public TerminalNode AES_192(int i) {
			return getToken(TSqlParser.AES_192, i);
		}
		public List<TerminalNode> AES_256() { return getTokens(TSqlParser.AES_256); }
		public TerminalNode AES_256(int i) {
			return getToken(TSqlParser.AES_256, i);
		}
		public List<TerminalNode> TRIPLE_DES_3KEY() { return getTokens(TSqlParser.TRIPLE_DES_3KEY); }
		public TerminalNode TRIPLE_DES_3KEY(int i) {
			return getToken(TSqlParser.TRIPLE_DES_3KEY, i);
		}
		public List<TerminalNode> EXPIREDATE() { return getTokens(TSqlParser.EXPIREDATE); }
		public TerminalNode EXPIREDATE(int i) {
			return getToken(TSqlParser.EXPIREDATE, i);
		}
		public List<TerminalNode> RETAINDAYS() { return getTokens(TSqlParser.RETAINDAYS); }
		public TerminalNode RETAINDAYS(int i) {
			return getToken(TSqlParser.RETAINDAYS, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public List<TerminalNode> NORECOVERY() { return getTokens(TSqlParser.NORECOVERY); }
		public TerminalNode NORECOVERY(int i) {
			return getToken(TSqlParser.NORECOVERY, i);
		}
		public List<TerminalNode> STANDBY() { return getTokens(TSqlParser.STANDBY); }
		public TerminalNode STANDBY(int i) {
			return getToken(TSqlParser.STANDBY, i);
		}
		public List<TerminalNode> ASYMMETRIC() { return getTokens(TSqlParser.ASYMMETRIC); }
		public TerminalNode ASYMMETRIC(int i) {
			return getToken(TSqlParser.ASYMMETRIC, i);
		}
		public List<TerminalNode> KEY() { return getTokens(TSqlParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(TSqlParser.KEY, i);
		}
		public Backup_logContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_backup_log; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterBackup_log(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitBackup_log(this);
		}
	}

	public final Backup_logContext backup_log() throws RecognitionException {
		Backup_logContext _localctx = new Backup_logContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_backup_log);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7603);
			match(BACKUP);
			setState(7604);
			match(LOG);
			{
			setState(7605);
			((Backup_logContext)_localctx).database_name = id();
			}
			setState(7629);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1043,_ctx) ) {
			case 1:
				{
				setState(7606);
				match(TO);
				setState(7611); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(7608);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7607);
							match(COMMA);
							}
						}

						setState(7610);
						((Backup_logContext)_localctx).logical_device_name = id();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(7613); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1039,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				{
				setState(7615);
				match(TO);
				setState(7625); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(7617);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(7616);
						match(COMMA);
						}
					}

					setState(7619);
					_la = _input.LA(1);
					if ( !(_la==DISK || _la==TAPE || _la==URL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(7620);
					match(EQUAL);
					setState(7623);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case STRING:
						{
						setState(7621);
						match(STRING);
						}
						break;
					case CALLED:
					case DATA_COMPRESSION:
					case EVENTDATA:
					case FILENAME:
					case FILLFACTOR:
					case FORCESEEK:
					case INIT:
					case KEY:
					case MASTER:
					case MAX_MEMORY:
					case OFFSETS:
					case PAGE:
					case PUBLIC:
					case R:
					case RAW:
					case RETURN:
					case RETURNS:
					case ROWCOUNT:
					case SAFETY:
					case SERVER:
					case SID:
					case SOURCE:
					case STATE:
					case START:
					case TARGET:
					case ABSOLUTE:
					case ACCENT_SENSITIVITY:
					case ACTION:
					case ACTIVATION:
					case ACTIVE:
					case ADDRESS:
					case AES_128:
					case AES_192:
					case AES_256:
					case AFFINITY:
					case AFTER:
					case AGGREGATE:
					case ALGORITHM:
					case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
					case ALLOW_SNAPSHOT_ISOLATION:
					case ALLOWED:
					case ANSI_NULL_DEFAULT:
					case ANSI_NULLS:
					case ANSI_PADDING:
					case ANSI_WARNINGS:
					case APPLICATION_LOG:
					case APPLY:
					case ARITHABORT:
					case ASSEMBLY:
					case AUDIT:
					case AUDIT_GUID:
					case AUTO:
					case AUTO_CLEANUP:
					case AUTO_CLOSE:
					case AUTO_CREATE_STATISTICS:
					case AUTO_SHRINK:
					case AUTO_UPDATE_STATISTICS:
					case AUTO_UPDATE_STATISTICS_ASYNC:
					case AVAILABILITY:
					case AVG:
					case BACKUP_PRIORITY:
					case BEGIN_DIALOG:
					case BIGINT:
					case BINARY_BASE64:
					case BINARY_CHECKSUM:
					case BINDING:
					case BLOB_STORAGE:
					case BROKER:
					case BROKER_INSTANCE:
					case BULK_LOGGED:
					case CALLER:
					case CAP_CPU_PERCENT:
					case CAST:
					case CATALOG:
					case CATCH:
					case CHANGE_RETENTION:
					case CHANGE_TRACKING:
					case CHECKSUM:
					case CHECKSUM_AGG:
					case CLEANUP:
					case COLLECTION:
					case COLUMN_MASTER_KEY:
					case COMMITTED:
					case COMPATIBILITY_LEVEL:
					case CONCAT:
					case CONCAT_NULL_YIELDS_NULL:
					case CONTENT:
					case CONTROL:
					case COOKIE:
					case COUNT:
					case COUNT_BIG:
					case COUNTER:
					case CPU:
					case CREATE_NEW:
					case CREATION_DISPOSITION:
					case CREDENTIAL:
					case CRYPTOGRAPHIC:
					case CURSOR_CLOSE_ON_COMMIT:
					case CURSOR_DEFAULT:
					case DATE_CORRELATION_OPTIMIZATION:
					case DATEADD:
					case DATEDIFF:
					case DATENAME:
					case DATEPART:
					case DAYS:
					case DB_CHAINING:
					case DB_FAILOVER:
					case DECRYPTION:
					case DEFAULT_DOUBLE_QUOTE:
					case DEFAULT_FULLTEXT_LANGUAGE:
					case DEFAULT_LANGUAGE:
					case DELAY:
					case DELAYED_DURABILITY:
					case DELETED:
					case DENSE_RANK:
					case DEPENDENTS:
					case DES:
					case DESCRIPTION:
					case DESX:
					case DHCP:
					case DIALOG:
					case DIRECTORY_NAME:
					case DISABLE:
					case DISABLE_BROKER:
					case DISABLED:
					case DISK_DRIVE:
					case DOCUMENT:
					case DYNAMIC:
					case EMERGENCY:
					case EMPTY:
					case ENABLE:
					case ENABLE_BROKER:
					case ENCRYPTED_VALUE:
					case ENCRYPTION:
					case ENDPOINT_URL:
					case ERROR_BROKER_CONVERSATIONS:
					case EXCLUSIVE:
					case EXECUTABLE:
					case EXIST:
					case EXPAND:
					case EXPIRY_DATE:
					case EXPLICIT:
					case FAIL_OPERATION:
					case FAILOVER_MODE:
					case FAILURE:
					case FAILURE_CONDITION_LEVEL:
					case FAST:
					case FAST_FORWARD:
					case FILEGROUP:
					case FILEGROWTH:
					case FILEPATH:
					case FILESTREAM:
					case FILTER:
					case FIRST:
					case FIRST_VALUE:
					case FOLLOWING:
					case FORCE:
					case FORCE_FAILOVER_ALLOW_DATA_LOSS:
					case FORCED:
					case FORMAT:
					case FORWARD_ONLY:
					case FULLSCAN:
					case FULLTEXT:
					case GB:
					case GETDATE:
					case GETUTCDATE:
					case GLOBAL:
					case GO:
					case GROUP_MAX_REQUESTS:
					case GROUPING:
					case GROUPING_ID:
					case HADR:
					case HASH:
					case HEALTH_CHECK_TIMEOUT:
					case HIGH:
					case HONOR_BROKER_PRIORITY:
					case HOURS:
					case IDENTITY_VALUE:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMMEDIATE:
					case IMPERSONATE:
					case IMPORTANCE:
					case INCREMENTAL:
					case INITIATOR:
					case INPUT:
					case INSENSITIVE:
					case INSERTED:
					case INT:
					case IP:
					case ISOLATION:
					case KB:
					case KEEP:
					case KEEPFIXED:
					case KEY_SOURCE:
					case KEYS:
					case KEYSET:
					case LAG:
					case LAST:
					case LAST_VALUE:
					case LEAD:
					case LEVEL:
					case LIST:
					case LISTENER:
					case LISTENER_URL:
					case LOB_COMPACTION:
					case LOCAL:
					case LOCATION:
					case LOCK:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case LOW:
					case MANUAL:
					case MARK:
					case MATERIALIZED:
					case MAX:
					case MAX_CPU_PERCENT:
					case MAX_DOP:
					case MAX_FILES:
					case MAX_IOPS_PER_VOLUME:
					case MAX_MEMORY_PERCENT:
					case MAX_PROCESSES:
					case MAX_QUEUE_READERS:
					case MAX_ROLLOVER_FILES:
					case MAXDOP:
					case MAXRECURSION:
					case MAXSIZE:
					case MB:
					case MEDIUM:
					case MEMORY_OPTIMIZED_DATA:
					case MESSAGE:
					case MIN:
					case MIN_ACTIVE_ROWVERSION:
					case MIN_CPU_PERCENT:
					case MIN_IOPS_PER_VOLUME:
					case MIN_MEMORY_PERCENT:
					case MINUTES:
					case MIRROR_ADDRESS:
					case MIXED_PAGE_ALLOCATION:
					case MODE:
					case MODIFY:
					case MOVE:
					case MULTI_USER:
					case NAME:
					case NESTED_TRIGGERS:
					case NEW_ACCOUNT:
					case NEW_BROKER:
					case NEW_PASSWORD:
					case NEXT:
					case NO:
					case NO_TRUNCATE:
					case NO_WAIT:
					case NOCOUNT:
					case NODES:
					case NOEXPAND:
					case NON_TRANSACTED_ACCESS:
					case NORECOMPUTE:
					case NORECOVERY:
					case NOWAIT:
					case NTILE:
					case NUMANODE:
					case NUMBER:
					case NUMERIC_ROUNDABORT:
					case OBJECT:
					case OFFLINE:
					case OFFSET:
					case OLD_ACCOUNT:
					case ONLINE:
					case ONLY:
					case OPEN_EXISTING:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OWNER:
					case PAGE_VERIFY:
					case PARAMETERIZATION:
					case PARTITION:
					case PARTITIONS:
					case PARTNER:
					case PATH:
					case POISON_MESSAGE_HANDLING:
					case POOL:
					case PORT:
					case PRECEDING:
					case PRIMARY_ROLE:
					case PRIOR:
					case PRIORITY:
					case PRIORITY_LEVEL:
					case PRIVATE:
					case PRIVATE_KEY:
					case PRIVILEGES:
					case PROCEDURE_NAME:
					case PROPERTY:
					case PROVIDER:
					case PROVIDER_KEY_NAME:
					case QUERY:
					case QUEUE:
					case QUEUE_DELAY:
					case QUOTED_IDENTIFIER:
					case RANGE:
					case RANK:
					case RC2:
					case RC4:
					case RC4_128:
					case READ_COMMITTED_SNAPSHOT:
					case READ_ONLY:
					case READ_ONLY_ROUTING_LIST:
					case READ_WRITE:
					case READONLY:
					case REBUILD:
					case RECEIVE:
					case RECOMPILE:
					case RECOVERY:
					case RECURSIVE_TRIGGERS:
					case RELATIVE:
					case REMOTE:
					case REMOTE_SERVICE_NAME:
					case REMOVE:
					case REORGANIZE:
					case REPEATABLE:
					case REPLICA:
					case REQUEST_MAX_CPU_TIME_SEC:
					case REQUEST_MAX_MEMORY_GRANT_PERCENT:
					case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
					case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					case RESERVE_DISK_SPACE:
					case RESOURCE:
					case RESOURCE_MANAGER_LOCATION:
					case RESTRICTED_USER:
					case RETENTION:
					case ROBUST:
					case ROOT:
					case ROUTE:
					case ROW:
					case ROW_NUMBER:
					case ROWGUID:
					case ROWS:
					case SAMPLE:
					case SCHEMABINDING:
					case SCOPED:
					case SCROLL:
					case SCROLL_LOCKS:
					case SEARCH:
					case SECONDARY:
					case SECONDARY_ONLY:
					case SECONDARY_ROLE:
					case SECONDS:
					case SECRET:
					case SECURITY_LOG:
					case SEEDING_MODE:
					case SELF:
					case SEMI_SENSITIVE:
					case SEND:
					case SENT:
					case SERIALIZABLE:
					case SESSION_TIMEOUT:
					case SETERROR:
					case SHARE:
					case SHOWPLAN:
					case SIGNATURE:
					case SIMPLE:
					case SINGLE_USER:
					case SIZE:
					case SMALLINT:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STANDBY:
					case START_DATE:
					case STATIC:
					case STATS_STREAM:
					case STATUS:
					case STDEV:
					case STDEVP:
					case STOPLIST:
					case STUFF:
					case SUBJECT:
					case SUM:
					case SUSPEND:
					case SYMMETRIC:
					case SYNCHRONOUS_COMMIT:
					case SYNONYM:
					case TAKE:
					case TARGET_RECOVERY_TIME:
					case TB:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TIMEOUT:
					case TIMER:
					case TINYINT:
					case TORN_PAGE_DETECTION:
					case TRANSFORM_NOISE_WORDS:
					case TRIPLE_DES:
					case TRIPLE_DES_3KEY:
					case TRUSTWORTHY:
					case TRY:
					case TSQL:
					case TWO_DIGIT_YEAR_CUTOFF:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case UNLIMITED:
					case USING:
					case VALID_XML:
					case VALIDATION:
					case VALUE:
					case VAR:
					case VARP:
					case VIEW_METADATA:
					case VIEWS:
					case WAIT:
					case WELL_FORMED_XML:
					case WORK:
					case WORKLOAD:
					case XML:
					case XMLNAMESPACES:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case ID:
						{
						setState(7622);
						id();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					setState(7627); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==DISK || _la==TAPE || _la==URL || _la==COMMA );
				}
				break;
			}
			setState(7664);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1051,_ctx) ) {
			case 1:
				{
				setState(7641); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(7631);
					match(MIRROR);
					setState(7632);
					match(TO);
					setState(7637); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(7634);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7633);
								match(COMMA);
								}
							}

							setState(7636);
							((Backup_logContext)_localctx).logical_device_name = id();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(7639); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,1045,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					}
					setState(7643); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==MIRROR );
				}
				break;
			case 2:
				{
				setState(7660); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(7645);
					match(MIRROR);
					setState(7646);
					match(TO);
					setState(7656); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(7648);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7647);
							match(COMMA);
							}
						}

						setState(7650);
						_la = _input.LA(1);
						if ( !(_la==DISK || _la==TAPE || _la==URL) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(7651);
						match(EQUAL);
						setState(7654);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case STRING:
							{
							setState(7652);
							match(STRING);
							}
							break;
						case CALLED:
						case DATA_COMPRESSION:
						case EVENTDATA:
						case FILENAME:
						case FILLFACTOR:
						case FORCESEEK:
						case INIT:
						case KEY:
						case MASTER:
						case MAX_MEMORY:
						case OFFSETS:
						case PAGE:
						case PUBLIC:
						case R:
						case RAW:
						case RETURN:
						case RETURNS:
						case ROWCOUNT:
						case SAFETY:
						case SERVER:
						case SID:
						case SOURCE:
						case STATE:
						case START:
						case TARGET:
						case ABSOLUTE:
						case ACCENT_SENSITIVITY:
						case ACTION:
						case ACTIVATION:
						case ACTIVE:
						case ADDRESS:
						case AES_128:
						case AES_192:
						case AES_256:
						case AFFINITY:
						case AFTER:
						case AGGREGATE:
						case ALGORITHM:
						case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
						case ALLOW_SNAPSHOT_ISOLATION:
						case ALLOWED:
						case ANSI_NULL_DEFAULT:
						case ANSI_NULLS:
						case ANSI_PADDING:
						case ANSI_WARNINGS:
						case APPLICATION_LOG:
						case APPLY:
						case ARITHABORT:
						case ASSEMBLY:
						case AUDIT:
						case AUDIT_GUID:
						case AUTO:
						case AUTO_CLEANUP:
						case AUTO_CLOSE:
						case AUTO_CREATE_STATISTICS:
						case AUTO_SHRINK:
						case AUTO_UPDATE_STATISTICS:
						case AUTO_UPDATE_STATISTICS_ASYNC:
						case AVAILABILITY:
						case AVG:
						case BACKUP_PRIORITY:
						case BEGIN_DIALOG:
						case BIGINT:
						case BINARY_BASE64:
						case BINARY_CHECKSUM:
						case BINDING:
						case BLOB_STORAGE:
						case BROKER:
						case BROKER_INSTANCE:
						case BULK_LOGGED:
						case CALLER:
						case CAP_CPU_PERCENT:
						case CAST:
						case CATALOG:
						case CATCH:
						case CHANGE_RETENTION:
						case CHANGE_TRACKING:
						case CHECKSUM:
						case CHECKSUM_AGG:
						case CLEANUP:
						case COLLECTION:
						case COLUMN_MASTER_KEY:
						case COMMITTED:
						case COMPATIBILITY_LEVEL:
						case CONCAT:
						case CONCAT_NULL_YIELDS_NULL:
						case CONTENT:
						case CONTROL:
						case COOKIE:
						case COUNT:
						case COUNT_BIG:
						case COUNTER:
						case CPU:
						case CREATE_NEW:
						case CREATION_DISPOSITION:
						case CREDENTIAL:
						case CRYPTOGRAPHIC:
						case CURSOR_CLOSE_ON_COMMIT:
						case CURSOR_DEFAULT:
						case DATE_CORRELATION_OPTIMIZATION:
						case DATEADD:
						case DATEDIFF:
						case DATENAME:
						case DATEPART:
						case DAYS:
						case DB_CHAINING:
						case DB_FAILOVER:
						case DECRYPTION:
						case DEFAULT_DOUBLE_QUOTE:
						case DEFAULT_FULLTEXT_LANGUAGE:
						case DEFAULT_LANGUAGE:
						case DELAY:
						case DELAYED_DURABILITY:
						case DELETED:
						case DENSE_RANK:
						case DEPENDENTS:
						case DES:
						case DESCRIPTION:
						case DESX:
						case DHCP:
						case DIALOG:
						case DIRECTORY_NAME:
						case DISABLE:
						case DISABLE_BROKER:
						case DISABLED:
						case DISK_DRIVE:
						case DOCUMENT:
						case DYNAMIC:
						case EMERGENCY:
						case EMPTY:
						case ENABLE:
						case ENABLE_BROKER:
						case ENCRYPTED_VALUE:
						case ENCRYPTION:
						case ENDPOINT_URL:
						case ERROR_BROKER_CONVERSATIONS:
						case EXCLUSIVE:
						case EXECUTABLE:
						case EXIST:
						case EXPAND:
						case EXPIRY_DATE:
						case EXPLICIT:
						case FAIL_OPERATION:
						case FAILOVER_MODE:
						case FAILURE:
						case FAILURE_CONDITION_LEVEL:
						case FAST:
						case FAST_FORWARD:
						case FILEGROUP:
						case FILEGROWTH:
						case FILEPATH:
						case FILESTREAM:
						case FILTER:
						case FIRST:
						case FIRST_VALUE:
						case FOLLOWING:
						case FORCE:
						case FORCE_FAILOVER_ALLOW_DATA_LOSS:
						case FORCED:
						case FORMAT:
						case FORWARD_ONLY:
						case FULLSCAN:
						case FULLTEXT:
						case GB:
						case GETDATE:
						case GETUTCDATE:
						case GLOBAL:
						case GO:
						case GROUP_MAX_REQUESTS:
						case GROUPING:
						case GROUPING_ID:
						case HADR:
						case HASH:
						case HEALTH_CHECK_TIMEOUT:
						case HIGH:
						case HONOR_BROKER_PRIORITY:
						case HOURS:
						case IDENTITY_VALUE:
						case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
						case IMMEDIATE:
						case IMPERSONATE:
						case IMPORTANCE:
						case INCREMENTAL:
						case INITIATOR:
						case INPUT:
						case INSENSITIVE:
						case INSERTED:
						case INT:
						case IP:
						case ISOLATION:
						case KB:
						case KEEP:
						case KEEPFIXED:
						case KEY_SOURCE:
						case KEYS:
						case KEYSET:
						case LAG:
						case LAST:
						case LAST_VALUE:
						case LEAD:
						case LEVEL:
						case LIST:
						case LISTENER:
						case LISTENER_URL:
						case LOB_COMPACTION:
						case LOCAL:
						case LOCATION:
						case LOCK:
						case LOCK_ESCALATION:
						case LOGIN:
						case LOOP:
						case LOW:
						case MANUAL:
						case MARK:
						case MATERIALIZED:
						case MAX:
						case MAX_CPU_PERCENT:
						case MAX_DOP:
						case MAX_FILES:
						case MAX_IOPS_PER_VOLUME:
						case MAX_MEMORY_PERCENT:
						case MAX_PROCESSES:
						case MAX_QUEUE_READERS:
						case MAX_ROLLOVER_FILES:
						case MAXDOP:
						case MAXRECURSION:
						case MAXSIZE:
						case MB:
						case MEDIUM:
						case MEMORY_OPTIMIZED_DATA:
						case MESSAGE:
						case MIN:
						case MIN_ACTIVE_ROWVERSION:
						case MIN_CPU_PERCENT:
						case MIN_IOPS_PER_VOLUME:
						case MIN_MEMORY_PERCENT:
						case MINUTES:
						case MIRROR_ADDRESS:
						case MIXED_PAGE_ALLOCATION:
						case MODE:
						case MODIFY:
						case MOVE:
						case MULTI_USER:
						case NAME:
						case NESTED_TRIGGERS:
						case NEW_ACCOUNT:
						case NEW_BROKER:
						case NEW_PASSWORD:
						case NEXT:
						case NO:
						case NO_TRUNCATE:
						case NO_WAIT:
						case NOCOUNT:
						case NODES:
						case NOEXPAND:
						case NON_TRANSACTED_ACCESS:
						case NORECOMPUTE:
						case NORECOVERY:
						case NOWAIT:
						case NTILE:
						case NUMANODE:
						case NUMBER:
						case NUMERIC_ROUNDABORT:
						case OBJECT:
						case OFFLINE:
						case OFFSET:
						case OLD_ACCOUNT:
						case ONLINE:
						case ONLY:
						case OPEN_EXISTING:
						case OPTIMISTIC:
						case OPTIMIZE:
						case OUT:
						case OUTPUT:
						case OWNER:
						case PAGE_VERIFY:
						case PARAMETERIZATION:
						case PARTITION:
						case PARTITIONS:
						case PARTNER:
						case PATH:
						case POISON_MESSAGE_HANDLING:
						case POOL:
						case PORT:
						case PRECEDING:
						case PRIMARY_ROLE:
						case PRIOR:
						case PRIORITY:
						case PRIORITY_LEVEL:
						case PRIVATE:
						case PRIVATE_KEY:
						case PRIVILEGES:
						case PROCEDURE_NAME:
						case PROPERTY:
						case PROVIDER:
						case PROVIDER_KEY_NAME:
						case QUERY:
						case QUEUE:
						case QUEUE_DELAY:
						case QUOTED_IDENTIFIER:
						case RANGE:
						case RANK:
						case RC2:
						case RC4:
						case RC4_128:
						case READ_COMMITTED_SNAPSHOT:
						case READ_ONLY:
						case READ_ONLY_ROUTING_LIST:
						case READ_WRITE:
						case READONLY:
						case REBUILD:
						case RECEIVE:
						case RECOMPILE:
						case RECOVERY:
						case RECURSIVE_TRIGGERS:
						case RELATIVE:
						case REMOTE:
						case REMOTE_SERVICE_NAME:
						case REMOVE:
						case REORGANIZE:
						case REPEATABLE:
						case REPLICA:
						case REQUEST_MAX_CPU_TIME_SEC:
						case REQUEST_MAX_MEMORY_GRANT_PERCENT:
						case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
						case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
						case RESERVE_DISK_SPACE:
						case RESOURCE:
						case RESOURCE_MANAGER_LOCATION:
						case RESTRICTED_USER:
						case RETENTION:
						case ROBUST:
						case ROOT:
						case ROUTE:
						case ROW:
						case ROW_NUMBER:
						case ROWGUID:
						case ROWS:
						case SAMPLE:
						case SCHEMABINDING:
						case SCOPED:
						case SCROLL:
						case SCROLL_LOCKS:
						case SEARCH:
						case SECONDARY:
						case SECONDARY_ONLY:
						case SECONDARY_ROLE:
						case SECONDS:
						case SECRET:
						case SECURITY_LOG:
						case SEEDING_MODE:
						case SELF:
						case SEMI_SENSITIVE:
						case SEND:
						case SENT:
						case SERIALIZABLE:
						case SESSION_TIMEOUT:
						case SETERROR:
						case SHARE:
						case SHOWPLAN:
						case SIGNATURE:
						case SIMPLE:
						case SINGLE_USER:
						case SIZE:
						case SMALLINT:
						case SNAPSHOT:
						case SPATIAL_WINDOW_MAX_CELLS:
						case STANDBY:
						case START_DATE:
						case STATIC:
						case STATS_STREAM:
						case STATUS:
						case STDEV:
						case STDEVP:
						case STOPLIST:
						case STUFF:
						case SUBJECT:
						case SUM:
						case SUSPEND:
						case SYMMETRIC:
						case SYNCHRONOUS_COMMIT:
						case SYNONYM:
						case TAKE:
						case TARGET_RECOVERY_TIME:
						case TB:
						case TEXTIMAGE_ON:
						case THROW:
						case TIES:
						case TIME:
						case TIMEOUT:
						case TIMER:
						case TINYINT:
						case TORN_PAGE_DETECTION:
						case TRANSFORM_NOISE_WORDS:
						case TRIPLE_DES:
						case TRIPLE_DES_3KEY:
						case TRUSTWORTHY:
						case TRY:
						case TSQL:
						case TWO_DIGIT_YEAR_CUTOFF:
						case TYPE:
						case TYPE_WARNING:
						case UNBOUNDED:
						case UNCOMMITTED:
						case UNKNOWN:
						case UNLIMITED:
						case USING:
						case VALID_XML:
						case VALIDATION:
						case VALUE:
						case VAR:
						case VARP:
						case VIEW_METADATA:
						case VIEWS:
						case WAIT:
						case WELL_FORMED_XML:
						case WORK:
						case WORKLOAD:
						case XML:
						case XMLNAMESPACES:
						case DOUBLE_QUOTE_ID:
						case SQUARE_BRACKET_ID:
						case ID:
							{
							setState(7653);
							id();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						}
						setState(7658); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==DISK || _la==TAPE || _la==URL || _la==COMMA );
					}
					}
					setState(7662); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==MIRROR );
				}
				break;
			}
			setState(7839);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1090,_ctx) ) {
			case 1:
				{
				setState(7666);
				match(WITH);
				setState(7836);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1089,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						setState(7834);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,1088,_ctx) ) {
						case 1:
							{
							setState(7668);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7667);
								match(COMMA);
								}
							}

							setState(7670);
							match(DIFFERENTIAL);
							}
							break;
						case 2:
							{
							setState(7672);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7671);
								match(COMMA);
								}
							}

							setState(7674);
							match(COPY_ONLY);
							}
							break;
						case 3:
							{
							setState(7676);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7675);
								match(COMMA);
								}
							}

							setState(7678);
							_la = _input.LA(1);
							if ( !(_la==COMPRESSION || _la==NO_COMPRESSION) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 4:
							{
							setState(7680);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7679);
								match(COMMA);
								}
							}

							setState(7682);
							match(DESCRIPTION);
							setState(7683);
							match(EQUAL);
							setState(7686);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case STRING:
								{
								setState(7684);
								match(STRING);
								}
								break;
							case CALLED:
							case DATA_COMPRESSION:
							case EVENTDATA:
							case FILENAME:
							case FILLFACTOR:
							case FORCESEEK:
							case INIT:
							case KEY:
							case MASTER:
							case MAX_MEMORY:
							case OFFSETS:
							case PAGE:
							case PUBLIC:
							case R:
							case RAW:
							case RETURN:
							case RETURNS:
							case ROWCOUNT:
							case SAFETY:
							case SERVER:
							case SID:
							case SOURCE:
							case STATE:
							case START:
							case TARGET:
							case ABSOLUTE:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STUFF:
							case SUBJECT:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLNAMESPACES:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								setState(7685);
								id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 5:
							{
							setState(7689);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7688);
								match(COMMA);
								}
							}

							setState(7691);
							match(NAME);
							setState(7692);
							match(EQUAL);
							setState(7693);
							((Backup_logContext)_localctx).backup_set_name = id();
							}
							break;
						case 6:
							{
							setState(7695);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7694);
								match(COMMA);
								}
							}

							setState(7697);
							match(CREDENTIAL);
							}
							break;
						case 7:
							{
							setState(7699);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7698);
								match(COMMA);
								}
							}

							setState(7701);
							match(FILE_SNAPSHOT);
							}
							break;
						case 8:
							{
							setState(7703);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7702);
								match(COMMA);
								}
							}

							setState(7717);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case EXPIREDATE:
								{
								setState(7705);
								match(EXPIREDATE);
								setState(7706);
								match(EQUAL);
								setState(7709);
								_errHandler.sync(this);
								switch (_input.LA(1)) {
								case STRING:
									{
									setState(7707);
									match(STRING);
									}
									break;
								case CALLED:
								case DATA_COMPRESSION:
								case EVENTDATA:
								case FILENAME:
								case FILLFACTOR:
								case FORCESEEK:
								case INIT:
								case KEY:
								case MASTER:
								case MAX_MEMORY:
								case OFFSETS:
								case PAGE:
								case PUBLIC:
								case R:
								case RAW:
								case RETURN:
								case RETURNS:
								case ROWCOUNT:
								case SAFETY:
								case SERVER:
								case SID:
								case SOURCE:
								case STATE:
								case START:
								case TARGET:
								case ABSOLUTE:
								case ACCENT_SENSITIVITY:
								case ACTION:
								case ACTIVATION:
								case ACTIVE:
								case ADDRESS:
								case AES_128:
								case AES_192:
								case AES_256:
								case AFFINITY:
								case AFTER:
								case AGGREGATE:
								case ALGORITHM:
								case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
								case ALLOW_SNAPSHOT_ISOLATION:
								case ALLOWED:
								case ANSI_NULL_DEFAULT:
								case ANSI_NULLS:
								case ANSI_PADDING:
								case ANSI_WARNINGS:
								case APPLICATION_LOG:
								case APPLY:
								case ARITHABORT:
								case ASSEMBLY:
								case AUDIT:
								case AUDIT_GUID:
								case AUTO:
								case AUTO_CLEANUP:
								case AUTO_CLOSE:
								case AUTO_CREATE_STATISTICS:
								case AUTO_SHRINK:
								case AUTO_UPDATE_STATISTICS:
								case AUTO_UPDATE_STATISTICS_ASYNC:
								case AVAILABILITY:
								case AVG:
								case BACKUP_PRIORITY:
								case BEGIN_DIALOG:
								case BIGINT:
								case BINARY_BASE64:
								case BINARY_CHECKSUM:
								case BINDING:
								case BLOB_STORAGE:
								case BROKER:
								case BROKER_INSTANCE:
								case BULK_LOGGED:
								case CALLER:
								case CAP_CPU_PERCENT:
								case CAST:
								case CATALOG:
								case CATCH:
								case CHANGE_RETENTION:
								case CHANGE_TRACKING:
								case CHECKSUM:
								case CHECKSUM_AGG:
								case CLEANUP:
								case COLLECTION:
								case COLUMN_MASTER_KEY:
								case COMMITTED:
								case COMPATIBILITY_LEVEL:
								case CONCAT:
								case CONCAT_NULL_YIELDS_NULL:
								case CONTENT:
								case CONTROL:
								case COOKIE:
								case COUNT:
								case COUNT_BIG:
								case COUNTER:
								case CPU:
								case CREATE_NEW:
								case CREATION_DISPOSITION:
								case CREDENTIAL:
								case CRYPTOGRAPHIC:
								case CURSOR_CLOSE_ON_COMMIT:
								case CURSOR_DEFAULT:
								case DATE_CORRELATION_OPTIMIZATION:
								case DATEADD:
								case DATEDIFF:
								case DATENAME:
								case DATEPART:
								case DAYS:
								case DB_CHAINING:
								case DB_FAILOVER:
								case DECRYPTION:
								case DEFAULT_DOUBLE_QUOTE:
								case DEFAULT_FULLTEXT_LANGUAGE:
								case DEFAULT_LANGUAGE:
								case DELAY:
								case DELAYED_DURABILITY:
								case DELETED:
								case DENSE_RANK:
								case DEPENDENTS:
								case DES:
								case DESCRIPTION:
								case DESX:
								case DHCP:
								case DIALOG:
								case DIRECTORY_NAME:
								case DISABLE:
								case DISABLE_BROKER:
								case DISABLED:
								case DISK_DRIVE:
								case DOCUMENT:
								case DYNAMIC:
								case EMERGENCY:
								case EMPTY:
								case ENABLE:
								case ENABLE_BROKER:
								case ENCRYPTED_VALUE:
								case ENCRYPTION:
								case ENDPOINT_URL:
								case ERROR_BROKER_CONVERSATIONS:
								case EXCLUSIVE:
								case EXECUTABLE:
								case EXIST:
								case EXPAND:
								case EXPIRY_DATE:
								case EXPLICIT:
								case FAIL_OPERATION:
								case FAILOVER_MODE:
								case FAILURE:
								case FAILURE_CONDITION_LEVEL:
								case FAST:
								case FAST_FORWARD:
								case FILEGROUP:
								case FILEGROWTH:
								case FILEPATH:
								case FILESTREAM:
								case FILTER:
								case FIRST:
								case FIRST_VALUE:
								case FOLLOWING:
								case FORCE:
								case FORCE_FAILOVER_ALLOW_DATA_LOSS:
								case FORCED:
								case FORMAT:
								case FORWARD_ONLY:
								case FULLSCAN:
								case FULLTEXT:
								case GB:
								case GETDATE:
								case GETUTCDATE:
								case GLOBAL:
								case GO:
								case GROUP_MAX_REQUESTS:
								case GROUPING:
								case GROUPING_ID:
								case HADR:
								case HASH:
								case HEALTH_CHECK_TIMEOUT:
								case HIGH:
								case HONOR_BROKER_PRIORITY:
								case HOURS:
								case IDENTITY_VALUE:
								case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
								case IMMEDIATE:
								case IMPERSONATE:
								case IMPORTANCE:
								case INCREMENTAL:
								case INITIATOR:
								case INPUT:
								case INSENSITIVE:
								case INSERTED:
								case INT:
								case IP:
								case ISOLATION:
								case KB:
								case KEEP:
								case KEEPFIXED:
								case KEY_SOURCE:
								case KEYS:
								case KEYSET:
								case LAG:
								case LAST:
								case LAST_VALUE:
								case LEAD:
								case LEVEL:
								case LIST:
								case LISTENER:
								case LISTENER_URL:
								case LOB_COMPACTION:
								case LOCAL:
								case LOCATION:
								case LOCK:
								case LOCK_ESCALATION:
								case LOGIN:
								case LOOP:
								case LOW:
								case MANUAL:
								case MARK:
								case MATERIALIZED:
								case MAX:
								case MAX_CPU_PERCENT:
								case MAX_DOP:
								case MAX_FILES:
								case MAX_IOPS_PER_VOLUME:
								case MAX_MEMORY_PERCENT:
								case MAX_PROCESSES:
								case MAX_QUEUE_READERS:
								case MAX_ROLLOVER_FILES:
								case MAXDOP:
								case MAXRECURSION:
								case MAXSIZE:
								case MB:
								case MEDIUM:
								case MEMORY_OPTIMIZED_DATA:
								case MESSAGE:
								case MIN:
								case MIN_ACTIVE_ROWVERSION:
								case MIN_CPU_PERCENT:
								case MIN_IOPS_PER_VOLUME:
								case MIN_MEMORY_PERCENT:
								case MINUTES:
								case MIRROR_ADDRESS:
								case MIXED_PAGE_ALLOCATION:
								case MODE:
								case MODIFY:
								case MOVE:
								case MULTI_USER:
								case NAME:
								case NESTED_TRIGGERS:
								case NEW_ACCOUNT:
								case NEW_BROKER:
								case NEW_PASSWORD:
								case NEXT:
								case NO:
								case NO_TRUNCATE:
								case NO_WAIT:
								case NOCOUNT:
								case NODES:
								case NOEXPAND:
								case NON_TRANSACTED_ACCESS:
								case NORECOMPUTE:
								case NORECOVERY:
								case NOWAIT:
								case NTILE:
								case NUMANODE:
								case NUMBER:
								case NUMERIC_ROUNDABORT:
								case OBJECT:
								case OFFLINE:
								case OFFSET:
								case OLD_ACCOUNT:
								case ONLINE:
								case ONLY:
								case OPEN_EXISTING:
								case OPTIMISTIC:
								case OPTIMIZE:
								case OUT:
								case OUTPUT:
								case OWNER:
								case PAGE_VERIFY:
								case PARAMETERIZATION:
								case PARTITION:
								case PARTITIONS:
								case PARTNER:
								case PATH:
								case POISON_MESSAGE_HANDLING:
								case POOL:
								case PORT:
								case PRECEDING:
								case PRIMARY_ROLE:
								case PRIOR:
								case PRIORITY:
								case PRIORITY_LEVEL:
								case PRIVATE:
								case PRIVATE_KEY:
								case PRIVILEGES:
								case PROCEDURE_NAME:
								case PROPERTY:
								case PROVIDER:
								case PROVIDER_KEY_NAME:
								case QUERY:
								case QUEUE:
								case QUEUE_DELAY:
								case QUOTED_IDENTIFIER:
								case RANGE:
								case RANK:
								case RC2:
								case RC4:
								case RC4_128:
								case READ_COMMITTED_SNAPSHOT:
								case READ_ONLY:
								case READ_ONLY_ROUTING_LIST:
								case READ_WRITE:
								case READONLY:
								case REBUILD:
								case RECEIVE:
								case RECOMPILE:
								case RECOVERY:
								case RECURSIVE_TRIGGERS:
								case RELATIVE:
								case REMOTE:
								case REMOTE_SERVICE_NAME:
								case REMOVE:
								case REORGANIZE:
								case REPEATABLE:
								case REPLICA:
								case REQUEST_MAX_CPU_TIME_SEC:
								case REQUEST_MAX_MEMORY_GRANT_PERCENT:
								case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
								case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
								case RESERVE_DISK_SPACE:
								case RESOURCE:
								case RESOURCE_MANAGER_LOCATION:
								case RESTRICTED_USER:
								case RETENTION:
								case ROBUST:
								case ROOT:
								case ROUTE:
								case ROW:
								case ROW_NUMBER:
								case ROWGUID:
								case ROWS:
								case SAMPLE:
								case SCHEMABINDING:
								case SCOPED:
								case SCROLL:
								case SCROLL_LOCKS:
								case SEARCH:
								case SECONDARY:
								case SECONDARY_ONLY:
								case SECONDARY_ROLE:
								case SECONDS:
								case SECRET:
								case SECURITY_LOG:
								case SEEDING_MODE:
								case SELF:
								case SEMI_SENSITIVE:
								case SEND:
								case SENT:
								case SERIALIZABLE:
								case SESSION_TIMEOUT:
								case SETERROR:
								case SHARE:
								case SHOWPLAN:
								case SIGNATURE:
								case SIMPLE:
								case SINGLE_USER:
								case SIZE:
								case SMALLINT:
								case SNAPSHOT:
								case SPATIAL_WINDOW_MAX_CELLS:
								case STANDBY:
								case START_DATE:
								case STATIC:
								case STATS_STREAM:
								case STATUS:
								case STDEV:
								case STDEVP:
								case STOPLIST:
								case STUFF:
								case SUBJECT:
								case SUM:
								case SUSPEND:
								case SYMMETRIC:
								case SYNCHRONOUS_COMMIT:
								case SYNONYM:
								case TAKE:
								case TARGET_RECOVERY_TIME:
								case TB:
								case TEXTIMAGE_ON:
								case THROW:
								case TIES:
								case TIME:
								case TIMEOUT:
								case TIMER:
								case TINYINT:
								case TORN_PAGE_DETECTION:
								case TRANSFORM_NOISE_WORDS:
								case TRIPLE_DES:
								case TRIPLE_DES_3KEY:
								case TRUSTWORTHY:
								case TRY:
								case TSQL:
								case TWO_DIGIT_YEAR_CUTOFF:
								case TYPE:
								case TYPE_WARNING:
								case UNBOUNDED:
								case UNCOMMITTED:
								case UNKNOWN:
								case UNLIMITED:
								case USING:
								case VALID_XML:
								case VALIDATION:
								case VALUE:
								case VAR:
								case VARP:
								case VIEW_METADATA:
								case VIEWS:
								case WAIT:
								case WELL_FORMED_XML:
								case WORK:
								case WORKLOAD:
								case XML:
								case XMLNAMESPACES:
								case DOUBLE_QUOTE_ID:
								case SQUARE_BRACKET_ID:
								case ID:
									{
									setState(7708);
									id();
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								break;
							case RETAINDAYS:
								{
								setState(7711);
								match(RETAINDAYS);
								setState(7712);
								match(EQUAL);
								setState(7715);
								_errHandler.sync(this);
								switch (_input.LA(1)) {
								case DECIMAL:
									{
									setState(7713);
									match(DECIMAL);
									}
									break;
								case CALLED:
								case DATA_COMPRESSION:
								case EVENTDATA:
								case FILENAME:
								case FILLFACTOR:
								case FORCESEEK:
								case INIT:
								case KEY:
								case MASTER:
								case MAX_MEMORY:
								case OFFSETS:
								case PAGE:
								case PUBLIC:
								case R:
								case RAW:
								case RETURN:
								case RETURNS:
								case ROWCOUNT:
								case SAFETY:
								case SERVER:
								case SID:
								case SOURCE:
								case STATE:
								case START:
								case TARGET:
								case ABSOLUTE:
								case ACCENT_SENSITIVITY:
								case ACTION:
								case ACTIVATION:
								case ACTIVE:
								case ADDRESS:
								case AES_128:
								case AES_192:
								case AES_256:
								case AFFINITY:
								case AFTER:
								case AGGREGATE:
								case ALGORITHM:
								case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
								case ALLOW_SNAPSHOT_ISOLATION:
								case ALLOWED:
								case ANSI_NULL_DEFAULT:
								case ANSI_NULLS:
								case ANSI_PADDING:
								case ANSI_WARNINGS:
								case APPLICATION_LOG:
								case APPLY:
								case ARITHABORT:
								case ASSEMBLY:
								case AUDIT:
								case AUDIT_GUID:
								case AUTO:
								case AUTO_CLEANUP:
								case AUTO_CLOSE:
								case AUTO_CREATE_STATISTICS:
								case AUTO_SHRINK:
								case AUTO_UPDATE_STATISTICS:
								case AUTO_UPDATE_STATISTICS_ASYNC:
								case AVAILABILITY:
								case AVG:
								case BACKUP_PRIORITY:
								case BEGIN_DIALOG:
								case BIGINT:
								case BINARY_BASE64:
								case BINARY_CHECKSUM:
								case BINDING:
								case BLOB_STORAGE:
								case BROKER:
								case BROKER_INSTANCE:
								case BULK_LOGGED:
								case CALLER:
								case CAP_CPU_PERCENT:
								case CAST:
								case CATALOG:
								case CATCH:
								case CHANGE_RETENTION:
								case CHANGE_TRACKING:
								case CHECKSUM:
								case CHECKSUM_AGG:
								case CLEANUP:
								case COLLECTION:
								case COLUMN_MASTER_KEY:
								case COMMITTED:
								case COMPATIBILITY_LEVEL:
								case CONCAT:
								case CONCAT_NULL_YIELDS_NULL:
								case CONTENT:
								case CONTROL:
								case COOKIE:
								case COUNT:
								case COUNT_BIG:
								case COUNTER:
								case CPU:
								case CREATE_NEW:
								case CREATION_DISPOSITION:
								case CREDENTIAL:
								case CRYPTOGRAPHIC:
								case CURSOR_CLOSE_ON_COMMIT:
								case CURSOR_DEFAULT:
								case DATE_CORRELATION_OPTIMIZATION:
								case DATEADD:
								case DATEDIFF:
								case DATENAME:
								case DATEPART:
								case DAYS:
								case DB_CHAINING:
								case DB_FAILOVER:
								case DECRYPTION:
								case DEFAULT_DOUBLE_QUOTE:
								case DEFAULT_FULLTEXT_LANGUAGE:
								case DEFAULT_LANGUAGE:
								case DELAY:
								case DELAYED_DURABILITY:
								case DELETED:
								case DENSE_RANK:
								case DEPENDENTS:
								case DES:
								case DESCRIPTION:
								case DESX:
								case DHCP:
								case DIALOG:
								case DIRECTORY_NAME:
								case DISABLE:
								case DISABLE_BROKER:
								case DISABLED:
								case DISK_DRIVE:
								case DOCUMENT:
								case DYNAMIC:
								case EMERGENCY:
								case EMPTY:
								case ENABLE:
								case ENABLE_BROKER:
								case ENCRYPTED_VALUE:
								case ENCRYPTION:
								case ENDPOINT_URL:
								case ERROR_BROKER_CONVERSATIONS:
								case EXCLUSIVE:
								case EXECUTABLE:
								case EXIST:
								case EXPAND:
								case EXPIRY_DATE:
								case EXPLICIT:
								case FAIL_OPERATION:
								case FAILOVER_MODE:
								case FAILURE:
								case FAILURE_CONDITION_LEVEL:
								case FAST:
								case FAST_FORWARD:
								case FILEGROUP:
								case FILEGROWTH:
								case FILEPATH:
								case FILESTREAM:
								case FILTER:
								case FIRST:
								case FIRST_VALUE:
								case FOLLOWING:
								case FORCE:
								case FORCE_FAILOVER_ALLOW_DATA_LOSS:
								case FORCED:
								case FORMAT:
								case FORWARD_ONLY:
								case FULLSCAN:
								case FULLTEXT:
								case GB:
								case GETDATE:
								case GETUTCDATE:
								case GLOBAL:
								case GO:
								case GROUP_MAX_REQUESTS:
								case GROUPING:
								case GROUPING_ID:
								case HADR:
								case HASH:
								case HEALTH_CHECK_TIMEOUT:
								case HIGH:
								case HONOR_BROKER_PRIORITY:
								case HOURS:
								case IDENTITY_VALUE:
								case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
								case IMMEDIATE:
								case IMPERSONATE:
								case IMPORTANCE:
								case INCREMENTAL:
								case INITIATOR:
								case INPUT:
								case INSENSITIVE:
								case INSERTED:
								case INT:
								case IP:
								case ISOLATION:
								case KB:
								case KEEP:
								case KEEPFIXED:
								case KEY_SOURCE:
								case KEYS:
								case KEYSET:
								case LAG:
								case LAST:
								case LAST_VALUE:
								case LEAD:
								case LEVEL:
								case LIST:
								case LISTENER:
								case LISTENER_URL:
								case LOB_COMPACTION:
								case LOCAL:
								case LOCATION:
								case LOCK:
								case LOCK_ESCALATION:
								case LOGIN:
								case LOOP:
								case LOW:
								case MANUAL:
								case MARK:
								case MATERIALIZED:
								case MAX:
								case MAX_CPU_PERCENT:
								case MAX_DOP:
								case MAX_FILES:
								case MAX_IOPS_PER_VOLUME:
								case MAX_MEMORY_PERCENT:
								case MAX_PROCESSES:
								case MAX_QUEUE_READERS:
								case MAX_ROLLOVER_FILES:
								case MAXDOP:
								case MAXRECURSION:
								case MAXSIZE:
								case MB:
								case MEDIUM:
								case MEMORY_OPTIMIZED_DATA:
								case MESSAGE:
								case MIN:
								case MIN_ACTIVE_ROWVERSION:
								case MIN_CPU_PERCENT:
								case MIN_IOPS_PER_VOLUME:
								case MIN_MEMORY_PERCENT:
								case MINUTES:
								case MIRROR_ADDRESS:
								case MIXED_PAGE_ALLOCATION:
								case MODE:
								case MODIFY:
								case MOVE:
								case MULTI_USER:
								case NAME:
								case NESTED_TRIGGERS:
								case NEW_ACCOUNT:
								case NEW_BROKER:
								case NEW_PASSWORD:
								case NEXT:
								case NO:
								case NO_TRUNCATE:
								case NO_WAIT:
								case NOCOUNT:
								case NODES:
								case NOEXPAND:
								case NON_TRANSACTED_ACCESS:
								case NORECOMPUTE:
								case NORECOVERY:
								case NOWAIT:
								case NTILE:
								case NUMANODE:
								case NUMBER:
								case NUMERIC_ROUNDABORT:
								case OBJECT:
								case OFFLINE:
								case OFFSET:
								case OLD_ACCOUNT:
								case ONLINE:
								case ONLY:
								case OPEN_EXISTING:
								case OPTIMISTIC:
								case OPTIMIZE:
								case OUT:
								case OUTPUT:
								case OWNER:
								case PAGE_VERIFY:
								case PARAMETERIZATION:
								case PARTITION:
								case PARTITIONS:
								case PARTNER:
								case PATH:
								case POISON_MESSAGE_HANDLING:
								case POOL:
								case PORT:
								case PRECEDING:
								case PRIMARY_ROLE:
								case PRIOR:
								case PRIORITY:
								case PRIORITY_LEVEL:
								case PRIVATE:
								case PRIVATE_KEY:
								case PRIVILEGES:
								case PROCEDURE_NAME:
								case PROPERTY:
								case PROVIDER:
								case PROVIDER_KEY_NAME:
								case QUERY:
								case QUEUE:
								case QUEUE_DELAY:
								case QUOTED_IDENTIFIER:
								case RANGE:
								case RANK:
								case RC2:
								case RC4:
								case RC4_128:
								case READ_COMMITTED_SNAPSHOT:
								case READ_ONLY:
								case READ_ONLY_ROUTING_LIST:
								case READ_WRITE:
								case READONLY:
								case REBUILD:
								case RECEIVE:
								case RECOMPILE:
								case RECOVERY:
								case RECURSIVE_TRIGGERS:
								case RELATIVE:
								case REMOTE:
								case REMOTE_SERVICE_NAME:
								case REMOVE:
								case REORGANIZE:
								case REPEATABLE:
								case REPLICA:
								case REQUEST_MAX_CPU_TIME_SEC:
								case REQUEST_MAX_MEMORY_GRANT_PERCENT:
								case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
								case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
								case RESERVE_DISK_SPACE:
								case RESOURCE:
								case RESOURCE_MANAGER_LOCATION:
								case RESTRICTED_USER:
								case RETENTION:
								case ROBUST:
								case ROOT:
								case ROUTE:
								case ROW:
								case ROW_NUMBER:
								case ROWGUID:
								case ROWS:
								case SAMPLE:
								case SCHEMABINDING:
								case SCOPED:
								case SCROLL:
								case SCROLL_LOCKS:
								case SEARCH:
								case SECONDARY:
								case SECONDARY_ONLY:
								case SECONDARY_ROLE:
								case SECONDS:
								case SECRET:
								case SECURITY_LOG:
								case SEEDING_MODE:
								case SELF:
								case SEMI_SENSITIVE:
								case SEND:
								case SENT:
								case SERIALIZABLE:
								case SESSION_TIMEOUT:
								case SETERROR:
								case SHARE:
								case SHOWPLAN:
								case SIGNATURE:
								case SIMPLE:
								case SINGLE_USER:
								case SIZE:
								case SMALLINT:
								case SNAPSHOT:
								case SPATIAL_WINDOW_MAX_CELLS:
								case STANDBY:
								case START_DATE:
								case STATIC:
								case STATS_STREAM:
								case STATUS:
								case STDEV:
								case STDEVP:
								case STOPLIST:
								case STUFF:
								case SUBJECT:
								case SUM:
								case SUSPEND:
								case SYMMETRIC:
								case SYNCHRONOUS_COMMIT:
								case SYNONYM:
								case TAKE:
								case TARGET_RECOVERY_TIME:
								case TB:
								case TEXTIMAGE_ON:
								case THROW:
								case TIES:
								case TIME:
								case TIMEOUT:
								case TIMER:
								case TINYINT:
								case TORN_PAGE_DETECTION:
								case TRANSFORM_NOISE_WORDS:
								case TRIPLE_DES:
								case TRIPLE_DES_3KEY:
								case TRUSTWORTHY:
								case TRY:
								case TSQL:
								case TWO_DIGIT_YEAR_CUTOFF:
								case TYPE:
								case TYPE_WARNING:
								case UNBOUNDED:
								case UNCOMMITTED:
								case UNKNOWN:
								case UNLIMITED:
								case USING:
								case VALID_XML:
								case VALIDATION:
								case VALUE:
								case VAR:
								case VARP:
								case VIEW_METADATA:
								case VIEWS:
								case WAIT:
								case WELL_FORMED_XML:
								case WORK:
								case WORKLOAD:
								case XML:
								case XMLNAMESPACES:
								case DOUBLE_QUOTE_ID:
								case SQUARE_BRACKET_ID:
								case ID:
									{
									setState(7714);
									id();
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 9:
							{
							setState(7720);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7719);
								match(COMMA);
								}
							}

							setState(7722);
							_la = _input.LA(1);
							if ( !(_la==INIT || _la==NOINIT) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 10:
							{
							setState(7724);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7723);
								match(COMMA);
								}
							}

							setState(7726);
							_la = _input.LA(1);
							if ( !(_la==NOSKIP || _la==SKIP_KEYWORD) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 11:
							{
							setState(7728);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7727);
								match(COMMA);
								}
							}

							setState(7730);
							_la = _input.LA(1);
							if ( !(_la==NOFORMAT || _la==FORMAT) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 12:
							{
							setState(7732);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7731);
								match(COMMA);
								}
							}

							setState(7734);
							match(MEDIADESCRIPTION);
							setState(7735);
							match(EQUAL);
							setState(7738);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case STRING:
								{
								setState(7736);
								match(STRING);
								}
								break;
							case CALLED:
							case DATA_COMPRESSION:
							case EVENTDATA:
							case FILENAME:
							case FILLFACTOR:
							case FORCESEEK:
							case INIT:
							case KEY:
							case MASTER:
							case MAX_MEMORY:
							case OFFSETS:
							case PAGE:
							case PUBLIC:
							case R:
							case RAW:
							case RETURN:
							case RETURNS:
							case ROWCOUNT:
							case SAFETY:
							case SERVER:
							case SID:
							case SOURCE:
							case STATE:
							case START:
							case TARGET:
							case ABSOLUTE:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STUFF:
							case SUBJECT:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLNAMESPACES:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								setState(7737);
								id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 13:
							{
							setState(7741);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7740);
								match(COMMA);
								}
							}

							setState(7743);
							match(MEDIANAME);
							setState(7744);
							match(EQUAL);
							{
							setState(7745);
							((Backup_logContext)_localctx).medianame = match(STRING);
							}
							}
							break;
						case 14:
							{
							setState(7747);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7746);
								match(COMMA);
								}
							}

							setState(7749);
							match(BLOCKSIZE);
							setState(7750);
							match(EQUAL);
							setState(7753);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case DECIMAL:
								{
								setState(7751);
								match(DECIMAL);
								}
								break;
							case CALLED:
							case DATA_COMPRESSION:
							case EVENTDATA:
							case FILENAME:
							case FILLFACTOR:
							case FORCESEEK:
							case INIT:
							case KEY:
							case MASTER:
							case MAX_MEMORY:
							case OFFSETS:
							case PAGE:
							case PUBLIC:
							case R:
							case RAW:
							case RETURN:
							case RETURNS:
							case ROWCOUNT:
							case SAFETY:
							case SERVER:
							case SID:
							case SOURCE:
							case STATE:
							case START:
							case TARGET:
							case ABSOLUTE:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STUFF:
							case SUBJECT:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLNAMESPACES:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								setState(7752);
								id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 15:
							{
							setState(7756);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7755);
								match(COMMA);
								}
							}

							setState(7758);
							match(BUFFERCOUNT);
							setState(7759);
							match(EQUAL);
							setState(7762);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case DECIMAL:
								{
								setState(7760);
								match(DECIMAL);
								}
								break;
							case CALLED:
							case DATA_COMPRESSION:
							case EVENTDATA:
							case FILENAME:
							case FILLFACTOR:
							case FORCESEEK:
							case INIT:
							case KEY:
							case MASTER:
							case MAX_MEMORY:
							case OFFSETS:
							case PAGE:
							case PUBLIC:
							case R:
							case RAW:
							case RETURN:
							case RETURNS:
							case ROWCOUNT:
							case SAFETY:
							case SERVER:
							case SID:
							case SOURCE:
							case STATE:
							case START:
							case TARGET:
							case ABSOLUTE:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STUFF:
							case SUBJECT:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLNAMESPACES:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								setState(7761);
								id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 16:
							{
							setState(7765);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7764);
								match(COMMA);
								}
							}

							setState(7767);
							match(MAXTRANSFER);
							setState(7768);
							match(EQUAL);
							setState(7771);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case DECIMAL:
								{
								setState(7769);
								match(DECIMAL);
								}
								break;
							case CALLED:
							case DATA_COMPRESSION:
							case EVENTDATA:
							case FILENAME:
							case FILLFACTOR:
							case FORCESEEK:
							case INIT:
							case KEY:
							case MASTER:
							case MAX_MEMORY:
							case OFFSETS:
							case PAGE:
							case PUBLIC:
							case R:
							case RAW:
							case RETURN:
							case RETURNS:
							case ROWCOUNT:
							case SAFETY:
							case SERVER:
							case SID:
							case SOURCE:
							case STATE:
							case START:
							case TARGET:
							case ABSOLUTE:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STUFF:
							case SUBJECT:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLNAMESPACES:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								setState(7770);
								id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 17:
							{
							setState(7774);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7773);
								match(COMMA);
								}
							}

							setState(7776);
							_la = _input.LA(1);
							if ( !(_la==NO_CHECKSUM || _la==CHECKSUM) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 18:
							{
							setState(7778);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7777);
								match(COMMA);
								}
							}

							setState(7780);
							_la = _input.LA(1);
							if ( !(_la==CONTINUE_AFTER_ERROR || _la==STOP_ON_ERROR) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 19:
							{
							setState(7782);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7781);
								match(COMMA);
								}
							}

							setState(7784);
							match(RESTART);
							}
							break;
						case 20:
							{
							setState(7786);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7785);
								match(COMMA);
								}
							}

							setState(7788);
							match(STATS);
							setState(7791);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==EQUAL) {
								{
								setState(7789);
								match(EQUAL);
								setState(7790);
								((Backup_logContext)_localctx).stats_percent = match(DECIMAL);
								}
							}

							}
							break;
						case 21:
							{
							setState(7794);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7793);
								match(COMMA);
								}
							}

							setState(7796);
							_la = _input.LA(1);
							if ( !(_la==NOREWIND || _la==REWIND) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 22:
							{
							setState(7798);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7797);
								match(COMMA);
								}
							}

							setState(7800);
							_la = _input.LA(1);
							if ( !(_la==LOAD || _la==NOUNLOAD) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 23:
							{
							setState(7802);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7801);
								match(COMMA);
								}
							}

							setState(7808);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case NORECOVERY:
								{
								setState(7804);
								match(NORECOVERY);
								}
								break;
							case STANDBY:
								{
								setState(7805);
								match(STANDBY);
								setState(7806);
								match(EQUAL);
								setState(7807);
								((Backup_logContext)_localctx).undo_file_name = match(STRING);
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 24:
							{
							setState(7811);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7810);
								match(COMMA);
								}
							}

							setState(7813);
							match(NO_TRUNCATE);
							}
							break;
						case 25:
							{
							setState(7815);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7814);
								match(COMMA);
								}
							}

							setState(7817);
							match(ENCRYPTION);
							setState(7818);
							match(LR_BRACKET);
							setState(7819);
							match(ALGORITHM);
							setState(7820);
							match(EQUAL);
							setState(7821);
							_la = _input.LA(1);
							if ( !(((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (AES_128 - 389)) | (1L << (AES_192 - 389)) | (1L << (AES_256 - 389)))) != 0) || _la==TRIPLE_DES_3KEY) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							setState(7822);
							match(COMMA);
							setState(7823);
							match(SERVER);
							setState(7824);
							match(CERTIFICATE);
							setState(7825);
							match(EQUAL);
							setState(7832);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,1087,_ctx) ) {
							case 1:
								{
								setState(7826);
								((Backup_logContext)_localctx).encryptor_name = id();
								}
								break;
							case 2:
								{
								setState(7827);
								match(SERVER);
								setState(7828);
								match(ASYMMETRIC);
								setState(7829);
								match(KEY);
								setState(7830);
								match(EQUAL);
								setState(7831);
								((Backup_logContext)_localctx).encryptor_name = id();
								}
								break;
							}
							}
							break;
						}
						} 
					}
					setState(7838);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1089,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Backup_certificateContext extends ParserRuleContext {
		public IdContext certname;
		public Token cert_file;
		public Token private_key_file;
		public Token encryption_password;
		public Token decryption_pasword;
		public TerminalNode BACKUP() { return getToken(TSqlParser.BACKUP, 0); }
		public TerminalNode CERTIFICATE() { return getToken(TSqlParser.CERTIFICATE, 0); }
		public TerminalNode TO() { return getToken(TSqlParser.TO, 0); }
		public List<TerminalNode> FILE() { return getTokens(TSqlParser.FILE); }
		public TerminalNode FILE(int i) {
			return getToken(TSqlParser.FILE, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode PRIVATE() { return getToken(TSqlParser.PRIVATE, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> ENCRYPTION() { return getTokens(TSqlParser.ENCRYPTION); }
		public TerminalNode ENCRYPTION(int i) {
			return getToken(TSqlParser.ENCRYPTION, i);
		}
		public List<TerminalNode> BY() { return getTokens(TSqlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(TSqlParser.BY, i);
		}
		public List<TerminalNode> PASSWORD() { return getTokens(TSqlParser.PASSWORD); }
		public TerminalNode PASSWORD(int i) {
			return getToken(TSqlParser.PASSWORD, i);
		}
		public List<TerminalNode> DECRYPTION() { return getTokens(TSqlParser.DECRYPTION); }
		public TerminalNode DECRYPTION(int i) {
			return getToken(TSqlParser.DECRYPTION, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Backup_certificateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_backup_certificate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterBackup_certificate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitBackup_certificate(this);
		}
	}

	public final Backup_certificateContext backup_certificate() throws RecognitionException {
		Backup_certificateContext _localctx = new Backup_certificateContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_backup_certificate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7841);
			match(BACKUP);
			setState(7842);
			match(CERTIFICATE);
			setState(7843);
			((Backup_certificateContext)_localctx).certname = id();
			setState(7844);
			match(TO);
			setState(7845);
			match(FILE);
			setState(7846);
			match(EQUAL);
			setState(7847);
			((Backup_certificateContext)_localctx).cert_file = match(STRING);
			setState(7879);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1096,_ctx) ) {
			case 1:
				{
				setState(7848);
				match(WITH);
				setState(7849);
				match(PRIVATE);
				setState(7850);
				match(KEY);
				setState(7851);
				match(LR_BRACKET);
				setState(7874); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(7874);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1094,_ctx) ) {
					case 1:
						{
						setState(7853);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7852);
							match(COMMA);
							}
						}

						setState(7855);
						match(FILE);
						setState(7856);
						match(EQUAL);
						setState(7857);
						((Backup_certificateContext)_localctx).private_key_file = match(STRING);
						}
						break;
					case 2:
						{
						setState(7859);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7858);
							match(COMMA);
							}
						}

						setState(7861);
						match(ENCRYPTION);
						setState(7862);
						match(BY);
						setState(7863);
						match(PASSWORD);
						setState(7864);
						match(EQUAL);
						setState(7865);
						((Backup_certificateContext)_localctx).encryption_password = match(STRING);
						}
						break;
					case 3:
						{
						setState(7867);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7866);
							match(COMMA);
							}
						}

						setState(7869);
						match(DECRYPTION);
						setState(7870);
						match(BY);
						setState(7871);
						match(PASSWORD);
						setState(7872);
						match(EQUAL);
						setState(7873);
						((Backup_certificateContext)_localctx).decryption_pasword = match(STRING);
						}
						break;
					}
					}
					setState(7876); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==FILE || _la==DECRYPTION || _la==ENCRYPTION || _la==COMMA );
				setState(7878);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Backup_master_keyContext extends ParserRuleContext {
		public Token master_key_backup_file;
		public Token encryption_password;
		public TerminalNode BACKUP() { return getToken(TSqlParser.BACKUP, 0); }
		public TerminalNode MASTER() { return getToken(TSqlParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode TO() { return getToken(TSqlParser.TO, 0); }
		public TerminalNode FILE() { return getToken(TSqlParser.FILE, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public Backup_master_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_backup_master_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterBackup_master_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitBackup_master_key(this);
		}
	}

	public final Backup_master_keyContext backup_master_key() throws RecognitionException {
		Backup_master_keyContext _localctx = new Backup_master_keyContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_backup_master_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7881);
			match(BACKUP);
			setState(7882);
			match(MASTER);
			setState(7883);
			match(KEY);
			setState(7884);
			match(TO);
			setState(7885);
			match(FILE);
			setState(7886);
			match(EQUAL);
			setState(7887);
			((Backup_master_keyContext)_localctx).master_key_backup_file = match(STRING);
			setState(7888);
			match(ENCRYPTION);
			setState(7889);
			match(BY);
			setState(7890);
			match(PASSWORD);
			setState(7891);
			match(EQUAL);
			setState(7892);
			((Backup_master_keyContext)_localctx).encryption_password = match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Backup_service_master_keyContext extends ParserRuleContext {
		public Token service_master_key_backup_file;
		public Token encryption_password;
		public TerminalNode BACKUP() { return getToken(TSqlParser.BACKUP, 0); }
		public TerminalNode SERVICE() { return getToken(TSqlParser.SERVICE, 0); }
		public TerminalNode MASTER() { return getToken(TSqlParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode TO() { return getToken(TSqlParser.TO, 0); }
		public TerminalNode FILE() { return getToken(TSqlParser.FILE, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public Backup_service_master_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_backup_service_master_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterBackup_service_master_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitBackup_service_master_key(this);
		}
	}

	public final Backup_service_master_keyContext backup_service_master_key() throws RecognitionException {
		Backup_service_master_keyContext _localctx = new Backup_service_master_keyContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_backup_service_master_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7894);
			match(BACKUP);
			setState(7895);
			match(SERVICE);
			setState(7896);
			match(MASTER);
			setState(7897);
			match(KEY);
			setState(7898);
			match(TO);
			setState(7899);
			match(FILE);
			setState(7900);
			match(EQUAL);
			setState(7901);
			((Backup_service_master_keyContext)_localctx).service_master_key_backup_file = match(STRING);
			setState(7902);
			match(ENCRYPTION);
			setState(7903);
			match(BY);
			setState(7904);
			match(PASSWORD);
			setState(7905);
			match(EQUAL);
			setState(7906);
			((Backup_service_master_keyContext)_localctx).encryption_password = match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_statementContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(TSqlParser.EXECUTE, 0); }
		public Execute_bodyContext execute_body() {
			return getRuleContext(Execute_bodyContext.class,0);
		}
		public Execute_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterExecute_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitExecute_statement(this);
		}
	}

	public final Execute_statementContext execute_statement() throws RecognitionException {
		Execute_statementContext _localctx = new Execute_statementContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_execute_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7908);
			match(EXECUTE);
			setState(7909);
			execute_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_bodyContext extends ParserRuleContext {
		public Token return_status;
		public Func_proc_nameContext func_proc_name() {
			return getRuleContext(Func_proc_nameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<Execute_statement_argContext> execute_statement_arg() {
			return getRuleContexts(Execute_statement_argContext.class);
		}
		public Execute_statement_argContext execute_statement_arg(int i) {
			return getRuleContext(Execute_statement_argContext.class,i);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public List<Execute_var_stringContext> execute_var_string() {
			return getRuleContexts(Execute_var_stringContext.class);
		}
		public Execute_var_stringContext execute_var_string(int i) {
			return getRuleContext(Execute_var_stringContext.class,i);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode LOGIN() { return getToken(TSqlParser.LOGIN, 0); }
		public TerminalNode USER() { return getToken(TSqlParser.USER, 0); }
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public Execute_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterExecute_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitExecute_body(this);
		}
	}

	public final Execute_bodyContext execute_body() throws RecognitionException {
		Execute_bodyContext _localctx = new Execute_bodyContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_execute_body);
		int _la;
		try {
			setState(7953);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1106,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7913);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1097,_ctx) ) {
				case 1:
					{
					setState(7911);
					((Execute_bodyContext)_localctx).return_status = match(LOCAL_ID);
					setState(7912);
					match(EQUAL);
					}
					break;
				}
				setState(7917);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1098,_ctx) ) {
				case 1:
					{
					setState(7915);
					func_proc_name();
					}
					break;
				case 2:
					{
					setState(7916);
					expression(0);
					}
					break;
				}
				setState(7927);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1100,_ctx) ) {
				case 1:
					{
					setState(7919);
					execute_statement_arg();
					setState(7924);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(7920);
						match(COMMA);
						setState(7921);
						execute_statement_arg();
						}
						}
						setState(7926);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				}
				setState(7930);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1101,_ctx) ) {
				case 1:
					{
					setState(7929);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7932);
				match(LR_BRACKET);
				setState(7933);
				execute_var_string();
				setState(7938);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==PLUS) {
					{
					{
					setState(7934);
					match(PLUS);
					setState(7935);
					execute_var_string();
					}
					}
					setState(7940);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(7941);
				match(RR_BRACKET);
				setState(7948);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1104,_ctx) ) {
				case 1:
					{
					setState(7943);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(7942);
						match(AS);
						}
					}

					setState(7945);
					_la = _input.LA(1);
					if ( !(_la==USER || _la==LOGIN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(7946);
					match(EQUAL);
					setState(7947);
					match(STRING);
					}
					break;
				}
				setState(7951);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1105,_ctx) ) {
				case 1:
					{
					setState(7950);
					match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_statement_argContext extends ParserRuleContext {
		public Token parameter;
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public TerminalNode NULL() { return getToken(TSqlParser.NULL, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Constant_LOCAL_IDContext constant_LOCAL_ID() {
			return getRuleContext(Constant_LOCAL_IDContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode OUTPUT() { return getToken(TSqlParser.OUTPUT, 0); }
		public TerminalNode OUT() { return getToken(TSqlParser.OUT, 0); }
		public Execute_statement_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_statement_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterExecute_statement_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitExecute_statement_arg(this);
		}
	}

	public final Execute_statement_argContext execute_statement_arg() throws RecognitionException {
		Execute_statement_argContext _localctx = new Execute_statement_argContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_execute_statement_arg);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7957);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1107,_ctx) ) {
			case 1:
				{
				setState(7955);
				((Execute_statement_argContext)_localctx).parameter = match(LOCAL_ID);
				setState(7956);
				match(EQUAL);
				}
				break;
			}
			setState(7968);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case START:
			case TARGET:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case DECIMAL:
			case ID:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				{
				setState(7961);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LOCAL_ID:
				case DECIMAL:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case PLUS:
				case MINUS:
					{
					setState(7959);
					constant_LOCAL_ID();
					}
					break;
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SID:
				case SOURCE:
				case STATE:
				case START:
				case TARGET:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(7960);
					id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7964);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1109,_ctx) ) {
				case 1:
					{
					setState(7963);
					_la = _input.LA(1);
					if ( !(_la==OUT || _la==OUTPUT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case DEFAULT:
				{
				setState(7966);
				match(DEFAULT);
				}
				break;
			case NULL:
				{
				setState(7967);
				match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_var_stringContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Execute_var_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_var_string; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterExecute_var_string(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitExecute_var_string(this);
		}
	}

	public final Execute_var_stringContext execute_var_string() throws RecognitionException {
		Execute_var_stringContext _localctx = new Execute_var_stringContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_execute_var_string);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7970);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Security_statementContext extends ParserRuleContext {
		public Table_nameContext on_id;
		public IdContext id;
		public List<IdContext> to_principal = new ArrayList<IdContext>();
		public IdContext as_principal;
		public Execute_clauseContext execute_clause() {
			return getRuleContext(Execute_clauseContext.class,0);
		}
		public List<TerminalNode> GRANT() { return getTokens(TSqlParser.GRANT); }
		public TerminalNode GRANT(int i) {
			return getToken(TSqlParser.GRANT, i);
		}
		public TerminalNode TO() { return getToken(TSqlParser.TO, 0); }
		public TerminalNode ALL() { return getToken(TSqlParser.ALL, 0); }
		public Grant_permissionContext grant_permission() {
			return getRuleContext(Grant_permissionContext.class,0);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode OPTION() { return getToken(TSqlParser.OPTION, 0); }
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode PRIVILEGES() { return getToken(TSqlParser.PRIVILEGES, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public TerminalNode REVERT() { return getToken(TSqlParser.REVERT, 0); }
		public TerminalNode COOKIE() { return getToken(TSqlParser.COOKIE, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Open_keyContext open_key() {
			return getRuleContext(Open_keyContext.class,0);
		}
		public Close_keyContext close_key() {
			return getRuleContext(Close_keyContext.class,0);
		}
		public Create_keyContext create_key() {
			return getRuleContext(Create_keyContext.class,0);
		}
		public Create_certificateContext create_certificate() {
			return getRuleContext(Create_certificateContext.class,0);
		}
		public Security_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_security_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSecurity_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSecurity_statement(this);
		}
	}

	public final Security_statementContext security_statement() throws RecognitionException {
		Security_statementContext _localctx = new Security_statementContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_security_statement);
		int _la;
		try {
			setState(8031);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1122,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7972);
				execute_clause();
				setState(7974);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1111,_ctx) ) {
				case 1:
					{
					setState(7973);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7976);
				match(GRANT);
				setState(7988);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALL:
					{
					setState(7977);
					match(ALL);
					setState(7979);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(7978);
						match(PRIVILEGES);
						}
					}

					}
					break;
				case ALTER:
				case CREATE:
				case EXECUTE:
				case INSERT:
				case REFERENCES:
				case SELECT:
				case VIEW:
				case CONTROL:
				case IMPERSONATE:
				case SHOWPLAN:
				case TAKE:
					{
					setState(7981);
					grant_permission();
					setState(7986);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LR_BRACKET) {
						{
						setState(7982);
						match(LR_BRACKET);
						setState(7983);
						column_name_list();
						setState(7984);
						match(RR_BRACKET);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7992);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(7990);
					match(ON);
					setState(7991);
					((Security_statementContext)_localctx).on_id = table_name();
					}
				}

				setState(7994);
				match(TO);
				{
				setState(7995);
				((Security_statementContext)_localctx).id = id();
				((Security_statementContext)_localctx).to_principal.add(((Security_statementContext)_localctx).id);
				}
				setState(8000);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7996);
					match(COMMA);
					setState(7997);
					((Security_statementContext)_localctx).id = id();
					((Security_statementContext)_localctx).to_principal.add(((Security_statementContext)_localctx).id);
					}
					}
					setState(8002);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(8006);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1117,_ctx) ) {
				case 1:
					{
					setState(8003);
					match(WITH);
					setState(8004);
					match(GRANT);
					setState(8005);
					match(OPTION);
					}
					break;
				}
				setState(8010);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(8008);
					match(AS);
					setState(8009);
					((Security_statementContext)_localctx).as_principal = id();
					}
				}

				setState(8013);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1119,_ctx) ) {
				case 1:
					{
					setState(8012);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8015);
				match(REVERT);
				setState(8022);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1120,_ctx) ) {
				case 1:
					{
					setState(8016);
					match(LR_BRACKET);
					setState(8017);
					match(WITH);
					setState(8018);
					match(COOKIE);
					setState(8019);
					match(EQUAL);
					setState(8020);
					match(LOCAL_ID);
					setState(8021);
					match(RR_BRACKET);
					}
					break;
				}
				setState(8025);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1121,_ctx) ) {
				case 1:
					{
					setState(8024);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8027);
				open_key();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8028);
				close_key();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8029);
				create_key();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8030);
				create_certificate();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_certificateContext extends ParserRuleContext {
		public IdContext certificate_name;
		public IdContext user_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode CERTIFICATE() { return getToken(TSqlParser.CERTIFICATE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public Existing_keysContext existing_keys() {
			return getRuleContext(Existing_keysContext.class,0);
		}
		public Generate_new_keysContext generate_new_keys() {
			return getRuleContext(Generate_new_keysContext.class,0);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode ACTIVE() { return getToken(TSqlParser.ACTIVE, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode BEGIN() { return getToken(TSqlParser.BEGIN, 0); }
		public TerminalNode DIALOG() { return getToken(TSqlParser.DIALOG, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public Create_certificateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_certificate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_certificate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_certificate(this);
		}
	}

	public final Create_certificateContext create_certificate() throws RecognitionException {
		Create_certificateContext _localctx = new Create_certificateContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_create_certificate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8033);
			match(CREATE);
			setState(8034);
			match(CERTIFICATE);
			setState(8035);
			((Create_certificateContext)_localctx).certificate_name = id();
			setState(8038);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(8036);
				match(AUTHORIZATION);
				setState(8037);
				((Create_certificateContext)_localctx).user_name = id();
				}
			}

			setState(8043);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FROM:
				{
				setState(8040);
				match(FROM);
				setState(8041);
				existing_keys();
				}
				break;
			case WITH:
			case ENCRYPTION:
				{
				setState(8042);
				generate_new_keys();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(8051);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1125,_ctx) ) {
			case 1:
				{
				setState(8045);
				match(ACTIVE);
				setState(8046);
				match(FOR);
				setState(8047);
				match(BEGIN);
				setState(8048);
				match(DIALOG);
				setState(8049);
				match(EQUAL);
				setState(8050);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Existing_keysContext extends ParserRuleContext {
		public IdContext assembly_name;
		public Token path_to_file;
		public TerminalNode ASSEMBLY() { return getToken(TSqlParser.ASSEMBLY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode FILE() { return getToken(TSqlParser.FILE, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode EXECUTABLE() { return getToken(TSqlParser.EXECUTABLE, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode PRIVATE() { return getToken(TSqlParser.PRIVATE, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public Private_key_optionsContext private_key_options() {
			return getRuleContext(Private_key_optionsContext.class,0);
		}
		public Existing_keysContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_existing_keys; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterExisting_keys(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitExisting_keys(this);
		}
	}

	public final Existing_keysContext existing_keys() throws RecognitionException {
		Existing_keysContext _localctx = new Existing_keysContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_existing_keys);
		int _la;
		try {
			setState(8070);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ASSEMBLY:
				enterOuterAlt(_localctx, 1);
				{
				setState(8053);
				match(ASSEMBLY);
				setState(8054);
				((Existing_keysContext)_localctx).assembly_name = id();
				}
				break;
			case FILE:
			case EXECUTABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(8056);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXECUTABLE) {
					{
					setState(8055);
					match(EXECUTABLE);
					}
				}

				setState(8058);
				match(FILE);
				setState(8059);
				match(EQUAL);
				setState(8060);
				((Existing_keysContext)_localctx).path_to_file = match(STRING);
				setState(8068);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1127,_ctx) ) {
				case 1:
					{
					setState(8061);
					match(WITH);
					setState(8062);
					match(PRIVATE);
					setState(8063);
					match(KEY);
					setState(8064);
					match(LR_BRACKET);
					setState(8065);
					private_key_options();
					setState(8066);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Private_key_optionsContext extends ParserRuleContext {
		public Token path;
		public Token password;
		public TerminalNode FILE() { return getToken(TSqlParser.FILE, 0); }
		public TerminalNode BINARY() { return getToken(TSqlParser.BINARY, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode DECRYPTION() { return getToken(TSqlParser.DECRYPTION, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public Private_key_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_private_key_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterPrivate_key_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitPrivate_key_options(this);
		}
	}

	public final Private_key_optionsContext private_key_options() throws RecognitionException {
		Private_key_optionsContext _localctx = new Private_key_optionsContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_private_key_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8072);
			_la = _input.LA(1);
			if ( !(_la==FILE || _la==BINARY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(8073);
			match(EQUAL);
			setState(8074);
			((Private_key_optionsContext)_localctx).path = match(STRING);
			setState(8081);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(8075);
				match(COMMA);
				setState(8076);
				_la = _input.LA(1);
				if ( !(_la==DECRYPTION || _la==ENCRYPTION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8077);
				match(BY);
				setState(8078);
				match(PASSWORD);
				setState(8079);
				match(EQUAL);
				setState(8080);
				((Private_key_optionsContext)_localctx).password = match(STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Generate_new_keysContext extends ParserRuleContext {
		public Token password;
		public Token certificate_subject_name;
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode SUBJECT() { return getToken(TSqlParser.SUBJECT, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public List<Date_optionsContext> date_options() {
			return getRuleContexts(Date_optionsContext.class);
		}
		public Date_optionsContext date_options(int i) {
			return getRuleContext(Date_optionsContext.class,i);
		}
		public Generate_new_keysContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generate_new_keys; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterGenerate_new_keys(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitGenerate_new_keys(this);
		}
	}

	public final Generate_new_keysContext generate_new_keys() throws RecognitionException {
		Generate_new_keysContext _localctx = new Generate_new_keysContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_generate_new_keys);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8088);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENCRYPTION) {
				{
				setState(8083);
				match(ENCRYPTION);
				setState(8084);
				match(BY);
				setState(8085);
				match(PASSWORD);
				setState(8086);
				match(EQUAL);
				setState(8087);
				((Generate_new_keysContext)_localctx).password = match(STRING);
				}
			}

			setState(8090);
			match(WITH);
			setState(8091);
			match(SUBJECT);
			setState(8092);
			match(EQUAL);
			setState(8093);
			((Generate_new_keysContext)_localctx).certificate_subject_name = match(STRING);
			setState(8098);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8094);
				match(COMMA);
				setState(8095);
				date_options();
				}
				}
				setState(8100);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Date_optionsContext extends ParserRuleContext {
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode START_DATE() { return getToken(TSqlParser.START_DATE, 0); }
		public TerminalNode EXPIRY_DATE() { return getToken(TSqlParser.EXPIRY_DATE, 0); }
		public Date_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_date_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDate_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDate_options(this);
		}
	}

	public final Date_optionsContext date_options() throws RecognitionException {
		Date_optionsContext _localctx = new Date_optionsContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_date_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8101);
			_la = _input.LA(1);
			if ( !(_la==EXPIRY_DATE || _la==START_DATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(8102);
			match(EQUAL);
			setState(8103);
			match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Open_keyContext extends ParserRuleContext {
		public IdContext key_name;
		public Token password;
		public TerminalNode OPEN() { return getToken(TSqlParser.OPEN, 0); }
		public TerminalNode SYMMETRIC() { return getToken(TSqlParser.SYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode DECRYPTION() { return getToken(TSqlParser.DECRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public Decryption_mechanismContext decryption_mechanism() {
			return getRuleContext(Decryption_mechanismContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode MASTER() { return getToken(TSqlParser.MASTER, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Open_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterOpen_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitOpen_key(this);
		}
	}

	public final Open_keyContext open_key() throws RecognitionException {
		Open_keyContext _localctx = new Open_keyContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_open_key);
		try {
			setState(8121);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1132,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8105);
				match(OPEN);
				setState(8106);
				match(SYMMETRIC);
				setState(8107);
				match(KEY);
				setState(8108);
				((Open_keyContext)_localctx).key_name = id();
				setState(8109);
				match(DECRYPTION);
				setState(8110);
				match(BY);
				setState(8111);
				decryption_mechanism();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8113);
				match(OPEN);
				setState(8114);
				match(MASTER);
				setState(8115);
				match(KEY);
				setState(8116);
				match(DECRYPTION);
				setState(8117);
				match(BY);
				setState(8118);
				match(PASSWORD);
				setState(8119);
				match(EQUAL);
				setState(8120);
				((Open_keyContext)_localctx).password = match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Close_keyContext extends ParserRuleContext {
		public IdContext key_name;
		public TerminalNode CLOSE() { return getToken(TSqlParser.CLOSE, 0); }
		public TerminalNode SYMMETRIC() { return getToken(TSqlParser.SYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode ALL() { return getToken(TSqlParser.ALL, 0); }
		public TerminalNode KEYS() { return getToken(TSqlParser.KEYS, 0); }
		public TerminalNode MASTER() { return getToken(TSqlParser.MASTER, 0); }
		public Close_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_close_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterClose_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitClose_key(this);
		}
	}

	public final Close_keyContext close_key() throws RecognitionException {
		Close_keyContext _localctx = new Close_keyContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_close_key);
		try {
			setState(8134);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1133,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8123);
				match(CLOSE);
				setState(8124);
				match(SYMMETRIC);
				setState(8125);
				match(KEY);
				setState(8126);
				((Close_keyContext)_localctx).key_name = id();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8127);
				match(CLOSE);
				setState(8128);
				match(ALL);
				setState(8129);
				match(SYMMETRIC);
				setState(8130);
				match(KEYS);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8131);
				match(CLOSE);
				setState(8132);
				match(MASTER);
				setState(8133);
				match(KEY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_keyContext extends ParserRuleContext {
		public Token password;
		public IdContext key_name;
		public IdContext user_name;
		public IdContext provider_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode MASTER() { return getToken(TSqlParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public List<TerminalNode> ENCRYPTION() { return getTokens(TSqlParser.ENCRYPTION); }
		public TerminalNode ENCRYPTION(int i) {
			return getToken(TSqlParser.ENCRYPTION, i);
		}
		public List<TerminalNode> BY() { return getTokens(TSqlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(TSqlParser.BY, i);
		}
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode SYMMETRIC() { return getToken(TSqlParser.SYMMETRIC, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public TerminalNode PROVIDER() { return getToken(TSqlParser.PROVIDER, 0); }
		public List<Key_optionsContext> key_options() {
			return getRuleContexts(Key_optionsContext.class);
		}
		public Key_optionsContext key_options(int i) {
			return getRuleContext(Key_optionsContext.class,i);
		}
		public List<Encryption_mechanismContext> encryption_mechanism() {
			return getRuleContexts(Encryption_mechanismContext.class);
		}
		public Encryption_mechanismContext encryption_mechanism(int i) {
			return getRuleContext(Encryption_mechanismContext.class,i);
		}
		public Create_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_key(this);
		}
	}

	public final Create_keyContext create_key() throws RecognitionException {
		Create_keyContext _localctx = new Create_keyContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_create_key);
		int _la;
		try {
			int _alt;
			setState(8171);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1139,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8136);
				match(CREATE);
				setState(8137);
				match(MASTER);
				setState(8138);
				match(KEY);
				setState(8139);
				match(ENCRYPTION);
				setState(8140);
				match(BY);
				setState(8141);
				match(PASSWORD);
				setState(8142);
				match(EQUAL);
				setState(8143);
				((Create_keyContext)_localctx).password = match(STRING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8144);
				match(CREATE);
				setState(8145);
				match(SYMMETRIC);
				setState(8146);
				match(KEY);
				setState(8147);
				((Create_keyContext)_localctx).key_name = id();
				setState(8150);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AUTHORIZATION) {
					{
					setState(8148);
					match(AUTHORIZATION);
					setState(8149);
					((Create_keyContext)_localctx).user_name = id();
					}
				}

				setState(8155);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM) {
					{
					setState(8152);
					match(FROM);
					setState(8153);
					match(PROVIDER);
					setState(8154);
					((Create_keyContext)_localctx).provider_name = id();
					}
				}

				setState(8157);
				match(WITH);
				setState(8167); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(8162);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case ALGORITHM:
						case CREATION_DISPOSITION:
						case IDENTITY_VALUE:
						case KEY_SOURCE:
						case PROVIDER_KEY_NAME:
							{
							setState(8158);
							key_options();
							}
							break;
						case ENCRYPTION:
							{
							setState(8159);
							match(ENCRYPTION);
							setState(8160);
							match(BY);
							setState(8161);
							encryption_mechanism();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(8165);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(8164);
							match(COMMA);
							}
						}

						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(8169); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1138,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Key_optionsContext extends ParserRuleContext {
		public Token pass_phrase;
		public Token identity_phrase;
		public Token key_name_in_provider;
		public TerminalNode KEY_SOURCE() { return getToken(TSqlParser.KEY_SOURCE, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode ALGORITHM() { return getToken(TSqlParser.ALGORITHM, 0); }
		public AlgorithmContext algorithm() {
			return getRuleContext(AlgorithmContext.class,0);
		}
		public TerminalNode IDENTITY_VALUE() { return getToken(TSqlParser.IDENTITY_VALUE, 0); }
		public TerminalNode PROVIDER_KEY_NAME() { return getToken(TSqlParser.PROVIDER_KEY_NAME, 0); }
		public TerminalNode CREATION_DISPOSITION() { return getToken(TSqlParser.CREATION_DISPOSITION, 0); }
		public TerminalNode CREATE_NEW() { return getToken(TSqlParser.CREATE_NEW, 0); }
		public TerminalNode OPEN_EXISTING() { return getToken(TSqlParser.OPEN_EXISTING, 0); }
		public Key_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterKey_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitKey_options(this);
		}
	}

	public final Key_optionsContext key_options() throws RecognitionException {
		Key_optionsContext _localctx = new Key_optionsContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_key_options);
		int _la;
		try {
			setState(8188);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KEY_SOURCE:
				enterOuterAlt(_localctx, 1);
				{
				setState(8173);
				match(KEY_SOURCE);
				setState(8174);
				match(EQUAL);
				setState(8175);
				((Key_optionsContext)_localctx).pass_phrase = match(STRING);
				}
				break;
			case ALGORITHM:
				enterOuterAlt(_localctx, 2);
				{
				setState(8176);
				match(ALGORITHM);
				setState(8177);
				match(EQUAL);
				setState(8178);
				algorithm();
				}
				break;
			case IDENTITY_VALUE:
				enterOuterAlt(_localctx, 3);
				{
				setState(8179);
				match(IDENTITY_VALUE);
				setState(8180);
				match(EQUAL);
				setState(8181);
				((Key_optionsContext)_localctx).identity_phrase = match(STRING);
				}
				break;
			case PROVIDER_KEY_NAME:
				enterOuterAlt(_localctx, 4);
				{
				setState(8182);
				match(PROVIDER_KEY_NAME);
				setState(8183);
				match(EQUAL);
				setState(8184);
				((Key_optionsContext)_localctx).key_name_in_provider = match(STRING);
				}
				break;
			case CREATION_DISPOSITION:
				enterOuterAlt(_localctx, 5);
				{
				setState(8185);
				match(CREATION_DISPOSITION);
				setState(8186);
				match(EQUAL);
				setState(8187);
				_la = _input.LA(1);
				if ( !(_la==CREATE_NEW || _la==OPEN_EXISTING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlgorithmContext extends ParserRuleContext {
		public TerminalNode DES() { return getToken(TSqlParser.DES, 0); }
		public TerminalNode TRIPLE_DES() { return getToken(TSqlParser.TRIPLE_DES, 0); }
		public TerminalNode TRIPLE_DES_3KEY() { return getToken(TSqlParser.TRIPLE_DES_3KEY, 0); }
		public TerminalNode RC2() { return getToken(TSqlParser.RC2, 0); }
		public TerminalNode RC4() { return getToken(TSqlParser.RC4, 0); }
		public TerminalNode RC4_128() { return getToken(TSqlParser.RC4_128, 0); }
		public TerminalNode DESX() { return getToken(TSqlParser.DESX, 0); }
		public TerminalNode AES_128() { return getToken(TSqlParser.AES_128, 0); }
		public TerminalNode AES_192() { return getToken(TSqlParser.AES_192, 0); }
		public TerminalNode AES_256() { return getToken(TSqlParser.AES_256, 0); }
		public AlgorithmContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_algorithm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAlgorithm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAlgorithm(this);
		}
	}

	public final AlgorithmContext algorithm() throws RecognitionException {
		AlgorithmContext _localctx = new AlgorithmContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_algorithm);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8190);
			_la = _input.LA(1);
			if ( !(((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (AES_128 - 389)) | (1L << (AES_192 - 389)) | (1L << (AES_256 - 389)))) != 0) || _la==DES || _la==DESX || ((((_la - 663)) & ~0x3f) == 0 && ((1L << (_la - 663)) & ((1L << (RC2 - 663)) | (1L << (RC4 - 663)) | (1L << (RC4_128 - 663)))) != 0) || _la==TRIPLE_DES || _la==TRIPLE_DES_3KEY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Encryption_mechanismContext extends ParserRuleContext {
		public IdContext certificate_name;
		public IdContext asym_key_name;
		public IdContext decrypting_Key_name;
		public TerminalNode CERTIFICATE() { return getToken(TSqlParser.CERTIFICATE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode ASYMMETRIC() { return getToken(TSqlParser.ASYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode SYMMETRIC() { return getToken(TSqlParser.SYMMETRIC, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Encryption_mechanismContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_encryption_mechanism; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterEncryption_mechanism(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitEncryption_mechanism(this);
		}
	}

	public final Encryption_mechanismContext encryption_mechanism() throws RecognitionException {
		Encryption_mechanismContext _localctx = new Encryption_mechanismContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_encryption_mechanism);
		try {
			setState(8203);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CERTIFICATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(8192);
				match(CERTIFICATE);
				setState(8193);
				((Encryption_mechanismContext)_localctx).certificate_name = id();
				}
				break;
			case ASYMMETRIC:
				enterOuterAlt(_localctx, 2);
				{
				setState(8194);
				match(ASYMMETRIC);
				setState(8195);
				match(KEY);
				setState(8196);
				((Encryption_mechanismContext)_localctx).asym_key_name = id();
				}
				break;
			case SYMMETRIC:
				enterOuterAlt(_localctx, 3);
				{
				setState(8197);
				match(SYMMETRIC);
				setState(8198);
				match(KEY);
				setState(8199);
				((Encryption_mechanismContext)_localctx).decrypting_Key_name = id();
				}
				break;
			case PASSWORD:
				enterOuterAlt(_localctx, 4);
				{
				setState(8200);
				match(PASSWORD);
				setState(8201);
				match(EQUAL);
				setState(8202);
				match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decryption_mechanismContext extends ParserRuleContext {
		public IdContext certificate_name;
		public IdContext asym_key_name;
		public IdContext decrypting_Key_name;
		public TerminalNode CERTIFICATE() { return getToken(TSqlParser.CERTIFICATE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(TSqlParser.ASYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode SYMMETRIC() { return getToken(TSqlParser.SYMMETRIC, 0); }
		public Decryption_mechanismContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decryption_mechanism; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDecryption_mechanism(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDecryption_mechanism(this);
		}
	}

	public final Decryption_mechanismContext decryption_mechanism() throws RecognitionException {
		Decryption_mechanismContext _localctx = new Decryption_mechanismContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_decryption_mechanism);
		try {
			setState(8228);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CERTIFICATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(8205);
				match(CERTIFICATE);
				setState(8206);
				((Decryption_mechanismContext)_localctx).certificate_name = id();
				setState(8211);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1142,_ctx) ) {
				case 1:
					{
					setState(8207);
					match(WITH);
					setState(8208);
					match(PASSWORD);
					setState(8209);
					match(EQUAL);
					setState(8210);
					match(STRING);
					}
					break;
				}
				}
				break;
			case ASYMMETRIC:
				enterOuterAlt(_localctx, 2);
				{
				setState(8213);
				match(ASYMMETRIC);
				setState(8214);
				match(KEY);
				setState(8215);
				((Decryption_mechanismContext)_localctx).asym_key_name = id();
				setState(8220);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1143,_ctx) ) {
				case 1:
					{
					setState(8216);
					match(WITH);
					setState(8217);
					match(PASSWORD);
					setState(8218);
					match(EQUAL);
					setState(8219);
					match(STRING);
					}
					break;
				}
				}
				break;
			case SYMMETRIC:
				enterOuterAlt(_localctx, 3);
				{
				setState(8222);
				match(SYMMETRIC);
				setState(8223);
				match(KEY);
				setState(8224);
				((Decryption_mechanismContext)_localctx).decrypting_Key_name = id();
				}
				break;
			case PASSWORD:
				enterOuterAlt(_localctx, 4);
				{
				setState(8225);
				match(PASSWORD);
				setState(8226);
				match(EQUAL);
				setState(8227);
				match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_permissionContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(TSqlParser.EXECUTE, 0); }
		public TerminalNode VIEW() { return getToken(TSqlParser.VIEW, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode TAKE() { return getToken(TSqlParser.TAKE, 0); }
		public TerminalNode CONTROL() { return getToken(TSqlParser.CONTROL, 0); }
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(TSqlParser.TABLE, 0); }
		public TerminalNode SHOWPLAN() { return getToken(TSqlParser.SHOWPLAN, 0); }
		public TerminalNode IMPERSONATE() { return getToken(TSqlParser.IMPERSONATE, 0); }
		public TerminalNode SELECT() { return getToken(TSqlParser.SELECT, 0); }
		public TerminalNode REFERENCES() { return getToken(TSqlParser.REFERENCES, 0); }
		public TerminalNode INSERT() { return getToken(TSqlParser.INSERT, 0); }
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode ANY() { return getToken(TSqlParser.ANY, 0); }
		public Grant_permissionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_permission; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterGrant_permission(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitGrant_permission(this);
		}
	}

	public final Grant_permissionContext grant_permission() throws RecognitionException {
		Grant_permissionContext _localctx = new Grant_permissionContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_grant_permission);
		int _la;
		try {
			setState(8256);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EXECUTE:
				enterOuterAlt(_localctx, 1);
				{
				setState(8230);
				match(EXECUTE);
				}
				break;
			case VIEW:
				enterOuterAlt(_localctx, 2);
				{
				setState(8231);
				match(VIEW);
				setState(8232);
				id();
				}
				break;
			case TAKE:
				enterOuterAlt(_localctx, 3);
				{
				setState(8233);
				match(TAKE);
				setState(8234);
				id();
				}
				break;
			case CONTROL:
				enterOuterAlt(_localctx, 4);
				{
				setState(8235);
				match(CONTROL);
				setState(8237);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (EVENTDATA - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & ((1L << (INIT - 158)) | (1L << (KEY - 158)) | (1L << (MASTER - 158)) | (1L << (MAX_MEMORY - 158)))) != 0) || ((((_la - 225)) & ~0x3f) == 0 && ((1L << (_la - 225)) & ((1L << (OFFSETS - 225)) | (1L << (PAGE - 225)) | (1L << (PUBLIC - 225)) | (1L << (R - 225)) | (1L << (RAW - 225)) | (1L << (RETURN - 225)) | (1L << (RETURNS - 225)) | (1L << (ROWCOUNT - 225)))) != 0) || ((((_la - 295)) & ~0x3f) == 0 && ((1L << (_la - 295)) & ((1L << (SAFETY - 295)) | (1L << (SERVER - 295)) | (1L << (SID - 295)) | (1L << (SOURCE - 295)) | (1L << (STATE - 295)) | (1L << (START - 295)) | (1L << (TARGET - 295)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (ABSOLUTE - 383)) | (1L << (ACCENT_SENSITIVITY - 383)) | (1L << (ACTION - 383)) | (1L << (ACTIVATION - 383)) | (1L << (ACTIVE - 383)) | (1L << (ADDRESS - 383)) | (1L << (AES_128 - 383)) | (1L << (AES_192 - 383)) | (1L << (AES_256 - 383)) | (1L << (AFFINITY - 383)) | (1L << (AFTER - 383)) | (1L << (AGGREGATE - 383)) | (1L << (ALGORITHM - 383)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 383)) | (1L << (ALLOWED - 383)) | (1L << (ANSI_NULL_DEFAULT - 383)) | (1L << (ANSI_NULLS - 383)) | (1L << (ANSI_PADDING - 383)) | (1L << (ANSI_WARNINGS - 383)) | (1L << (APPLICATION_LOG - 383)) | (1L << (APPLY - 383)) | (1L << (ARITHABORT - 383)) | (1L << (ASSEMBLY - 383)) | (1L << (AUDIT - 383)) | (1L << (AUDIT_GUID - 383)) | (1L << (AUTO - 383)) | (1L << (AUTO_CLEANUP - 383)) | (1L << (AUTO_CLOSE - 383)) | (1L << (AUTO_CREATE_STATISTICS - 383)) | (1L << (AUTO_SHRINK - 383)) | (1L << (AUTO_UPDATE_STATISTICS - 383)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 383)) | (1L << (AVAILABILITY - 383)) | (1L << (AVG - 383)) | (1L << (BACKUP_PRIORITY - 383)) | (1L << (BEGIN_DIALOG - 383)) | (1L << (BIGINT - 383)) | (1L << (BINARY_BASE64 - 383)) | (1L << (BINARY_CHECKSUM - 383)) | (1L << (BINDING - 383)) | (1L << (BLOB_STORAGE - 383)) | (1L << (BROKER - 383)) | (1L << (BROKER_INSTANCE - 383)) | (1L << (BULK_LOGGED - 383)) | (1L << (CALLER - 383)) | (1L << (CAP_CPU_PERCENT - 383)) | (1L << (CAST - 383)) | (1L << (CATALOG - 383)) | (1L << (CATCH - 383)) | (1L << (CHANGE_RETENTION - 383)) | (1L << (CHANGE_TRACKING - 383)) | (1L << (CHECKSUM - 383)) | (1L << (CHECKSUM_AGG - 383)) | (1L << (CLEANUP - 383)) | (1L << (COLLECTION - 383)) | (1L << (COLUMN_MASTER_KEY - 383)) | (1L << (COMMITTED - 383)) | (1L << (COMPATIBILITY_LEVEL - 383)) | (1L << (CONCAT - 383)) | (1L << (CONCAT_NULL_YIELDS_NULL - 383)) | (1L << (CONTENT - 383)) | (1L << (CONTROL - 383)) | (1L << (COOKIE - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (COUNT - 447)) | (1L << (COUNT_BIG - 447)) | (1L << (COUNTER - 447)) | (1L << (CPU - 447)) | (1L << (CREATE_NEW - 447)) | (1L << (CREATION_DISPOSITION - 447)) | (1L << (CREDENTIAL - 447)) | (1L << (CRYPTOGRAPHIC - 447)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 447)) | (1L << (CURSOR_DEFAULT - 447)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 447)) | (1L << (DATEADD - 447)) | (1L << (DATEDIFF - 447)) | (1L << (DATENAME - 447)) | (1L << (DATEPART - 447)) | (1L << (DAYS - 447)) | (1L << (DB_CHAINING - 447)) | (1L << (DB_FAILOVER - 447)) | (1L << (DECRYPTION - 447)) | (1L << (DEFAULT_DOUBLE_QUOTE - 447)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1L << (DEFAULT_LANGUAGE - 447)) | (1L << (DELAY - 447)) | (1L << (DELAYED_DURABILITY - 447)) | (1L << (DELETED - 447)) | (1L << (DENSE_RANK - 447)) | (1L << (DEPENDENTS - 447)) | (1L << (DES - 447)) | (1L << (DESCRIPTION - 447)) | (1L << (DESX - 447)) | (1L << (DHCP - 447)) | (1L << (DIALOG - 447)) | (1L << (DIRECTORY_NAME - 447)) | (1L << (DISABLE - 447)) | (1L << (DISABLE_BROKER - 447)) | (1L << (DISABLED - 447)) | (1L << (DISK_DRIVE - 447)) | (1L << (DOCUMENT - 447)) | (1L << (DYNAMIC - 447)) | (1L << (EMERGENCY - 447)) | (1L << (EMPTY - 447)) | (1L << (ENABLE - 447)) | (1L << (ENABLE_BROKER - 447)) | (1L << (ENCRYPTED_VALUE - 447)) | (1L << (ENCRYPTION - 447)) | (1L << (ENDPOINT_URL - 447)) | (1L << (ERROR_BROKER_CONVERSATIONS - 447)) | (1L << (EXCLUSIVE - 447)) | (1L << (EXECUTABLE - 447)) | (1L << (EXIST - 447)) | (1L << (EXPAND - 447)) | (1L << (EXPIRY_DATE - 447)) | (1L << (EXPLICIT - 447)) | (1L << (FAIL_OPERATION - 447)) | (1L << (FAILOVER_MODE - 447)) | (1L << (FAILURE - 447)) | (1L << (FAILURE_CONDITION_LEVEL - 447)) | (1L << (FAST - 447)) | (1L << (FAST_FORWARD - 447)) | (1L << (FILEGROUP - 447)) | (1L << (FILEGROWTH - 447)) | (1L << (FILEPATH - 447)) | (1L << (FILESTREAM - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (FILTER - 511)) | (1L << (FIRST - 511)) | (1L << (FIRST_VALUE - 511)) | (1L << (FOLLOWING - 511)) | (1L << (FORCE - 511)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1L << (FORCED - 511)) | (1L << (FORMAT - 511)) | (1L << (FORWARD_ONLY - 511)) | (1L << (FULLSCAN - 511)) | (1L << (FULLTEXT - 511)) | (1L << (GB - 511)) | (1L << (GETDATE - 511)) | (1L << (GETUTCDATE - 511)) | (1L << (GLOBAL - 511)) | (1L << (GO - 511)) | (1L << (GROUP_MAX_REQUESTS - 511)) | (1L << (GROUPING - 511)) | (1L << (GROUPING_ID - 511)) | (1L << (HADR - 511)) | (1L << (HASH - 511)) | (1L << (HEALTH_CHECK_TIMEOUT - 511)) | (1L << (HIGH - 511)) | (1L << (HONOR_BROKER_PRIORITY - 511)) | (1L << (HOURS - 511)) | (1L << (IDENTITY_VALUE - 511)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1L << (IMMEDIATE - 511)) | (1L << (IMPERSONATE - 511)) | (1L << (IMPORTANCE - 511)) | (1L << (INCREMENTAL - 511)) | (1L << (INITIATOR - 511)) | (1L << (INPUT - 511)) | (1L << (INSENSITIVE - 511)) | (1L << (INSERTED - 511)) | (1L << (INT - 511)) | (1L << (IP - 511)) | (1L << (ISOLATION - 511)) | (1L << (KB - 511)) | (1L << (KEEP - 511)) | (1L << (KEEPFIXED - 511)) | (1L << (KEY_SOURCE - 511)) | (1L << (KEYS - 511)) | (1L << (KEYSET - 511)) | (1L << (LAG - 511)) | (1L << (LAST - 511)) | (1L << (LAST_VALUE - 511)) | (1L << (LEAD - 511)) | (1L << (LEVEL - 511)) | (1L << (LIST - 511)) | (1L << (LISTENER - 511)) | (1L << (LISTENER_URL - 511)) | (1L << (LOB_COMPACTION - 511)) | (1L << (LOCAL - 511)) | (1L << (LOCATION - 511)) | (1L << (LOCK - 511)) | (1L << (LOCK_ESCALATION - 511)) | (1L << (LOGIN - 511)) | (1L << (LOOP - 511)) | (1L << (LOW - 511)) | (1L << (MANUAL - 511)) | (1L << (MARK - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (MATERIALIZED - 575)) | (1L << (MAX - 575)) | (1L << (MAX_CPU_PERCENT - 575)) | (1L << (MAX_DOP - 575)) | (1L << (MAX_FILES - 575)) | (1L << (MAX_IOPS_PER_VOLUME - 575)) | (1L << (MAX_MEMORY_PERCENT - 575)) | (1L << (MAX_PROCESSES - 575)) | (1L << (MAX_QUEUE_READERS - 575)) | (1L << (MAX_ROLLOVER_FILES - 575)) | (1L << (MAXDOP - 575)) | (1L << (MAXRECURSION - 575)) | (1L << (MAXSIZE - 575)) | (1L << (MB - 575)) | (1L << (MEDIUM - 575)) | (1L << (MEMORY_OPTIMIZED_DATA - 575)) | (1L << (MESSAGE - 575)) | (1L << (MIN - 575)) | (1L << (MIN_ACTIVE_ROWVERSION - 575)) | (1L << (MIN_CPU_PERCENT - 575)) | (1L << (MIN_IOPS_PER_VOLUME - 575)) | (1L << (MIN_MEMORY_PERCENT - 575)) | (1L << (MINUTES - 575)) | (1L << (MIRROR_ADDRESS - 575)) | (1L << (MIXED_PAGE_ALLOCATION - 575)) | (1L << (MODE - 575)) | (1L << (MODIFY - 575)) | (1L << (MOVE - 575)) | (1L << (MULTI_USER - 575)) | (1L << (NAME - 575)) | (1L << (NESTED_TRIGGERS - 575)) | (1L << (NEW_ACCOUNT - 575)) | (1L << (NEW_BROKER - 575)) | (1L << (NEW_PASSWORD - 575)) | (1L << (NEXT - 575)) | (1L << (NO - 575)) | (1L << (NO_TRUNCATE - 575)) | (1L << (NO_WAIT - 575)) | (1L << (NOCOUNT - 575)) | (1L << (NODES - 575)) | (1L << (NOEXPAND - 575)) | (1L << (NON_TRANSACTED_ACCESS - 575)) | (1L << (NORECOMPUTE - 575)) | (1L << (NORECOVERY - 575)) | (1L << (NOWAIT - 575)) | (1L << (NTILE - 575)) | (1L << (NUMANODE - 575)) | (1L << (NUMBER - 575)) | (1L << (NUMERIC_ROUNDABORT - 575)) | (1L << (OBJECT - 575)) | (1L << (OFFLINE - 575)) | (1L << (OFFSET - 575)) | (1L << (OLD_ACCOUNT - 575)) | (1L << (ONLINE - 575)) | (1L << (ONLY - 575)) | (1L << (OPEN_EXISTING - 575)) | (1L << (OPTIMISTIC - 575)) | (1L << (OPTIMIZE - 575)) | (1L << (OUT - 575)) | (1L << (OUTPUT - 575)) | (1L << (OWNER - 575)) | (1L << (PAGE_VERIFY - 575)) | (1L << (PARAMETERIZATION - 575)) | (1L << (PARTITION - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (PARTITIONS - 639)) | (1L << (PARTNER - 639)) | (1L << (PATH - 639)) | (1L << (POISON_MESSAGE_HANDLING - 639)) | (1L << (POOL - 639)) | (1L << (PORT - 639)) | (1L << (PRECEDING - 639)) | (1L << (PRIMARY_ROLE - 639)) | (1L << (PRIOR - 639)) | (1L << (PRIORITY - 639)) | (1L << (PRIORITY_LEVEL - 639)) | (1L << (PRIVATE - 639)) | (1L << (PRIVATE_KEY - 639)) | (1L << (PRIVILEGES - 639)) | (1L << (PROCEDURE_NAME - 639)) | (1L << (PROPERTY - 639)) | (1L << (PROVIDER - 639)) | (1L << (PROVIDER_KEY_NAME - 639)) | (1L << (QUERY - 639)) | (1L << (QUEUE - 639)) | (1L << (QUEUE_DELAY - 639)) | (1L << (QUOTED_IDENTIFIER - 639)) | (1L << (RANGE - 639)) | (1L << (RANK - 639)) | (1L << (RC2 - 639)) | (1L << (RC4 - 639)) | (1L << (RC4_128 - 639)) | (1L << (READ_COMMITTED_SNAPSHOT - 639)) | (1L << (READ_ONLY - 639)) | (1L << (READ_ONLY_ROUTING_LIST - 639)) | (1L << (READ_WRITE - 639)) | (1L << (READONLY - 639)) | (1L << (REBUILD - 639)) | (1L << (RECEIVE - 639)) | (1L << (RECOMPILE - 639)) | (1L << (RECOVERY - 639)) | (1L << (RECURSIVE_TRIGGERS - 639)) | (1L << (RELATIVE - 639)) | (1L << (REMOTE - 639)) | (1L << (REMOTE_SERVICE_NAME - 639)) | (1L << (REMOVE - 639)) | (1L << (REORGANIZE - 639)) | (1L << (REPEATABLE - 639)) | (1L << (REPLICA - 639)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 639)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 639)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 639)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 639)) | (1L << (RESERVE_DISK_SPACE - 639)) | (1L << (RESOURCE - 639)) | (1L << (RESOURCE_MANAGER_LOCATION - 639)) | (1L << (RESTRICTED_USER - 639)) | (1L << (RETENTION - 639)) | (1L << (ROBUST - 639)) | (1L << (ROOT - 639)) | (1L << (ROUTE - 639)) | (1L << (ROW - 639)) | (1L << (ROW_NUMBER - 639)) | (1L << (ROWGUID - 639)) | (1L << (ROWS - 639)) | (1L << (SAMPLE - 639)) | (1L << (SCHEMABINDING - 639)) | (1L << (SCOPED - 639)) | (1L << (SCROLL - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (SCROLL_LOCKS - 703)) | (1L << (SEARCH - 703)) | (1L << (SECONDARY - 703)) | (1L << (SECONDARY_ONLY - 703)) | (1L << (SECONDARY_ROLE - 703)) | (1L << (SECONDS - 703)) | (1L << (SECRET - 703)) | (1L << (SECURITY_LOG - 703)) | (1L << (SEEDING_MODE - 703)) | (1L << (SELF - 703)) | (1L << (SEMI_SENSITIVE - 703)) | (1L << (SEND - 703)) | (1L << (SENT - 703)) | (1L << (SERIALIZABLE - 703)) | (1L << (SESSION_TIMEOUT - 703)) | (1L << (SETERROR - 703)) | (1L << (SHARE - 703)) | (1L << (SHOWPLAN - 703)) | (1L << (SIGNATURE - 703)) | (1L << (SIMPLE - 703)) | (1L << (SINGLE_USER - 703)) | (1L << (SIZE - 703)) | (1L << (SMALLINT - 703)) | (1L << (SNAPSHOT - 703)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 703)) | (1L << (STANDBY - 703)) | (1L << (START_DATE - 703)) | (1L << (STATIC - 703)) | (1L << (STATS_STREAM - 703)) | (1L << (STATUS - 703)) | (1L << (STDEV - 703)) | (1L << (STDEVP - 703)) | (1L << (STOPLIST - 703)) | (1L << (STUFF - 703)) | (1L << (SUBJECT - 703)) | (1L << (SUM - 703)) | (1L << (SUSPEND - 703)) | (1L << (SYMMETRIC - 703)) | (1L << (SYNCHRONOUS_COMMIT - 703)) | (1L << (SYNONYM - 703)) | (1L << (TAKE - 703)) | (1L << (TARGET_RECOVERY_TIME - 703)) | (1L << (TB - 703)) | (1L << (TEXTIMAGE_ON - 703)) | (1L << (THROW - 703)) | (1L << (TIES - 703)) | (1L << (TIME - 703)) | (1L << (TIMEOUT - 703)) | (1L << (TIMER - 703)) | (1L << (TINYINT - 703)) | (1L << (TORN_PAGE_DETECTION - 703)) | (1L << (TRANSFORM_NOISE_WORDS - 703)) | (1L << (TRIPLE_DES - 703)) | (1L << (TRIPLE_DES_3KEY - 703)) | (1L << (TRUSTWORTHY - 703)) | (1L << (TRY - 703)) | (1L << (TSQL - 703)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 703)) | (1L << (TYPE - 703)) | (1L << (TYPE_WARNING - 703)) | (1L << (UNBOUNDED - 703)) | (1L << (UNCOMMITTED - 703)) | (1L << (UNKNOWN - 703)) | (1L << (UNLIMITED - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (USING - 767)) | (1L << (VALID_XML - 767)) | (1L << (VALIDATION - 767)) | (1L << (VALUE - 767)) | (1L << (VAR - 767)) | (1L << (VARP - 767)) | (1L << (VIEW_METADATA - 767)) | (1L << (VIEWS - 767)) | (1L << (WAIT - 767)) | (1L << (WELL_FORMED_XML - 767)) | (1L << (WORK - 767)) | (1L << (WORKLOAD - 767)) | (1L << (XML - 767)) | (1L << (XMLNAMESPACES - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)))) != 0)) {
					{
					setState(8236);
					id();
					}
				}

				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 5);
				{
				setState(8239);
				match(CREATE);
				setState(8240);
				_la = _input.LA(1);
				if ( !(_la==TABLE || _la==VIEW) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SHOWPLAN:
				enterOuterAlt(_localctx, 6);
				{
				setState(8241);
				match(SHOWPLAN);
				}
				break;
			case IMPERSONATE:
				enterOuterAlt(_localctx, 7);
				{
				setState(8242);
				match(IMPERSONATE);
				}
				break;
			case SELECT:
				enterOuterAlt(_localctx, 8);
				{
				setState(8243);
				match(SELECT);
				}
				break;
			case REFERENCES:
				enterOuterAlt(_localctx, 9);
				{
				setState(8244);
				match(REFERENCES);
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 10);
				{
				setState(8245);
				match(INSERT);
				}
				break;
			case ALTER:
				enterOuterAlt(_localctx, 11);
				{
				setState(8246);
				match(ALTER);
				setState(8254);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY || _la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (DATABASE - 81)) | (1L << (EVENTDATA - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & ((1L << (INIT - 158)) | (1L << (KEY - 158)) | (1L << (MASTER - 158)) | (1L << (MAX_MEMORY - 158)))) != 0) || ((((_la - 225)) & ~0x3f) == 0 && ((1L << (_la - 225)) & ((1L << (OFFSETS - 225)) | (1L << (PAGE - 225)) | (1L << (PUBLIC - 225)) | (1L << (R - 225)) | (1L << (RAW - 225)) | (1L << (RETURN - 225)) | (1L << (RETURNS - 225)) | (1L << (ROWCOUNT - 225)))) != 0) || ((((_la - 295)) & ~0x3f) == 0 && ((1L << (_la - 295)) & ((1L << (SAFETY - 295)) | (1L << (SERVER - 295)) | (1L << (SID - 295)) | (1L << (SOURCE - 295)) | (1L << (STATE - 295)) | (1L << (START - 295)) | (1L << (TARGET - 295)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (ABSOLUTE - 383)) | (1L << (ACCENT_SENSITIVITY - 383)) | (1L << (ACTION - 383)) | (1L << (ACTIVATION - 383)) | (1L << (ACTIVE - 383)) | (1L << (ADDRESS - 383)) | (1L << (AES_128 - 383)) | (1L << (AES_192 - 383)) | (1L << (AES_256 - 383)) | (1L << (AFFINITY - 383)) | (1L << (AFTER - 383)) | (1L << (AGGREGATE - 383)) | (1L << (ALGORITHM - 383)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 383)) | (1L << (ALLOWED - 383)) | (1L << (ANSI_NULL_DEFAULT - 383)) | (1L << (ANSI_NULLS - 383)) | (1L << (ANSI_PADDING - 383)) | (1L << (ANSI_WARNINGS - 383)) | (1L << (APPLICATION_LOG - 383)) | (1L << (APPLY - 383)) | (1L << (ARITHABORT - 383)) | (1L << (ASSEMBLY - 383)) | (1L << (AUDIT - 383)) | (1L << (AUDIT_GUID - 383)) | (1L << (AUTO - 383)) | (1L << (AUTO_CLEANUP - 383)) | (1L << (AUTO_CLOSE - 383)) | (1L << (AUTO_CREATE_STATISTICS - 383)) | (1L << (AUTO_SHRINK - 383)) | (1L << (AUTO_UPDATE_STATISTICS - 383)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 383)) | (1L << (AVAILABILITY - 383)) | (1L << (AVG - 383)) | (1L << (BACKUP_PRIORITY - 383)) | (1L << (BEGIN_DIALOG - 383)) | (1L << (BIGINT - 383)) | (1L << (BINARY_BASE64 - 383)) | (1L << (BINARY_CHECKSUM - 383)) | (1L << (BINDING - 383)) | (1L << (BLOB_STORAGE - 383)) | (1L << (BROKER - 383)) | (1L << (BROKER_INSTANCE - 383)) | (1L << (BULK_LOGGED - 383)) | (1L << (CALLER - 383)) | (1L << (CAP_CPU_PERCENT - 383)) | (1L << (CAST - 383)) | (1L << (CATALOG - 383)) | (1L << (CATCH - 383)) | (1L << (CHANGE_RETENTION - 383)) | (1L << (CHANGE_TRACKING - 383)) | (1L << (CHECKSUM - 383)) | (1L << (CHECKSUM_AGG - 383)) | (1L << (CLEANUP - 383)) | (1L << (COLLECTION - 383)) | (1L << (COLUMN_MASTER_KEY - 383)) | (1L << (COMMITTED - 383)) | (1L << (COMPATIBILITY_LEVEL - 383)) | (1L << (CONCAT - 383)) | (1L << (CONCAT_NULL_YIELDS_NULL - 383)) | (1L << (CONTENT - 383)) | (1L << (CONTROL - 383)) | (1L << (COOKIE - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (COUNT - 447)) | (1L << (COUNT_BIG - 447)) | (1L << (COUNTER - 447)) | (1L << (CPU - 447)) | (1L << (CREATE_NEW - 447)) | (1L << (CREATION_DISPOSITION - 447)) | (1L << (CREDENTIAL - 447)) | (1L << (CRYPTOGRAPHIC - 447)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 447)) | (1L << (CURSOR_DEFAULT - 447)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 447)) | (1L << (DATEADD - 447)) | (1L << (DATEDIFF - 447)) | (1L << (DATENAME - 447)) | (1L << (DATEPART - 447)) | (1L << (DAYS - 447)) | (1L << (DB_CHAINING - 447)) | (1L << (DB_FAILOVER - 447)) | (1L << (DECRYPTION - 447)) | (1L << (DEFAULT_DOUBLE_QUOTE - 447)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1L << (DEFAULT_LANGUAGE - 447)) | (1L << (DELAY - 447)) | (1L << (DELAYED_DURABILITY - 447)) | (1L << (DELETED - 447)) | (1L << (DENSE_RANK - 447)) | (1L << (DEPENDENTS - 447)) | (1L << (DES - 447)) | (1L << (DESCRIPTION - 447)) | (1L << (DESX - 447)) | (1L << (DHCP - 447)) | (1L << (DIALOG - 447)) | (1L << (DIRECTORY_NAME - 447)) | (1L << (DISABLE - 447)) | (1L << (DISABLE_BROKER - 447)) | (1L << (DISABLED - 447)) | (1L << (DISK_DRIVE - 447)) | (1L << (DOCUMENT - 447)) | (1L << (DYNAMIC - 447)) | (1L << (EMERGENCY - 447)) | (1L << (EMPTY - 447)) | (1L << (ENABLE - 447)) | (1L << (ENABLE_BROKER - 447)) | (1L << (ENCRYPTED_VALUE - 447)) | (1L << (ENCRYPTION - 447)) | (1L << (ENDPOINT_URL - 447)) | (1L << (ERROR_BROKER_CONVERSATIONS - 447)) | (1L << (EXCLUSIVE - 447)) | (1L << (EXECUTABLE - 447)) | (1L << (EXIST - 447)) | (1L << (EXPAND - 447)) | (1L << (EXPIRY_DATE - 447)) | (1L << (EXPLICIT - 447)) | (1L << (FAIL_OPERATION - 447)) | (1L << (FAILOVER_MODE - 447)) | (1L << (FAILURE - 447)) | (1L << (FAILURE_CONDITION_LEVEL - 447)) | (1L << (FAST - 447)) | (1L << (FAST_FORWARD - 447)) | (1L << (FILEGROUP - 447)) | (1L << (FILEGROWTH - 447)) | (1L << (FILEPATH - 447)) | (1L << (FILESTREAM - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (FILTER - 511)) | (1L << (FIRST - 511)) | (1L << (FIRST_VALUE - 511)) | (1L << (FOLLOWING - 511)) | (1L << (FORCE - 511)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1L << (FORCED - 511)) | (1L << (FORMAT - 511)) | (1L << (FORWARD_ONLY - 511)) | (1L << (FULLSCAN - 511)) | (1L << (FULLTEXT - 511)) | (1L << (GB - 511)) | (1L << (GETDATE - 511)) | (1L << (GETUTCDATE - 511)) | (1L << (GLOBAL - 511)) | (1L << (GO - 511)) | (1L << (GROUP_MAX_REQUESTS - 511)) | (1L << (GROUPING - 511)) | (1L << (GROUPING_ID - 511)) | (1L << (HADR - 511)) | (1L << (HASH - 511)) | (1L << (HEALTH_CHECK_TIMEOUT - 511)) | (1L << (HIGH - 511)) | (1L << (HONOR_BROKER_PRIORITY - 511)) | (1L << (HOURS - 511)) | (1L << (IDENTITY_VALUE - 511)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1L << (IMMEDIATE - 511)) | (1L << (IMPERSONATE - 511)) | (1L << (IMPORTANCE - 511)) | (1L << (INCREMENTAL - 511)) | (1L << (INITIATOR - 511)) | (1L << (INPUT - 511)) | (1L << (INSENSITIVE - 511)) | (1L << (INSERTED - 511)) | (1L << (INT - 511)) | (1L << (IP - 511)) | (1L << (ISOLATION - 511)) | (1L << (KB - 511)) | (1L << (KEEP - 511)) | (1L << (KEEPFIXED - 511)) | (1L << (KEY_SOURCE - 511)) | (1L << (KEYS - 511)) | (1L << (KEYSET - 511)) | (1L << (LAG - 511)) | (1L << (LAST - 511)) | (1L << (LAST_VALUE - 511)) | (1L << (LEAD - 511)) | (1L << (LEVEL - 511)) | (1L << (LIST - 511)) | (1L << (LISTENER - 511)) | (1L << (LISTENER_URL - 511)) | (1L << (LOB_COMPACTION - 511)) | (1L << (LOCAL - 511)) | (1L << (LOCATION - 511)) | (1L << (LOCK - 511)) | (1L << (LOCK_ESCALATION - 511)) | (1L << (LOGIN - 511)) | (1L << (LOOP - 511)) | (1L << (LOW - 511)) | (1L << (MANUAL - 511)) | (1L << (MARK - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (MATERIALIZED - 575)) | (1L << (MAX - 575)) | (1L << (MAX_CPU_PERCENT - 575)) | (1L << (MAX_DOP - 575)) | (1L << (MAX_FILES - 575)) | (1L << (MAX_IOPS_PER_VOLUME - 575)) | (1L << (MAX_MEMORY_PERCENT - 575)) | (1L << (MAX_PROCESSES - 575)) | (1L << (MAX_QUEUE_READERS - 575)) | (1L << (MAX_ROLLOVER_FILES - 575)) | (1L << (MAXDOP - 575)) | (1L << (MAXRECURSION - 575)) | (1L << (MAXSIZE - 575)) | (1L << (MB - 575)) | (1L << (MEDIUM - 575)) | (1L << (MEMORY_OPTIMIZED_DATA - 575)) | (1L << (MESSAGE - 575)) | (1L << (MIN - 575)) | (1L << (MIN_ACTIVE_ROWVERSION - 575)) | (1L << (MIN_CPU_PERCENT - 575)) | (1L << (MIN_IOPS_PER_VOLUME - 575)) | (1L << (MIN_MEMORY_PERCENT - 575)) | (1L << (MINUTES - 575)) | (1L << (MIRROR_ADDRESS - 575)) | (1L << (MIXED_PAGE_ALLOCATION - 575)) | (1L << (MODE - 575)) | (1L << (MODIFY - 575)) | (1L << (MOVE - 575)) | (1L << (MULTI_USER - 575)) | (1L << (NAME - 575)) | (1L << (NESTED_TRIGGERS - 575)) | (1L << (NEW_ACCOUNT - 575)) | (1L << (NEW_BROKER - 575)) | (1L << (NEW_PASSWORD - 575)) | (1L << (NEXT - 575)) | (1L << (NO - 575)) | (1L << (NO_TRUNCATE - 575)) | (1L << (NO_WAIT - 575)) | (1L << (NOCOUNT - 575)) | (1L << (NODES - 575)) | (1L << (NOEXPAND - 575)) | (1L << (NON_TRANSACTED_ACCESS - 575)) | (1L << (NORECOMPUTE - 575)) | (1L << (NORECOVERY - 575)) | (1L << (NOWAIT - 575)) | (1L << (NTILE - 575)) | (1L << (NUMANODE - 575)) | (1L << (NUMBER - 575)) | (1L << (NUMERIC_ROUNDABORT - 575)) | (1L << (OBJECT - 575)) | (1L << (OFFLINE - 575)) | (1L << (OFFSET - 575)) | (1L << (OLD_ACCOUNT - 575)) | (1L << (ONLINE - 575)) | (1L << (ONLY - 575)) | (1L << (OPEN_EXISTING - 575)) | (1L << (OPTIMISTIC - 575)) | (1L << (OPTIMIZE - 575)) | (1L << (OUT - 575)) | (1L << (OUTPUT - 575)) | (1L << (OWNER - 575)) | (1L << (PAGE_VERIFY - 575)) | (1L << (PARAMETERIZATION - 575)) | (1L << (PARTITION - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (PARTITIONS - 639)) | (1L << (PARTNER - 639)) | (1L << (PATH - 639)) | (1L << (POISON_MESSAGE_HANDLING - 639)) | (1L << (POOL - 639)) | (1L << (PORT - 639)) | (1L << (PRECEDING - 639)) | (1L << (PRIMARY_ROLE - 639)) | (1L << (PRIOR - 639)) | (1L << (PRIORITY - 639)) | (1L << (PRIORITY_LEVEL - 639)) | (1L << (PRIVATE - 639)) | (1L << (PRIVATE_KEY - 639)) | (1L << (PRIVILEGES - 639)) | (1L << (PROCEDURE_NAME - 639)) | (1L << (PROPERTY - 639)) | (1L << (PROVIDER - 639)) | (1L << (PROVIDER_KEY_NAME - 639)) | (1L << (QUERY - 639)) | (1L << (QUEUE - 639)) | (1L << (QUEUE_DELAY - 639)) | (1L << (QUOTED_IDENTIFIER - 639)) | (1L << (RANGE - 639)) | (1L << (RANK - 639)) | (1L << (RC2 - 639)) | (1L << (RC4 - 639)) | (1L << (RC4_128 - 639)) | (1L << (READ_COMMITTED_SNAPSHOT - 639)) | (1L << (READ_ONLY - 639)) | (1L << (READ_ONLY_ROUTING_LIST - 639)) | (1L << (READ_WRITE - 639)) | (1L << (READONLY - 639)) | (1L << (REBUILD - 639)) | (1L << (RECEIVE - 639)) | (1L << (RECOMPILE - 639)) | (1L << (RECOVERY - 639)) | (1L << (RECURSIVE_TRIGGERS - 639)) | (1L << (RELATIVE - 639)) | (1L << (REMOTE - 639)) | (1L << (REMOTE_SERVICE_NAME - 639)) | (1L << (REMOVE - 639)) | (1L << (REORGANIZE - 639)) | (1L << (REPEATABLE - 639)) | (1L << (REPLICA - 639)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 639)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 639)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 639)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 639)) | (1L << (RESERVE_DISK_SPACE - 639)) | (1L << (RESOURCE - 639)) | (1L << (RESOURCE_MANAGER_LOCATION - 639)) | (1L << (RESTRICTED_USER - 639)) | (1L << (RETENTION - 639)) | (1L << (ROBUST - 639)) | (1L << (ROOT - 639)) | (1L << (ROUTE - 639)) | (1L << (ROW - 639)) | (1L << (ROW_NUMBER - 639)) | (1L << (ROWGUID - 639)) | (1L << (ROWS - 639)) | (1L << (SAMPLE - 639)) | (1L << (SCHEMABINDING - 639)) | (1L << (SCOPED - 639)) | (1L << (SCROLL - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (SCROLL_LOCKS - 703)) | (1L << (SEARCH - 703)) | (1L << (SECONDARY - 703)) | (1L << (SECONDARY_ONLY - 703)) | (1L << (SECONDARY_ROLE - 703)) | (1L << (SECONDS - 703)) | (1L << (SECRET - 703)) | (1L << (SECURITY_LOG - 703)) | (1L << (SEEDING_MODE - 703)) | (1L << (SELF - 703)) | (1L << (SEMI_SENSITIVE - 703)) | (1L << (SEND - 703)) | (1L << (SENT - 703)) | (1L << (SERIALIZABLE - 703)) | (1L << (SESSION_TIMEOUT - 703)) | (1L << (SETERROR - 703)) | (1L << (SHARE - 703)) | (1L << (SHOWPLAN - 703)) | (1L << (SIGNATURE - 703)) | (1L << (SIMPLE - 703)) | (1L << (SINGLE_USER - 703)) | (1L << (SIZE - 703)) | (1L << (SMALLINT - 703)) | (1L << (SNAPSHOT - 703)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 703)) | (1L << (STANDBY - 703)) | (1L << (START_DATE - 703)) | (1L << (STATIC - 703)) | (1L << (STATS_STREAM - 703)) | (1L << (STATUS - 703)) | (1L << (STDEV - 703)) | (1L << (STDEVP - 703)) | (1L << (STOPLIST - 703)) | (1L << (STUFF - 703)) | (1L << (SUBJECT - 703)) | (1L << (SUM - 703)) | (1L << (SUSPEND - 703)) | (1L << (SYMMETRIC - 703)) | (1L << (SYNCHRONOUS_COMMIT - 703)) | (1L << (SYNONYM - 703)) | (1L << (TAKE - 703)) | (1L << (TARGET_RECOVERY_TIME - 703)) | (1L << (TB - 703)) | (1L << (TEXTIMAGE_ON - 703)) | (1L << (THROW - 703)) | (1L << (TIES - 703)) | (1L << (TIME - 703)) | (1L << (TIMEOUT - 703)) | (1L << (TIMER - 703)) | (1L << (TINYINT - 703)) | (1L << (TORN_PAGE_DETECTION - 703)) | (1L << (TRANSFORM_NOISE_WORDS - 703)) | (1L << (TRIPLE_DES - 703)) | (1L << (TRIPLE_DES_3KEY - 703)) | (1L << (TRUSTWORTHY - 703)) | (1L << (TRY - 703)) | (1L << (TSQL - 703)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 703)) | (1L << (TYPE - 703)) | (1L << (TYPE_WARNING - 703)) | (1L << (UNBOUNDED - 703)) | (1L << (UNCOMMITTED - 703)) | (1L << (UNKNOWN - 703)) | (1L << (UNLIMITED - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (USING - 767)) | (1L << (VALID_XML - 767)) | (1L << (VALIDATION - 767)) | (1L << (VALUE - 767)) | (1L << (VAR - 767)) | (1L << (VARP - 767)) | (1L << (VIEW_METADATA - 767)) | (1L << (VIEWS - 767)) | (1L << (WAIT - 767)) | (1L << (WELL_FORMED_XML - 767)) | (1L << (WORK - 767)) | (1L << (WORKLOAD - 767)) | (1L << (XML - 767)) | (1L << (XMLNAMESPACES - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)))) != 0)) {
					{
					setState(8248);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ANY) {
						{
						setState(8247);
						match(ANY);
						}
					}

					setState(8252);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CALLED:
					case DATA_COMPRESSION:
					case EVENTDATA:
					case FILENAME:
					case FILLFACTOR:
					case FORCESEEK:
					case INIT:
					case KEY:
					case MASTER:
					case MAX_MEMORY:
					case OFFSETS:
					case PAGE:
					case PUBLIC:
					case R:
					case RAW:
					case RETURN:
					case RETURNS:
					case ROWCOUNT:
					case SAFETY:
					case SERVER:
					case SID:
					case SOURCE:
					case STATE:
					case START:
					case TARGET:
					case ABSOLUTE:
					case ACCENT_SENSITIVITY:
					case ACTION:
					case ACTIVATION:
					case ACTIVE:
					case ADDRESS:
					case AES_128:
					case AES_192:
					case AES_256:
					case AFFINITY:
					case AFTER:
					case AGGREGATE:
					case ALGORITHM:
					case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
					case ALLOW_SNAPSHOT_ISOLATION:
					case ALLOWED:
					case ANSI_NULL_DEFAULT:
					case ANSI_NULLS:
					case ANSI_PADDING:
					case ANSI_WARNINGS:
					case APPLICATION_LOG:
					case APPLY:
					case ARITHABORT:
					case ASSEMBLY:
					case AUDIT:
					case AUDIT_GUID:
					case AUTO:
					case AUTO_CLEANUP:
					case AUTO_CLOSE:
					case AUTO_CREATE_STATISTICS:
					case AUTO_SHRINK:
					case AUTO_UPDATE_STATISTICS:
					case AUTO_UPDATE_STATISTICS_ASYNC:
					case AVAILABILITY:
					case AVG:
					case BACKUP_PRIORITY:
					case BEGIN_DIALOG:
					case BIGINT:
					case BINARY_BASE64:
					case BINARY_CHECKSUM:
					case BINDING:
					case BLOB_STORAGE:
					case BROKER:
					case BROKER_INSTANCE:
					case BULK_LOGGED:
					case CALLER:
					case CAP_CPU_PERCENT:
					case CAST:
					case CATALOG:
					case CATCH:
					case CHANGE_RETENTION:
					case CHANGE_TRACKING:
					case CHECKSUM:
					case CHECKSUM_AGG:
					case CLEANUP:
					case COLLECTION:
					case COLUMN_MASTER_KEY:
					case COMMITTED:
					case COMPATIBILITY_LEVEL:
					case CONCAT:
					case CONCAT_NULL_YIELDS_NULL:
					case CONTENT:
					case CONTROL:
					case COOKIE:
					case COUNT:
					case COUNT_BIG:
					case COUNTER:
					case CPU:
					case CREATE_NEW:
					case CREATION_DISPOSITION:
					case CREDENTIAL:
					case CRYPTOGRAPHIC:
					case CURSOR_CLOSE_ON_COMMIT:
					case CURSOR_DEFAULT:
					case DATE_CORRELATION_OPTIMIZATION:
					case DATEADD:
					case DATEDIFF:
					case DATENAME:
					case DATEPART:
					case DAYS:
					case DB_CHAINING:
					case DB_FAILOVER:
					case DECRYPTION:
					case DEFAULT_DOUBLE_QUOTE:
					case DEFAULT_FULLTEXT_LANGUAGE:
					case DEFAULT_LANGUAGE:
					case DELAY:
					case DELAYED_DURABILITY:
					case DELETED:
					case DENSE_RANK:
					case DEPENDENTS:
					case DES:
					case DESCRIPTION:
					case DESX:
					case DHCP:
					case DIALOG:
					case DIRECTORY_NAME:
					case DISABLE:
					case DISABLE_BROKER:
					case DISABLED:
					case DISK_DRIVE:
					case DOCUMENT:
					case DYNAMIC:
					case EMERGENCY:
					case EMPTY:
					case ENABLE:
					case ENABLE_BROKER:
					case ENCRYPTED_VALUE:
					case ENCRYPTION:
					case ENDPOINT_URL:
					case ERROR_BROKER_CONVERSATIONS:
					case EXCLUSIVE:
					case EXECUTABLE:
					case EXIST:
					case EXPAND:
					case EXPIRY_DATE:
					case EXPLICIT:
					case FAIL_OPERATION:
					case FAILOVER_MODE:
					case FAILURE:
					case FAILURE_CONDITION_LEVEL:
					case FAST:
					case FAST_FORWARD:
					case FILEGROUP:
					case FILEGROWTH:
					case FILEPATH:
					case FILESTREAM:
					case FILTER:
					case FIRST:
					case FIRST_VALUE:
					case FOLLOWING:
					case FORCE:
					case FORCE_FAILOVER_ALLOW_DATA_LOSS:
					case FORCED:
					case FORMAT:
					case FORWARD_ONLY:
					case FULLSCAN:
					case FULLTEXT:
					case GB:
					case GETDATE:
					case GETUTCDATE:
					case GLOBAL:
					case GO:
					case GROUP_MAX_REQUESTS:
					case GROUPING:
					case GROUPING_ID:
					case HADR:
					case HASH:
					case HEALTH_CHECK_TIMEOUT:
					case HIGH:
					case HONOR_BROKER_PRIORITY:
					case HOURS:
					case IDENTITY_VALUE:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMMEDIATE:
					case IMPERSONATE:
					case IMPORTANCE:
					case INCREMENTAL:
					case INITIATOR:
					case INPUT:
					case INSENSITIVE:
					case INSERTED:
					case INT:
					case IP:
					case ISOLATION:
					case KB:
					case KEEP:
					case KEEPFIXED:
					case KEY_SOURCE:
					case KEYS:
					case KEYSET:
					case LAG:
					case LAST:
					case LAST_VALUE:
					case LEAD:
					case LEVEL:
					case LIST:
					case LISTENER:
					case LISTENER_URL:
					case LOB_COMPACTION:
					case LOCAL:
					case LOCATION:
					case LOCK:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case LOW:
					case MANUAL:
					case MARK:
					case MATERIALIZED:
					case MAX:
					case MAX_CPU_PERCENT:
					case MAX_DOP:
					case MAX_FILES:
					case MAX_IOPS_PER_VOLUME:
					case MAX_MEMORY_PERCENT:
					case MAX_PROCESSES:
					case MAX_QUEUE_READERS:
					case MAX_ROLLOVER_FILES:
					case MAXDOP:
					case MAXRECURSION:
					case MAXSIZE:
					case MB:
					case MEDIUM:
					case MEMORY_OPTIMIZED_DATA:
					case MESSAGE:
					case MIN:
					case MIN_ACTIVE_ROWVERSION:
					case MIN_CPU_PERCENT:
					case MIN_IOPS_PER_VOLUME:
					case MIN_MEMORY_PERCENT:
					case MINUTES:
					case MIRROR_ADDRESS:
					case MIXED_PAGE_ALLOCATION:
					case MODE:
					case MODIFY:
					case MOVE:
					case MULTI_USER:
					case NAME:
					case NESTED_TRIGGERS:
					case NEW_ACCOUNT:
					case NEW_BROKER:
					case NEW_PASSWORD:
					case NEXT:
					case NO:
					case NO_TRUNCATE:
					case NO_WAIT:
					case NOCOUNT:
					case NODES:
					case NOEXPAND:
					case NON_TRANSACTED_ACCESS:
					case NORECOMPUTE:
					case NORECOVERY:
					case NOWAIT:
					case NTILE:
					case NUMANODE:
					case NUMBER:
					case NUMERIC_ROUNDABORT:
					case OBJECT:
					case OFFLINE:
					case OFFSET:
					case OLD_ACCOUNT:
					case ONLINE:
					case ONLY:
					case OPEN_EXISTING:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OWNER:
					case PAGE_VERIFY:
					case PARAMETERIZATION:
					case PARTITION:
					case PARTITIONS:
					case PARTNER:
					case PATH:
					case POISON_MESSAGE_HANDLING:
					case POOL:
					case PORT:
					case PRECEDING:
					case PRIMARY_ROLE:
					case PRIOR:
					case PRIORITY:
					case PRIORITY_LEVEL:
					case PRIVATE:
					case PRIVATE_KEY:
					case PRIVILEGES:
					case PROCEDURE_NAME:
					case PROPERTY:
					case PROVIDER:
					case PROVIDER_KEY_NAME:
					case QUERY:
					case QUEUE:
					case QUEUE_DELAY:
					case QUOTED_IDENTIFIER:
					case RANGE:
					case RANK:
					case RC2:
					case RC4:
					case RC4_128:
					case READ_COMMITTED_SNAPSHOT:
					case READ_ONLY:
					case READ_ONLY_ROUTING_LIST:
					case READ_WRITE:
					case READONLY:
					case REBUILD:
					case RECEIVE:
					case RECOMPILE:
					case RECOVERY:
					case RECURSIVE_TRIGGERS:
					case RELATIVE:
					case REMOTE:
					case REMOTE_SERVICE_NAME:
					case REMOVE:
					case REORGANIZE:
					case REPEATABLE:
					case REPLICA:
					case REQUEST_MAX_CPU_TIME_SEC:
					case REQUEST_MAX_MEMORY_GRANT_PERCENT:
					case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
					case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					case RESERVE_DISK_SPACE:
					case RESOURCE:
					case RESOURCE_MANAGER_LOCATION:
					case RESTRICTED_USER:
					case RETENTION:
					case ROBUST:
					case ROOT:
					case ROUTE:
					case ROW:
					case ROW_NUMBER:
					case ROWGUID:
					case ROWS:
					case SAMPLE:
					case SCHEMABINDING:
					case SCOPED:
					case SCROLL:
					case SCROLL_LOCKS:
					case SEARCH:
					case SECONDARY:
					case SECONDARY_ONLY:
					case SECONDARY_ROLE:
					case SECONDS:
					case SECRET:
					case SECURITY_LOG:
					case SEEDING_MODE:
					case SELF:
					case SEMI_SENSITIVE:
					case SEND:
					case SENT:
					case SERIALIZABLE:
					case SESSION_TIMEOUT:
					case SETERROR:
					case SHARE:
					case SHOWPLAN:
					case SIGNATURE:
					case SIMPLE:
					case SINGLE_USER:
					case SIZE:
					case SMALLINT:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STANDBY:
					case START_DATE:
					case STATIC:
					case STATS_STREAM:
					case STATUS:
					case STDEV:
					case STDEVP:
					case STOPLIST:
					case STUFF:
					case SUBJECT:
					case SUM:
					case SUSPEND:
					case SYMMETRIC:
					case SYNCHRONOUS_COMMIT:
					case SYNONYM:
					case TAKE:
					case TARGET_RECOVERY_TIME:
					case TB:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TIMEOUT:
					case TIMER:
					case TINYINT:
					case TORN_PAGE_DETECTION:
					case TRANSFORM_NOISE_WORDS:
					case TRIPLE_DES:
					case TRIPLE_DES_3KEY:
					case TRUSTWORTHY:
					case TRY:
					case TSQL:
					case TWO_DIGIT_YEAR_CUTOFF:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case UNLIMITED:
					case USING:
					case VALID_XML:
					case VALIDATION:
					case VALUE:
					case VAR:
					case VARP:
					case VIEW_METADATA:
					case VIEWS:
					case WAIT:
					case WELL_FORMED_XML:
					case WORK:
					case WORKLOAD:
					case XML:
					case XMLNAMESPACES:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case ID:
						{
						setState(8250);
						id();
						}
						break;
					case DATABASE:
						{
						setState(8251);
						match(DATABASE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_statementContext extends ParserRuleContext {
		public IdContext member_name;
		public TerminalNode SET() { return getToken(TSqlParser.SET, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Assignment_operatorContext assignment_operator() {
			return getRuleContext(Assignment_operatorContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(TSqlParser.CURSOR, 0); }
		public Declare_set_cursor_commonContext declare_set_cursor_common() {
			return getRuleContext(Declare_set_cursor_commonContext.class,0);
		}
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode READ() { return getToken(TSqlParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(TSqlParser.ONLY, 0); }
		public TerminalNode UPDATE() { return getToken(TSqlParser.UPDATE, 0); }
		public TerminalNode OF() { return getToken(TSqlParser.OF, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Set_specialContext set_special() {
			return getRuleContext(Set_specialContext.class,0);
		}
		public Set_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSet_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSet_statement(this);
		}
	}

	public final Set_statementContext set_statement() throws RecognitionException {
		Set_statementContext _localctx = new Set_statementContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_set_statement);
		int _la;
		try {
			setState(8297);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1157,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8258);
				match(SET);
				setState(8259);
				match(LOCAL_ID);
				setState(8262);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT) {
					{
					setState(8260);
					match(DOT);
					setState(8261);
					((Set_statementContext)_localctx).member_name = id();
					}
				}

				setState(8264);
				match(EQUAL);
				setState(8265);
				expression(0);
				setState(8267);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1151,_ctx) ) {
				case 1:
					{
					setState(8266);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8269);
				match(SET);
				setState(8270);
				match(LOCAL_ID);
				setState(8271);
				assignment_operator();
				setState(8272);
				expression(0);
				setState(8274);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1152,_ctx) ) {
				case 1:
					{
					setState(8273);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8276);
				match(SET);
				setState(8277);
				match(LOCAL_ID);
				setState(8278);
				match(EQUAL);
				setState(8279);
				match(CURSOR);
				setState(8280);
				declare_set_cursor_common();
				setState(8291);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(8281);
					match(FOR);
					setState(8289);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case READ:
						{
						setState(8282);
						match(READ);
						setState(8283);
						match(ONLY);
						}
						break;
					case UPDATE:
						{
						setState(8284);
						match(UPDATE);
						setState(8287);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==OF) {
							{
							setState(8285);
							match(OF);
							setState(8286);
							column_name_list();
							}
						}

						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(8294);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1156,_ctx) ) {
				case 1:
					{
					setState(8293);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8296);
				set_special();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transaction_statementContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(TSqlParser.BEGIN, 0); }
		public TerminalNode DISTRIBUTED() { return getToken(TSqlParser.DISTRIBUTED, 0); }
		public TerminalNode TRAN() { return getToken(TSqlParser.TRAN, 0); }
		public TerminalNode TRANSACTION() { return getToken(TSqlParser.TRANSACTION, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode MARK() { return getToken(TSqlParser.MARK, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode COMMIT() { return getToken(TSqlParser.COMMIT, 0); }
		public TerminalNode DELAYED_DURABILITY() { return getToken(TSqlParser.DELAYED_DURABILITY, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode WORK() { return getToken(TSqlParser.WORK, 0); }
		public TerminalNode ROLLBACK() { return getToken(TSqlParser.ROLLBACK, 0); }
		public TerminalNode SAVE() { return getToken(TSqlParser.SAVE, 0); }
		public Transaction_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTransaction_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTransaction_statement(this);
		}
	}

	public final Transaction_statementContext transaction_statement() throws RecognitionException {
		Transaction_statementContext _localctx = new Transaction_statementContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_transaction_statement);
		int _la;
		try {
			setState(8380);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1176,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8299);
				match(BEGIN);
				setState(8300);
				match(DISTRIBUTED);
				setState(8301);
				_la = _input.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8304);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1158,_ctx) ) {
				case 1:
					{
					setState(8302);
					id();
					}
					break;
				case 2:
					{
					setState(8303);
					match(LOCAL_ID);
					}
					break;
				}
				setState(8307);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1159,_ctx) ) {
				case 1:
					{
					setState(8306);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8309);
				match(BEGIN);
				setState(8310);
				_la = _input.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8320);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1162,_ctx) ) {
				case 1:
					{
					setState(8313);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CALLED:
					case DATA_COMPRESSION:
					case EVENTDATA:
					case FILENAME:
					case FILLFACTOR:
					case FORCESEEK:
					case INIT:
					case KEY:
					case MASTER:
					case MAX_MEMORY:
					case OFFSETS:
					case PAGE:
					case PUBLIC:
					case R:
					case RAW:
					case RETURN:
					case RETURNS:
					case ROWCOUNT:
					case SAFETY:
					case SERVER:
					case SID:
					case SOURCE:
					case STATE:
					case START:
					case TARGET:
					case ABSOLUTE:
					case ACCENT_SENSITIVITY:
					case ACTION:
					case ACTIVATION:
					case ACTIVE:
					case ADDRESS:
					case AES_128:
					case AES_192:
					case AES_256:
					case AFFINITY:
					case AFTER:
					case AGGREGATE:
					case ALGORITHM:
					case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
					case ALLOW_SNAPSHOT_ISOLATION:
					case ALLOWED:
					case ANSI_NULL_DEFAULT:
					case ANSI_NULLS:
					case ANSI_PADDING:
					case ANSI_WARNINGS:
					case APPLICATION_LOG:
					case APPLY:
					case ARITHABORT:
					case ASSEMBLY:
					case AUDIT:
					case AUDIT_GUID:
					case AUTO:
					case AUTO_CLEANUP:
					case AUTO_CLOSE:
					case AUTO_CREATE_STATISTICS:
					case AUTO_SHRINK:
					case AUTO_UPDATE_STATISTICS:
					case AUTO_UPDATE_STATISTICS_ASYNC:
					case AVAILABILITY:
					case AVG:
					case BACKUP_PRIORITY:
					case BEGIN_DIALOG:
					case BIGINT:
					case BINARY_BASE64:
					case BINARY_CHECKSUM:
					case BINDING:
					case BLOB_STORAGE:
					case BROKER:
					case BROKER_INSTANCE:
					case BULK_LOGGED:
					case CALLER:
					case CAP_CPU_PERCENT:
					case CAST:
					case CATALOG:
					case CATCH:
					case CHANGE_RETENTION:
					case CHANGE_TRACKING:
					case CHECKSUM:
					case CHECKSUM_AGG:
					case CLEANUP:
					case COLLECTION:
					case COLUMN_MASTER_KEY:
					case COMMITTED:
					case COMPATIBILITY_LEVEL:
					case CONCAT:
					case CONCAT_NULL_YIELDS_NULL:
					case CONTENT:
					case CONTROL:
					case COOKIE:
					case COUNT:
					case COUNT_BIG:
					case COUNTER:
					case CPU:
					case CREATE_NEW:
					case CREATION_DISPOSITION:
					case CREDENTIAL:
					case CRYPTOGRAPHIC:
					case CURSOR_CLOSE_ON_COMMIT:
					case CURSOR_DEFAULT:
					case DATE_CORRELATION_OPTIMIZATION:
					case DATEADD:
					case DATEDIFF:
					case DATENAME:
					case DATEPART:
					case DAYS:
					case DB_CHAINING:
					case DB_FAILOVER:
					case DECRYPTION:
					case DEFAULT_DOUBLE_QUOTE:
					case DEFAULT_FULLTEXT_LANGUAGE:
					case DEFAULT_LANGUAGE:
					case DELAY:
					case DELAYED_DURABILITY:
					case DELETED:
					case DENSE_RANK:
					case DEPENDENTS:
					case DES:
					case DESCRIPTION:
					case DESX:
					case DHCP:
					case DIALOG:
					case DIRECTORY_NAME:
					case DISABLE:
					case DISABLE_BROKER:
					case DISABLED:
					case DISK_DRIVE:
					case DOCUMENT:
					case DYNAMIC:
					case EMERGENCY:
					case EMPTY:
					case ENABLE:
					case ENABLE_BROKER:
					case ENCRYPTED_VALUE:
					case ENCRYPTION:
					case ENDPOINT_URL:
					case ERROR_BROKER_CONVERSATIONS:
					case EXCLUSIVE:
					case EXECUTABLE:
					case EXIST:
					case EXPAND:
					case EXPIRY_DATE:
					case EXPLICIT:
					case FAIL_OPERATION:
					case FAILOVER_MODE:
					case FAILURE:
					case FAILURE_CONDITION_LEVEL:
					case FAST:
					case FAST_FORWARD:
					case FILEGROUP:
					case FILEGROWTH:
					case FILEPATH:
					case FILESTREAM:
					case FILTER:
					case FIRST:
					case FIRST_VALUE:
					case FOLLOWING:
					case FORCE:
					case FORCE_FAILOVER_ALLOW_DATA_LOSS:
					case FORCED:
					case FORMAT:
					case FORWARD_ONLY:
					case FULLSCAN:
					case FULLTEXT:
					case GB:
					case GETDATE:
					case GETUTCDATE:
					case GLOBAL:
					case GO:
					case GROUP_MAX_REQUESTS:
					case GROUPING:
					case GROUPING_ID:
					case HADR:
					case HASH:
					case HEALTH_CHECK_TIMEOUT:
					case HIGH:
					case HONOR_BROKER_PRIORITY:
					case HOURS:
					case IDENTITY_VALUE:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMMEDIATE:
					case IMPERSONATE:
					case IMPORTANCE:
					case INCREMENTAL:
					case INITIATOR:
					case INPUT:
					case INSENSITIVE:
					case INSERTED:
					case INT:
					case IP:
					case ISOLATION:
					case KB:
					case KEEP:
					case KEEPFIXED:
					case KEY_SOURCE:
					case KEYS:
					case KEYSET:
					case LAG:
					case LAST:
					case LAST_VALUE:
					case LEAD:
					case LEVEL:
					case LIST:
					case LISTENER:
					case LISTENER_URL:
					case LOB_COMPACTION:
					case LOCAL:
					case LOCATION:
					case LOCK:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case LOW:
					case MANUAL:
					case MARK:
					case MATERIALIZED:
					case MAX:
					case MAX_CPU_PERCENT:
					case MAX_DOP:
					case MAX_FILES:
					case MAX_IOPS_PER_VOLUME:
					case MAX_MEMORY_PERCENT:
					case MAX_PROCESSES:
					case MAX_QUEUE_READERS:
					case MAX_ROLLOVER_FILES:
					case MAXDOP:
					case MAXRECURSION:
					case MAXSIZE:
					case MB:
					case MEDIUM:
					case MEMORY_OPTIMIZED_DATA:
					case MESSAGE:
					case MIN:
					case MIN_ACTIVE_ROWVERSION:
					case MIN_CPU_PERCENT:
					case MIN_IOPS_PER_VOLUME:
					case MIN_MEMORY_PERCENT:
					case MINUTES:
					case MIRROR_ADDRESS:
					case MIXED_PAGE_ALLOCATION:
					case MODE:
					case MODIFY:
					case MOVE:
					case MULTI_USER:
					case NAME:
					case NESTED_TRIGGERS:
					case NEW_ACCOUNT:
					case NEW_BROKER:
					case NEW_PASSWORD:
					case NEXT:
					case NO:
					case NO_TRUNCATE:
					case NO_WAIT:
					case NOCOUNT:
					case NODES:
					case NOEXPAND:
					case NON_TRANSACTED_ACCESS:
					case NORECOMPUTE:
					case NORECOVERY:
					case NOWAIT:
					case NTILE:
					case NUMANODE:
					case NUMBER:
					case NUMERIC_ROUNDABORT:
					case OBJECT:
					case OFFLINE:
					case OFFSET:
					case OLD_ACCOUNT:
					case ONLINE:
					case ONLY:
					case OPEN_EXISTING:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OWNER:
					case PAGE_VERIFY:
					case PARAMETERIZATION:
					case PARTITION:
					case PARTITIONS:
					case PARTNER:
					case PATH:
					case POISON_MESSAGE_HANDLING:
					case POOL:
					case PORT:
					case PRECEDING:
					case PRIMARY_ROLE:
					case PRIOR:
					case PRIORITY:
					case PRIORITY_LEVEL:
					case PRIVATE:
					case PRIVATE_KEY:
					case PRIVILEGES:
					case PROCEDURE_NAME:
					case PROPERTY:
					case PROVIDER:
					case PROVIDER_KEY_NAME:
					case QUERY:
					case QUEUE:
					case QUEUE_DELAY:
					case QUOTED_IDENTIFIER:
					case RANGE:
					case RANK:
					case RC2:
					case RC4:
					case RC4_128:
					case READ_COMMITTED_SNAPSHOT:
					case READ_ONLY:
					case READ_ONLY_ROUTING_LIST:
					case READ_WRITE:
					case READONLY:
					case REBUILD:
					case RECEIVE:
					case RECOMPILE:
					case RECOVERY:
					case RECURSIVE_TRIGGERS:
					case RELATIVE:
					case REMOTE:
					case REMOTE_SERVICE_NAME:
					case REMOVE:
					case REORGANIZE:
					case REPEATABLE:
					case REPLICA:
					case REQUEST_MAX_CPU_TIME_SEC:
					case REQUEST_MAX_MEMORY_GRANT_PERCENT:
					case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
					case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					case RESERVE_DISK_SPACE:
					case RESOURCE:
					case RESOURCE_MANAGER_LOCATION:
					case RESTRICTED_USER:
					case RETENTION:
					case ROBUST:
					case ROOT:
					case ROUTE:
					case ROW:
					case ROW_NUMBER:
					case ROWGUID:
					case ROWS:
					case SAMPLE:
					case SCHEMABINDING:
					case SCOPED:
					case SCROLL:
					case SCROLL_LOCKS:
					case SEARCH:
					case SECONDARY:
					case SECONDARY_ONLY:
					case SECONDARY_ROLE:
					case SECONDS:
					case SECRET:
					case SECURITY_LOG:
					case SEEDING_MODE:
					case SELF:
					case SEMI_SENSITIVE:
					case SEND:
					case SENT:
					case SERIALIZABLE:
					case SESSION_TIMEOUT:
					case SETERROR:
					case SHARE:
					case SHOWPLAN:
					case SIGNATURE:
					case SIMPLE:
					case SINGLE_USER:
					case SIZE:
					case SMALLINT:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STANDBY:
					case START_DATE:
					case STATIC:
					case STATS_STREAM:
					case STATUS:
					case STDEV:
					case STDEVP:
					case STOPLIST:
					case STUFF:
					case SUBJECT:
					case SUM:
					case SUSPEND:
					case SYMMETRIC:
					case SYNCHRONOUS_COMMIT:
					case SYNONYM:
					case TAKE:
					case TARGET_RECOVERY_TIME:
					case TB:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TIMEOUT:
					case TIMER:
					case TINYINT:
					case TORN_PAGE_DETECTION:
					case TRANSFORM_NOISE_WORDS:
					case TRIPLE_DES:
					case TRIPLE_DES_3KEY:
					case TRUSTWORTHY:
					case TRY:
					case TSQL:
					case TWO_DIGIT_YEAR_CUTOFF:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case UNLIMITED:
					case USING:
					case VALID_XML:
					case VALIDATION:
					case VALUE:
					case VAR:
					case VARP:
					case VIEW_METADATA:
					case VIEWS:
					case WAIT:
					case WELL_FORMED_XML:
					case WORK:
					case WORKLOAD:
					case XML:
					case XMLNAMESPACES:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case ID:
						{
						setState(8311);
						id();
						}
						break;
					case LOCAL_ID:
						{
						setState(8312);
						match(LOCAL_ID);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(8318);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1161,_ctx) ) {
					case 1:
						{
						setState(8315);
						match(WITH);
						setState(8316);
						match(MARK);
						setState(8317);
						match(STRING);
						}
						break;
					}
					}
					break;
				}
				setState(8323);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1163,_ctx) ) {
				case 1:
					{
					setState(8322);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8325);
				match(COMMIT);
				setState(8326);
				_la = _input.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8339);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1166,_ctx) ) {
				case 1:
					{
					setState(8329);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CALLED:
					case DATA_COMPRESSION:
					case EVENTDATA:
					case FILENAME:
					case FILLFACTOR:
					case FORCESEEK:
					case INIT:
					case KEY:
					case MASTER:
					case MAX_MEMORY:
					case OFFSETS:
					case PAGE:
					case PUBLIC:
					case R:
					case RAW:
					case RETURN:
					case RETURNS:
					case ROWCOUNT:
					case SAFETY:
					case SERVER:
					case SID:
					case SOURCE:
					case STATE:
					case START:
					case TARGET:
					case ABSOLUTE:
					case ACCENT_SENSITIVITY:
					case ACTION:
					case ACTIVATION:
					case ACTIVE:
					case ADDRESS:
					case AES_128:
					case AES_192:
					case AES_256:
					case AFFINITY:
					case AFTER:
					case AGGREGATE:
					case ALGORITHM:
					case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
					case ALLOW_SNAPSHOT_ISOLATION:
					case ALLOWED:
					case ANSI_NULL_DEFAULT:
					case ANSI_NULLS:
					case ANSI_PADDING:
					case ANSI_WARNINGS:
					case APPLICATION_LOG:
					case APPLY:
					case ARITHABORT:
					case ASSEMBLY:
					case AUDIT:
					case AUDIT_GUID:
					case AUTO:
					case AUTO_CLEANUP:
					case AUTO_CLOSE:
					case AUTO_CREATE_STATISTICS:
					case AUTO_SHRINK:
					case AUTO_UPDATE_STATISTICS:
					case AUTO_UPDATE_STATISTICS_ASYNC:
					case AVAILABILITY:
					case AVG:
					case BACKUP_PRIORITY:
					case BEGIN_DIALOG:
					case BIGINT:
					case BINARY_BASE64:
					case BINARY_CHECKSUM:
					case BINDING:
					case BLOB_STORAGE:
					case BROKER:
					case BROKER_INSTANCE:
					case BULK_LOGGED:
					case CALLER:
					case CAP_CPU_PERCENT:
					case CAST:
					case CATALOG:
					case CATCH:
					case CHANGE_RETENTION:
					case CHANGE_TRACKING:
					case CHECKSUM:
					case CHECKSUM_AGG:
					case CLEANUP:
					case COLLECTION:
					case COLUMN_MASTER_KEY:
					case COMMITTED:
					case COMPATIBILITY_LEVEL:
					case CONCAT:
					case CONCAT_NULL_YIELDS_NULL:
					case CONTENT:
					case CONTROL:
					case COOKIE:
					case COUNT:
					case COUNT_BIG:
					case COUNTER:
					case CPU:
					case CREATE_NEW:
					case CREATION_DISPOSITION:
					case CREDENTIAL:
					case CRYPTOGRAPHIC:
					case CURSOR_CLOSE_ON_COMMIT:
					case CURSOR_DEFAULT:
					case DATE_CORRELATION_OPTIMIZATION:
					case DATEADD:
					case DATEDIFF:
					case DATENAME:
					case DATEPART:
					case DAYS:
					case DB_CHAINING:
					case DB_FAILOVER:
					case DECRYPTION:
					case DEFAULT_DOUBLE_QUOTE:
					case DEFAULT_FULLTEXT_LANGUAGE:
					case DEFAULT_LANGUAGE:
					case DELAY:
					case DELAYED_DURABILITY:
					case DELETED:
					case DENSE_RANK:
					case DEPENDENTS:
					case DES:
					case DESCRIPTION:
					case DESX:
					case DHCP:
					case DIALOG:
					case DIRECTORY_NAME:
					case DISABLE:
					case DISABLE_BROKER:
					case DISABLED:
					case DISK_DRIVE:
					case DOCUMENT:
					case DYNAMIC:
					case EMERGENCY:
					case EMPTY:
					case ENABLE:
					case ENABLE_BROKER:
					case ENCRYPTED_VALUE:
					case ENCRYPTION:
					case ENDPOINT_URL:
					case ERROR_BROKER_CONVERSATIONS:
					case EXCLUSIVE:
					case EXECUTABLE:
					case EXIST:
					case EXPAND:
					case EXPIRY_DATE:
					case EXPLICIT:
					case FAIL_OPERATION:
					case FAILOVER_MODE:
					case FAILURE:
					case FAILURE_CONDITION_LEVEL:
					case FAST:
					case FAST_FORWARD:
					case FILEGROUP:
					case FILEGROWTH:
					case FILEPATH:
					case FILESTREAM:
					case FILTER:
					case FIRST:
					case FIRST_VALUE:
					case FOLLOWING:
					case FORCE:
					case FORCE_FAILOVER_ALLOW_DATA_LOSS:
					case FORCED:
					case FORMAT:
					case FORWARD_ONLY:
					case FULLSCAN:
					case FULLTEXT:
					case GB:
					case GETDATE:
					case GETUTCDATE:
					case GLOBAL:
					case GO:
					case GROUP_MAX_REQUESTS:
					case GROUPING:
					case GROUPING_ID:
					case HADR:
					case HASH:
					case HEALTH_CHECK_TIMEOUT:
					case HIGH:
					case HONOR_BROKER_PRIORITY:
					case HOURS:
					case IDENTITY_VALUE:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMMEDIATE:
					case IMPERSONATE:
					case IMPORTANCE:
					case INCREMENTAL:
					case INITIATOR:
					case INPUT:
					case INSENSITIVE:
					case INSERTED:
					case INT:
					case IP:
					case ISOLATION:
					case KB:
					case KEEP:
					case KEEPFIXED:
					case KEY_SOURCE:
					case KEYS:
					case KEYSET:
					case LAG:
					case LAST:
					case LAST_VALUE:
					case LEAD:
					case LEVEL:
					case LIST:
					case LISTENER:
					case LISTENER_URL:
					case LOB_COMPACTION:
					case LOCAL:
					case LOCATION:
					case LOCK:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case LOW:
					case MANUAL:
					case MARK:
					case MATERIALIZED:
					case MAX:
					case MAX_CPU_PERCENT:
					case MAX_DOP:
					case MAX_FILES:
					case MAX_IOPS_PER_VOLUME:
					case MAX_MEMORY_PERCENT:
					case MAX_PROCESSES:
					case MAX_QUEUE_READERS:
					case MAX_ROLLOVER_FILES:
					case MAXDOP:
					case MAXRECURSION:
					case MAXSIZE:
					case MB:
					case MEDIUM:
					case MEMORY_OPTIMIZED_DATA:
					case MESSAGE:
					case MIN:
					case MIN_ACTIVE_ROWVERSION:
					case MIN_CPU_PERCENT:
					case MIN_IOPS_PER_VOLUME:
					case MIN_MEMORY_PERCENT:
					case MINUTES:
					case MIRROR_ADDRESS:
					case MIXED_PAGE_ALLOCATION:
					case MODE:
					case MODIFY:
					case MOVE:
					case MULTI_USER:
					case NAME:
					case NESTED_TRIGGERS:
					case NEW_ACCOUNT:
					case NEW_BROKER:
					case NEW_PASSWORD:
					case NEXT:
					case NO:
					case NO_TRUNCATE:
					case NO_WAIT:
					case NOCOUNT:
					case NODES:
					case NOEXPAND:
					case NON_TRANSACTED_ACCESS:
					case NORECOMPUTE:
					case NORECOVERY:
					case NOWAIT:
					case NTILE:
					case NUMANODE:
					case NUMBER:
					case NUMERIC_ROUNDABORT:
					case OBJECT:
					case OFFLINE:
					case OFFSET:
					case OLD_ACCOUNT:
					case ONLINE:
					case ONLY:
					case OPEN_EXISTING:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OWNER:
					case PAGE_VERIFY:
					case PARAMETERIZATION:
					case PARTITION:
					case PARTITIONS:
					case PARTNER:
					case PATH:
					case POISON_MESSAGE_HANDLING:
					case POOL:
					case PORT:
					case PRECEDING:
					case PRIMARY_ROLE:
					case PRIOR:
					case PRIORITY:
					case PRIORITY_LEVEL:
					case PRIVATE:
					case PRIVATE_KEY:
					case PRIVILEGES:
					case PROCEDURE_NAME:
					case PROPERTY:
					case PROVIDER:
					case PROVIDER_KEY_NAME:
					case QUERY:
					case QUEUE:
					case QUEUE_DELAY:
					case QUOTED_IDENTIFIER:
					case RANGE:
					case RANK:
					case RC2:
					case RC4:
					case RC4_128:
					case READ_COMMITTED_SNAPSHOT:
					case READ_ONLY:
					case READ_ONLY_ROUTING_LIST:
					case READ_WRITE:
					case READONLY:
					case REBUILD:
					case RECEIVE:
					case RECOMPILE:
					case RECOVERY:
					case RECURSIVE_TRIGGERS:
					case RELATIVE:
					case REMOTE:
					case REMOTE_SERVICE_NAME:
					case REMOVE:
					case REORGANIZE:
					case REPEATABLE:
					case REPLICA:
					case REQUEST_MAX_CPU_TIME_SEC:
					case REQUEST_MAX_MEMORY_GRANT_PERCENT:
					case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
					case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					case RESERVE_DISK_SPACE:
					case RESOURCE:
					case RESOURCE_MANAGER_LOCATION:
					case RESTRICTED_USER:
					case RETENTION:
					case ROBUST:
					case ROOT:
					case ROUTE:
					case ROW:
					case ROW_NUMBER:
					case ROWGUID:
					case ROWS:
					case SAMPLE:
					case SCHEMABINDING:
					case SCOPED:
					case SCROLL:
					case SCROLL_LOCKS:
					case SEARCH:
					case SECONDARY:
					case SECONDARY_ONLY:
					case SECONDARY_ROLE:
					case SECONDS:
					case SECRET:
					case SECURITY_LOG:
					case SEEDING_MODE:
					case SELF:
					case SEMI_SENSITIVE:
					case SEND:
					case SENT:
					case SERIALIZABLE:
					case SESSION_TIMEOUT:
					case SETERROR:
					case SHARE:
					case SHOWPLAN:
					case SIGNATURE:
					case SIMPLE:
					case SINGLE_USER:
					case SIZE:
					case SMALLINT:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STANDBY:
					case START_DATE:
					case STATIC:
					case STATS_STREAM:
					case STATUS:
					case STDEV:
					case STDEVP:
					case STOPLIST:
					case STUFF:
					case SUBJECT:
					case SUM:
					case SUSPEND:
					case SYMMETRIC:
					case SYNCHRONOUS_COMMIT:
					case SYNONYM:
					case TAKE:
					case TARGET_RECOVERY_TIME:
					case TB:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TIMEOUT:
					case TIMER:
					case TINYINT:
					case TORN_PAGE_DETECTION:
					case TRANSFORM_NOISE_WORDS:
					case TRIPLE_DES:
					case TRIPLE_DES_3KEY:
					case TRUSTWORTHY:
					case TRY:
					case TSQL:
					case TWO_DIGIT_YEAR_CUTOFF:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case UNLIMITED:
					case USING:
					case VALID_XML:
					case VALIDATION:
					case VALUE:
					case VAR:
					case VARP:
					case VIEW_METADATA:
					case VIEWS:
					case WAIT:
					case WELL_FORMED_XML:
					case WORK:
					case WORKLOAD:
					case XML:
					case XMLNAMESPACES:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case ID:
						{
						setState(8327);
						id();
						}
						break;
					case LOCAL_ID:
						{
						setState(8328);
						match(LOCAL_ID);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(8337);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1165,_ctx) ) {
					case 1:
						{
						setState(8331);
						match(WITH);
						setState(8332);
						match(LR_BRACKET);
						setState(8333);
						match(DELAYED_DURABILITY);
						setState(8334);
						match(EQUAL);
						setState(8335);
						_la = _input.LA(1);
						if ( !(_la==OFF || _la==ON) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(8336);
						match(RR_BRACKET);
						}
						break;
					}
					}
					break;
				}
				setState(8342);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1167,_ctx) ) {
				case 1:
					{
					setState(8341);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8344);
				match(COMMIT);
				setState(8346);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1168,_ctx) ) {
				case 1:
					{
					setState(8345);
					match(WORK);
					}
					break;
				}
				setState(8349);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1169,_ctx) ) {
				case 1:
					{
					setState(8348);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8351);
				match(COMMIT);
				setState(8352);
				id();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8353);
				match(ROLLBACK);
				setState(8354);
				id();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8355);
				match(ROLLBACK);
				setState(8356);
				_la = _input.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8359);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1170,_ctx) ) {
				case 1:
					{
					setState(8357);
					id();
					}
					break;
				case 2:
					{
					setState(8358);
					match(LOCAL_ID);
					}
					break;
				}
				setState(8362);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1171,_ctx) ) {
				case 1:
					{
					setState(8361);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(8364);
				match(ROLLBACK);
				setState(8366);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1172,_ctx) ) {
				case 1:
					{
					setState(8365);
					match(WORK);
					}
					break;
				}
				setState(8369);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1173,_ctx) ) {
				case 1:
					{
					setState(8368);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(8371);
				match(SAVE);
				setState(8372);
				_la = _input.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8375);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1174,_ctx) ) {
				case 1:
					{
					setState(8373);
					id();
					}
					break;
				case 2:
					{
					setState(8374);
					match(LOCAL_ID);
					}
					break;
				}
				setState(8378);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1175,_ctx) ) {
				case 1:
					{
					setState(8377);
					match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Go_statementContext extends ParserRuleContext {
		public Token count;
		public TerminalNode GO() { return getToken(TSqlParser.GO, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public Go_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_go_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterGo_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitGo_statement(this);
		}
	}

	public final Go_statementContext go_statement() throws RecognitionException {
		Go_statementContext _localctx = new Go_statementContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_go_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8382);
			match(GO);
			setState(8384);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1177,_ctx) ) {
			case 1:
				{
				setState(8383);
				((Go_statementContext)_localctx).count = match(DECIMAL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Use_statementContext extends ParserRuleContext {
		public IdContext database;
		public TerminalNode USE() { return getToken(TSqlParser.USE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Use_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_use_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterUse_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitUse_statement(this);
		}
	}

	public final Use_statementContext use_statement() throws RecognitionException {
		Use_statementContext _localctx = new Use_statementContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_use_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8386);
			match(USE);
			setState(8387);
			((Use_statementContext)_localctx).database = id();
			setState(8389);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1178,_ctx) ) {
			case 1:
				{
				setState(8388);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Setuser_statementContext extends ParserRuleContext {
		public Token user;
		public TerminalNode SETUSER() { return getToken(TSqlParser.SETUSER, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Setuser_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setuser_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSetuser_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSetuser_statement(this);
		}
	}

	public final Setuser_statementContext setuser_statement() throws RecognitionException {
		Setuser_statementContext _localctx = new Setuser_statementContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_setuser_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8391);
			match(SETUSER);
			setState(8393);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1179,_ctx) ) {
			case 1:
				{
				setState(8392);
				((Setuser_statementContext)_localctx).user = match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dbcc_clauseContext extends ParserRuleContext {
		public Simple_idContext name;
		public TerminalNode DBCC() { return getToken(TSqlParser.DBCC, 0); }
		public Simple_idContext simple_id() {
			return getRuleContext(Simple_idContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public Dbcc_optionsContext dbcc_options() {
			return getRuleContext(Dbcc_optionsContext.class,0);
		}
		public Dbcc_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dbcc_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDbcc_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDbcc_clause(this);
		}
	}

	public final Dbcc_clauseContext dbcc_clause() throws RecognitionException {
		Dbcc_clauseContext _localctx = new Dbcc_clauseContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_dbcc_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8395);
			match(DBCC);
			setState(8396);
			((Dbcc_clauseContext)_localctx).name = simple_id();
			setState(8401);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1180,_ctx) ) {
			case 1:
				{
				setState(8397);
				match(LR_BRACKET);
				setState(8398);
				expression_list();
				setState(8399);
				match(RR_BRACKET);
				}
				break;
			}
			setState(8405);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1181,_ctx) ) {
			case 1:
				{
				setState(8403);
				match(WITH);
				setState(8404);
				dbcc_options();
				}
				break;
			}
			setState(8408);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1182,_ctx) ) {
			case 1:
				{
				setState(8407);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dbcc_optionsContext extends ParserRuleContext {
		public List<Simple_idContext> simple_id() {
			return getRuleContexts(Simple_idContext.class);
		}
		public Simple_idContext simple_id(int i) {
			return getRuleContext(Simple_idContext.class,i);
		}
		public Dbcc_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dbcc_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDbcc_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDbcc_options(this);
		}
	}

	public final Dbcc_optionsContext dbcc_options() throws RecognitionException {
		Dbcc_optionsContext _localctx = new Dbcc_optionsContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_dbcc_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8410);
			simple_id();
			setState(8413);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(8411);
				match(COMMA);
				setState(8412);
				simple_id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_clauseContext extends ParserRuleContext {
		public Token clause;
		public TerminalNode EXECUTE() { return getToken(TSqlParser.EXECUTE, 0); }
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public TerminalNode CALLER() { return getToken(TSqlParser.CALLER, 0); }
		public TerminalNode SELF() { return getToken(TSqlParser.SELF, 0); }
		public TerminalNode OWNER() { return getToken(TSqlParser.OWNER, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Execute_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterExecute_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitExecute_clause(this);
		}
	}

	public final Execute_clauseContext execute_clause() throws RecognitionException {
		Execute_clauseContext _localctx = new Execute_clauseContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_execute_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8415);
			match(EXECUTE);
			setState(8416);
			match(AS);
			setState(8417);
			((Execute_clauseContext)_localctx).clause = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==CALLER || _la==OWNER || _la==SELF || _la==STRING) ) {
				((Execute_clauseContext)_localctx).clause = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_localContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Declare_localContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_local; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDeclare_local(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDeclare_local(this);
		}
	}

	public final Declare_localContext declare_local() throws RecognitionException {
		Declare_localContext _localctx = new Declare_localContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_declare_local);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8419);
			match(LOCAL_ID);
			setState(8421);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(8420);
				match(AS);
				}
			}

			setState(8423);
			data_type();
			setState(8426);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL) {
				{
				setState(8424);
				match(EQUAL);
				setState(8425);
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_type_definitionContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(TSqlParser.TABLE, 0); }
		public Column_def_table_constraintsContext column_def_table_constraints() {
			return getRuleContext(Column_def_table_constraintsContext.class,0);
		}
		public Table_type_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_type_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTable_type_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTable_type_definition(this);
		}
	}

	public final Table_type_definitionContext table_type_definition() throws RecognitionException {
		Table_type_definitionContext _localctx = new Table_type_definitionContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_table_type_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8428);
			match(TABLE);
			setState(8429);
			match(LR_BRACKET);
			setState(8430);
			column_def_table_constraints();
			setState(8431);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_type_definitionContext extends ParserRuleContext {
		public TerminalNode XML() { return getToken(TSqlParser.XML, 0); }
		public Xml_schema_collectionContext xml_schema_collection() {
			return getRuleContext(Xml_schema_collectionContext.class,0);
		}
		public TerminalNode CONTENT() { return getToken(TSqlParser.CONTENT, 0); }
		public TerminalNode DOCUMENT() { return getToken(TSqlParser.DOCUMENT, 0); }
		public Xml_type_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_type_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterXml_type_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitXml_type_definition(this);
		}
	}

	public final Xml_type_definitionContext xml_type_definition() throws RecognitionException {
		Xml_type_definitionContext _localctx = new Xml_type_definitionContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_xml_type_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8433);
			match(XML);
			setState(8434);
			match(LR_BRACKET);
			setState(8436);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONTENT || _la==DOCUMENT) {
				{
				setState(8435);
				_la = _input.LA(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(8438);
			xml_schema_collection();
			setState(8439);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_schema_collectionContext extends ParserRuleContext {
		public List<TerminalNode> ID() { return getTokens(TSqlParser.ID); }
		public TerminalNode ID(int i) {
			return getToken(TSqlParser.ID, i);
		}
		public Xml_schema_collectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_schema_collection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterXml_schema_collection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitXml_schema_collection(this);
		}
	}

	public final Xml_schema_collectionContext xml_schema_collection() throws RecognitionException {
		Xml_schema_collectionContext _localctx = new Xml_schema_collectionContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_xml_schema_collection);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8441);
			match(ID);
			setState(8442);
			match(DOT);
			setState(8443);
			match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_def_table_constraintsContext extends ParserRuleContext {
		public List<Column_def_table_constraintContext> column_def_table_constraint() {
			return getRuleContexts(Column_def_table_constraintContext.class);
		}
		public Column_def_table_constraintContext column_def_table_constraint(int i) {
			return getRuleContext(Column_def_table_constraintContext.class,i);
		}
		public Column_def_table_constraintsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_def_table_constraints; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterColumn_def_table_constraints(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitColumn_def_table_constraints(this);
		}
	}

	public final Column_def_table_constraintsContext column_def_table_constraints() throws RecognitionException {
		Column_def_table_constraintsContext _localctx = new Column_def_table_constraintsContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_column_def_table_constraints);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8445);
			column_def_table_constraint();
			setState(8452);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1188,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8447);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(8446);
						match(COMMA);
						}
					}

					setState(8449);
					column_def_table_constraint();
					}
					} 
				}
				setState(8454);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1188,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_def_table_constraintContext extends ParserRuleContext {
		public Column_definitionContext column_definition() {
			return getRuleContext(Column_definitionContext.class,0);
		}
		public Materialized_column_definitionContext materialized_column_definition() {
			return getRuleContext(Materialized_column_definitionContext.class,0);
		}
		public Table_constraintContext table_constraint() {
			return getRuleContext(Table_constraintContext.class,0);
		}
		public Column_def_table_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_def_table_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterColumn_def_table_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitColumn_def_table_constraint(this);
		}
	}

	public final Column_def_table_constraintContext column_def_table_constraint() throws RecognitionException {
		Column_def_table_constraintContext _localctx = new Column_def_table_constraintContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_column_def_table_constraint);
		try {
			setState(8458);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1189,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8455);
				column_definition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8456);
				materialized_column_definition();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8457);
				table_constraint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_definitionContext extends ParserRuleContext {
		public IdContext constraint;
		public Token seed;
		public Token increment;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(TSqlParser.COLLATE, 0); }
		public Null_notnullContext null_notnull() {
			return getRuleContext(Null_notnullContext.class,0);
		}
		public List<Null_or_defaultContext> null_or_default() {
			return getRuleContexts(Null_or_defaultContext.class);
		}
		public Null_or_defaultContext null_or_default(int i) {
			return getRuleContext(Null_or_defaultContext.class,i);
		}
		public TerminalNode IDENTITY() { return getToken(TSqlParser.IDENTITY, 0); }
		public TerminalNode ROWGUIDCOL() { return getToken(TSqlParser.ROWGUIDCOL, 0); }
		public List<Column_constraintContext> column_constraint() {
			return getRuleContexts(Column_constraintContext.class);
		}
		public Column_constraintContext column_constraint(int i) {
			return getRuleContext(Column_constraintContext.class,i);
		}
		public TerminalNode CONSTRAINT() { return getToken(TSqlParser.CONSTRAINT, 0); }
		public TerminalNode NOT() { return getToken(TSqlParser.NOT, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode REPLICATION() { return getToken(TSqlParser.REPLICATION, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public Column_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterColumn_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitColumn_definition(this);
		}
	}

	public final Column_definitionContext column_definition() throws RecognitionException {
		Column_definitionContext _localctx = new Column_definitionContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_column_definition);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8460);
			id();
			setState(8464);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case DOUBLE:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case START:
			case TARGET:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				setState(8461);
				data_type();
				}
				break;
			case AS:
				{
				setState(8462);
				match(AS);
				setState(8463);
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(8468);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLLATE) {
				{
				setState(8466);
				match(COLLATE);
				setState(8467);
				id();
				}
			}

			setState(8471);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1192,_ctx) ) {
			case 1:
				{
				setState(8470);
				null_notnull();
				}
				break;
			}
			setState(8494);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1197,_ctx) ) {
			case 1:
				{
				setState(8475);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(8473);
					match(CONSTRAINT);
					setState(8474);
					((Column_definitionContext)_localctx).constraint = id();
					}
				}

				setState(8477);
				null_or_default();
				setState(8479);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1194,_ctx) ) {
				case 1:
					{
					setState(8478);
					null_or_default();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(8481);
				match(IDENTITY);
				setState(8487);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1195,_ctx) ) {
				case 1:
					{
					setState(8482);
					match(LR_BRACKET);
					setState(8483);
					((Column_definitionContext)_localctx).seed = match(DECIMAL);
					setState(8484);
					match(COMMA);
					setState(8485);
					((Column_definitionContext)_localctx).increment = match(DECIMAL);
					setState(8486);
					match(RR_BRACKET);
					}
					break;
				}
				setState(8492);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1196,_ctx) ) {
				case 1:
					{
					setState(8489);
					match(NOT);
					setState(8490);
					match(FOR);
					setState(8491);
					match(REPLICATION);
					}
					break;
				}
				}
				break;
			}
			setState(8497);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ROWGUIDCOL) {
				{
				setState(8496);
				match(ROWGUIDCOL);
				}
			}

			setState(8502);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1199,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8499);
					column_constraint();
					}
					} 
				}
				setState(8504);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1199,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Materialized_column_definitionContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode COMPUTE() { return getToken(TSqlParser.COMPUTE, 0); }
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public TerminalNode MATERIALIZED() { return getToken(TSqlParser.MATERIALIZED, 0); }
		public TerminalNode NOT() { return getToken(TSqlParser.NOT, 0); }
		public Materialized_column_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_materialized_column_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterMaterialized_column_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitMaterialized_column_definition(this);
		}
	}

	public final Materialized_column_definitionContext materialized_column_definition() throws RecognitionException {
		Materialized_column_definitionContext _localctx = new Materialized_column_definitionContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_materialized_column_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8505);
			id();
			setState(8506);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==COMPUTE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(8507);
			expression(0);
			setState(8511);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1200,_ctx) ) {
			case 1:
				{
				setState(8508);
				match(MATERIALIZED);
				}
				break;
			case 2:
				{
				setState(8509);
				match(NOT);
				setState(8510);
				match(MATERIALIZED);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_constraintContext extends ParserRuleContext {
		public IdContext constraint;
		public Column_name_listContext pk;
		public TerminalNode CHECK() { return getToken(TSqlParser.CHECK, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode REFERENCES() { return getToken(TSqlParser.REFERENCES, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Null_notnullContext null_notnull() {
			return getRuleContext(Null_notnullContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(TSqlParser.CONSTRAINT, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode PRIMARY() { return getToken(TSqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode UNIQUE() { return getToken(TSqlParser.UNIQUE, 0); }
		public ClusteredContext clustered() {
			return getRuleContext(ClusteredContext.class,0);
		}
		public Index_optionsContext index_options() {
			return getRuleContext(Index_optionsContext.class,0);
		}
		public TerminalNode NOT() { return getToken(TSqlParser.NOT, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode REPLICATION() { return getToken(TSqlParser.REPLICATION, 0); }
		public TerminalNode FOREIGN() { return getToken(TSqlParser.FOREIGN, 0); }
		public On_deleteContext on_delete() {
			return getRuleContext(On_deleteContext.class,0);
		}
		public On_updateContext on_update() {
			return getRuleContext(On_updateContext.class,0);
		}
		public Column_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterColumn_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitColumn_constraint(this);
		}
	}

	public final Column_constraintContext column_constraint() throws RecognitionException {
		Column_constraintContext _localctx = new Column_constraintContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_column_constraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8515);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(8513);
				match(CONSTRAINT);
				setState(8514);
				((Column_constraintContext)_localctx).constraint = id();
				}
			}

			setState(8554);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRIMARY:
			case UNIQUE:
				{
				setState(8520);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PRIMARY:
					{
					setState(8517);
					match(PRIMARY);
					setState(8518);
					match(KEY);
					}
					break;
				case UNIQUE:
					{
					setState(8519);
					match(UNIQUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8523);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CLUSTERED || _la==NONCLUSTERED) {
					{
					setState(8522);
					clustered();
					}
				}

				setState(8526);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1204,_ctx) ) {
				case 1:
					{
					setState(8525);
					index_options();
					}
					break;
				}
				}
				break;
			case CHECK:
				{
				setState(8528);
				match(CHECK);
				setState(8532);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(8529);
					match(NOT);
					setState(8530);
					match(FOR);
					setState(8531);
					match(REPLICATION);
					}
				}

				setState(8534);
				match(LR_BRACKET);
				setState(8535);
				search_condition();
				setState(8536);
				match(RR_BRACKET);
				}
				break;
			case FOREIGN:
			case REFERENCES:
				{
				setState(8540);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOREIGN) {
					{
					setState(8538);
					match(FOREIGN);
					setState(8539);
					match(KEY);
					}
				}

				setState(8542);
				match(REFERENCES);
				setState(8543);
				table_name();
				setState(8544);
				match(LR_BRACKET);
				setState(8545);
				((Column_constraintContext)_localctx).pk = column_name_list();
				setState(8546);
				match(RR_BRACKET);
				setState(8548);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1207,_ctx) ) {
				case 1:
					{
					setState(8547);
					on_delete();
					}
					break;
				}
				setState(8551);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(8550);
					on_update();
					}
				}

				}
				break;
			case NOT:
			case NULL:
				{
				setState(8553);
				null_notnull();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_constraintContext extends ParserRuleContext {
		public IdContext constraint;
		public Column_name_listContext fk;
		public Column_name_listContext pk;
		public Column_name_list_with_orderContext column_name_list_with_order() {
			return getRuleContext(Column_name_list_with_orderContext.class,0);
		}
		public TerminalNode CHECK() { return getToken(TSqlParser.CHECK, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode FOREIGN() { return getToken(TSqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode REFERENCES() { return getToken(TSqlParser.REFERENCES, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(TSqlParser.CONSTRAINT, 0); }
		public List<Column_name_listContext> column_name_list() {
			return getRuleContexts(Column_name_listContext.class);
		}
		public Column_name_listContext column_name_list(int i) {
			return getRuleContext(Column_name_listContext.class,i);
		}
		public TerminalNode PRIMARY() { return getToken(TSqlParser.PRIMARY, 0); }
		public TerminalNode UNIQUE() { return getToken(TSqlParser.UNIQUE, 0); }
		public ClusteredContext clustered() {
			return getRuleContext(ClusteredContext.class,0);
		}
		public Index_optionsContext index_options() {
			return getRuleContext(Index_optionsContext.class,0);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode NOT() { return getToken(TSqlParser.NOT, 0); }
		public TerminalNode REPLICATION() { return getToken(TSqlParser.REPLICATION, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public List<TerminalNode> PLUS() { return getTokens(TSqlParser.PLUS); }
		public TerminalNode PLUS(int i) {
			return getToken(TSqlParser.PLUS, i);
		}
		public List<Function_callContext> function_call() {
			return getRuleContexts(Function_callContext.class);
		}
		public Function_callContext function_call(int i) {
			return getRuleContext(Function_callContext.class,i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public On_deleteContext on_delete() {
			return getRuleContext(On_deleteContext.class,0);
		}
		public On_updateContext on_update() {
			return getRuleContext(On_updateContext.class,0);
		}
		public Table_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTable_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTable_constraint(this);
		}
	}

	public final Table_constraintContext table_constraint() throws RecognitionException {
		Table_constraintContext _localctx = new Table_constraintContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_table_constraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8558);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(8556);
				match(CONSTRAINT);
				setState(8557);
				((Table_constraintContext)_localctx).constraint = id();
				}
			}

			setState(8624);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRIMARY:
			case UNIQUE:
				{
				setState(8563);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PRIMARY:
					{
					setState(8560);
					match(PRIMARY);
					setState(8561);
					match(KEY);
					}
					break;
				case UNIQUE:
					{
					setState(8562);
					match(UNIQUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8566);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CLUSTERED || _la==NONCLUSTERED) {
					{
					setState(8565);
					clustered();
					}
				}

				setState(8568);
				match(LR_BRACKET);
				setState(8569);
				column_name_list_with_order();
				setState(8570);
				match(RR_BRACKET);
				setState(8572);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1213,_ctx) ) {
				case 1:
					{
					setState(8571);
					index_options();
					}
					break;
				}
				setState(8576);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(8574);
					match(ON);
					setState(8575);
					id();
					}
				}

				}
				break;
			case CHECK:
				{
				setState(8578);
				match(CHECK);
				setState(8582);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(8579);
					match(NOT);
					setState(8580);
					match(FOR);
					setState(8581);
					match(REPLICATION);
					}
				}

				setState(8584);
				match(LR_BRACKET);
				setState(8585);
				search_condition();
				setState(8586);
				match(RR_BRACKET);
				}
				break;
			case DEFAULT:
				{
				setState(8588);
				match(DEFAULT);
				setState(8590);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(8589);
					match(LR_BRACKET);
					}
				}

				setState(8596); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(8596);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case STRING:
						{
						setState(8592);
						match(STRING);
						}
						break;
					case PLUS:
						{
						setState(8593);
						match(PLUS);
						}
						break;
					case CALLED:
					case COALESCE:
					case CONVERT:
					case CURRENT_TIMESTAMP:
					case CURRENT_USER:
					case DATA_COMPRESSION:
					case EVENTDATA:
					case FILENAME:
					case FILLFACTOR:
					case FORCESEEK:
					case IDENTITY:
					case INIT:
					case ISNULL:
					case KEY:
					case LEFT:
					case MASTER:
					case MAX_MEMORY:
					case NULLIF:
					case OFFSETS:
					case PAGE:
					case PUBLIC:
					case R:
					case RAW:
					case RETURN:
					case RETURNS:
					case RIGHT:
					case ROWCOUNT:
					case SAFETY:
					case SERVER:
					case SESSION_USER:
					case SID:
					case SOURCE:
					case STATE:
					case START:
					case SYSTEM_USER:
					case TARGET:
					case ABSOLUTE:
					case ACCENT_SENSITIVITY:
					case ACTION:
					case ACTIVATION:
					case ACTIVE:
					case ADDRESS:
					case AES_128:
					case AES_192:
					case AES_256:
					case AFFINITY:
					case AFTER:
					case AGGREGATE:
					case ALGORITHM:
					case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
					case ALLOW_SNAPSHOT_ISOLATION:
					case ALLOWED:
					case ANSI_NULL_DEFAULT:
					case ANSI_NULLS:
					case ANSI_PADDING:
					case ANSI_WARNINGS:
					case APPLICATION_LOG:
					case APPLY:
					case ARITHABORT:
					case ASSEMBLY:
					case AUDIT:
					case AUDIT_GUID:
					case AUTO:
					case AUTO_CLEANUP:
					case AUTO_CLOSE:
					case AUTO_CREATE_STATISTICS:
					case AUTO_SHRINK:
					case AUTO_UPDATE_STATISTICS:
					case AUTO_UPDATE_STATISTICS_ASYNC:
					case AVAILABILITY:
					case AVG:
					case BACKUP_PRIORITY:
					case BEGIN_DIALOG:
					case BIGINT:
					case BINARY_BASE64:
					case BINARY_CHECKSUM:
					case BINDING:
					case BLOB_STORAGE:
					case BROKER:
					case BROKER_INSTANCE:
					case BULK_LOGGED:
					case CALLER:
					case CAP_CPU_PERCENT:
					case CAST:
					case CATALOG:
					case CATCH:
					case CHANGE_RETENTION:
					case CHANGE_TRACKING:
					case CHECKSUM:
					case CHECKSUM_AGG:
					case CLEANUP:
					case COLLECTION:
					case COLUMN_MASTER_KEY:
					case COMMITTED:
					case COMPATIBILITY_LEVEL:
					case CONCAT:
					case CONCAT_NULL_YIELDS_NULL:
					case CONTENT:
					case CONTROL:
					case COOKIE:
					case COUNT:
					case COUNT_BIG:
					case COUNTER:
					case CPU:
					case CREATE_NEW:
					case CREATION_DISPOSITION:
					case CREDENTIAL:
					case CRYPTOGRAPHIC:
					case CURSOR_CLOSE_ON_COMMIT:
					case CURSOR_DEFAULT:
					case DATE_CORRELATION_OPTIMIZATION:
					case DATEADD:
					case DATEDIFF:
					case DATENAME:
					case DATEPART:
					case DAYS:
					case DB_CHAINING:
					case DB_FAILOVER:
					case DECRYPTION:
					case DEFAULT_DOUBLE_QUOTE:
					case DEFAULT_FULLTEXT_LANGUAGE:
					case DEFAULT_LANGUAGE:
					case DELAY:
					case DELAYED_DURABILITY:
					case DELETED:
					case DENSE_RANK:
					case DEPENDENTS:
					case DES:
					case DESCRIPTION:
					case DESX:
					case DHCP:
					case DIALOG:
					case DIRECTORY_NAME:
					case DISABLE:
					case DISABLE_BROKER:
					case DISABLED:
					case DISK_DRIVE:
					case DOCUMENT:
					case DYNAMIC:
					case EMERGENCY:
					case EMPTY:
					case ENABLE:
					case ENABLE_BROKER:
					case ENCRYPTED_VALUE:
					case ENCRYPTION:
					case ENDPOINT_URL:
					case ERROR_BROKER_CONVERSATIONS:
					case EXCLUSIVE:
					case EXECUTABLE:
					case EXIST:
					case EXPAND:
					case EXPIRY_DATE:
					case EXPLICIT:
					case FAIL_OPERATION:
					case FAILOVER_MODE:
					case FAILURE:
					case FAILURE_CONDITION_LEVEL:
					case FAST:
					case FAST_FORWARD:
					case FILEGROUP:
					case FILEGROWTH:
					case FILEPATH:
					case FILESTREAM:
					case FILTER:
					case FIRST:
					case FIRST_VALUE:
					case FOLLOWING:
					case FORCE:
					case FORCE_FAILOVER_ALLOW_DATA_LOSS:
					case FORCED:
					case FORMAT:
					case FORWARD_ONLY:
					case FULLSCAN:
					case FULLTEXT:
					case GB:
					case GETDATE:
					case GETUTCDATE:
					case GLOBAL:
					case GO:
					case GROUP_MAX_REQUESTS:
					case GROUPING:
					case GROUPING_ID:
					case HADR:
					case HASH:
					case HEALTH_CHECK_TIMEOUT:
					case HIGH:
					case HONOR_BROKER_PRIORITY:
					case HOURS:
					case IDENTITY_VALUE:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMMEDIATE:
					case IMPERSONATE:
					case IMPORTANCE:
					case INCREMENTAL:
					case INITIATOR:
					case INPUT:
					case INSENSITIVE:
					case INSERTED:
					case INT:
					case IP:
					case ISOLATION:
					case KB:
					case KEEP:
					case KEEPFIXED:
					case KEY_SOURCE:
					case KEYS:
					case KEYSET:
					case LAG:
					case LAST:
					case LAST_VALUE:
					case LEAD:
					case LEVEL:
					case LIST:
					case LISTENER:
					case LISTENER_URL:
					case LOB_COMPACTION:
					case LOCAL:
					case LOCATION:
					case LOCK:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case LOW:
					case MANUAL:
					case MARK:
					case MATERIALIZED:
					case MAX:
					case MAX_CPU_PERCENT:
					case MAX_DOP:
					case MAX_FILES:
					case MAX_IOPS_PER_VOLUME:
					case MAX_MEMORY_PERCENT:
					case MAX_PROCESSES:
					case MAX_QUEUE_READERS:
					case MAX_ROLLOVER_FILES:
					case MAXDOP:
					case MAXRECURSION:
					case MAXSIZE:
					case MB:
					case MEDIUM:
					case MEMORY_OPTIMIZED_DATA:
					case MESSAGE:
					case MIN:
					case MIN_ACTIVE_ROWVERSION:
					case MIN_CPU_PERCENT:
					case MIN_IOPS_PER_VOLUME:
					case MIN_MEMORY_PERCENT:
					case MINUTES:
					case MIRROR_ADDRESS:
					case MIXED_PAGE_ALLOCATION:
					case MODE:
					case MODIFY:
					case MOVE:
					case MULTI_USER:
					case NAME:
					case NESTED_TRIGGERS:
					case NEW_ACCOUNT:
					case NEW_BROKER:
					case NEW_PASSWORD:
					case NEXT:
					case NO:
					case NO_TRUNCATE:
					case NO_WAIT:
					case NOCOUNT:
					case NODES:
					case NOEXPAND:
					case NON_TRANSACTED_ACCESS:
					case NORECOMPUTE:
					case NORECOVERY:
					case NOWAIT:
					case NTILE:
					case NUMANODE:
					case NUMBER:
					case NUMERIC_ROUNDABORT:
					case OBJECT:
					case OFFLINE:
					case OFFSET:
					case OLD_ACCOUNT:
					case ONLINE:
					case ONLY:
					case OPEN_EXISTING:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OWNER:
					case PAGE_VERIFY:
					case PARAMETERIZATION:
					case PARTITION:
					case PARTITIONS:
					case PARTNER:
					case PATH:
					case POISON_MESSAGE_HANDLING:
					case POOL:
					case PORT:
					case PRECEDING:
					case PRIMARY_ROLE:
					case PRIOR:
					case PRIORITY:
					case PRIORITY_LEVEL:
					case PRIVATE:
					case PRIVATE_KEY:
					case PRIVILEGES:
					case PROCEDURE_NAME:
					case PROPERTY:
					case PROVIDER:
					case PROVIDER_KEY_NAME:
					case QUERY:
					case QUEUE:
					case QUEUE_DELAY:
					case QUOTED_IDENTIFIER:
					case RANGE:
					case RANK:
					case RC2:
					case RC4:
					case RC4_128:
					case READ_COMMITTED_SNAPSHOT:
					case READ_ONLY:
					case READ_ONLY_ROUTING_LIST:
					case READ_WRITE:
					case READONLY:
					case REBUILD:
					case RECEIVE:
					case RECOMPILE:
					case RECOVERY:
					case RECURSIVE_TRIGGERS:
					case RELATIVE:
					case REMOTE:
					case REMOTE_SERVICE_NAME:
					case REMOVE:
					case REORGANIZE:
					case REPEATABLE:
					case REPLICA:
					case REQUEST_MAX_CPU_TIME_SEC:
					case REQUEST_MAX_MEMORY_GRANT_PERCENT:
					case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
					case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					case RESERVE_DISK_SPACE:
					case RESOURCE:
					case RESOURCE_MANAGER_LOCATION:
					case RESTRICTED_USER:
					case RETENTION:
					case ROBUST:
					case ROOT:
					case ROUTE:
					case ROW:
					case ROW_NUMBER:
					case ROWGUID:
					case ROWS:
					case SAMPLE:
					case SCHEMABINDING:
					case SCOPED:
					case SCROLL:
					case SCROLL_LOCKS:
					case SEARCH:
					case SECONDARY:
					case SECONDARY_ONLY:
					case SECONDARY_ROLE:
					case SECONDS:
					case SECRET:
					case SECURITY_LOG:
					case SEEDING_MODE:
					case SELF:
					case SEMI_SENSITIVE:
					case SEND:
					case SENT:
					case SERIALIZABLE:
					case SESSION_TIMEOUT:
					case SETERROR:
					case SHARE:
					case SHOWPLAN:
					case SIGNATURE:
					case SIMPLE:
					case SINGLE_USER:
					case SIZE:
					case SMALLINT:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STANDBY:
					case START_DATE:
					case STATIC:
					case STATS_STREAM:
					case STATUS:
					case STDEV:
					case STDEVP:
					case STOPLIST:
					case STUFF:
					case SUBJECT:
					case SUM:
					case SUSPEND:
					case SYMMETRIC:
					case SYNCHRONOUS_COMMIT:
					case SYNONYM:
					case TAKE:
					case TARGET_RECOVERY_TIME:
					case TB:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TIMEOUT:
					case TIMER:
					case TINYINT:
					case TORN_PAGE_DETECTION:
					case TRANSFORM_NOISE_WORDS:
					case TRIPLE_DES:
					case TRIPLE_DES_3KEY:
					case TRUSTWORTHY:
					case TRY:
					case TSQL:
					case TWO_DIGIT_YEAR_CUTOFF:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case UNLIMITED:
					case USING:
					case VALID_XML:
					case VALIDATION:
					case VALUE:
					case VAR:
					case VARP:
					case VIEW_METADATA:
					case VIEWS:
					case WAIT:
					case WELL_FORMED_XML:
					case WORK:
					case WORKLOAD:
					case XML:
					case XMLNAMESPACES:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case LOCAL_ID:
					case ID:
						{
						setState(8594);
						function_call();
						}
						break;
					case DECIMAL:
						{
						setState(8595);
						match(DECIMAL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(8598); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==CALLED || _la==COALESCE || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (CONVERT - 69)) | (1L << (CURRENT_TIMESTAMP - 69)) | (1L << (CURRENT_USER - 69)) | (1L << (DATA_COMPRESSION - 69)) | (1L << (EVENTDATA - 69)) | (1L << (FILENAME - 69)) | (1L << (FILLFACTOR - 69)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (FORCESEEK - 133)) | (1L << (IDENTITY - 133)) | (1L << (INIT - 133)) | (1L << (ISNULL - 133)) | (1L << (KEY - 133)) | (1L << (LEFT - 133)) | (1L << (MASTER - 133)) | (1L << (MAX_MEMORY - 133)))) != 0) || ((((_la - 222)) & ~0x3f) == 0 && ((1L << (_la - 222)) & ((1L << (NULLIF - 222)) | (1L << (OFFSETS - 222)) | (1L << (PAGE - 222)) | (1L << (PUBLIC - 222)) | (1L << (R - 222)) | (1L << (RAW - 222)) | (1L << (RETURN - 222)) | (1L << (RETURNS - 222)) | (1L << (RIGHT - 222)))) != 0) || ((((_la - 288)) & ~0x3f) == 0 && ((1L << (_la - 288)) & ((1L << (ROWCOUNT - 288)) | (1L << (SAFETY - 288)) | (1L << (SERVER - 288)) | (1L << (SESSION_USER - 288)) | (1L << (SID - 288)) | (1L << (SOURCE - 288)) | (1L << (STATE - 288)) | (1L << (START - 288)) | (1L << (SYSTEM_USER - 288)) | (1L << (TARGET - 288)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (ABSOLUTE - 383)) | (1L << (ACCENT_SENSITIVITY - 383)) | (1L << (ACTION - 383)) | (1L << (ACTIVATION - 383)) | (1L << (ACTIVE - 383)) | (1L << (ADDRESS - 383)) | (1L << (AES_128 - 383)) | (1L << (AES_192 - 383)) | (1L << (AES_256 - 383)) | (1L << (AFFINITY - 383)) | (1L << (AFTER - 383)) | (1L << (AGGREGATE - 383)) | (1L << (ALGORITHM - 383)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 383)) | (1L << (ALLOWED - 383)) | (1L << (ANSI_NULL_DEFAULT - 383)) | (1L << (ANSI_NULLS - 383)) | (1L << (ANSI_PADDING - 383)) | (1L << (ANSI_WARNINGS - 383)) | (1L << (APPLICATION_LOG - 383)) | (1L << (APPLY - 383)) | (1L << (ARITHABORT - 383)) | (1L << (ASSEMBLY - 383)) | (1L << (AUDIT - 383)) | (1L << (AUDIT_GUID - 383)) | (1L << (AUTO - 383)) | (1L << (AUTO_CLEANUP - 383)) | (1L << (AUTO_CLOSE - 383)) | (1L << (AUTO_CREATE_STATISTICS - 383)) | (1L << (AUTO_SHRINK - 383)) | (1L << (AUTO_UPDATE_STATISTICS - 383)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 383)) | (1L << (AVAILABILITY - 383)) | (1L << (AVG - 383)) | (1L << (BACKUP_PRIORITY - 383)) | (1L << (BEGIN_DIALOG - 383)) | (1L << (BIGINT - 383)) | (1L << (BINARY_BASE64 - 383)) | (1L << (BINARY_CHECKSUM - 383)) | (1L << (BINDING - 383)) | (1L << (BLOB_STORAGE - 383)) | (1L << (BROKER - 383)) | (1L << (BROKER_INSTANCE - 383)) | (1L << (BULK_LOGGED - 383)) | (1L << (CALLER - 383)) | (1L << (CAP_CPU_PERCENT - 383)) | (1L << (CAST - 383)) | (1L << (CATALOG - 383)) | (1L << (CATCH - 383)) | (1L << (CHANGE_RETENTION - 383)) | (1L << (CHANGE_TRACKING - 383)) | (1L << (CHECKSUM - 383)) | (1L << (CHECKSUM_AGG - 383)) | (1L << (CLEANUP - 383)) | (1L << (COLLECTION - 383)) | (1L << (COLUMN_MASTER_KEY - 383)) | (1L << (COMMITTED - 383)) | (1L << (COMPATIBILITY_LEVEL - 383)) | (1L << (CONCAT - 383)) | (1L << (CONCAT_NULL_YIELDS_NULL - 383)) | (1L << (CONTENT - 383)) | (1L << (CONTROL - 383)) | (1L << (COOKIE - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (COUNT - 447)) | (1L << (COUNT_BIG - 447)) | (1L << (COUNTER - 447)) | (1L << (CPU - 447)) | (1L << (CREATE_NEW - 447)) | (1L << (CREATION_DISPOSITION - 447)) | (1L << (CREDENTIAL - 447)) | (1L << (CRYPTOGRAPHIC - 447)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 447)) | (1L << (CURSOR_DEFAULT - 447)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 447)) | (1L << (DATEADD - 447)) | (1L << (DATEDIFF - 447)) | (1L << (DATENAME - 447)) | (1L << (DATEPART - 447)) | (1L << (DAYS - 447)) | (1L << (DB_CHAINING - 447)) | (1L << (DB_FAILOVER - 447)) | (1L << (DECRYPTION - 447)) | (1L << (DEFAULT_DOUBLE_QUOTE - 447)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1L << (DEFAULT_LANGUAGE - 447)) | (1L << (DELAY - 447)) | (1L << (DELAYED_DURABILITY - 447)) | (1L << (DELETED - 447)) | (1L << (DENSE_RANK - 447)) | (1L << (DEPENDENTS - 447)) | (1L << (DES - 447)) | (1L << (DESCRIPTION - 447)) | (1L << (DESX - 447)) | (1L << (DHCP - 447)) | (1L << (DIALOG - 447)) | (1L << (DIRECTORY_NAME - 447)) | (1L << (DISABLE - 447)) | (1L << (DISABLE_BROKER - 447)) | (1L << (DISABLED - 447)) | (1L << (DISK_DRIVE - 447)) | (1L << (DOCUMENT - 447)) | (1L << (DYNAMIC - 447)) | (1L << (EMERGENCY - 447)) | (1L << (EMPTY - 447)) | (1L << (ENABLE - 447)) | (1L << (ENABLE_BROKER - 447)) | (1L << (ENCRYPTED_VALUE - 447)) | (1L << (ENCRYPTION - 447)) | (1L << (ENDPOINT_URL - 447)) | (1L << (ERROR_BROKER_CONVERSATIONS - 447)) | (1L << (EXCLUSIVE - 447)) | (1L << (EXECUTABLE - 447)) | (1L << (EXIST - 447)) | (1L << (EXPAND - 447)) | (1L << (EXPIRY_DATE - 447)) | (1L << (EXPLICIT - 447)) | (1L << (FAIL_OPERATION - 447)) | (1L << (FAILOVER_MODE - 447)) | (1L << (FAILURE - 447)) | (1L << (FAILURE_CONDITION_LEVEL - 447)) | (1L << (FAST - 447)) | (1L << (FAST_FORWARD - 447)) | (1L << (FILEGROUP - 447)) | (1L << (FILEGROWTH - 447)) | (1L << (FILEPATH - 447)) | (1L << (FILESTREAM - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (FILTER - 511)) | (1L << (FIRST - 511)) | (1L << (FIRST_VALUE - 511)) | (1L << (FOLLOWING - 511)) | (1L << (FORCE - 511)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1L << (FORCED - 511)) | (1L << (FORMAT - 511)) | (1L << (FORWARD_ONLY - 511)) | (1L << (FULLSCAN - 511)) | (1L << (FULLTEXT - 511)) | (1L << (GB - 511)) | (1L << (GETDATE - 511)) | (1L << (GETUTCDATE - 511)) | (1L << (GLOBAL - 511)) | (1L << (GO - 511)) | (1L << (GROUP_MAX_REQUESTS - 511)) | (1L << (GROUPING - 511)) | (1L << (GROUPING_ID - 511)) | (1L << (HADR - 511)) | (1L << (HASH - 511)) | (1L << (HEALTH_CHECK_TIMEOUT - 511)) | (1L << (HIGH - 511)) | (1L << (HONOR_BROKER_PRIORITY - 511)) | (1L << (HOURS - 511)) | (1L << (IDENTITY_VALUE - 511)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1L << (IMMEDIATE - 511)) | (1L << (IMPERSONATE - 511)) | (1L << (IMPORTANCE - 511)) | (1L << (INCREMENTAL - 511)) | (1L << (INITIATOR - 511)) | (1L << (INPUT - 511)) | (1L << (INSENSITIVE - 511)) | (1L << (INSERTED - 511)) | (1L << (INT - 511)) | (1L << (IP - 511)) | (1L << (ISOLATION - 511)) | (1L << (KB - 511)) | (1L << (KEEP - 511)) | (1L << (KEEPFIXED - 511)) | (1L << (KEY_SOURCE - 511)) | (1L << (KEYS - 511)) | (1L << (KEYSET - 511)) | (1L << (LAG - 511)) | (1L << (LAST - 511)) | (1L << (LAST_VALUE - 511)) | (1L << (LEAD - 511)) | (1L << (LEVEL - 511)) | (1L << (LIST - 511)) | (1L << (LISTENER - 511)) | (1L << (LISTENER_URL - 511)) | (1L << (LOB_COMPACTION - 511)) | (1L << (LOCAL - 511)) | (1L << (LOCATION - 511)) | (1L << (LOCK - 511)) | (1L << (LOCK_ESCALATION - 511)) | (1L << (LOGIN - 511)) | (1L << (LOOP - 511)) | (1L << (LOW - 511)) | (1L << (MANUAL - 511)) | (1L << (MARK - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (MATERIALIZED - 575)) | (1L << (MAX - 575)) | (1L << (MAX_CPU_PERCENT - 575)) | (1L << (MAX_DOP - 575)) | (1L << (MAX_FILES - 575)) | (1L << (MAX_IOPS_PER_VOLUME - 575)) | (1L << (MAX_MEMORY_PERCENT - 575)) | (1L << (MAX_PROCESSES - 575)) | (1L << (MAX_QUEUE_READERS - 575)) | (1L << (MAX_ROLLOVER_FILES - 575)) | (1L << (MAXDOP - 575)) | (1L << (MAXRECURSION - 575)) | (1L << (MAXSIZE - 575)) | (1L << (MB - 575)) | (1L << (MEDIUM - 575)) | (1L << (MEMORY_OPTIMIZED_DATA - 575)) | (1L << (MESSAGE - 575)) | (1L << (MIN - 575)) | (1L << (MIN_ACTIVE_ROWVERSION - 575)) | (1L << (MIN_CPU_PERCENT - 575)) | (1L << (MIN_IOPS_PER_VOLUME - 575)) | (1L << (MIN_MEMORY_PERCENT - 575)) | (1L << (MINUTES - 575)) | (1L << (MIRROR_ADDRESS - 575)) | (1L << (MIXED_PAGE_ALLOCATION - 575)) | (1L << (MODE - 575)) | (1L << (MODIFY - 575)) | (1L << (MOVE - 575)) | (1L << (MULTI_USER - 575)) | (1L << (NAME - 575)) | (1L << (NESTED_TRIGGERS - 575)) | (1L << (NEW_ACCOUNT - 575)) | (1L << (NEW_BROKER - 575)) | (1L << (NEW_PASSWORD - 575)) | (1L << (NEXT - 575)) | (1L << (NO - 575)) | (1L << (NO_TRUNCATE - 575)) | (1L << (NO_WAIT - 575)) | (1L << (NOCOUNT - 575)) | (1L << (NODES - 575)) | (1L << (NOEXPAND - 575)) | (1L << (NON_TRANSACTED_ACCESS - 575)) | (1L << (NORECOMPUTE - 575)) | (1L << (NORECOVERY - 575)) | (1L << (NOWAIT - 575)) | (1L << (NTILE - 575)) | (1L << (NUMANODE - 575)) | (1L << (NUMBER - 575)) | (1L << (NUMERIC_ROUNDABORT - 575)) | (1L << (OBJECT - 575)) | (1L << (OFFLINE - 575)) | (1L << (OFFSET - 575)) | (1L << (OLD_ACCOUNT - 575)) | (1L << (ONLINE - 575)) | (1L << (ONLY - 575)) | (1L << (OPEN_EXISTING - 575)) | (1L << (OPTIMISTIC - 575)) | (1L << (OPTIMIZE - 575)) | (1L << (OUT - 575)) | (1L << (OUTPUT - 575)) | (1L << (OWNER - 575)) | (1L << (PAGE_VERIFY - 575)) | (1L << (PARAMETERIZATION - 575)) | (1L << (PARTITION - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (PARTITIONS - 639)) | (1L << (PARTNER - 639)) | (1L << (PATH - 639)) | (1L << (POISON_MESSAGE_HANDLING - 639)) | (1L << (POOL - 639)) | (1L << (PORT - 639)) | (1L << (PRECEDING - 639)) | (1L << (PRIMARY_ROLE - 639)) | (1L << (PRIOR - 639)) | (1L << (PRIORITY - 639)) | (1L << (PRIORITY_LEVEL - 639)) | (1L << (PRIVATE - 639)) | (1L << (PRIVATE_KEY - 639)) | (1L << (PRIVILEGES - 639)) | (1L << (PROCEDURE_NAME - 639)) | (1L << (PROPERTY - 639)) | (1L << (PROVIDER - 639)) | (1L << (PROVIDER_KEY_NAME - 639)) | (1L << (QUERY - 639)) | (1L << (QUEUE - 639)) | (1L << (QUEUE_DELAY - 639)) | (1L << (QUOTED_IDENTIFIER - 639)) | (1L << (RANGE - 639)) | (1L << (RANK - 639)) | (1L << (RC2 - 639)) | (1L << (RC4 - 639)) | (1L << (RC4_128 - 639)) | (1L << (READ_COMMITTED_SNAPSHOT - 639)) | (1L << (READ_ONLY - 639)) | (1L << (READ_ONLY_ROUTING_LIST - 639)) | (1L << (READ_WRITE - 639)) | (1L << (READONLY - 639)) | (1L << (REBUILD - 639)) | (1L << (RECEIVE - 639)) | (1L << (RECOMPILE - 639)) | (1L << (RECOVERY - 639)) | (1L << (RECURSIVE_TRIGGERS - 639)) | (1L << (RELATIVE - 639)) | (1L << (REMOTE - 639)) | (1L << (REMOTE_SERVICE_NAME - 639)) | (1L << (REMOVE - 639)) | (1L << (REORGANIZE - 639)) | (1L << (REPEATABLE - 639)) | (1L << (REPLICA - 639)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 639)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 639)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 639)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 639)) | (1L << (RESERVE_DISK_SPACE - 639)) | (1L << (RESOURCE - 639)) | (1L << (RESOURCE_MANAGER_LOCATION - 639)) | (1L << (RESTRICTED_USER - 639)) | (1L << (RETENTION - 639)) | (1L << (ROBUST - 639)) | (1L << (ROOT - 639)) | (1L << (ROUTE - 639)) | (1L << (ROW - 639)) | (1L << (ROW_NUMBER - 639)) | (1L << (ROWGUID - 639)) | (1L << (ROWS - 639)) | (1L << (SAMPLE - 639)) | (1L << (SCHEMABINDING - 639)) | (1L << (SCOPED - 639)) | (1L << (SCROLL - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (SCROLL_LOCKS - 703)) | (1L << (SEARCH - 703)) | (1L << (SECONDARY - 703)) | (1L << (SECONDARY_ONLY - 703)) | (1L << (SECONDARY_ROLE - 703)) | (1L << (SECONDS - 703)) | (1L << (SECRET - 703)) | (1L << (SECURITY_LOG - 703)) | (1L << (SEEDING_MODE - 703)) | (1L << (SELF - 703)) | (1L << (SEMI_SENSITIVE - 703)) | (1L << (SEND - 703)) | (1L << (SENT - 703)) | (1L << (SERIALIZABLE - 703)) | (1L << (SESSION_TIMEOUT - 703)) | (1L << (SETERROR - 703)) | (1L << (SHARE - 703)) | (1L << (SHOWPLAN - 703)) | (1L << (SIGNATURE - 703)) | (1L << (SIMPLE - 703)) | (1L << (SINGLE_USER - 703)) | (1L << (SIZE - 703)) | (1L << (SMALLINT - 703)) | (1L << (SNAPSHOT - 703)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 703)) | (1L << (STANDBY - 703)) | (1L << (START_DATE - 703)) | (1L << (STATIC - 703)) | (1L << (STATS_STREAM - 703)) | (1L << (STATUS - 703)) | (1L << (STDEV - 703)) | (1L << (STDEVP - 703)) | (1L << (STOPLIST - 703)) | (1L << (STUFF - 703)) | (1L << (SUBJECT - 703)) | (1L << (SUM - 703)) | (1L << (SUSPEND - 703)) | (1L << (SYMMETRIC - 703)) | (1L << (SYNCHRONOUS_COMMIT - 703)) | (1L << (SYNONYM - 703)) | (1L << (TAKE - 703)) | (1L << (TARGET_RECOVERY_TIME - 703)) | (1L << (TB - 703)) | (1L << (TEXTIMAGE_ON - 703)) | (1L << (THROW - 703)) | (1L << (TIES - 703)) | (1L << (TIME - 703)) | (1L << (TIMEOUT - 703)) | (1L << (TIMER - 703)) | (1L << (TINYINT - 703)) | (1L << (TORN_PAGE_DETECTION - 703)) | (1L << (TRANSFORM_NOISE_WORDS - 703)) | (1L << (TRIPLE_DES - 703)) | (1L << (TRIPLE_DES_3KEY - 703)) | (1L << (TRUSTWORTHY - 703)) | (1L << (TRY - 703)) | (1L << (TSQL - 703)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 703)) | (1L << (TYPE - 703)) | (1L << (TYPE_WARNING - 703)) | (1L << (UNBOUNDED - 703)) | (1L << (UNCOMMITTED - 703)) | (1L << (UNKNOWN - 703)) | (1L << (UNLIMITED - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (USING - 767)) | (1L << (VALID_XML - 767)) | (1L << (VALIDATION - 767)) | (1L << (VALUE - 767)) | (1L << (VAR - 767)) | (1L << (VARP - 767)) | (1L << (VIEW_METADATA - 767)) | (1L << (VIEWS - 767)) | (1L << (WAIT - 767)) | (1L << (WELL_FORMED_XML - 767)) | (1L << (WORK - 767)) | (1L << (WORKLOAD - 767)) | (1L << (XML - 767)) | (1L << (XMLNAMESPACES - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (LOCAL_ID - 767)) | (1L << (DECIMAL - 767)) | (1L << (ID - 767)) | (1L << (STRING - 767)) | (1L << (PLUS - 767)))) != 0) );
				setState(8601);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RR_BRACKET) {
					{
					setState(8600);
					match(RR_BRACKET);
					}
				}

				setState(8603);
				match(FOR);
				setState(8604);
				id();
				}
				break;
			case FOREIGN:
				{
				setState(8605);
				match(FOREIGN);
				setState(8606);
				match(KEY);
				setState(8607);
				match(LR_BRACKET);
				setState(8608);
				((Table_constraintContext)_localctx).fk = column_name_list();
				setState(8609);
				match(RR_BRACKET);
				setState(8610);
				match(REFERENCES);
				setState(8611);
				table_name();
				setState(8616);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1220,_ctx) ) {
				case 1:
					{
					setState(8612);
					match(LR_BRACKET);
					setState(8613);
					((Table_constraintContext)_localctx).pk = column_name_list();
					setState(8614);
					match(RR_BRACKET);
					}
					break;
				}
				setState(8619);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1221,_ctx) ) {
				case 1:
					{
					setState(8618);
					on_delete();
					}
					break;
				}
				setState(8622);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(8621);
					on_update();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_deleteContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode DELETE() { return getToken(TSqlParser.DELETE, 0); }
		public TerminalNode NO() { return getToken(TSqlParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(TSqlParser.ACTION, 0); }
		public TerminalNode CASCADE() { return getToken(TSqlParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(TSqlParser.SET, 0); }
		public TerminalNode NULL() { return getToken(TSqlParser.NULL, 0); }
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public On_deleteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_delete; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterOn_delete(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitOn_delete(this);
		}
	}

	public final On_deleteContext on_delete() throws RecognitionException {
		On_deleteContext _localctx = new On_deleteContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_on_delete);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8626);
			match(ON);
			setState(8627);
			match(DELETE);
			setState(8635);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1224,_ctx) ) {
			case 1:
				{
				setState(8628);
				match(NO);
				setState(8629);
				match(ACTION);
				}
				break;
			case 2:
				{
				setState(8630);
				match(CASCADE);
				}
				break;
			case 3:
				{
				setState(8631);
				match(SET);
				setState(8632);
				match(NULL);
				}
				break;
			case 4:
				{
				setState(8633);
				match(SET);
				setState(8634);
				match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_updateContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(TSqlParser.UPDATE, 0); }
		public TerminalNode NO() { return getToken(TSqlParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(TSqlParser.ACTION, 0); }
		public TerminalNode CASCADE() { return getToken(TSqlParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(TSqlParser.SET, 0); }
		public TerminalNode NULL() { return getToken(TSqlParser.NULL, 0); }
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public On_updateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_update; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterOn_update(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitOn_update(this);
		}
	}

	public final On_updateContext on_update() throws RecognitionException {
		On_updateContext _localctx = new On_updateContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_on_update);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8637);
			match(ON);
			setState(8638);
			match(UPDATE);
			setState(8646);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1225,_ctx) ) {
			case 1:
				{
				setState(8639);
				match(NO);
				setState(8640);
				match(ACTION);
				}
				break;
			case 2:
				{
				setState(8641);
				match(CASCADE);
				}
				break;
			case 3:
				{
				setState(8642);
				match(SET);
				setState(8643);
				match(NULL);
				}
				break;
			case 4:
				{
				setState(8644);
				match(SET);
				setState(8645);
				match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_optionsContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<Index_optionContext> index_option() {
			return getRuleContexts(Index_optionContext.class);
		}
		public Index_optionContext index_option(int i) {
			return getRuleContext(Index_optionContext.class,i);
		}
		public Index_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterIndex_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitIndex_options(this);
		}
	}

	public final Index_optionsContext index_options() throws RecognitionException {
		Index_optionsContext _localctx = new Index_optionsContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_index_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8648);
			match(WITH);
			setState(8649);
			match(LR_BRACKET);
			setState(8650);
			index_option();
			setState(8655);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8651);
				match(COMMA);
				setState(8652);
				index_option();
				}
				}
				setState(8657);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(8658);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_optionContext extends ParserRuleContext {
		public List<Simple_idContext> simple_id() {
			return getRuleContexts(Simple_idContext.class);
		}
		public Simple_idContext simple_id(int i) {
			return getRuleContext(Simple_idContext.class,i);
		}
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public Index_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterIndex_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitIndex_option(this);
		}
	}

	public final Index_optionContext index_option() throws RecognitionException {
		Index_optionContext _localctx = new Index_optionContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_index_option);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8660);
			simple_id();
			setState(8661);
			match(EQUAL);
			setState(8665);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case START:
			case TARGET:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case ID:
				{
				setState(8662);
				simple_id();
				}
				break;
			case OFF:
			case ON:
				{
				setState(8663);
				on_off();
				}
				break;
			case DECIMAL:
				{
				setState(8664);
				match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_cursorContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(TSqlParser.DECLARE, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(TSqlParser.CURSOR, 0); }
		public List<TerminalNode> FOR() { return getTokens(TSqlParser.FOR); }
		public TerminalNode FOR(int i) {
			return getToken(TSqlParser.FOR, i);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Declare_set_cursor_commonContext declare_set_cursor_common() {
			return getRuleContext(Declare_set_cursor_commonContext.class,0);
		}
		public TerminalNode SCROLL() { return getToken(TSqlParser.SCROLL, 0); }
		public TerminalNode SEMI_SENSITIVE() { return getToken(TSqlParser.SEMI_SENSITIVE, 0); }
		public TerminalNode INSENSITIVE() { return getToken(TSqlParser.INSENSITIVE, 0); }
		public TerminalNode READ() { return getToken(TSqlParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(TSqlParser.ONLY, 0); }
		public TerminalNode UPDATE() { return getToken(TSqlParser.UPDATE, 0); }
		public TerminalNode OF() { return getToken(TSqlParser.OF, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Declare_cursorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_cursor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDeclare_cursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDeclare_cursor(this);
		}
	}

	public final Declare_cursorContext declare_cursor() throws RecognitionException {
		Declare_cursorContext _localctx = new Declare_cursorContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_declare_cursor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8667);
			match(DECLARE);
			setState(8668);
			cursor_name();
			setState(8700);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1235,_ctx) ) {
			case 1:
				{
				setState(8669);
				match(CURSOR);
				setState(8679);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1230,_ctx) ) {
				case 1:
					{
					setState(8670);
					declare_set_cursor_common();
					setState(8677);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==FOR) {
						{
						setState(8671);
						match(FOR);
						setState(8672);
						match(UPDATE);
						setState(8675);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==OF) {
							{
							setState(8673);
							match(OF);
							setState(8674);
							column_name_list();
							}
						}

						}
					}

					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(8682);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INSENSITIVE || _la==SEMI_SENSITIVE) {
					{
					setState(8681);
					_la = _input.LA(1);
					if ( !(_la==INSENSITIVE || _la==SEMI_SENSITIVE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(8685);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SCROLL) {
					{
					setState(8684);
					match(SCROLL);
					}
				}

				setState(8687);
				match(CURSOR);
				setState(8688);
				match(FOR);
				setState(8689);
				select_statement();
				setState(8698);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(8690);
					match(FOR);
					setState(8696);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case READ:
						{
						setState(8691);
						match(READ);
						setState(8692);
						match(ONLY);
						}
						break;
					case UPDATE:
						{
						setState(8693);
						match(UPDATE);
						}
						break;
					case OF:
						{
						{
						setState(8694);
						match(OF);
						setState(8695);
						column_name_list();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
				break;
			}
			setState(8703);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1236,_ctx) ) {
			case 1:
				{
				setState(8702);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_set_cursor_commonContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public List<Declare_set_cursor_common_partialContext> declare_set_cursor_common_partial() {
			return getRuleContexts(Declare_set_cursor_common_partialContext.class);
		}
		public Declare_set_cursor_common_partialContext declare_set_cursor_common_partial(int i) {
			return getRuleContext(Declare_set_cursor_common_partialContext.class,i);
		}
		public Declare_set_cursor_commonContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_set_cursor_common; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDeclare_set_cursor_common(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDeclare_set_cursor_common(this);
		}
	}

	public final Declare_set_cursor_commonContext declare_set_cursor_common() throws RecognitionException {
		Declare_set_cursor_commonContext _localctx = new Declare_set_cursor_commonContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_declare_set_cursor_common);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8708);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 485)) & ~0x3f) == 0 && ((1L << (_la - 485)) & ((1L << (DYNAMIC - 485)) | (1L << (FAST_FORWARD - 485)) | (1L << (FORWARD_ONLY - 485)) | (1L << (GLOBAL - 485)))) != 0) || _la==KEYSET || _la==LOCAL || _la==OPTIMISTIC || _la==READ_ONLY || ((((_la - 702)) & ~0x3f) == 0 && ((1L << (_la - 702)) & ((1L << (SCROLL - 702)) | (1L << (SCROLL_LOCKS - 702)) | (1L << (STATIC - 702)) | (1L << (TYPE_WARNING - 702)))) != 0)) {
				{
				{
				setState(8705);
				declare_set_cursor_common_partial();
				}
				}
				setState(8710);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(8711);
			match(FOR);
			setState(8712);
			select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_set_cursor_common_partialContext extends ParserRuleContext {
		public TerminalNode LOCAL() { return getToken(TSqlParser.LOCAL, 0); }
		public TerminalNode GLOBAL() { return getToken(TSqlParser.GLOBAL, 0); }
		public TerminalNode FORWARD_ONLY() { return getToken(TSqlParser.FORWARD_ONLY, 0); }
		public TerminalNode SCROLL() { return getToken(TSqlParser.SCROLL, 0); }
		public TerminalNode STATIC() { return getToken(TSqlParser.STATIC, 0); }
		public TerminalNode KEYSET() { return getToken(TSqlParser.KEYSET, 0); }
		public TerminalNode DYNAMIC() { return getToken(TSqlParser.DYNAMIC, 0); }
		public TerminalNode FAST_FORWARD() { return getToken(TSqlParser.FAST_FORWARD, 0); }
		public TerminalNode READ_ONLY() { return getToken(TSqlParser.READ_ONLY, 0); }
		public TerminalNode SCROLL_LOCKS() { return getToken(TSqlParser.SCROLL_LOCKS, 0); }
		public TerminalNode OPTIMISTIC() { return getToken(TSqlParser.OPTIMISTIC, 0); }
		public TerminalNode TYPE_WARNING() { return getToken(TSqlParser.TYPE_WARNING, 0); }
		public Declare_set_cursor_common_partialContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_set_cursor_common_partial; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDeclare_set_cursor_common_partial(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDeclare_set_cursor_common_partial(this);
		}
	}

	public final Declare_set_cursor_common_partialContext declare_set_cursor_common_partial() throws RecognitionException {
		Declare_set_cursor_common_partialContext _localctx = new Declare_set_cursor_common_partialContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_declare_set_cursor_common_partial);
		int _la;
		try {
			setState(8719);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GLOBAL:
			case LOCAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(8714);
				_la = _input.LA(1);
				if ( !(_la==GLOBAL || _la==LOCAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case FORWARD_ONLY:
			case SCROLL:
				enterOuterAlt(_localctx, 2);
				{
				setState(8715);
				_la = _input.LA(1);
				if ( !(_la==FORWARD_ONLY || _la==SCROLL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case DYNAMIC:
			case FAST_FORWARD:
			case KEYSET:
			case STATIC:
				enterOuterAlt(_localctx, 3);
				{
				setState(8716);
				_la = _input.LA(1);
				if ( !(_la==DYNAMIC || _la==FAST_FORWARD || _la==KEYSET || _la==STATIC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case OPTIMISTIC:
			case READ_ONLY:
			case SCROLL_LOCKS:
				enterOuterAlt(_localctx, 4);
				{
				setState(8717);
				_la = _input.LA(1);
				if ( !(_la==OPTIMISTIC || _la==READ_ONLY || _la==SCROLL_LOCKS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case TYPE_WARNING:
				enterOuterAlt(_localctx, 5);
				{
				setState(8718);
				match(TYPE_WARNING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fetch_cursorContext extends ParserRuleContext {
		public TerminalNode FETCH() { return getToken(TSqlParser.FETCH, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public TerminalNode GLOBAL() { return getToken(TSqlParser.GLOBAL, 0); }
		public TerminalNode INTO() { return getToken(TSqlParser.INTO, 0); }
		public List<TerminalNode> LOCAL_ID() { return getTokens(TSqlParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(TSqlParser.LOCAL_ID, i);
		}
		public TerminalNode NEXT() { return getToken(TSqlParser.NEXT, 0); }
		public TerminalNode PRIOR() { return getToken(TSqlParser.PRIOR, 0); }
		public TerminalNode FIRST() { return getToken(TSqlParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(TSqlParser.LAST, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ABSOLUTE() { return getToken(TSqlParser.ABSOLUTE, 0); }
		public TerminalNode RELATIVE() { return getToken(TSqlParser.RELATIVE, 0); }
		public Fetch_cursorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch_cursor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterFetch_cursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitFetch_cursor(this);
		}
	}

	public final Fetch_cursorContext fetch_cursor() throws RecognitionException {
		Fetch_cursorContext _localctx = new Fetch_cursorContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_fetch_cursor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8721);
			match(FETCH);
			setState(8731);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1240,_ctx) ) {
			case 1:
				{
				setState(8728);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NEXT:
					{
					setState(8722);
					match(NEXT);
					}
					break;
				case PRIOR:
					{
					setState(8723);
					match(PRIOR);
					}
					break;
				case FIRST:
					{
					setState(8724);
					match(FIRST);
					}
					break;
				case LAST:
					{
					setState(8725);
					match(LAST);
					}
					break;
				case ABSOLUTE:
				case RELATIVE:
					{
					setState(8726);
					_la = _input.LA(1);
					if ( !(_la==ABSOLUTE || _la==RELATIVE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(8727);
					expression(0);
					}
					break;
				case FROM:
					break;
				default:
					break;
				}
				setState(8730);
				match(FROM);
				}
				break;
			}
			setState(8734);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1241,_ctx) ) {
			case 1:
				{
				setState(8733);
				match(GLOBAL);
				}
				break;
			}
			setState(8736);
			cursor_name();
			setState(8746);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(8737);
				match(INTO);
				setState(8738);
				match(LOCAL_ID);
				setState(8743);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(8739);
					match(COMMA);
					setState(8740);
					match(LOCAL_ID);
					}
					}
					setState(8745);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(8749);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1244,_ctx) ) {
			case 1:
				{
				setState(8748);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_specialContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(TSqlParser.SET, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Constant_LOCAL_IDContext constant_LOCAL_ID() {
			return getRuleContext(Constant_LOCAL_IDContext.class,0);
		}
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode TRANSACTION() { return getToken(TSqlParser.TRANSACTION, 0); }
		public TerminalNode ISOLATION() { return getToken(TSqlParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(TSqlParser.LEVEL, 0); }
		public TerminalNode READ() { return getToken(TSqlParser.READ, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(TSqlParser.UNCOMMITTED, 0); }
		public TerminalNode COMMITTED() { return getToken(TSqlParser.COMMITTED, 0); }
		public TerminalNode REPEATABLE() { return getToken(TSqlParser.REPEATABLE, 0); }
		public TerminalNode SNAPSHOT() { return getToken(TSqlParser.SNAPSHOT, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(TSqlParser.SERIALIZABLE, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode IDENTITY_INSERT() { return getToken(TSqlParser.IDENTITY_INSERT, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode ANSI_NULLS() { return getToken(TSqlParser.ANSI_NULLS, 0); }
		public TerminalNode QUOTED_IDENTIFIER() { return getToken(TSqlParser.QUOTED_IDENTIFIER, 0); }
		public TerminalNode ANSI_PADDING() { return getToken(TSqlParser.ANSI_PADDING, 0); }
		public TerminalNode ANSI_WARNINGS() { return getToken(TSqlParser.ANSI_WARNINGS, 0); }
		public Modify_methodContext modify_method() {
			return getRuleContext(Modify_methodContext.class,0);
		}
		public Set_specialContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_special; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSet_special(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSet_special(this);
		}
	}

	public final Set_specialContext set_special() throws RecognitionException {
		Set_specialContext _localctx = new Set_specialContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_set_special);
		try {
			setState(8800);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1250,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8751);
				match(SET);
				setState(8752);
				id();
				setState(8756);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SID:
				case SOURCE:
				case STATE:
				case START:
				case TARGET:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(8753);
					id();
					}
					break;
				case LOCAL_ID:
				case DECIMAL:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case PLUS:
				case MINUS:
					{
					setState(8754);
					constant_LOCAL_ID();
					}
					break;
				case OFF:
				case ON:
					{
					setState(8755);
					on_off();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8759);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1246,_ctx) ) {
				case 1:
					{
					setState(8758);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8761);
				match(SET);
				setState(8762);
				match(TRANSACTION);
				setState(8763);
				match(ISOLATION);
				setState(8764);
				match(LEVEL);
				setState(8774);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1247,_ctx) ) {
				case 1:
					{
					setState(8765);
					match(READ);
					setState(8766);
					match(UNCOMMITTED);
					}
					break;
				case 2:
					{
					setState(8767);
					match(READ);
					setState(8768);
					match(COMMITTED);
					}
					break;
				case 3:
					{
					setState(8769);
					match(REPEATABLE);
					setState(8770);
					match(READ);
					}
					break;
				case 4:
					{
					setState(8771);
					match(SNAPSHOT);
					}
					break;
				case 5:
					{
					setState(8772);
					match(SERIALIZABLE);
					}
					break;
				case 6:
					{
					setState(8773);
					match(DECIMAL);
					}
					break;
				}
				setState(8777);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1248,_ctx) ) {
				case 1:
					{
					setState(8776);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8779);
				match(SET);
				setState(8780);
				match(IDENTITY_INSERT);
				setState(8781);
				table_name();
				setState(8782);
				on_off();
				setState(8784);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1249,_ctx) ) {
				case 1:
					{
					setState(8783);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8786);
				match(SET);
				setState(8787);
				match(ANSI_NULLS);
				setState(8788);
				on_off();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8789);
				match(SET);
				setState(8790);
				match(QUOTED_IDENTIFIER);
				setState(8791);
				on_off();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8792);
				match(SET);
				setState(8793);
				match(ANSI_PADDING);
				setState(8794);
				on_off();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8795);
				match(SET);
				setState(8796);
				match(ANSI_WARNINGS);
				setState(8797);
				on_off();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(8798);
				match(SET);
				setState(8799);
				modify_method();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constant_LOCAL_IDContext extends ParserRuleContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Constant_LOCAL_IDContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant_LOCAL_ID; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterConstant_LOCAL_ID(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitConstant_LOCAL_ID(this);
		}
	}

	public final Constant_LOCAL_IDContext constant_LOCAL_ID() throws RecognitionException {
		Constant_LOCAL_IDContext _localctx = new Constant_LOCAL_IDContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_constant_LOCAL_ID);
		try {
			setState(8804);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				enterOuterAlt(_localctx, 1);
				{
				setState(8802);
				constant();
				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(8803);
				match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionContext extends ParserRuleContext {
		public Token op;
		public Primitive_expressionContext primitive_expression() {
			return getRuleContext(Primitive_expressionContext.class,0);
		}
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public Case_expressionContext case_expression() {
			return getRuleContext(Case_expressionContext.class,0);
		}
		public Full_column_nameContext full_column_name() {
			return getRuleContext(Full_column_nameContext.class,0);
		}
		public Bracket_expressionContext bracket_expression() {
			return getRuleContext(Bracket_expressionContext.class,0);
		}
		public Unary_operator_expressionContext unary_operator_expression() {
			return getRuleContext(Unary_operator_expressionContext.class,0);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Comparison_operatorContext comparison_operator() {
			return getRuleContext(Comparison_operatorContext.class,0);
		}
		public Assignment_operatorContext assignment_operator() {
			return getRuleContext(Assignment_operatorContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(TSqlParser.COLLATE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitExpression(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		return expression(0);
	}

	private ExpressionContext expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 714;
		enterRecursionRule(_localctx, 714, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8814);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1252,_ctx) ) {
			case 1:
				{
				setState(8807);
				primitive_expression();
				}
				break;
			case 2:
				{
				setState(8808);
				function_call();
				}
				break;
			case 3:
				{
				setState(8809);
				case_expression();
				}
				break;
			case 4:
				{
				setState(8810);
				full_column_name();
				}
				break;
			case 5:
				{
				setState(8811);
				bracket_expression();
				}
				break;
			case 6:
				{
				setState(8812);
				unary_operator_expression();
				}
				break;
			case 7:
				{
				setState(8813);
				over_clause();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(8835);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1254,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(8833);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1253,_ctx) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(8816);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(8817);
						((ExpressionContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(((((_la - 824)) & ~0x3f) == 0 && ((1L << (_la - 824)) & ((1L << (STAR - 824)) | (1L << (DIVIDE - 824)) | (1L << (MODULE - 824)))) != 0)) ) {
							((ExpressionContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(8818);
						expression(6);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(8819);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(8820);
						((ExpressionContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(((((_la - 813)) & ~0x3f) == 0 && ((1L << (_la - 813)) & ((1L << (DOUBLE_BAR - 813)) | (1L << (PLUS - 813)) | (1L << (MINUS - 813)) | (1L << (BIT_OR - 813)) | (1L << (BIT_AND - 813)) | (1L << (BIT_XOR - 813)))) != 0)) ) {
							((ExpressionContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(8821);
						expression(5);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(8822);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(8823);
						comparison_operator();
						setState(8824);
						expression(4);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(8826);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(8827);
						assignment_operator();
						setState(8828);
						expression(3);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(8830);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(8831);
						match(COLLATE);
						setState(8832);
						id();
						}
						break;
					}
					} 
				}
				setState(8837);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1254,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Primitive_expressionContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public TerminalNode NULL() { return getToken(TSqlParser.NULL, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public Primitive_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primitive_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterPrimitive_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitPrimitive_expression(this);
		}
	}

	public final Primitive_expressionContext primitive_expression() throws RecognitionException {
		Primitive_expressionContext _localctx = new Primitive_expressionContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_primitive_expression);
		try {
			setState(8842);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFAULT:
				enterOuterAlt(_localctx, 1);
				{
				setState(8838);
				match(DEFAULT);
				}
				break;
			case NULL:
				enterOuterAlt(_localctx, 2);
				{
				setState(8839);
				match(NULL);
				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(8840);
				match(LOCAL_ID);
				}
				break;
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				enterOuterAlt(_localctx, 4);
				{
				setState(8841);
				constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_expressionContext extends ParserRuleContext {
		public ExpressionContext caseExpr;
		public ExpressionContext elseExpr;
		public TerminalNode CASE() { return getToken(TSqlParser.CASE, 0); }
		public TerminalNode END() { return getToken(TSqlParser.END, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<Switch_sectionContext> switch_section() {
			return getRuleContexts(Switch_sectionContext.class);
		}
		public Switch_sectionContext switch_section(int i) {
			return getRuleContext(Switch_sectionContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(TSqlParser.ELSE, 0); }
		public List<Switch_search_condition_sectionContext> switch_search_condition_section() {
			return getRuleContexts(Switch_search_condition_sectionContext.class);
		}
		public Switch_search_condition_sectionContext switch_search_condition_section(int i) {
			return getRuleContext(Switch_search_condition_sectionContext.class,i);
		}
		public Case_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCase_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCase_expression(this);
		}
	}

	public final Case_expressionContext case_expression() throws RecognitionException {
		Case_expressionContext _localctx = new Case_expressionContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_case_expression);
		int _la;
		try {
			setState(8869);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1260,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8844);
				match(CASE);
				setState(8845);
				((Case_expressionContext)_localctx).caseExpr = expression(0);
				setState(8847); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(8846);
					switch_section();
					}
					}
					setState(8849); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(8853);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(8851);
					match(ELSE);
					setState(8852);
					((Case_expressionContext)_localctx).elseExpr = expression(0);
					}
				}

				setState(8855);
				match(END);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8857);
				match(CASE);
				setState(8859); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(8858);
					switch_search_condition_section();
					}
					}
					setState(8861); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(8865);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(8863);
					match(ELSE);
					setState(8864);
					((Case_expressionContext)_localctx).elseExpr = expression(0);
					}
				}

				setState(8867);
				match(END);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unary_operator_expressionContext extends ParserRuleContext {
		public Token op;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Unary_operator_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unary_operator_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterUnary_operator_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitUnary_operator_expression(this);
		}
	}

	public final Unary_operator_expressionContext unary_operator_expression() throws RecognitionException {
		Unary_operator_expressionContext _localctx = new Unary_operator_expressionContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_unary_operator_expression);
		int _la;
		try {
			setState(8875);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BIT_NOT:
				enterOuterAlt(_localctx, 1);
				{
				setState(8871);
				match(BIT_NOT);
				setState(8872);
				expression(0);
				}
				break;
			case PLUS:
			case MINUS:
				enterOuterAlt(_localctx, 2);
				{
				setState(8873);
				((Unary_operator_expressionContext)_localctx).op = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
					((Unary_operator_expressionContext)_localctx).op = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8874);
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bracket_expressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Bracket_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bracket_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterBracket_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitBracket_expression(this);
		}
	}

	public final Bracket_expressionContext bracket_expression() throws RecognitionException {
		Bracket_expressionContext _localctx = new Bracket_expressionContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_bracket_expression);
		try {
			setState(8885);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1262,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8877);
				match(LR_BRACKET);
				setState(8878);
				expression(0);
				setState(8879);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8881);
				match(LR_BRACKET);
				setState(8882);
				subquery();
				setState(8883);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constant_expressionContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(TSqlParser.NULL, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Constant_expressionContext constant_expression() {
			return getRuleContext(Constant_expressionContext.class,0);
		}
		public Constant_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterConstant_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitConstant_expression(this);
		}
	}

	public final Constant_expressionContext constant_expression() throws RecognitionException {
		Constant_expressionContext _localctx = new Constant_expressionContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_constant_expression);
		try {
			setState(8895);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1263,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8887);
				match(NULL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8888);
				constant();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8889);
				function_call();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8890);
				match(LOCAL_ID);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8891);
				match(LR_BRACKET);
				setState(8892);
				constant_expression();
				setState(8893);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubqueryContext extends ParserRuleContext {
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public SubqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSubquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSubquery(this);
		}
	}

	public final SubqueryContext subquery() throws RecognitionException {
		SubqueryContext _localctx = new SubqueryContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_subquery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8897);
			select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class With_expressionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<Common_table_expressionContext> common_table_expression() {
			return getRuleContexts(Common_table_expressionContext.class);
		}
		public Common_table_expressionContext common_table_expression(int i) {
			return getRuleContext(Common_table_expressionContext.class,i);
		}
		public TerminalNode XMLNAMESPACES() { return getToken(TSqlParser.XMLNAMESPACES, 0); }
		public TerminalNode BLOCKING_HIERARCHY() { return getToken(TSqlParser.BLOCKING_HIERARCHY, 0); }
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Full_column_name_listContext full_column_name_list() {
			return getRuleContext(Full_column_name_listContext.class,0);
		}
		public With_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterWith_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitWith_expression(this);
		}
	}

	public final With_expressionContext with_expression() throws RecognitionException {
		With_expressionContext _localctx = new With_expressionContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_with_expression);
		int _la;
		try {
			setState(8925);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1267,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8899);
				match(WITH);
				setState(8902);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1264,_ctx) ) {
				case 1:
					{
					setState(8900);
					match(XMLNAMESPACES);
					setState(8901);
					match(COMMA);
					}
					break;
				}
				setState(8904);
				common_table_expression();
				setState(8909);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(8905);
					match(COMMA);
					setState(8906);
					common_table_expression();
					}
					}
					setState(8911);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8912);
				match(WITH);
				setState(8913);
				match(BLOCKING_HIERARCHY);
				setState(8918);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(8914);
					match(LR_BRACKET);
					setState(8915);
					full_column_name_list();
					setState(8916);
					match(RR_BRACKET);
					}
				}

				setState(8920);
				match(AS);
				setState(8921);
				match(LR_BRACKET);
				setState(8922);
				select_statement();
				setState(8923);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Common_table_expressionContext extends ParserRuleContext {
		public IdContext expression_name;
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Common_table_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_common_table_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCommon_table_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCommon_table_expression(this);
		}
	}

	public final Common_table_expressionContext common_table_expression() throws RecognitionException {
		Common_table_expressionContext _localctx = new Common_table_expressionContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_common_table_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8927);
			((Common_table_expressionContext)_localctx).expression_name = id();
			setState(8932);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(8928);
				match(LR_BRACKET);
				setState(8929);
				column_name_list();
				setState(8930);
				match(RR_BRACKET);
				}
			}

			setState(8934);
			match(AS);
			setState(8935);
			match(LR_BRACKET);
			setState(8936);
			select_statement();
			setState(8937);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_elemContext extends ParserRuleContext {
		public IdContext udt_column_name;
		public IdContext method_name;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Full_column_nameContext full_column_name() {
			return getRuleContext(Full_column_nameContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Assignment_operatorContext assignment_operator() {
			return getRuleContext(Assignment_operatorContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Update_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterUpdate_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitUpdate_elem(this);
		}
	}

	public final Update_elemContext update_elem() throws RecognitionException {
		Update_elemContext _localctx = new Update_elemContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_update_elem);
		try {
			setState(8955);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1271,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8941);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BLOCKING_HIERARCHY:
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SID:
				case SOURCE:
				case STATE:
				case START:
				case TARGET:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(8939);
					full_column_name();
					}
					break;
				case LOCAL_ID:
					{
					setState(8940);
					match(LOCAL_ID);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8945);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case EQUAL:
					{
					setState(8943);
					match(EQUAL);
					}
					break;
				case PLUS_ASSIGN:
				case MINUS_ASSIGN:
				case MULT_ASSIGN:
				case DIV_ASSIGN:
				case MOD_ASSIGN:
				case AND_ASSIGN:
				case XOR_ASSIGN:
				case OR_ASSIGN:
					{
					setState(8944);
					assignment_operator();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8947);
				expression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8948);
				((Update_elemContext)_localctx).udt_column_name = id();
				setState(8949);
				match(DOT);
				setState(8950);
				((Update_elemContext)_localctx).method_name = id();
				setState(8951);
				match(LR_BRACKET);
				setState(8952);
				expression_list();
				setState(8953);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_condition_listContext extends ParserRuleContext {
		public List<Search_conditionContext> search_condition() {
			return getRuleContexts(Search_conditionContext.class);
		}
		public Search_conditionContext search_condition(int i) {
			return getRuleContext(Search_conditionContext.class,i);
		}
		public Search_condition_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_condition_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSearch_condition_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSearch_condition_list(this);
		}
	}

	public final Search_condition_listContext search_condition_list() throws RecognitionException {
		Search_condition_listContext _localctx = new Search_condition_listContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_search_condition_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8957);
			search_condition();
			setState(8962);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8958);
				match(COMMA);
				setState(8959);
				search_condition();
				}
				}
				setState(8964);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_conditionContext extends ParserRuleContext {
		public List<Search_condition_andContext> search_condition_and() {
			return getRuleContexts(Search_condition_andContext.class);
		}
		public Search_condition_andContext search_condition_and(int i) {
			return getRuleContext(Search_condition_andContext.class,i);
		}
		public List<TerminalNode> OR() { return getTokens(TSqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(TSqlParser.OR, i);
		}
		public Search_conditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_condition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSearch_condition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSearch_condition(this);
		}
	}

	public final Search_conditionContext search_condition() throws RecognitionException {
		Search_conditionContext _localctx = new Search_conditionContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_search_condition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8965);
			search_condition_and();
			setState(8970);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(8966);
				match(OR);
				setState(8967);
				search_condition_and();
				}
				}
				setState(8972);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_condition_andContext extends ParserRuleContext {
		public List<Search_condition_notContext> search_condition_not() {
			return getRuleContexts(Search_condition_notContext.class);
		}
		public Search_condition_notContext search_condition_not(int i) {
			return getRuleContext(Search_condition_notContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(TSqlParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(TSqlParser.AND, i);
		}
		public Search_condition_andContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_condition_and; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSearch_condition_and(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSearch_condition_and(this);
		}
	}

	public final Search_condition_andContext search_condition_and() throws RecognitionException {
		Search_condition_andContext _localctx = new Search_condition_andContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_search_condition_and);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8973);
			search_condition_not();
			setState(8978);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AND) {
				{
				{
				setState(8974);
				match(AND);
				setState(8975);
				search_condition_not();
				}
				}
				setState(8980);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_condition_notContext extends ParserRuleContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode NOT() { return getToken(TSqlParser.NOT, 0); }
		public Search_condition_notContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_condition_not; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSearch_condition_not(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSearch_condition_not(this);
		}
	}

	public final Search_condition_notContext search_condition_not() throws RecognitionException {
		Search_condition_notContext _localctx = new Search_condition_notContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_search_condition_not);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8982);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(8981);
				match(NOT);
				}
			}

			setState(8984);
			predicate();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PredicateContext extends ParserRuleContext {
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Comparison_operatorContext comparison_operator() {
			return getRuleContext(Comparison_operatorContext.class,0);
		}
		public TerminalNode ALL() { return getToken(TSqlParser.ALL, 0); }
		public TerminalNode SOME() { return getToken(TSqlParser.SOME, 0); }
		public TerminalNode ANY() { return getToken(TSqlParser.ANY, 0); }
		public TerminalNode BETWEEN() { return getToken(TSqlParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(TSqlParser.AND, 0); }
		public TerminalNode NOT() { return getToken(TSqlParser.NOT, 0); }
		public TerminalNode IN() { return getToken(TSqlParser.IN, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(TSqlParser.LIKE, 0); }
		public TerminalNode ESCAPE() { return getToken(TSqlParser.ESCAPE, 0); }
		public TerminalNode IS() { return getToken(TSqlParser.IS, 0); }
		public Null_notnullContext null_notnull() {
			return getRuleContext(Null_notnullContext.class,0);
		}
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitPredicate(this);
		}
	}

	public final PredicateContext predicate() throws RecognitionException {
		PredicateContext _localctx = new PredicateContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_predicate);
		int _la;
		try {
			setState(9041);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1281,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8986);
				match(EXISTS);
				setState(8987);
				match(LR_BRACKET);
				setState(8988);
				subquery();
				setState(8989);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8991);
				expression(0);
				setState(8992);
				comparison_operator();
				setState(8993);
				expression(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8995);
				expression(0);
				setState(8996);
				comparison_operator();
				setState(8997);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8998);
				match(LR_BRACKET);
				setState(8999);
				subquery();
				setState(9000);
				match(RR_BRACKET);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9002);
				expression(0);
				setState(9004);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(9003);
					match(NOT);
					}
				}

				setState(9006);
				match(BETWEEN);
				setState(9007);
				expression(0);
				setState(9008);
				match(AND);
				setState(9009);
				expression(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9011);
				expression(0);
				setState(9013);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(9012);
					match(NOT);
					}
				}

				setState(9015);
				match(IN);
				setState(9016);
				match(LR_BRACKET);
				setState(9019);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1278,_ctx) ) {
				case 1:
					{
					setState(9017);
					subquery();
					}
					break;
				case 2:
					{
					setState(9018);
					expression_list();
					}
					break;
				}
				setState(9021);
				match(RR_BRACKET);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9023);
				expression(0);
				setState(9025);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(9024);
					match(NOT);
					}
				}

				setState(9027);
				match(LIKE);
				setState(9028);
				expression(0);
				setState(9031);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ESCAPE) {
					{
					setState(9029);
					match(ESCAPE);
					setState(9030);
					expression(0);
					}
				}

				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(9033);
				expression(0);
				setState(9034);
				match(IS);
				setState(9035);
				null_notnull();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(9037);
				match(LR_BRACKET);
				setState(9038);
				search_condition();
				setState(9039);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_expressionContext extends ParserRuleContext {
		public Query_specificationContext query_specification() {
			return getRuleContext(Query_specificationContext.class,0);
		}
		public Query_expressionContext query_expression() {
			return getRuleContext(Query_expressionContext.class,0);
		}
		public List<Sql_unionContext> sql_union() {
			return getRuleContexts(Sql_unionContext.class);
		}
		public Sql_unionContext sql_union(int i) {
			return getRuleContext(Sql_unionContext.class,i);
		}
		public Query_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterQuery_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitQuery_expression(this);
		}
	}

	public final Query_expressionContext query_expression() throws RecognitionException {
		Query_expressionContext _localctx = new Query_expressionContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_query_expression);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9048);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				{
				setState(9043);
				query_specification();
				}
				break;
			case LR_BRACKET:
				{
				setState(9044);
				match(LR_BRACKET);
				setState(9045);
				query_expression();
				setState(9046);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(9053);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1283,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(9050);
					sql_union();
					}
					} 
				}
				setState(9055);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1283,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_unionContext extends ParserRuleContext {
		public TerminalNode UNION() { return getToken(TSqlParser.UNION, 0); }
		public TerminalNode EXCEPT() { return getToken(TSqlParser.EXCEPT, 0); }
		public TerminalNode INTERSECT() { return getToken(TSqlParser.INTERSECT, 0); }
		public Query_specificationContext query_specification() {
			return getRuleContext(Query_specificationContext.class,0);
		}
		public Query_expressionContext query_expression() {
			return getRuleContext(Query_expressionContext.class,0);
		}
		public TerminalNode ALL() { return getToken(TSqlParser.ALL, 0); }
		public Sql_unionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_union; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSql_union(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSql_union(this);
		}
	}

	public final Sql_unionContext sql_union() throws RecognitionException {
		Sql_unionContext _localctx = new Sql_unionContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_sql_union);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9062);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNION:
				{
				setState(9056);
				match(UNION);
				setState(9058);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(9057);
					match(ALL);
					}
				}

				}
				break;
			case EXCEPT:
				{
				setState(9060);
				match(EXCEPT);
				}
				break;
			case INTERSECT:
				{
				setState(9061);
				match(INTERSECT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(9069);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				{
				setState(9064);
				query_specification();
				}
				break;
			case LR_BRACKET:
				{
				{
				setState(9065);
				match(LR_BRACKET);
				setState(9066);
				query_expression();
				setState(9067);
				match(RR_BRACKET);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_specificationContext extends ParserRuleContext {
		public Search_conditionContext where;
		public Search_conditionContext having;
		public TerminalNode SELECT() { return getToken(TSqlParser.SELECT, 0); }
		public Select_listContext select_list() {
			return getRuleContext(Select_listContext.class,0);
		}
		public Top_clauseContext top_clause() {
			return getRuleContext(Top_clauseContext.class,0);
		}
		public TerminalNode INTO() { return getToken(TSqlParser.INTO, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public Table_sourcesContext table_sources() {
			return getRuleContext(Table_sourcesContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(TSqlParser.WHERE, 0); }
		public TerminalNode GROUP() { return getToken(TSqlParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public List<Group_by_itemContext> group_by_item() {
			return getRuleContexts(Group_by_itemContext.class);
		}
		public Group_by_itemContext group_by_item(int i) {
			return getRuleContext(Group_by_itemContext.class,i);
		}
		public TerminalNode HAVING() { return getToken(TSqlParser.HAVING, 0); }
		public List<TerminalNode> ALL() { return getTokens(TSqlParser.ALL); }
		public TerminalNode ALL(int i) {
			return getToken(TSqlParser.ALL, i);
		}
		public TerminalNode DISTINCT() { return getToken(TSqlParser.DISTINCT, 0); }
		public List<Search_conditionContext> search_condition() {
			return getRuleContexts(Search_conditionContext.class);
		}
		public Search_conditionContext search_condition(int i) {
			return getRuleContext(Search_conditionContext.class,i);
		}
		public Query_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterQuery_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitQuery_specification(this);
		}
	}

	public final Query_specificationContext query_specification() throws RecognitionException {
		Query_specificationContext _localctx = new Query_specificationContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_query_specification);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9071);
			match(SELECT);
			setState(9073);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(9072);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(9076);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TOP) {
				{
				setState(9075);
				top_clause();
				}
			}

			setState(9078);
			select_list();
			setState(9081);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(9079);
				match(INTO);
				setState(9080);
				table_name();
				}
			}

			setState(9085);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(9083);
				match(FROM);
				setState(9084);
				table_sources();
				}
			}

			setState(9089);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1291,_ctx) ) {
			case 1:
				{
				setState(9087);
				match(WHERE);
				setState(9088);
				((Query_specificationContext)_localctx).where = search_condition();
				}
				break;
			}
			setState(9104);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1294,_ctx) ) {
			case 1:
				{
				setState(9091);
				match(GROUP);
				setState(9092);
				match(BY);
				setState(9094);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(9093);
					match(ALL);
					}
				}

				setState(9096);
				group_by_item();
				setState(9101);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1293,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(9097);
						match(COMMA);
						setState(9098);
						group_by_item();
						}
						} 
					}
					setState(9103);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1293,_ctx);
				}
				}
				break;
			}
			setState(9108);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1295,_ctx) ) {
			case 1:
				{
				setState(9106);
				match(HAVING);
				setState(9107);
				((Query_specificationContext)_localctx).having = search_condition();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Top_clauseContext extends ParserRuleContext {
		public TerminalNode TOP() { return getToken(TSqlParser.TOP, 0); }
		public Top_percentContext top_percent() {
			return getRuleContext(Top_percentContext.class,0);
		}
		public Top_countContext top_count() {
			return getRuleContext(Top_countContext.class,0);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode TIES() { return getToken(TSqlParser.TIES, 0); }
		public Top_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_top_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTop_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTop_clause(this);
		}
	}

	public final Top_clauseContext top_clause() throws RecognitionException {
		Top_clauseContext _localctx = new Top_clauseContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_top_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9110);
			match(TOP);
			setState(9113);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1296,_ctx) ) {
			case 1:
				{
				setState(9111);
				top_percent();
				}
				break;
			case 2:
				{
				setState(9112);
				top_count();
				}
				break;
			}
			setState(9117);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(9115);
				match(WITH);
				setState(9116);
				match(TIES);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Top_percentContext extends ParserRuleContext {
		public TerminalNode PERCENT() { return getToken(TSqlParser.PERCENT, 0); }
		public TerminalNode REAL() { return getToken(TSqlParser.REAL, 0); }
		public TerminalNode FLOAT() { return getToken(TSqlParser.FLOAT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Top_percentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_top_percent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTop_percent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTop_percent(this);
		}
	}

	public final Top_percentContext top_percent() throws RecognitionException {
		Top_percentContext _localctx = new Top_percentContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_top_percent);
		int _la;
		try {
			setState(9126);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FLOAT:
			case REAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(9119);
				_la = _input.LA(1);
				if ( !(_la==FLOAT || _la==REAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9120);
				match(PERCENT);
				}
				break;
			case LR_BRACKET:
				enterOuterAlt(_localctx, 2);
				{
				setState(9121);
				match(LR_BRACKET);
				setState(9122);
				expression(0);
				setState(9123);
				match(RR_BRACKET);
				setState(9124);
				match(PERCENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Top_countContext extends ParserRuleContext {
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Top_countContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_top_count; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTop_count(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTop_count(this);
		}
	}

	public final Top_countContext top_count() throws RecognitionException {
		Top_countContext _localctx = new Top_countContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_top_count);
		try {
			setState(9133);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DECIMAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(9128);
				match(DECIMAL);
				}
				break;
			case LR_BRACKET:
				enterOuterAlt(_localctx, 2);
				{
				setState(9129);
				match(LR_BRACKET);
				setState(9130);
				expression(0);
				setState(9131);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_clauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(TSqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public List<Order_by_expressionContext> order_by_expression() {
			return getRuleContexts(Order_by_expressionContext.class);
		}
		public Order_by_expressionContext order_by_expression(int i) {
			return getRuleContext(Order_by_expressionContext.class,i);
		}
		public TerminalNode OFFSET() { return getToken(TSqlParser.OFFSET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> ROW() { return getTokens(TSqlParser.ROW); }
		public TerminalNode ROW(int i) {
			return getToken(TSqlParser.ROW, i);
		}
		public List<TerminalNode> ROWS() { return getTokens(TSqlParser.ROWS); }
		public TerminalNode ROWS(int i) {
			return getToken(TSqlParser.ROWS, i);
		}
		public TerminalNode FETCH() { return getToken(TSqlParser.FETCH, 0); }
		public TerminalNode ONLY() { return getToken(TSqlParser.ONLY, 0); }
		public TerminalNode FIRST() { return getToken(TSqlParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(TSqlParser.NEXT, 0); }
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterOrder_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitOrder_by_clause(this);
		}
	}

	public final Order_by_clauseContext order_by_clause() throws RecognitionException {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_order_by_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9135);
			match(ORDER);
			setState(9136);
			match(BY);
			setState(9137);
			order_by_expression();
			setState(9142);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1300,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(9138);
					match(COMMA);
					setState(9139);
					order_by_expression();
					}
					} 
				}
				setState(9144);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1300,_ctx);
			}
			setState(9156);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1302,_ctx) ) {
			case 1:
				{
				setState(9145);
				match(OFFSET);
				setState(9146);
				expression(0);
				setState(9147);
				_la = _input.LA(1);
				if ( !(_la==ROW || _la==ROWS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9154);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1301,_ctx) ) {
				case 1:
					{
					setState(9148);
					match(FETCH);
					setState(9149);
					_la = _input.LA(1);
					if ( !(_la==FIRST || _la==NEXT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(9150);
					expression(0);
					setState(9151);
					_la = _input.LA(1);
					if ( !(_la==ROW || _la==ROWS) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(9152);
					match(ONLY);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_clauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode BROWSE() { return getToken(TSqlParser.BROWSE, 0); }
		public TerminalNode XML() { return getToken(TSqlParser.XML, 0); }
		public TerminalNode RAW() { return getToken(TSqlParser.RAW, 0); }
		public TerminalNode AUTO() { return getToken(TSqlParser.AUTO, 0); }
		public List<Xml_common_directivesContext> xml_common_directives() {
			return getRuleContexts(Xml_common_directivesContext.class);
		}
		public Xml_common_directivesContext xml_common_directives(int i) {
			return getRuleContext(Xml_common_directivesContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode ELEMENTS() { return getToken(TSqlParser.ELEMENTS, 0); }
		public TerminalNode XSINIL() { return getToken(TSqlParser.XSINIL, 0); }
		public TerminalNode ABSENT() { return getToken(TSqlParser.ABSENT, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode XMLDATA() { return getToken(TSqlParser.XMLDATA, 0); }
		public TerminalNode XMLSCHEMA() { return getToken(TSqlParser.XMLSCHEMA, 0); }
		public TerminalNode EXPLICIT() { return getToken(TSqlParser.EXPLICIT, 0); }
		public TerminalNode PATH() { return getToken(TSqlParser.PATH, 0); }
		public TerminalNode JSON() { return getToken(TSqlParser.JSON, 0); }
		public TerminalNode ROOT() { return getToken(TSqlParser.ROOT, 0); }
		public TerminalNode INCLUDE_NULL_VALUES() { return getToken(TSqlParser.INCLUDE_NULL_VALUES, 0); }
		public TerminalNode WITHOUT_ARRAY_WRAPPER() { return getToken(TSqlParser.WITHOUT_ARRAY_WRAPPER, 0); }
		public For_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterFor_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitFor_clause(this);
		}
	}

	public final For_clauseContext for_clause() throws RecognitionException {
		For_clauseContext _localctx = new For_clauseContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_for_clause);
		int _la;
		try {
			int _alt;
			setState(9246);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1319,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9158);
				match(FOR);
				setState(9159);
				match(BROWSE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9160);
				match(FOR);
				setState(9161);
				match(XML);
				setState(9169);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case RAW:
					{
					setState(9162);
					match(RAW);
					setState(9166);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1303,_ctx) ) {
					case 1:
						{
						setState(9163);
						match(LR_BRACKET);
						setState(9164);
						match(STRING);
						setState(9165);
						match(RR_BRACKET);
						}
						break;
					}
					}
					break;
				case AUTO:
					{
					setState(9168);
					match(AUTO);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(9174);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1305,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(9171);
						xml_common_directives();
						}
						} 
					}
					setState(9176);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1305,_ctx);
				}
				setState(9187);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1308,_ctx) ) {
				case 1:
					{
					setState(9177);
					match(COMMA);
					setState(9185);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case XMLDATA:
						{
						setState(9178);
						match(XMLDATA);
						}
						break;
					case XMLSCHEMA:
						{
						setState(9179);
						match(XMLSCHEMA);
						setState(9183);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,1306,_ctx) ) {
						case 1:
							{
							setState(9180);
							match(LR_BRACKET);
							setState(9181);
							match(STRING);
							setState(9182);
							match(RR_BRACKET);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				setState(9192);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1309,_ctx) ) {
				case 1:
					{
					setState(9189);
					match(COMMA);
					setState(9190);
					match(ELEMENTS);
					setState(9191);
					_la = _input.LA(1);
					if ( !(_la==ABSENT || _la==XSINIL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9194);
				match(FOR);
				setState(9195);
				match(XML);
				setState(9196);
				match(EXPLICIT);
				setState(9200);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1310,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(9197);
						xml_common_directives();
						}
						} 
					}
					setState(9202);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1310,_ctx);
				}
				setState(9205);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1311,_ctx) ) {
				case 1:
					{
					setState(9203);
					match(COMMA);
					setState(9204);
					match(XMLDATA);
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9207);
				match(FOR);
				setState(9208);
				match(XML);
				setState(9209);
				match(PATH);
				setState(9213);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1312,_ctx) ) {
				case 1:
					{
					setState(9210);
					match(LR_BRACKET);
					setState(9211);
					match(STRING);
					setState(9212);
					match(RR_BRACKET);
					}
					break;
				}
				setState(9218);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1313,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(9215);
						xml_common_directives();
						}
						} 
					}
					setState(9220);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1313,_ctx);
				}
				setState(9224);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1314,_ctx) ) {
				case 1:
					{
					setState(9221);
					match(COMMA);
					setState(9222);
					match(ELEMENTS);
					setState(9223);
					_la = _input.LA(1);
					if ( !(_la==ABSENT || _la==XSINIL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9226);
				match(FOR);
				setState(9227);
				match(JSON);
				setState(9228);
				_la = _input.LA(1);
				if ( !(_la==AUTO || _la==PATH) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9236);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1316,_ctx) ) {
				case 1:
					{
					setState(9229);
					match(COMMA);
					setState(9230);
					match(ROOT);
					setState(9234);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1315,_ctx) ) {
					case 1:
						{
						setState(9231);
						match(LR_BRACKET);
						setState(9232);
						match(STRING);
						setState(9233);
						match(RR_BRACKET);
						}
						break;
					}
					}
					break;
				}
				setState(9240);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1317,_ctx) ) {
				case 1:
					{
					setState(9238);
					match(COMMA);
					setState(9239);
					match(INCLUDE_NULL_VALUES);
					}
					break;
				}
				setState(9244);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1318,_ctx) ) {
				case 1:
					{
					setState(9242);
					match(COMMA);
					setState(9243);
					match(WITHOUT_ARRAY_WRAPPER);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_common_directivesContext extends ParserRuleContext {
		public TerminalNode BINARY_BASE64() { return getToken(TSqlParser.BINARY_BASE64, 0); }
		public TerminalNode TYPE() { return getToken(TSqlParser.TYPE, 0); }
		public TerminalNode ROOT() { return getToken(TSqlParser.ROOT, 0); }
		public Xml_common_directivesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_common_directives; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterXml_common_directives(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitXml_common_directives(this);
		}
	}

	public final Xml_common_directivesContext xml_common_directives() throws RecognitionException {
		Xml_common_directivesContext _localctx = new Xml_common_directivesContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_xml_common_directives);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9248);
			match(COMMA);
			setState(9249);
			_la = _input.LA(1);
			if ( !(_la==BINARY_BASE64 || _la==ROOT || _la==TYPE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_expressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASC() { return getToken(TSqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(TSqlParser.DESC, 0); }
		public Order_by_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterOrder_by_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitOrder_by_expression(this);
		}
	}

	public final Order_by_expressionContext order_by_expression() throws RecognitionException {
		Order_by_expressionContext _localctx = new Order_by_expressionContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_order_by_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9251);
			expression(0);
			setState(9253);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(9252);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_by_itemContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Group_by_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterGroup_by_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitGroup_by_item(this);
		}
	}

	public final Group_by_itemContext group_by_item() throws RecognitionException {
		Group_by_itemContext _localctx = new Group_by_itemContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_group_by_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9255);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Option_clauseContext extends ParserRuleContext {
		public TerminalNode OPTION() { return getToken(TSqlParser.OPTION, 0); }
		public List<OptionContext> option() {
			return getRuleContexts(OptionContext.class);
		}
		public OptionContext option(int i) {
			return getRuleContext(OptionContext.class,i);
		}
		public Option_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_option_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterOption_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitOption_clause(this);
		}
	}

	public final Option_clauseContext option_clause() throws RecognitionException {
		Option_clauseContext _localctx = new Option_clauseContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_option_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9257);
			match(OPTION);
			setState(9258);
			match(LR_BRACKET);
			setState(9259);
			option();
			setState(9264);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9260);
				match(COMMA);
				setState(9261);
				option();
				}
				}
				setState(9266);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(9267);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptionContext extends ParserRuleContext {
		public Token number_rows;
		public Token number_of_processors;
		public Token number_recursion;
		public TerminalNode FAST() { return getToken(TSqlParser.FAST, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode GROUP() { return getToken(TSqlParser.GROUP, 0); }
		public TerminalNode HASH() { return getToken(TSqlParser.HASH, 0); }
		public TerminalNode ORDER() { return getToken(TSqlParser.ORDER, 0); }
		public TerminalNode UNION() { return getToken(TSqlParser.UNION, 0); }
		public TerminalNode MERGE() { return getToken(TSqlParser.MERGE, 0); }
		public TerminalNode CONCAT() { return getToken(TSqlParser.CONCAT, 0); }
		public TerminalNode JOIN() { return getToken(TSqlParser.JOIN, 0); }
		public TerminalNode LOOP() { return getToken(TSqlParser.LOOP, 0); }
		public TerminalNode EXPAND() { return getToken(TSqlParser.EXPAND, 0); }
		public TerminalNode VIEWS() { return getToken(TSqlParser.VIEWS, 0); }
		public TerminalNode FORCE() { return getToken(TSqlParser.FORCE, 0); }
		public TerminalNode IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX() { return getToken(TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0); }
		public TerminalNode KEEP() { return getToken(TSqlParser.KEEP, 0); }
		public TerminalNode PLAN() { return getToken(TSqlParser.PLAN, 0); }
		public TerminalNode KEEPFIXED() { return getToken(TSqlParser.KEEPFIXED, 0); }
		public TerminalNode MAXDOP() { return getToken(TSqlParser.MAXDOP, 0); }
		public TerminalNode MAXRECURSION() { return getToken(TSqlParser.MAXRECURSION, 0); }
		public TerminalNode OPTIMIZE() { return getToken(TSqlParser.OPTIMIZE, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public List<Optimize_for_argContext> optimize_for_arg() {
			return getRuleContexts(Optimize_for_argContext.class);
		}
		public Optimize_for_argContext optimize_for_arg(int i) {
			return getRuleContext(Optimize_for_argContext.class,i);
		}
		public TerminalNode UNKNOWN() { return getToken(TSqlParser.UNKNOWN, 0); }
		public TerminalNode PARAMETERIZATION() { return getToken(TSqlParser.PARAMETERIZATION, 0); }
		public TerminalNode SIMPLE() { return getToken(TSqlParser.SIMPLE, 0); }
		public TerminalNode FORCED() { return getToken(TSqlParser.FORCED, 0); }
		public TerminalNode RECOMPILE() { return getToken(TSqlParser.RECOMPILE, 0); }
		public TerminalNode ROBUST() { return getToken(TSqlParser.ROBUST, 0); }
		public TerminalNode USE() { return getToken(TSqlParser.USE, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public OptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitOption(this);
		}
	}

	public final OptionContext option() throws RecognitionException {
		OptionContext _localctx = new OptionContext(_ctx, getState());
		enterRule(_localctx, 768, RULE_option);
		int _la;
		try {
			setState(9314);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1323,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9269);
				match(FAST);
				setState(9270);
				((OptionContext)_localctx).number_rows = match(DECIMAL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9271);
				_la = _input.LA(1);
				if ( !(_la==ORDER || _la==HASH) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9272);
				match(GROUP);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9273);
				_la = _input.LA(1);
				if ( !(_la==MERGE || _la==CONCAT || _la==HASH) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9274);
				match(UNION);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9275);
				_la = _input.LA(1);
				if ( !(_la==MERGE || _la==HASH || _la==LOOP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9276);
				match(JOIN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9277);
				match(EXPAND);
				setState(9278);
				match(VIEWS);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9279);
				match(FORCE);
				setState(9280);
				match(ORDER);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(9281);
				match(IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(9282);
				match(KEEP);
				setState(9283);
				match(PLAN);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(9284);
				match(KEEPFIXED);
				setState(9285);
				match(PLAN);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(9286);
				match(MAXDOP);
				setState(9287);
				((OptionContext)_localctx).number_of_processors = match(DECIMAL);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(9288);
				match(MAXRECURSION);
				setState(9289);
				((OptionContext)_localctx).number_recursion = match(DECIMAL);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(9290);
				match(OPTIMIZE);
				setState(9291);
				match(FOR);
				setState(9292);
				match(LR_BRACKET);
				setState(9293);
				optimize_for_arg();
				setState(9298);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(9294);
					match(COMMA);
					setState(9295);
					optimize_for_arg();
					}
					}
					setState(9300);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(9301);
				match(RR_BRACKET);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(9303);
				match(OPTIMIZE);
				setState(9304);
				match(FOR);
				setState(9305);
				match(UNKNOWN);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(9306);
				match(PARAMETERIZATION);
				setState(9307);
				_la = _input.LA(1);
				if ( !(_la==FORCED || _la==SIMPLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(9308);
				match(RECOMPILE);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(9309);
				match(ROBUST);
				setState(9310);
				match(PLAN);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(9311);
				match(USE);
				setState(9312);
				match(PLAN);
				setState(9313);
				match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Optimize_for_argContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public TerminalNode UNKNOWN() { return getToken(TSqlParser.UNKNOWN, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TerminalNode NULL() { return getToken(TSqlParser.NULL, 0); }
		public Optimize_for_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optimize_for_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterOptimize_for_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitOptimize_for_arg(this);
		}
	}

	public final Optimize_for_argContext optimize_for_arg() throws RecognitionException {
		Optimize_for_argContext _localctx = new Optimize_for_argContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_optimize_for_arg);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9316);
			match(LOCAL_ID);
			setState(9323);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNKNOWN:
				{
				setState(9317);
				match(UNKNOWN);
				}
				break;
			case EQUAL:
				{
				setState(9318);
				match(EQUAL);
				setState(9321);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DECIMAL:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case PLUS:
				case MINUS:
					{
					setState(9319);
					constant();
					}
					break;
				case NULL:
					{
					setState(9320);
					match(NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_listContext extends ParserRuleContext {
		public List<Select_list_elemContext> select_list_elem() {
			return getRuleContexts(Select_list_elemContext.class);
		}
		public Select_list_elemContext select_list_elem(int i) {
			return getRuleContext(Select_list_elemContext.class,i);
		}
		public Select_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSelect_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSelect_list(this);
		}
	}

	public final Select_listContext select_list() throws RecognitionException {
		Select_listContext _localctx = new Select_listContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_select_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9325);
			select_list_elem();
			setState(9330);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1326,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(9326);
					match(COMMA);
					setState(9327);
					select_list_elem();
					}
					} 
				}
				setState(9332);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1326,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Udt_method_argumentsContext extends ParserRuleContext {
		public List<Execute_var_stringContext> execute_var_string() {
			return getRuleContexts(Execute_var_stringContext.class);
		}
		public Execute_var_stringContext execute_var_string(int i) {
			return getRuleContext(Execute_var_stringContext.class,i);
		}
		public Udt_method_argumentsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_udt_method_arguments; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterUdt_method_arguments(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitUdt_method_arguments(this);
		}
	}

	public final Udt_method_argumentsContext udt_method_arguments() throws RecognitionException {
		Udt_method_argumentsContext _localctx = new Udt_method_argumentsContext(_ctx, getState());
		enterRule(_localctx, 774, RULE_udt_method_arguments);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9333);
			match(LR_BRACKET);
			setState(9334);
			execute_var_string();
			setState(9339);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9335);
				match(COMMA);
				setState(9336);
				execute_var_string();
				}
				}
				setState(9341);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(9342);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AsteriskContext extends ParserRuleContext {
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public AsteriskContext asterisk() {
			return getRuleContext(AsteriskContext.class,0);
		}
		public AsteriskContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asterisk; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAsterisk(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAsterisk(this);
		}
	}

	public final AsteriskContext asterisk() throws RecognitionException {
		AsteriskContext _localctx = new AsteriskContext(_ctx, getState());
		enterRule(_localctx, 776, RULE_asterisk);
		try {
			setState(9349);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STAR:
				enterOuterAlt(_localctx, 1);
				{
				setState(9344);
				match(STAR);
				}
				break;
			case BLOCKING_HIERARCHY:
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case START:
			case TARGET:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(9345);
				table_name();
				setState(9346);
				match(DOT);
				setState(9347);
				asterisk();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_elemContext extends ParserRuleContext {
		public IdContext column_name;
		public TerminalNode IDENTITY() { return getToken(TSqlParser.IDENTITY, 0); }
		public TerminalNode ROWGUID() { return getToken(TSqlParser.ROWGUID, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public As_column_aliasContext as_column_alias() {
			return getRuleContext(As_column_aliasContext.class,0);
		}
		public Column_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterColumn_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitColumn_elem(this);
		}
	}

	public final Column_elemContext column_elem() throws RecognitionException {
		Column_elemContext _localctx = new Column_elemContext(_ctx, getState());
		enterRule(_localctx, 778, RULE_column_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9354);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1329,_ctx) ) {
			case 1:
				{
				setState(9351);
				table_name();
				setState(9352);
				match(DOT);
				}
				break;
			}
			setState(9361);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1330,_ctx) ) {
			case 1:
				{
				setState(9356);
				((Column_elemContext)_localctx).column_name = id();
				}
				break;
			case 2:
				{
				setState(9357);
				match(DOLLAR);
				setState(9358);
				match(IDENTITY);
				}
				break;
			case 3:
				{
				setState(9359);
				match(DOLLAR);
				setState(9360);
				match(ROWGUID);
				}
				break;
			}
			setState(9364);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1331,_ctx) ) {
			case 1:
				{
				setState(9363);
				as_column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Udt_elemContext extends ParserRuleContext {
		public IdContext udt_column_name;
		public IdContext non_static_attr;
		public IdContext static_attr;
		public Udt_method_argumentsContext udt_method_arguments() {
			return getRuleContext(Udt_method_argumentsContext.class,0);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public As_column_aliasContext as_column_alias() {
			return getRuleContext(As_column_aliasContext.class,0);
		}
		public Udt_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_udt_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterUdt_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitUdt_elem(this);
		}
	}

	public final Udt_elemContext udt_elem() throws RecognitionException {
		Udt_elemContext _localctx = new Udt_elemContext(_ctx, getState());
		enterRule(_localctx, 780, RULE_udt_elem);
		try {
			setState(9383);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1335,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9366);
				((Udt_elemContext)_localctx).udt_column_name = id();
				setState(9367);
				match(DOT);
				setState(9368);
				((Udt_elemContext)_localctx).non_static_attr = id();
				setState(9369);
				udt_method_arguments();
				setState(9371);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1332,_ctx) ) {
				case 1:
					{
					setState(9370);
					as_column_alias();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9373);
				((Udt_elemContext)_localctx).udt_column_name = id();
				setState(9374);
				match(COLON);
				setState(9375);
				match(COLON);
				setState(9376);
				((Udt_elemContext)_localctx).static_attr = id();
				setState(9378);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1333,_ctx) ) {
				case 1:
					{
					setState(9377);
					udt_method_arguments();
					}
					break;
				}
				setState(9381);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1334,_ctx) ) {
				case 1:
					{
					setState(9380);
					as_column_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expression_elemContext extends ParserRuleContext {
		public Token eq;
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public As_column_aliasContext as_column_alias() {
			return getRuleContext(As_column_aliasContext.class,0);
		}
		public Expression_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterExpression_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitExpression_elem(this);
		}
	}

	public final Expression_elemContext expression_elem() throws RecognitionException {
		Expression_elemContext _localctx = new Expression_elemContext(_ctx, getState());
		enterRule(_localctx, 782, RULE_expression_elem);
		try {
			setState(9393);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1337,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9385);
				column_alias();
				setState(9386);
				((Expression_elemContext)_localctx).eq = match(EQUAL);
				setState(9387);
				expression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9389);
				expression(0);
				setState(9391);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1336,_ctx) ) {
				case 1:
					{
					setState(9390);
					as_column_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_list_elemContext extends ParserRuleContext {
		public AsteriskContext asterisk() {
			return getRuleContext(AsteriskContext.class,0);
		}
		public Column_elemContext column_elem() {
			return getRuleContext(Column_elemContext.class,0);
		}
		public Udt_elemContext udt_elem() {
			return getRuleContext(Udt_elemContext.class,0);
		}
		public Expression_elemContext expression_elem() {
			return getRuleContext(Expression_elemContext.class,0);
		}
		public Select_list_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_list_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSelect_list_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSelect_list_elem(this);
		}
	}

	public final Select_list_elemContext select_list_elem() throws RecognitionException {
		Select_list_elemContext _localctx = new Select_list_elemContext(_ctx, getState());
		enterRule(_localctx, 784, RULE_select_list_elem);
		try {
			setState(9399);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1338,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9395);
				asterisk();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9396);
				column_elem();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9397);
				udt_elem();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9398);
				expression_elem();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_sourcesContext extends ParserRuleContext {
		public List<Table_sourceContext> table_source() {
			return getRuleContexts(Table_sourceContext.class);
		}
		public Table_sourceContext table_source(int i) {
			return getRuleContext(Table_sourceContext.class,i);
		}
		public Table_sourcesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_sources; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTable_sources(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTable_sources(this);
		}
	}

	public final Table_sourcesContext table_sources() throws RecognitionException {
		Table_sourcesContext _localctx = new Table_sourcesContext(_ctx, getState());
		enterRule(_localctx, 786, RULE_table_sources);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9401);
			table_source();
			setState(9406);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1339,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(9402);
					match(COMMA);
					setState(9403);
					table_source();
					}
					} 
				}
				setState(9408);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1339,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_sourceContext extends ParserRuleContext {
		public Table_source_item_joinedContext table_source_item_joined() {
			return getRuleContext(Table_source_item_joinedContext.class,0);
		}
		public Table_sourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_source; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTable_source(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTable_source(this);
		}
	}

	public final Table_sourceContext table_source() throws RecognitionException {
		Table_sourceContext _localctx = new Table_sourceContext(_ctx, getState());
		enterRule(_localctx, 788, RULE_table_source);
		try {
			setState(9414);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1340,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9409);
				table_source_item_joined();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9410);
				match(LR_BRACKET);
				setState(9411);
				table_source_item_joined();
				setState(9412);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_source_item_joinedContext extends ParserRuleContext {
		public Table_source_itemContext table_source_item() {
			return getRuleContext(Table_source_itemContext.class,0);
		}
		public List<Join_partContext> join_part() {
			return getRuleContexts(Join_partContext.class);
		}
		public Join_partContext join_part(int i) {
			return getRuleContext(Join_partContext.class,i);
		}
		public Table_source_item_joinedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_source_item_joined; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTable_source_item_joined(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTable_source_item_joined(this);
		}
	}

	public final Table_source_item_joinedContext table_source_item_joined() throws RecognitionException {
		Table_source_item_joinedContext _localctx = new Table_source_item_joinedContext(_ctx, getState());
		enterRule(_localctx, 790, RULE_table_source_item_joined);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9416);
			table_source_item();
			setState(9420);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1341,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(9417);
					join_part();
					}
					} 
				}
				setState(9422);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1341,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_source_itemContext extends ParserRuleContext {
		public Table_name_with_hintContext table_name_with_hint() {
			return getRuleContext(Table_name_with_hintContext.class,0);
		}
		public As_table_aliasContext as_table_alias() {
			return getRuleContext(As_table_aliasContext.class,0);
		}
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public Rowset_functionContext rowset_function() {
			return getRuleContext(Rowset_functionContext.class,0);
		}
		public Derived_tableContext derived_table() {
			return getRuleContext(Derived_tableContext.class,0);
		}
		public Column_alias_listContext column_alias_list() {
			return getRuleContext(Column_alias_listContext.class,0);
		}
		public Change_tableContext change_table() {
			return getRuleContext(Change_tableContext.class,0);
		}
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Open_xmlContext open_xml() {
			return getRuleContext(Open_xmlContext.class,0);
		}
		public Table_source_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_source_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTable_source_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTable_source_item(this);
		}
	}

	public final Table_source_itemContext table_source_item() throws RecognitionException {
		Table_source_itemContext _localctx = new Table_source_itemContext(_ctx, getState());
		enterRule(_localctx, 792, RULE_table_source_item);
		try {
			setState(9469);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1352,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9423);
				table_name_with_hint();
				setState(9425);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1342,_ctx) ) {
				case 1:
					{
					setState(9424);
					as_table_alias();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9427);
				full_table_name();
				setState(9429);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1343,_ctx) ) {
				case 1:
					{
					setState(9428);
					as_table_alias();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9431);
				rowset_function();
				setState(9433);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1344,_ctx) ) {
				case 1:
					{
					setState(9432);
					as_table_alias();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9435);
				derived_table();
				setState(9440);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1346,_ctx) ) {
				case 1:
					{
					setState(9436);
					as_table_alias();
					setState(9438);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1345,_ctx) ) {
					case 1:
						{
						setState(9437);
						column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9442);
				change_table();
				setState(9443);
				as_table_alias();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9445);
				function_call();
				setState(9447);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1347,_ctx) ) {
				case 1:
					{
					setState(9446);
					as_table_alias();
					}
					break;
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(9449);
				match(LOCAL_ID);
				setState(9451);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1348,_ctx) ) {
				case 1:
					{
					setState(9450);
					as_table_alias();
					}
					break;
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(9453);
				match(LOCAL_ID);
				setState(9454);
				match(DOT);
				setState(9455);
				function_call();
				setState(9460);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1350,_ctx) ) {
				case 1:
					{
					setState(9456);
					as_table_alias();
					setState(9458);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1349,_ctx) ) {
					case 1:
						{
						setState(9457);
						column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(9462);
				open_xml();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(9463);
				match(COLON);
				setState(9464);
				match(COLON);
				setState(9465);
				function_call();
				setState(9467);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1351,_ctx) ) {
				case 1:
					{
					setState(9466);
					as_table_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Open_xmlContext extends ParserRuleContext {
		public TerminalNode OPENXML() { return getToken(TSqlParser.OPENXML, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public Schema_declarationContext schema_declaration() {
			return getRuleContext(Schema_declarationContext.class,0);
		}
		public Open_xmlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_xml; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterOpen_xml(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitOpen_xml(this);
		}
	}

	public final Open_xmlContext open_xml() throws RecognitionException {
		Open_xmlContext _localctx = new Open_xmlContext(_ctx, getState());
		enterRule(_localctx, 794, RULE_open_xml);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9471);
			match(OPENXML);
			setState(9472);
			match(LR_BRACKET);
			setState(9473);
			expression(0);
			setState(9474);
			match(COMMA);
			setState(9475);
			expression(0);
			setState(9478);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(9476);
				match(COMMA);
				setState(9477);
				expression(0);
				}
			}

			setState(9480);
			match(RR_BRACKET);
			setState(9486);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1354,_ctx) ) {
			case 1:
				{
				setState(9481);
				match(WITH);
				setState(9482);
				match(LR_BRACKET);
				setState(9483);
				schema_declaration();
				setState(9484);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_declarationContext extends ParserRuleContext {
		public List<Column_declarationContext> column_declaration() {
			return getRuleContexts(Column_declarationContext.class);
		}
		public Column_declarationContext column_declaration(int i) {
			return getRuleContext(Column_declarationContext.class,i);
		}
		public Schema_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSchema_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSchema_declaration(this);
		}
	}

	public final Schema_declarationContext schema_declaration() throws RecognitionException {
		Schema_declarationContext _localctx = new Schema_declarationContext(_ctx, getState());
		enterRule(_localctx, 796, RULE_schema_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9488);
			column_declaration();
			setState(9493);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9489);
				match(COMMA);
				setState(9490);
				column_declaration();
				}
				}
				setState(9495);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_declarationContext extends ParserRuleContext {
		public TerminalNode ID() { return getToken(TSqlParser.ID, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Column_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterColumn_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitColumn_declaration(this);
		}
	}

	public final Column_declarationContext column_declaration() throws RecognitionException {
		Column_declarationContext _localctx = new Column_declarationContext(_ctx, getState());
		enterRule(_localctx, 798, RULE_column_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9496);
			match(ID);
			setState(9497);
			data_type();
			setState(9499);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STRING) {
				{
				setState(9498);
				match(STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Change_tableContext extends ParserRuleContext {
		public TerminalNode CHANGETABLE() { return getToken(TSqlParser.CHANGETABLE, 0); }
		public TerminalNode CHANGES() { return getToken(TSqlParser.CHANGES, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode NULL() { return getToken(TSqlParser.NULL, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Change_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_change_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterChange_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitChange_table(this);
		}
	}

	public final Change_tableContext change_table() throws RecognitionException {
		Change_tableContext _localctx = new Change_tableContext(_ctx, getState());
		enterRule(_localctx, 800, RULE_change_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9501);
			match(CHANGETABLE);
			setState(9502);
			match(LR_BRACKET);
			setState(9503);
			match(CHANGES);
			setState(9504);
			table_name();
			setState(9505);
			match(COMMA);
			setState(9506);
			_la = _input.LA(1);
			if ( !(_la==NULL || _la==LOCAL_ID || _la==DECIMAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(9507);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_partContext extends ParserRuleContext {
		public Token join_type;
		public Token join_hint;
		public TerminalNode JOIN() { return getToken(TSqlParser.JOIN, 0); }
		public Table_sourceContext table_source() {
			return getRuleContext(Table_sourceContext.class,0);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode LEFT() { return getToken(TSqlParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(TSqlParser.RIGHT, 0); }
		public TerminalNode FULL() { return getToken(TSqlParser.FULL, 0); }
		public TerminalNode INNER() { return getToken(TSqlParser.INNER, 0); }
		public TerminalNode OUTER() { return getToken(TSqlParser.OUTER, 0); }
		public TerminalNode LOOP() { return getToken(TSqlParser.LOOP, 0); }
		public TerminalNode HASH() { return getToken(TSqlParser.HASH, 0); }
		public TerminalNode MERGE() { return getToken(TSqlParser.MERGE, 0); }
		public TerminalNode REMOTE() { return getToken(TSqlParser.REMOTE, 0); }
		public TerminalNode CROSS() { return getToken(TSqlParser.CROSS, 0); }
		public TerminalNode APPLY() { return getToken(TSqlParser.APPLY, 0); }
		public TerminalNode PIVOT() { return getToken(TSqlParser.PIVOT, 0); }
		public Pivot_clauseContext pivot_clause() {
			return getRuleContext(Pivot_clauseContext.class,0);
		}
		public As_table_aliasContext as_table_alias() {
			return getRuleContext(As_table_aliasContext.class,0);
		}
		public TerminalNode UNPIVOT() { return getToken(TSqlParser.UNPIVOT, 0); }
		public Unpivot_clauseContext unpivot_clause() {
			return getRuleContext(Unpivot_clauseContext.class,0);
		}
		public Join_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterJoin_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitJoin_part(this);
		}
	}

	public final Join_partContext join_part() throws RecognitionException {
		Join_partContext _localctx = new Join_partContext(_ctx, getState());
		enterRule(_localctx, 802, RULE_join_part);
		int _la;
		try {
			setState(9543);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1361,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9516);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case INNER:
				case JOIN:
				case MERGE:
				case HASH:
				case LOOP:
				case REMOTE:
					{
					setState(9510);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==INNER) {
						{
						setState(9509);
						match(INNER);
						}
					}

					}
					break;
				case FULL:
				case LEFT:
				case RIGHT:
					{
					setState(9512);
					((Join_partContext)_localctx).join_type = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
						((Join_partContext)_localctx).join_type = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(9514);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OUTER) {
						{
						setState(9513);
						match(OUTER);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(9519);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MERGE || _la==HASH || _la==LOOP || _la==REMOTE) {
					{
					setState(9518);
					((Join_partContext)_localctx).join_hint = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==MERGE || _la==HASH || _la==LOOP || _la==REMOTE) ) {
						((Join_partContext)_localctx).join_hint = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(9521);
				match(JOIN);
				setState(9522);
				table_source();
				setState(9523);
				match(ON);
				setState(9524);
				search_condition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9526);
				match(CROSS);
				setState(9527);
				match(JOIN);
				setState(9528);
				table_source();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9529);
				match(CROSS);
				setState(9530);
				match(APPLY);
				setState(9531);
				table_source();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9532);
				match(OUTER);
				setState(9533);
				match(APPLY);
				setState(9534);
				table_source();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9535);
				match(PIVOT);
				setState(9536);
				pivot_clause();
				setState(9537);
				as_table_alias();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9539);
				match(UNPIVOT);
				setState(9540);
				unpivot_clause();
				setState(9541);
				as_table_alias();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_clauseContext extends ParserRuleContext {
		public Aggregate_windowed_functionContext aggregate_windowed_function() {
			return getRuleContext(Aggregate_windowed_functionContext.class,0);
		}
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public Full_column_nameContext full_column_name() {
			return getRuleContext(Full_column_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(TSqlParser.IN, 0); }
		public Column_alias_listContext column_alias_list() {
			return getRuleContext(Column_alias_listContext.class,0);
		}
		public Pivot_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterPivot_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitPivot_clause(this);
		}
	}

	public final Pivot_clauseContext pivot_clause() throws RecognitionException {
		Pivot_clauseContext _localctx = new Pivot_clauseContext(_ctx, getState());
		enterRule(_localctx, 804, RULE_pivot_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9545);
			match(LR_BRACKET);
			setState(9546);
			aggregate_windowed_function();
			setState(9547);
			match(FOR);
			setState(9548);
			full_column_name();
			setState(9549);
			match(IN);
			setState(9550);
			column_alias_list();
			setState(9551);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unpivot_clauseContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public Full_column_nameContext full_column_name() {
			return getRuleContext(Full_column_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(TSqlParser.IN, 0); }
		public Full_column_name_listContext full_column_name_list() {
			return getRuleContext(Full_column_name_listContext.class,0);
		}
		public Unpivot_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterUnpivot_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitUnpivot_clause(this);
		}
	}

	public final Unpivot_clauseContext unpivot_clause() throws RecognitionException {
		Unpivot_clauseContext _localctx = new Unpivot_clauseContext(_ctx, getState());
		enterRule(_localctx, 806, RULE_unpivot_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9553);
			match(LR_BRACKET);
			setState(9554);
			expression(0);
			setState(9555);
			match(FOR);
			setState(9556);
			full_column_name();
			setState(9557);
			match(IN);
			setState(9558);
			match(LR_BRACKET);
			setState(9559);
			full_column_name_list();
			setState(9560);
			match(RR_BRACKET);
			setState(9561);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Full_column_name_listContext extends ParserRuleContext {
		public List<Full_column_nameContext> full_column_name() {
			return getRuleContexts(Full_column_nameContext.class);
		}
		public Full_column_nameContext full_column_name(int i) {
			return getRuleContext(Full_column_nameContext.class,i);
		}
		public Full_column_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_full_column_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterFull_column_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitFull_column_name_list(this);
		}
	}

	public final Full_column_name_listContext full_column_name_list() throws RecognitionException {
		Full_column_name_listContext _localctx = new Full_column_name_listContext(_ctx, getState());
		enterRule(_localctx, 808, RULE_full_column_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9563);
			full_column_name();
			setState(9568);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9564);
				match(COMMA);
				setState(9565);
				full_column_name();
				}
				}
				setState(9570);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_name_with_hintContext extends ParserRuleContext {
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public With_table_hintsContext with_table_hints() {
			return getRuleContext(With_table_hintsContext.class,0);
		}
		public Table_name_with_hintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_name_with_hint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTable_name_with_hint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTable_name_with_hint(this);
		}
	}

	public final Table_name_with_hintContext table_name_with_hint() throws RecognitionException {
		Table_name_with_hintContext _localctx = new Table_name_with_hintContext(_ctx, getState());
		enterRule(_localctx, 810, RULE_table_name_with_hint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9571);
			table_name();
			setState(9573);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1363,_ctx) ) {
			case 1:
				{
				setState(9572);
				with_table_hints();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rowset_functionContext extends ParserRuleContext {
		public Token provider_name;
		public Token connectionString;
		public Token sql;
		public Token data_file;
		public TerminalNode OPENROWSET() { return getToken(TSqlParser.OPENROWSET, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode BULK() { return getToken(TSqlParser.BULK, 0); }
		public List<Bulk_optionContext> bulk_option() {
			return getRuleContexts(Bulk_optionContext.class);
		}
		public Bulk_optionContext bulk_option(int i) {
			return getRuleContext(Bulk_optionContext.class,i);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Rowset_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowset_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterRowset_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitRowset_function(this);
		}
	}

	public final Rowset_functionContext rowset_function() throws RecognitionException {
		Rowset_functionContext _localctx = new Rowset_functionContext(_ctx, getState());
		enterRule(_localctx, 812, RULE_rowset_function);
		int _la;
		try {
			setState(9601);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1366,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(9575);
				match(OPENROWSET);
				setState(9576);
				match(LR_BRACKET);
				setState(9577);
				((Rowset_functionContext)_localctx).provider_name = match(STRING);
				setState(9578);
				match(COMMA);
				setState(9579);
				((Rowset_functionContext)_localctx).connectionString = match(STRING);
				setState(9580);
				match(COMMA);
				setState(9581);
				((Rowset_functionContext)_localctx).sql = match(STRING);
				setState(9582);
				match(RR_BRACKET);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(9583);
				match(OPENROWSET);
				setState(9584);
				match(LR_BRACKET);
				setState(9585);
				match(BULK);
				setState(9586);
				((Rowset_functionContext)_localctx).data_file = match(STRING);
				setState(9587);
				match(COMMA);
				setState(9597);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1365,_ctx) ) {
				case 1:
					{
					setState(9588);
					bulk_option();
					setState(9593);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(9589);
						match(COMMA);
						setState(9590);
						bulk_option();
						}
						}
						setState(9595);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				case 2:
					{
					setState(9596);
					id();
					}
					break;
				}
				setState(9599);
				match(RR_BRACKET);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bulk_optionContext extends ParserRuleContext {
		public Token bulk_option_value;
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Bulk_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bulk_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterBulk_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitBulk_option(this);
		}
	}

	public final Bulk_optionContext bulk_option() throws RecognitionException {
		Bulk_optionContext _localctx = new Bulk_optionContext(_ctx, getState());
		enterRule(_localctx, 814, RULE_bulk_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9603);
			id();
			setState(9604);
			match(EQUAL);
			setState(9605);
			((Bulk_optionContext)_localctx).bulk_option_value = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DECIMAL || _la==STRING) ) {
				((Bulk_optionContext)_localctx).bulk_option_value = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Derived_tableContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Table_value_constructorContext table_value_constructor() {
			return getRuleContext(Table_value_constructorContext.class,0);
		}
		public Derived_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_derived_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDerived_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDerived_table(this);
		}
	}

	public final Derived_tableContext derived_table() throws RecognitionException {
		Derived_tableContext _localctx = new Derived_tableContext(_ctx, getState());
		enterRule(_localctx, 816, RULE_derived_table);
		try {
			setState(9617);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1367,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9607);
				subquery();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9608);
				match(LR_BRACKET);
				setState(9609);
				subquery();
				setState(9610);
				match(RR_BRACKET);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9612);
				table_value_constructor();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9613);
				match(LR_BRACKET);
				setState(9614);
				table_value_constructor();
				setState(9615);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_callContext extends ParserRuleContext {
		public Function_callContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_call; }
	 
		public Function_callContext() { }
		public void copyFrom(Function_callContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class CURRENT_USERContext extends Function_callContext {
		public TerminalNode CURRENT_USER() { return getToken(TSqlParser.CURRENT_USER, 0); }
		public CURRENT_USERContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCURRENT_USER(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCURRENT_USER(this);
		}
	}
	public static class DATEADDContext extends Function_callContext {
		public TerminalNode DATEADD() { return getToken(TSqlParser.DATEADD, 0); }
		public TerminalNode ID() { return getToken(TSqlParser.ID, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public DATEADDContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDATEADD(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDATEADD(this);
		}
	}
	public static class CHECKSUMContext extends Function_callContext {
		public TerminalNode CHECKSUM() { return getToken(TSqlParser.CHECKSUM, 0); }
		public CHECKSUMContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCHECKSUM(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCHECKSUM(this);
		}
	}
	public static class CURRENT_TIMESTAMPContext extends Function_callContext {
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(TSqlParser.CURRENT_TIMESTAMP, 0); }
		public CURRENT_TIMESTAMPContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCURRENT_TIMESTAMP(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCURRENT_TIMESTAMP(this);
		}
	}
	public static class BINARY_CHECKSUMContext extends Function_callContext {
		public TerminalNode BINARY_CHECKSUM() { return getToken(TSqlParser.BINARY_CHECKSUM, 0); }
		public BINARY_CHECKSUMContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterBINARY_CHECKSUM(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitBINARY_CHECKSUM(this);
		}
	}
	public static class SYSTEM_USERContext extends Function_callContext {
		public TerminalNode SYSTEM_USER() { return getToken(TSqlParser.SYSTEM_USER, 0); }
		public SYSTEM_USERContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSYSTEM_USER(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSYSTEM_USER(this);
		}
	}
	public static class NULLIFContext extends Function_callContext {
		public TerminalNode NULLIF() { return getToken(TSqlParser.NULLIF, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public NULLIFContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterNULLIF(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitNULLIF(this);
		}
	}
	public static class SESSION_USERContext extends Function_callContext {
		public TerminalNode SESSION_USER() { return getToken(TSqlParser.SESSION_USER, 0); }
		public SESSION_USERContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSESSION_USER(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSESSION_USER(this);
		}
	}
	public static class CONVERTContext extends Function_callContext {
		public Data_typeContext convert_data_type;
		public ExpressionContext convert_expression;
		public ExpressionContext style;
		public TerminalNode CONVERT() { return getToken(TSqlParser.CONVERT, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public CONVERTContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCONVERT(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCONVERT(this);
		}
	}
	public static class XML_DATA_TYPE_FUNCContext extends Function_callContext {
		public Xml_data_type_methodsContext xml_data_type_methods() {
			return getRuleContext(Xml_data_type_methodsContext.class,0);
		}
		public XML_DATA_TYPE_FUNCContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterXML_DATA_TYPE_FUNC(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitXML_DATA_TYPE_FUNC(this);
		}
	}
	public static class COALESCEContext extends Function_callContext {
		public TerminalNode COALESCE() { return getToken(TSqlParser.COALESCE, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public COALESCEContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCOALESCE(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCOALESCE(this);
		}
	}
	public static class CASTContext extends Function_callContext {
		public TerminalNode CAST() { return getToken(TSqlParser.CAST, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public CASTContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCAST(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCAST(this);
		}
	}
	public static class MIN_ACTIVE_ROWVERSIONContext extends Function_callContext {
		public TerminalNode MIN_ACTIVE_ROWVERSION() { return getToken(TSqlParser.MIN_ACTIVE_ROWVERSION, 0); }
		public MIN_ACTIVE_ROWVERSIONContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterMIN_ACTIVE_ROWVERSION(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitMIN_ACTIVE_ROWVERSION(this);
		}
	}
	public static class SCALAR_FUNCTIONContext extends Function_callContext {
		public Scalar_function_nameContext scalar_function_name() {
			return getRuleContext(Scalar_function_nameContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public SCALAR_FUNCTIONContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSCALAR_FUNCTION(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSCALAR_FUNCTION(this);
		}
	}
	public static class DATEPARTContext extends Function_callContext {
		public TerminalNode DATEPART() { return getToken(TSqlParser.DATEPART, 0); }
		public TerminalNode ID() { return getToken(TSqlParser.ID, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public DATEPARTContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDATEPART(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDATEPART(this);
		}
	}
	public static class STUFFContext extends Function_callContext {
		public TerminalNode STUFF() { return getToken(TSqlParser.STUFF, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public STUFFContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSTUFF(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSTUFF(this);
		}
	}
	public static class AGGREGATE_WINDOWED_FUNCContext extends Function_callContext {
		public Aggregate_windowed_functionContext aggregate_windowed_function() {
			return getRuleContext(Aggregate_windowed_functionContext.class,0);
		}
		public AGGREGATE_WINDOWED_FUNCContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAGGREGATE_WINDOWED_FUNC(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAGGREGATE_WINDOWED_FUNC(this);
		}
	}
	public static class IDENTITYContext extends Function_callContext {
		public Token seed;
		public Token increment;
		public TerminalNode IDENTITY() { return getToken(TSqlParser.IDENTITY, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public IDENTITYContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterIDENTITY(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitIDENTITY(this);
		}
	}
	public static class RANKING_WINDOWED_FUNCContext extends Function_callContext {
		public Ranking_windowed_functionContext ranking_windowed_function() {
			return getRuleContext(Ranking_windowed_functionContext.class,0);
		}
		public RANKING_WINDOWED_FUNCContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterRANKING_WINDOWED_FUNC(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitRANKING_WINDOWED_FUNC(this);
		}
	}
	public static class DATENAMEContext extends Function_callContext {
		public TerminalNode DATENAME() { return getToken(TSqlParser.DATENAME, 0); }
		public TerminalNode ID() { return getToken(TSqlParser.ID, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public DATENAMEContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDATENAME(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDATENAME(this);
		}
	}
	public static class GETUTCDATEContext extends Function_callContext {
		public TerminalNode GETUTCDATE() { return getToken(TSqlParser.GETUTCDATE, 0); }
		public GETUTCDATEContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterGETUTCDATE(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitGETUTCDATE(this);
		}
	}
	public static class ANALYTIC_WINDOWED_FUNCContext extends Function_callContext {
		public Analytic_windowed_functionContext analytic_windowed_function() {
			return getRuleContext(Analytic_windowed_functionContext.class,0);
		}
		public ANALYTIC_WINDOWED_FUNCContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterANALYTIC_WINDOWED_FUNC(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitANALYTIC_WINDOWED_FUNC(this);
		}
	}
	public static class ISNULLContext extends Function_callContext {
		public TerminalNode ISNULL() { return getToken(TSqlParser.ISNULL, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public ISNULLContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterISNULL(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitISNULL(this);
		}
	}
	public static class DATEDIFFContext extends Function_callContext {
		public TerminalNode DATEDIFF() { return getToken(TSqlParser.DATEDIFF, 0); }
		public TerminalNode ID() { return getToken(TSqlParser.ID, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public DATEDIFFContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDATEDIFF(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDATEDIFF(this);
		}
	}
	public static class GETDATEContext extends Function_callContext {
		public TerminalNode GETDATE() { return getToken(TSqlParser.GETDATE, 0); }
		public GETDATEContext(Function_callContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterGETDATE(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitGETDATE(this);
		}
	}

	public final Function_callContext function_call() throws RecognitionException {
		Function_callContext _localctx = new Function_callContext(_ctx, getState());
		enterRule(_localctx, 818, RULE_function_call);
		int _la;
		try {
			setState(9742);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1372,_ctx) ) {
			case 1:
				_localctx = new RANKING_WINDOWED_FUNCContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(9619);
				ranking_windowed_function();
				}
				break;
			case 2:
				_localctx = new AGGREGATE_WINDOWED_FUNCContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(9620);
				aggregate_windowed_function();
				}
				break;
			case 3:
				_localctx = new ANALYTIC_WINDOWED_FUNCContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(9621);
				analytic_windowed_function();
				}
				break;
			case 4:
				_localctx = new SCALAR_FUNCTIONContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(9622);
				scalar_function_name();
				setState(9623);
				match(LR_BRACKET);
				setState(9625);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BLOCKING_HIERARCHY) | (1L << CALLED) | (1L << CASE) | (1L << COALESCE))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (CONVERT - 69)) | (1L << (CURRENT_TIMESTAMP - 69)) | (1L << (CURRENT_USER - 69)) | (1L << (DATA_COMPRESSION - 69)) | (1L << (DEFAULT - 69)) | (1L << (EVENTDATA - 69)) | (1L << (FILENAME - 69)) | (1L << (FILLFACTOR - 69)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (FORCESEEK - 133)) | (1L << (IDENTITY - 133)) | (1L << (INIT - 133)) | (1L << (ISNULL - 133)) | (1L << (KEY - 133)) | (1L << (LEFT - 133)) | (1L << (MASTER - 133)) | (1L << (MAX_MEMORY - 133)))) != 0) || ((((_la - 221)) & ~0x3f) == 0 && ((1L << (_la - 221)) & ((1L << (NULL - 221)) | (1L << (NULLIF - 221)) | (1L << (OFFSETS - 221)) | (1L << (OVER - 221)) | (1L << (PAGE - 221)) | (1L << (PUBLIC - 221)) | (1L << (R - 221)) | (1L << (RAW - 221)) | (1L << (RETURN - 221)) | (1L << (RETURNS - 221)))) != 0) || ((((_la - 285)) & ~0x3f) == 0 && ((1L << (_la - 285)) & ((1L << (RIGHT - 285)) | (1L << (ROWCOUNT - 285)) | (1L << (SAFETY - 285)) | (1L << (SERVER - 285)) | (1L << (SESSION_USER - 285)) | (1L << (SID - 285)) | (1L << (SOURCE - 285)) | (1L << (STATE - 285)) | (1L << (START - 285)) | (1L << (SYSTEM_USER - 285)) | (1L << (TARGET - 285)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (ABSOLUTE - 383)) | (1L << (ACCENT_SENSITIVITY - 383)) | (1L << (ACTION - 383)) | (1L << (ACTIVATION - 383)) | (1L << (ACTIVE - 383)) | (1L << (ADDRESS - 383)) | (1L << (AES_128 - 383)) | (1L << (AES_192 - 383)) | (1L << (AES_256 - 383)) | (1L << (AFFINITY - 383)) | (1L << (AFTER - 383)) | (1L << (AGGREGATE - 383)) | (1L << (ALGORITHM - 383)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 383)) | (1L << (ALLOWED - 383)) | (1L << (ANSI_NULL_DEFAULT - 383)) | (1L << (ANSI_NULLS - 383)) | (1L << (ANSI_PADDING - 383)) | (1L << (ANSI_WARNINGS - 383)) | (1L << (APPLICATION_LOG - 383)) | (1L << (APPLY - 383)) | (1L << (ARITHABORT - 383)) | (1L << (ASSEMBLY - 383)) | (1L << (AUDIT - 383)) | (1L << (AUDIT_GUID - 383)) | (1L << (AUTO - 383)) | (1L << (AUTO_CLEANUP - 383)) | (1L << (AUTO_CLOSE - 383)) | (1L << (AUTO_CREATE_STATISTICS - 383)) | (1L << (AUTO_SHRINK - 383)) | (1L << (AUTO_UPDATE_STATISTICS - 383)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 383)) | (1L << (AVAILABILITY - 383)) | (1L << (AVG - 383)) | (1L << (BACKUP_PRIORITY - 383)) | (1L << (BEGIN_DIALOG - 383)) | (1L << (BIGINT - 383)) | (1L << (BINARY_BASE64 - 383)) | (1L << (BINARY_CHECKSUM - 383)) | (1L << (BINDING - 383)) | (1L << (BLOB_STORAGE - 383)) | (1L << (BROKER - 383)) | (1L << (BROKER_INSTANCE - 383)) | (1L << (BULK_LOGGED - 383)) | (1L << (CALLER - 383)) | (1L << (CAP_CPU_PERCENT - 383)) | (1L << (CAST - 383)) | (1L << (CATALOG - 383)) | (1L << (CATCH - 383)) | (1L << (CHANGE_RETENTION - 383)) | (1L << (CHANGE_TRACKING - 383)) | (1L << (CHECKSUM - 383)) | (1L << (CHECKSUM_AGG - 383)) | (1L << (CLEANUP - 383)) | (1L << (COLLECTION - 383)) | (1L << (COLUMN_MASTER_KEY - 383)) | (1L << (COMMITTED - 383)) | (1L << (COMPATIBILITY_LEVEL - 383)) | (1L << (CONCAT - 383)) | (1L << (CONCAT_NULL_YIELDS_NULL - 383)) | (1L << (CONTENT - 383)) | (1L << (CONTROL - 383)) | (1L << (COOKIE - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (COUNT - 447)) | (1L << (COUNT_BIG - 447)) | (1L << (COUNTER - 447)) | (1L << (CPU - 447)) | (1L << (CREATE_NEW - 447)) | (1L << (CREATION_DISPOSITION - 447)) | (1L << (CREDENTIAL - 447)) | (1L << (CRYPTOGRAPHIC - 447)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 447)) | (1L << (CURSOR_DEFAULT - 447)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 447)) | (1L << (DATEADD - 447)) | (1L << (DATEDIFF - 447)) | (1L << (DATENAME - 447)) | (1L << (DATEPART - 447)) | (1L << (DAYS - 447)) | (1L << (DB_CHAINING - 447)) | (1L << (DB_FAILOVER - 447)) | (1L << (DECRYPTION - 447)) | (1L << (DEFAULT_DOUBLE_QUOTE - 447)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1L << (DEFAULT_LANGUAGE - 447)) | (1L << (DELAY - 447)) | (1L << (DELAYED_DURABILITY - 447)) | (1L << (DELETED - 447)) | (1L << (DENSE_RANK - 447)) | (1L << (DEPENDENTS - 447)) | (1L << (DES - 447)) | (1L << (DESCRIPTION - 447)) | (1L << (DESX - 447)) | (1L << (DHCP - 447)) | (1L << (DIALOG - 447)) | (1L << (DIRECTORY_NAME - 447)) | (1L << (DISABLE - 447)) | (1L << (DISABLE_BROKER - 447)) | (1L << (DISABLED - 447)) | (1L << (DISK_DRIVE - 447)) | (1L << (DOCUMENT - 447)) | (1L << (DYNAMIC - 447)) | (1L << (EMERGENCY - 447)) | (1L << (EMPTY - 447)) | (1L << (ENABLE - 447)) | (1L << (ENABLE_BROKER - 447)) | (1L << (ENCRYPTED_VALUE - 447)) | (1L << (ENCRYPTION - 447)) | (1L << (ENDPOINT_URL - 447)) | (1L << (ERROR_BROKER_CONVERSATIONS - 447)) | (1L << (EXCLUSIVE - 447)) | (1L << (EXECUTABLE - 447)) | (1L << (EXIST - 447)) | (1L << (EXPAND - 447)) | (1L << (EXPIRY_DATE - 447)) | (1L << (EXPLICIT - 447)) | (1L << (FAIL_OPERATION - 447)) | (1L << (FAILOVER_MODE - 447)) | (1L << (FAILURE - 447)) | (1L << (FAILURE_CONDITION_LEVEL - 447)) | (1L << (FAST - 447)) | (1L << (FAST_FORWARD - 447)) | (1L << (FILEGROUP - 447)) | (1L << (FILEGROWTH - 447)) | (1L << (FILEPATH - 447)) | (1L << (FILESTREAM - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (FILTER - 511)) | (1L << (FIRST - 511)) | (1L << (FIRST_VALUE - 511)) | (1L << (FOLLOWING - 511)) | (1L << (FORCE - 511)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1L << (FORCED - 511)) | (1L << (FORMAT - 511)) | (1L << (FORWARD_ONLY - 511)) | (1L << (FULLSCAN - 511)) | (1L << (FULLTEXT - 511)) | (1L << (GB - 511)) | (1L << (GETDATE - 511)) | (1L << (GETUTCDATE - 511)) | (1L << (GLOBAL - 511)) | (1L << (GO - 511)) | (1L << (GROUP_MAX_REQUESTS - 511)) | (1L << (GROUPING - 511)) | (1L << (GROUPING_ID - 511)) | (1L << (HADR - 511)) | (1L << (HASH - 511)) | (1L << (HEALTH_CHECK_TIMEOUT - 511)) | (1L << (HIGH - 511)) | (1L << (HONOR_BROKER_PRIORITY - 511)) | (1L << (HOURS - 511)) | (1L << (IDENTITY_VALUE - 511)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1L << (IMMEDIATE - 511)) | (1L << (IMPERSONATE - 511)) | (1L << (IMPORTANCE - 511)) | (1L << (INCREMENTAL - 511)) | (1L << (INITIATOR - 511)) | (1L << (INPUT - 511)) | (1L << (INSENSITIVE - 511)) | (1L << (INSERTED - 511)) | (1L << (INT - 511)) | (1L << (IP - 511)) | (1L << (ISOLATION - 511)) | (1L << (KB - 511)) | (1L << (KEEP - 511)) | (1L << (KEEPFIXED - 511)) | (1L << (KEY_SOURCE - 511)) | (1L << (KEYS - 511)) | (1L << (KEYSET - 511)) | (1L << (LAG - 511)) | (1L << (LAST - 511)) | (1L << (LAST_VALUE - 511)) | (1L << (LEAD - 511)) | (1L << (LEVEL - 511)) | (1L << (LIST - 511)) | (1L << (LISTENER - 511)) | (1L << (LISTENER_URL - 511)) | (1L << (LOB_COMPACTION - 511)) | (1L << (LOCAL - 511)) | (1L << (LOCATION - 511)) | (1L << (LOCK - 511)) | (1L << (LOCK_ESCALATION - 511)) | (1L << (LOGIN - 511)) | (1L << (LOOP - 511)) | (1L << (LOW - 511)) | (1L << (MANUAL - 511)) | (1L << (MARK - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (MATERIALIZED - 575)) | (1L << (MAX - 575)) | (1L << (MAX_CPU_PERCENT - 575)) | (1L << (MAX_DOP - 575)) | (1L << (MAX_FILES - 575)) | (1L << (MAX_IOPS_PER_VOLUME - 575)) | (1L << (MAX_MEMORY_PERCENT - 575)) | (1L << (MAX_PROCESSES - 575)) | (1L << (MAX_QUEUE_READERS - 575)) | (1L << (MAX_ROLLOVER_FILES - 575)) | (1L << (MAXDOP - 575)) | (1L << (MAXRECURSION - 575)) | (1L << (MAXSIZE - 575)) | (1L << (MB - 575)) | (1L << (MEDIUM - 575)) | (1L << (MEMORY_OPTIMIZED_DATA - 575)) | (1L << (MESSAGE - 575)) | (1L << (MIN - 575)) | (1L << (MIN_ACTIVE_ROWVERSION - 575)) | (1L << (MIN_CPU_PERCENT - 575)) | (1L << (MIN_IOPS_PER_VOLUME - 575)) | (1L << (MIN_MEMORY_PERCENT - 575)) | (1L << (MINUTES - 575)) | (1L << (MIRROR_ADDRESS - 575)) | (1L << (MIXED_PAGE_ALLOCATION - 575)) | (1L << (MODE - 575)) | (1L << (MODIFY - 575)) | (1L << (MOVE - 575)) | (1L << (MULTI_USER - 575)) | (1L << (NAME - 575)) | (1L << (NESTED_TRIGGERS - 575)) | (1L << (NEW_ACCOUNT - 575)) | (1L << (NEW_BROKER - 575)) | (1L << (NEW_PASSWORD - 575)) | (1L << (NEXT - 575)) | (1L << (NO - 575)) | (1L << (NO_TRUNCATE - 575)) | (1L << (NO_WAIT - 575)) | (1L << (NOCOUNT - 575)) | (1L << (NODES - 575)) | (1L << (NOEXPAND - 575)) | (1L << (NON_TRANSACTED_ACCESS - 575)) | (1L << (NORECOMPUTE - 575)) | (1L << (NORECOVERY - 575)) | (1L << (NOWAIT - 575)) | (1L << (NTILE - 575)) | (1L << (NUMANODE - 575)) | (1L << (NUMBER - 575)) | (1L << (NUMERIC_ROUNDABORT - 575)) | (1L << (OBJECT - 575)) | (1L << (OFFLINE - 575)) | (1L << (OFFSET - 575)) | (1L << (OLD_ACCOUNT - 575)) | (1L << (ONLINE - 575)) | (1L << (ONLY - 575)) | (1L << (OPEN_EXISTING - 575)) | (1L << (OPTIMISTIC - 575)) | (1L << (OPTIMIZE - 575)) | (1L << (OUT - 575)) | (1L << (OUTPUT - 575)) | (1L << (OWNER - 575)) | (1L << (PAGE_VERIFY - 575)) | (1L << (PARAMETERIZATION - 575)) | (1L << (PARTITION - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (PARTITIONS - 639)) | (1L << (PARTNER - 639)) | (1L << (PATH - 639)) | (1L << (POISON_MESSAGE_HANDLING - 639)) | (1L << (POOL - 639)) | (1L << (PORT - 639)) | (1L << (PRECEDING - 639)) | (1L << (PRIMARY_ROLE - 639)) | (1L << (PRIOR - 639)) | (1L << (PRIORITY - 639)) | (1L << (PRIORITY_LEVEL - 639)) | (1L << (PRIVATE - 639)) | (1L << (PRIVATE_KEY - 639)) | (1L << (PRIVILEGES - 639)) | (1L << (PROCEDURE_NAME - 639)) | (1L << (PROPERTY - 639)) | (1L << (PROVIDER - 639)) | (1L << (PROVIDER_KEY_NAME - 639)) | (1L << (QUERY - 639)) | (1L << (QUEUE - 639)) | (1L << (QUEUE_DELAY - 639)) | (1L << (QUOTED_IDENTIFIER - 639)) | (1L << (RANGE - 639)) | (1L << (RANK - 639)) | (1L << (RC2 - 639)) | (1L << (RC4 - 639)) | (1L << (RC4_128 - 639)) | (1L << (READ_COMMITTED_SNAPSHOT - 639)) | (1L << (READ_ONLY - 639)) | (1L << (READ_ONLY_ROUTING_LIST - 639)) | (1L << (READ_WRITE - 639)) | (1L << (READONLY - 639)) | (1L << (REBUILD - 639)) | (1L << (RECEIVE - 639)) | (1L << (RECOMPILE - 639)) | (1L << (RECOVERY - 639)) | (1L << (RECURSIVE_TRIGGERS - 639)) | (1L << (RELATIVE - 639)) | (1L << (REMOTE - 639)) | (1L << (REMOTE_SERVICE_NAME - 639)) | (1L << (REMOVE - 639)) | (1L << (REORGANIZE - 639)) | (1L << (REPEATABLE - 639)) | (1L << (REPLICA - 639)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 639)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 639)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 639)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 639)) | (1L << (RESERVE_DISK_SPACE - 639)) | (1L << (RESOURCE - 639)) | (1L << (RESOURCE_MANAGER_LOCATION - 639)) | (1L << (RESTRICTED_USER - 639)) | (1L << (RETENTION - 639)) | (1L << (ROBUST - 639)) | (1L << (ROOT - 639)) | (1L << (ROUTE - 639)) | (1L << (ROW - 639)) | (1L << (ROW_NUMBER - 639)) | (1L << (ROWGUID - 639)) | (1L << (ROWS - 639)) | (1L << (SAMPLE - 639)) | (1L << (SCHEMABINDING - 639)) | (1L << (SCOPED - 639)) | (1L << (SCROLL - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (SCROLL_LOCKS - 703)) | (1L << (SEARCH - 703)) | (1L << (SECONDARY - 703)) | (1L << (SECONDARY_ONLY - 703)) | (1L << (SECONDARY_ROLE - 703)) | (1L << (SECONDS - 703)) | (1L << (SECRET - 703)) | (1L << (SECURITY_LOG - 703)) | (1L << (SEEDING_MODE - 703)) | (1L << (SELF - 703)) | (1L << (SEMI_SENSITIVE - 703)) | (1L << (SEND - 703)) | (1L << (SENT - 703)) | (1L << (SERIALIZABLE - 703)) | (1L << (SESSION_TIMEOUT - 703)) | (1L << (SETERROR - 703)) | (1L << (SHARE - 703)) | (1L << (SHOWPLAN - 703)) | (1L << (SIGNATURE - 703)) | (1L << (SIMPLE - 703)) | (1L << (SINGLE_USER - 703)) | (1L << (SIZE - 703)) | (1L << (SMALLINT - 703)) | (1L << (SNAPSHOT - 703)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 703)) | (1L << (STANDBY - 703)) | (1L << (START_DATE - 703)) | (1L << (STATIC - 703)) | (1L << (STATS_STREAM - 703)) | (1L << (STATUS - 703)) | (1L << (STDEV - 703)) | (1L << (STDEVP - 703)) | (1L << (STOPLIST - 703)) | (1L << (STUFF - 703)) | (1L << (SUBJECT - 703)) | (1L << (SUM - 703)) | (1L << (SUSPEND - 703)) | (1L << (SYMMETRIC - 703)) | (1L << (SYNCHRONOUS_COMMIT - 703)) | (1L << (SYNONYM - 703)) | (1L << (TAKE - 703)) | (1L << (TARGET_RECOVERY_TIME - 703)) | (1L << (TB - 703)) | (1L << (TEXTIMAGE_ON - 703)) | (1L << (THROW - 703)) | (1L << (TIES - 703)) | (1L << (TIME - 703)) | (1L << (TIMEOUT - 703)) | (1L << (TIMER - 703)) | (1L << (TINYINT - 703)) | (1L << (TORN_PAGE_DETECTION - 703)) | (1L << (TRANSFORM_NOISE_WORDS - 703)) | (1L << (TRIPLE_DES - 703)) | (1L << (TRIPLE_DES_3KEY - 703)) | (1L << (TRUSTWORTHY - 703)) | (1L << (TRY - 703)) | (1L << (TSQL - 703)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 703)) | (1L << (TYPE - 703)) | (1L << (TYPE_WARNING - 703)) | (1L << (UNBOUNDED - 703)) | (1L << (UNCOMMITTED - 703)) | (1L << (UNKNOWN - 703)) | (1L << (UNLIMITED - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (USING - 767)) | (1L << (VALID_XML - 767)) | (1L << (VALIDATION - 767)) | (1L << (VALUE - 767)) | (1L << (VAR - 767)) | (1L << (VARP - 767)) | (1L << (VIEW_METADATA - 767)) | (1L << (VIEWS - 767)) | (1L << (WAIT - 767)) | (1L << (WELL_FORMED_XML - 767)) | (1L << (WORK - 767)) | (1L << (WORKLOAD - 767)) | (1L << (XML - 767)) | (1L << (XMLNAMESPACES - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (LOCAL_ID - 767)) | (1L << (DECIMAL - 767)) | (1L << (ID - 767)) | (1L << (STRING - 767)) | (1L << (BINARY - 767)) | (1L << (FLOAT - 767)) | (1L << (REAL - 767)) | (1L << (DOLLAR - 767)) | (1L << (LR_BRACKET - 767)) | (1L << (PLUS - 767)) | (1L << (MINUS - 767)) | (1L << (BIT_NOT - 767)))) != 0)) {
					{
					setState(9624);
					expression_list();
					}
				}

				setState(9627);
				match(RR_BRACKET);
				}
				break;
			case 5:
				_localctx = new BINARY_CHECKSUMContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(9629);
				match(BINARY_CHECKSUM);
				setState(9630);
				match(LR_BRACKET);
				setState(9631);
				match(STAR);
				setState(9632);
				match(RR_BRACKET);
				}
				break;
			case 6:
				_localctx = new CASTContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(9633);
				match(CAST);
				setState(9634);
				match(LR_BRACKET);
				setState(9635);
				expression(0);
				setState(9636);
				match(AS);
				setState(9637);
				data_type();
				setState(9638);
				match(RR_BRACKET);
				}
				break;
			case 7:
				_localctx = new CONVERTContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(9640);
				match(CONVERT);
				setState(9641);
				match(LR_BRACKET);
				setState(9642);
				((CONVERTContext)_localctx).convert_data_type = data_type();
				setState(9643);
				match(COMMA);
				setState(9644);
				((CONVERTContext)_localctx).convert_expression = expression(0);
				setState(9647);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(9645);
					match(COMMA);
					setState(9646);
					((CONVERTContext)_localctx).style = expression(0);
					}
				}

				setState(9649);
				match(RR_BRACKET);
				}
				break;
			case 8:
				_localctx = new CHECKSUMContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(9651);
				match(CHECKSUM);
				setState(9652);
				match(LR_BRACKET);
				setState(9653);
				match(STAR);
				setState(9654);
				match(RR_BRACKET);
				}
				break;
			case 9:
				_localctx = new COALESCEContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(9655);
				match(COALESCE);
				setState(9656);
				match(LR_BRACKET);
				setState(9657);
				expression_list();
				setState(9658);
				match(RR_BRACKET);
				}
				break;
			case 10:
				_localctx = new CURRENT_TIMESTAMPContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(9660);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case 11:
				_localctx = new CURRENT_USERContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(9661);
				match(CURRENT_USER);
				}
				break;
			case 12:
				_localctx = new DATEADDContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(9662);
				match(DATEADD);
				setState(9663);
				match(LR_BRACKET);
				setState(9664);
				match(ID);
				setState(9665);
				match(COMMA);
				setState(9666);
				expression(0);
				setState(9667);
				match(COMMA);
				setState(9668);
				expression(0);
				setState(9669);
				match(RR_BRACKET);
				}
				break;
			case 13:
				_localctx = new DATEDIFFContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(9671);
				match(DATEDIFF);
				setState(9672);
				match(LR_BRACKET);
				setState(9673);
				match(ID);
				setState(9674);
				match(COMMA);
				setState(9675);
				expression(0);
				setState(9676);
				match(COMMA);
				setState(9677);
				expression(0);
				setState(9678);
				match(RR_BRACKET);
				}
				break;
			case 14:
				_localctx = new DATENAMEContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(9680);
				match(DATENAME);
				setState(9681);
				match(LR_BRACKET);
				setState(9682);
				match(ID);
				setState(9683);
				match(COMMA);
				setState(9684);
				expression(0);
				setState(9685);
				match(RR_BRACKET);
				}
				break;
			case 15:
				_localctx = new DATEPARTContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(9687);
				match(DATEPART);
				setState(9688);
				match(LR_BRACKET);
				setState(9689);
				match(ID);
				setState(9690);
				match(COMMA);
				setState(9691);
				expression(0);
				setState(9692);
				match(RR_BRACKET);
				}
				break;
			case 16:
				_localctx = new GETDATEContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(9694);
				match(GETDATE);
				setState(9695);
				match(LR_BRACKET);
				setState(9696);
				match(RR_BRACKET);
				}
				break;
			case 17:
				_localctx = new GETUTCDATEContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(9697);
				match(GETUTCDATE);
				setState(9698);
				match(LR_BRACKET);
				setState(9699);
				match(RR_BRACKET);
				}
				break;
			case 18:
				_localctx = new IDENTITYContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(9700);
				match(IDENTITY);
				setState(9701);
				match(LR_BRACKET);
				setState(9702);
				data_type();
				setState(9705);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1370,_ctx) ) {
				case 1:
					{
					setState(9703);
					match(COMMA);
					setState(9704);
					((IDENTITYContext)_localctx).seed = match(DECIMAL);
					}
					break;
				}
				setState(9709);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(9707);
					match(COMMA);
					setState(9708);
					((IDENTITYContext)_localctx).increment = match(DECIMAL);
					}
				}

				setState(9711);
				match(RR_BRACKET);
				}
				break;
			case 19:
				_localctx = new MIN_ACTIVE_ROWVERSIONContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(9713);
				match(MIN_ACTIVE_ROWVERSION);
				}
				break;
			case 20:
				_localctx = new NULLIFContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(9714);
				match(NULLIF);
				setState(9715);
				match(LR_BRACKET);
				setState(9716);
				expression(0);
				setState(9717);
				match(COMMA);
				setState(9718);
				expression(0);
				setState(9719);
				match(RR_BRACKET);
				}
				break;
			case 21:
				_localctx = new STUFFContext(_localctx);
				enterOuterAlt(_localctx, 21);
				{
				setState(9721);
				match(STUFF);
				setState(9722);
				match(LR_BRACKET);
				setState(9723);
				expression(0);
				setState(9724);
				match(COMMA);
				setState(9725);
				match(DECIMAL);
				setState(9726);
				match(COMMA);
				setState(9727);
				match(DECIMAL);
				setState(9728);
				match(COMMA);
				setState(9729);
				expression(0);
				setState(9730);
				match(RR_BRACKET);
				}
				break;
			case 22:
				_localctx = new SESSION_USERContext(_localctx);
				enterOuterAlt(_localctx, 22);
				{
				setState(9732);
				match(SESSION_USER);
				}
				break;
			case 23:
				_localctx = new SYSTEM_USERContext(_localctx);
				enterOuterAlt(_localctx, 23);
				{
				setState(9733);
				match(SYSTEM_USER);
				}
				break;
			case 24:
				_localctx = new ISNULLContext(_localctx);
				enterOuterAlt(_localctx, 24);
				{
				setState(9734);
				match(ISNULL);
				setState(9735);
				match(LR_BRACKET);
				setState(9736);
				expression(0);
				setState(9737);
				match(COMMA);
				setState(9738);
				expression(0);
				setState(9739);
				match(RR_BRACKET);
				}
				break;
			case 25:
				_localctx = new XML_DATA_TYPE_FUNCContext(_localctx);
				enterOuterAlt(_localctx, 25);
				{
				setState(9741);
				xml_data_type_methods();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_data_type_methodsContext extends ParserRuleContext {
		public Value_methodContext value_method() {
			return getRuleContext(Value_methodContext.class,0);
		}
		public Query_methodContext query_method() {
			return getRuleContext(Query_methodContext.class,0);
		}
		public Exist_methodContext exist_method() {
			return getRuleContext(Exist_methodContext.class,0);
		}
		public Modify_methodContext modify_method() {
			return getRuleContext(Modify_methodContext.class,0);
		}
		public Nodes_methodContext nodes_method() {
			return getRuleContext(Nodes_methodContext.class,0);
		}
		public Xml_data_type_methodsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_data_type_methods; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterXml_data_type_methods(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitXml_data_type_methods(this);
		}
	}

	public final Xml_data_type_methodsContext xml_data_type_methods() throws RecognitionException {
		Xml_data_type_methodsContext _localctx = new Xml_data_type_methodsContext(_ctx, getState());
		enterRule(_localctx, 820, RULE_xml_data_type_methods);
		try {
			setState(9749);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1373,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9744);
				value_method();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9745);
				query_method();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9746);
				exist_method();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9747);
				modify_method();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9748);
				nodes_method();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Value_methodContext extends ParserRuleContext {
		public Token xquery;
		public Token sqltype;
		public TerminalNode VALUE() { return getToken(TSqlParser.VALUE, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public TerminalNode ID() { return getToken(TSqlParser.ID, 0); }
		public TerminalNode EVENTDATA() { return getToken(TSqlParser.EVENTDATA, 0); }
		public Query_methodContext query_method() {
			return getRuleContext(Query_methodContext.class,0);
		}
		public TerminalNode ROW() { return getToken(TSqlParser.ROW, 0); }
		public TerminalNode PARAM_NODE() { return getToken(TSqlParser.PARAM_NODE, 0); }
		public Value_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_value_method; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterValue_method(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitValue_method(this);
		}
	}

	public final Value_methodContext value_method() throws RecognitionException {
		Value_methodContext _localctx = new Value_methodContext(_ctx, getState());
		enterRule(_localctx, 822, RULE_value_method);
		try {
			setState(9794);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1377,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9755);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1374,_ctx) ) {
				case 1:
					{
					setState(9751);
					match(LOCAL_ID);
					}
					break;
				case 2:
					{
					setState(9752);
					match(ID);
					}
					break;
				case 3:
					{
					setState(9753);
					match(EVENTDATA);
					}
					break;
				case 4:
					{
					setState(9754);
					query_method();
					}
					break;
				}
				setState(9757);
				match(DOT);
				setState(9758);
				match(VALUE);
				setState(9759);
				match(LR_BRACKET);
				setState(9760);
				((Value_methodContext)_localctx).xquery = match(STRING);
				setState(9761);
				match(COMMA);
				setState(9762);
				((Value_methodContext)_localctx).sqltype = match(STRING);
				setState(9763);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9768);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1375,_ctx) ) {
				case 1:
					{
					setState(9764);
					match(LOCAL_ID);
					}
					break;
				case 2:
					{
					setState(9765);
					match(ID);
					}
					break;
				case 3:
					{
					setState(9766);
					match(EVENTDATA);
					}
					break;
				case 4:
					{
					setState(9767);
					query_method();
					}
					break;
				}
				setState(9770);
				match(DOT);
				setState(9771);
				match(ROW);
				setState(9772);
				match(DOT);
				setState(9773);
				match(VALUE);
				setState(9774);
				match(LR_BRACKET);
				setState(9775);
				((Value_methodContext)_localctx).xquery = match(STRING);
				setState(9776);
				match(COMMA);
				setState(9777);
				((Value_methodContext)_localctx).sqltype = match(STRING);
				setState(9778);
				match(RR_BRACKET);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9783);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1376,_ctx) ) {
				case 1:
					{
					setState(9779);
					match(LOCAL_ID);
					}
					break;
				case 2:
					{
					setState(9780);
					match(ID);
					}
					break;
				case 3:
					{
					setState(9781);
					match(EVENTDATA);
					}
					break;
				case 4:
					{
					setState(9782);
					query_method();
					}
					break;
				}
				setState(9785);
				match(DOT);
				setState(9786);
				match(PARAM_NODE);
				setState(9787);
				match(DOT);
				setState(9788);
				match(VALUE);
				setState(9789);
				match(LR_BRACKET);
				setState(9790);
				((Value_methodContext)_localctx).xquery = match(STRING);
				setState(9791);
				match(COMMA);
				setState(9792);
				((Value_methodContext)_localctx).sqltype = match(STRING);
				setState(9793);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_methodContext extends ParserRuleContext {
		public Token xquery;
		public TerminalNode QUERY() { return getToken(TSqlParser.QUERY, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public TerminalNode ID() { return getToken(TSqlParser.ID, 0); }
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public TerminalNode ROW() { return getToken(TSqlParser.ROW, 0); }
		public Query_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_method; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterQuery_method(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitQuery_method(this);
		}
	}

	public final Query_methodContext query_method() throws RecognitionException {
		Query_methodContext _localctx = new Query_methodContext(_ctx, getState());
		enterRule(_localctx, 824, RULE_query_method);
		try {
			setState(9818);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1380,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9799);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1378,_ctx) ) {
				case 1:
					{
					setState(9796);
					match(LOCAL_ID);
					}
					break;
				case 2:
					{
					setState(9797);
					match(ID);
					}
					break;
				case 3:
					{
					setState(9798);
					full_table_name();
					}
					break;
				}
				setState(9801);
				match(DOT);
				setState(9802);
				match(QUERY);
				setState(9803);
				match(LR_BRACKET);
				setState(9804);
				((Query_methodContext)_localctx).xquery = match(STRING);
				setState(9805);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9809);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1379,_ctx) ) {
				case 1:
					{
					setState(9806);
					match(LOCAL_ID);
					}
					break;
				case 2:
					{
					setState(9807);
					match(ID);
					}
					break;
				case 3:
					{
					setState(9808);
					full_table_name();
					}
					break;
				}
				setState(9811);
				match(DOT);
				setState(9812);
				match(ROW);
				setState(9813);
				match(DOT);
				setState(9814);
				match(QUERY);
				setState(9815);
				match(LR_BRACKET);
				setState(9816);
				((Query_methodContext)_localctx).xquery = match(STRING);
				setState(9817);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exist_methodContext extends ParserRuleContext {
		public Token xquery;
		public TerminalNode EXIST() { return getToken(TSqlParser.EXIST, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public TerminalNode ID() { return getToken(TSqlParser.ID, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Exist_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exist_method; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterExist_method(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitExist_method(this);
		}
	}

	public final Exist_methodContext exist_method() throws RecognitionException {
		Exist_methodContext _localctx = new Exist_methodContext(_ctx, getState());
		enterRule(_localctx, 826, RULE_exist_method);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9820);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==ID) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(9821);
			match(DOT);
			setState(9822);
			match(EXIST);
			setState(9823);
			match(LR_BRACKET);
			setState(9824);
			((Exist_methodContext)_localctx).xquery = match(STRING);
			setState(9825);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Modify_methodContext extends ParserRuleContext {
		public Token xml_dml;
		public TerminalNode MODIFY() { return getToken(TSqlParser.MODIFY, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public TerminalNode ID() { return getToken(TSqlParser.ID, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Modify_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modify_method; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterModify_method(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitModify_method(this);
		}
	}

	public final Modify_methodContext modify_method() throws RecognitionException {
		Modify_methodContext _localctx = new Modify_methodContext(_ctx, getState());
		enterRule(_localctx, 828, RULE_modify_method);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9827);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==ID) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(9828);
			match(DOT);
			setState(9829);
			match(MODIFY);
			setState(9830);
			match(LR_BRACKET);
			setState(9831);
			((Modify_methodContext)_localctx).xml_dml = match(STRING);
			setState(9832);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Nodes_methodContext extends ParserRuleContext {
		public Token xquery;
		public TerminalNode NODES() { return getToken(TSqlParser.NODES, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public TerminalNode ID() { return getToken(TSqlParser.ID, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Nodes_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nodes_method; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterNodes_method(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitNodes_method(this);
		}
	}

	public final Nodes_methodContext nodes_method() throws RecognitionException {
		Nodes_methodContext _localctx = new Nodes_methodContext(_ctx, getState());
		enterRule(_localctx, 830, RULE_nodes_method);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9834);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==ID) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(9835);
			match(DOT);
			setState(9836);
			match(NODES);
			setState(9837);
			match(LR_BRACKET);
			setState(9838);
			((Nodes_methodContext)_localctx).xquery = match(STRING);
			setState(9839);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Switch_sectionContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(TSqlParser.WHEN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode THEN() { return getToken(TSqlParser.THEN, 0); }
		public Switch_sectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_switch_section; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSwitch_section(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSwitch_section(this);
		}
	}

	public final Switch_sectionContext switch_section() throws RecognitionException {
		Switch_sectionContext _localctx = new Switch_sectionContext(_ctx, getState());
		enterRule(_localctx, 832, RULE_switch_section);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9841);
			match(WHEN);
			setState(9842);
			expression(0);
			setState(9843);
			match(THEN);
			setState(9844);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Switch_search_condition_sectionContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(TSqlParser.WHEN, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(TSqlParser.THEN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Switch_search_condition_sectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_switch_search_condition_section; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSwitch_search_condition_section(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSwitch_search_condition_section(this);
		}
	}

	public final Switch_search_condition_sectionContext switch_search_condition_section() throws RecognitionException {
		Switch_search_condition_sectionContext _localctx = new Switch_search_condition_sectionContext(_ctx, getState());
		enterRule(_localctx, 834, RULE_switch_search_condition_section);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9846);
			match(WHEN);
			setState(9847);
			search_condition();
			setState(9848);
			match(THEN);
			setState(9849);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class As_column_aliasContext extends ParserRuleContext {
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public As_column_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_as_column_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAs_column_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAs_column_alias(this);
		}
	}

	public final As_column_aliasContext as_column_alias() throws RecognitionException {
		As_column_aliasContext _localctx = new As_column_aliasContext(_ctx, getState());
		enterRule(_localctx, 836, RULE_as_column_alias);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9852);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(9851);
				match(AS);
				}
			}

			setState(9854);
			column_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class As_table_aliasContext extends ParserRuleContext {
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public As_table_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_as_table_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAs_table_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAs_table_alias(this);
		}
	}

	public final As_table_aliasContext as_table_alias() throws RecognitionException {
		As_table_aliasContext _localctx = new As_table_aliasContext(_ctx, getState());
		enterRule(_localctx, 838, RULE_as_table_alias);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9857);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(9856);
				match(AS);
				}
			}

			setState(9859);
			table_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_aliasContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public With_table_hintsContext with_table_hints() {
			return getRuleContext(With_table_hintsContext.class,0);
		}
		public Table_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTable_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTable_alias(this);
		}
	}

	public final Table_aliasContext table_alias() throws RecognitionException {
		Table_aliasContext _localctx = new Table_aliasContext(_ctx, getState());
		enterRule(_localctx, 840, RULE_table_alias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9861);
			id();
			setState(9863);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1383,_ctx) ) {
			case 1:
				{
				setState(9862);
				with_table_hints();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class With_table_hintsContext extends ParserRuleContext {
		public List<Table_hintContext> table_hint() {
			return getRuleContexts(Table_hintContext.class);
		}
		public Table_hintContext table_hint(int i) {
			return getRuleContext(Table_hintContext.class,i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public With_table_hintsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_table_hints; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterWith_table_hints(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitWith_table_hints(this);
		}
	}

	public final With_table_hintsContext with_table_hints() throws RecognitionException {
		With_table_hintsContext _localctx = new With_table_hintsContext(_ctx, getState());
		enterRule(_localctx, 842, RULE_with_table_hints);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9866);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(9865);
				match(WITH);
				}
			}

			setState(9868);
			match(LR_BRACKET);
			setState(9869);
			table_hint();
			setState(9876);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FORCESEEK || _la==INDEX || _la==NOEXPAND || ((((_la - 716)) & ~0x3f) == 0 && ((1L << (_la - 716)) & ((1L << (SERIALIZABLE - 716)) | (1L << (SNAPSHOT - 716)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 716)))) != 0) || _la==ID || _la==COMMA) {
				{
				{
				setState(9871);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(9870);
					match(COMMA);
					}
				}

				setState(9873);
				table_hint();
				}
				}
				setState(9878);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(9879);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_with_table_hintsContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<Table_hintContext> table_hint() {
			return getRuleContexts(Table_hintContext.class);
		}
		public Table_hintContext table_hint(int i) {
			return getRuleContext(Table_hintContext.class,i);
		}
		public Insert_with_table_hintsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_with_table_hints; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterInsert_with_table_hints(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitInsert_with_table_hints(this);
		}
	}

	public final Insert_with_table_hintsContext insert_with_table_hints() throws RecognitionException {
		Insert_with_table_hintsContext _localctx = new Insert_with_table_hintsContext(_ctx, getState());
		enterRule(_localctx, 844, RULE_insert_with_table_hints);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9881);
			match(WITH);
			setState(9882);
			match(LR_BRACKET);
			setState(9883);
			table_hint();
			setState(9890);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FORCESEEK || _la==INDEX || _la==NOEXPAND || ((((_la - 716)) & ~0x3f) == 0 && ((1L << (_la - 716)) & ((1L << (SERIALIZABLE - 716)) | (1L << (SNAPSHOT - 716)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 716)))) != 0) || _la==ID || _la==COMMA) {
				{
				{
				setState(9885);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(9884);
					match(COMMA);
					}
				}

				setState(9887);
				table_hint();
				}
				}
				setState(9892);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(9893);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_hintContext extends ParserRuleContext {
		public TerminalNode INDEX() { return getToken(TSqlParser.INDEX, 0); }
		public List<Index_valueContext> index_value() {
			return getRuleContexts(Index_valueContext.class);
		}
		public Index_valueContext index_value(int i) {
			return getRuleContext(Index_valueContext.class,i);
		}
		public TerminalNode FORCESEEK() { return getToken(TSqlParser.FORCESEEK, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(TSqlParser.SERIALIZABLE, 0); }
		public TerminalNode SNAPSHOT() { return getToken(TSqlParser.SNAPSHOT, 0); }
		public TerminalNode SPATIAL_WINDOW_MAX_CELLS() { return getToken(TSqlParser.SPATIAL_WINDOW_MAX_CELLS, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public List<TerminalNode> ID() { return getTokens(TSqlParser.ID); }
		public TerminalNode ID(int i) {
			return getToken(TSqlParser.ID, i);
		}
		public TerminalNode NOEXPAND() { return getToken(TSqlParser.NOEXPAND, 0); }
		public Table_hintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_hint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTable_hint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTable_hint(this);
		}
	}

	public final Table_hintContext table_hint() throws RecognitionException {
		Table_hintContext _localctx = new Table_hintContext(_ctx, getState());
		enterRule(_localctx, 846, RULE_table_hint);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9896);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOEXPAND) {
				{
				setState(9895);
				match(NOEXPAND);
				}
			}

			setState(9946);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1395,_ctx) ) {
			case 1:
				{
				setState(9898);
				match(INDEX);
				setState(9918);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LR_BRACKET:
					{
					setState(9899);
					match(LR_BRACKET);
					setState(9900);
					index_value();
					setState(9905);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(9901);
						match(COMMA);
						setState(9902);
						index_value();
						}
						}
						setState(9907);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(9908);
					match(RR_BRACKET);
					}
					break;
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SID:
				case SOURCE:
				case STATE:
				case START:
				case TARGET:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case DECIMAL:
				case ID:
					{
					setState(9910);
					index_value();
					setState(9915);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1391,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(9911);
							match(COMMA);
							setState(9912);
							index_value();
							}
							} 
						}
						setState(9917);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,1391,_ctx);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				setState(9920);
				match(INDEX);
				setState(9921);
				match(EQUAL);
				setState(9922);
				index_value();
				}
				break;
			case 3:
				{
				setState(9923);
				match(FORCESEEK);
				setState(9938);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(9924);
					match(LR_BRACKET);
					setState(9925);
					index_value();
					setState(9926);
					match(LR_BRACKET);
					setState(9927);
					match(ID);
					setState(9932);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(9928);
						match(COMMA);
						setState(9929);
						match(ID);
						}
						}
						setState(9934);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(9935);
					match(RR_BRACKET);
					setState(9936);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case 4:
				{
				setState(9940);
				match(SERIALIZABLE);
				}
				break;
			case 5:
				{
				setState(9941);
				match(SNAPSHOT);
				}
				break;
			case 6:
				{
				setState(9942);
				match(SPATIAL_WINDOW_MAX_CELLS);
				setState(9943);
				match(EQUAL);
				setState(9944);
				match(DECIMAL);
				}
				break;
			case 7:
				{
				setState(9945);
				match(ID);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_valueContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public Index_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterIndex_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitIndex_value(this);
		}
	}

	public final Index_valueContext index_value() throws RecognitionException {
		Index_valueContext _localctx = new Index_valueContext(_ctx, getState());
		enterRule(_localctx, 848, RULE_index_value);
		try {
			setState(9950);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case START:
			case TARGET:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(9948);
				id();
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(9949);
				match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_alias_listContext extends ParserRuleContext {
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public Column_alias_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_alias_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterColumn_alias_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitColumn_alias_list(this);
		}
	}

	public final Column_alias_listContext column_alias_list() throws RecognitionException {
		Column_alias_listContext _localctx = new Column_alias_listContext(_ctx, getState());
		enterRule(_localctx, 850, RULE_column_alias_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9952);
			match(LR_BRACKET);
			setState(9953);
			column_alias();
			setState(9958);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9954);
				match(COMMA);
				setState(9955);
				column_alias();
				}
				}
				setState(9960);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(9961);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_aliasContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Column_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterColumn_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitColumn_alias(this);
		}
	}

	public final Column_aliasContext column_alias() throws RecognitionException {
		Column_aliasContext _localctx = new Column_aliasContext(_ctx, getState());
		enterRule(_localctx, 852, RULE_column_alias);
		try {
			setState(9965);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case START:
			case TARGET:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(9963);
				id();
				}
				break;
			case STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(9964);
				match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_value_constructorContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(TSqlParser.VALUES, 0); }
		public List<Expression_listContext> expression_list() {
			return getRuleContexts(Expression_listContext.class);
		}
		public Expression_listContext expression_list(int i) {
			return getRuleContext(Expression_listContext.class,i);
		}
		public Table_value_constructorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_value_constructor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTable_value_constructor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTable_value_constructor(this);
		}
	}

	public final Table_value_constructorContext table_value_constructor() throws RecognitionException {
		Table_value_constructorContext _localctx = new Table_value_constructorContext(_ctx, getState());
		enterRule(_localctx, 854, RULE_table_value_constructor);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9967);
			match(VALUES);
			setState(9968);
			match(LR_BRACKET);
			setState(9969);
			expression_list();
			setState(9970);
			match(RR_BRACKET);
			setState(9978);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1399,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(9971);
					match(COMMA);
					setState(9972);
					match(LR_BRACKET);
					setState(9973);
					expression_list();
					setState(9974);
					match(RR_BRACKET);
					}
					} 
				}
				setState(9980);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1399,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expression_listContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterExpression_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitExpression_list(this);
		}
	}

	public final Expression_listContext expression_list() throws RecognitionException {
		Expression_listContext _localctx = new Expression_listContext(_ctx, getState());
		enterRule(_localctx, 856, RULE_expression_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9981);
			expression(0);
			setState(9986);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9982);
				match(COMMA);
				setState(9983);
				expression(0);
				}
				}
				setState(9988);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ranking_windowed_functionContext extends ParserRuleContext {
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public TerminalNode RANK() { return getToken(TSqlParser.RANK, 0); }
		public TerminalNode DENSE_RANK() { return getToken(TSqlParser.DENSE_RANK, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(TSqlParser.ROW_NUMBER, 0); }
		public TerminalNode NTILE() { return getToken(TSqlParser.NTILE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Ranking_windowed_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ranking_windowed_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterRanking_windowed_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitRanking_windowed_function(this);
		}
	}

	public final Ranking_windowed_functionContext ranking_windowed_function() throws RecognitionException {
		Ranking_windowed_functionContext _localctx = new Ranking_windowed_functionContext(_ctx, getState());
		enterRule(_localctx, 858, RULE_ranking_windowed_function);
		int _la;
		try {
			setState(9999);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DENSE_RANK:
			case RANK:
			case ROW_NUMBER:
				enterOuterAlt(_localctx, 1);
				{
				setState(9989);
				_la = _input.LA(1);
				if ( !(_la==DENSE_RANK || _la==RANK || _la==ROW_NUMBER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9990);
				match(LR_BRACKET);
				setState(9991);
				match(RR_BRACKET);
				setState(9992);
				over_clause();
				}
				break;
			case NTILE:
				enterOuterAlt(_localctx, 2);
				{
				setState(9993);
				match(NTILE);
				setState(9994);
				match(LR_BRACKET);
				setState(9995);
				expression(0);
				setState(9996);
				match(RR_BRACKET);
				setState(9997);
				over_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Aggregate_windowed_functionContext extends ParserRuleContext {
		public All_distinct_expressionContext all_distinct_expression() {
			return getRuleContext(All_distinct_expressionContext.class,0);
		}
		public TerminalNode AVG() { return getToken(TSqlParser.AVG, 0); }
		public TerminalNode MAX() { return getToken(TSqlParser.MAX, 0); }
		public TerminalNode MIN() { return getToken(TSqlParser.MIN, 0); }
		public TerminalNode SUM() { return getToken(TSqlParser.SUM, 0); }
		public TerminalNode STDEV() { return getToken(TSqlParser.STDEV, 0); }
		public TerminalNode STDEVP() { return getToken(TSqlParser.STDEVP, 0); }
		public TerminalNode VAR() { return getToken(TSqlParser.VAR, 0); }
		public TerminalNode VARP() { return getToken(TSqlParser.VARP, 0); }
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public TerminalNode COUNT() { return getToken(TSqlParser.COUNT, 0); }
		public TerminalNode COUNT_BIG() { return getToken(TSqlParser.COUNT_BIG, 0); }
		public TerminalNode CHECKSUM_AGG() { return getToken(TSqlParser.CHECKSUM_AGG, 0); }
		public TerminalNode GROUPING() { return getToken(TSqlParser.GROUPING, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode GROUPING_ID() { return getToken(TSqlParser.GROUPING_ID, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Aggregate_windowed_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate_windowed_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAggregate_windowed_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAggregate_windowed_function(this);
		}
	}

	public final Aggregate_windowed_functionContext aggregate_windowed_function() throws RecognitionException {
		Aggregate_windowed_functionContext _localctx = new Aggregate_windowed_functionContext(_ctx, getState());
		enterRule(_localctx, 860, RULE_aggregate_windowed_function);
		int _la;
		try {
			setState(10033);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AVG:
			case MAX:
			case MIN:
			case STDEV:
			case STDEVP:
			case SUM:
			case VAR:
			case VARP:
				enterOuterAlt(_localctx, 1);
				{
				setState(10001);
				_la = _input.LA(1);
				if ( !(_la==AVG || _la==MAX || _la==MIN || ((((_la - 733)) & ~0x3f) == 0 && ((1L << (_la - 733)) & ((1L << (STDEV - 733)) | (1L << (STDEVP - 733)) | (1L << (SUM - 733)) | (1L << (VAR - 733)) | (1L << (VARP - 733)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(10002);
				match(LR_BRACKET);
				setState(10003);
				all_distinct_expression();
				setState(10004);
				match(RR_BRACKET);
				setState(10006);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1402,_ctx) ) {
				case 1:
					{
					setState(10005);
					over_clause();
					}
					break;
				}
				}
				break;
			case COUNT:
			case COUNT_BIG:
				enterOuterAlt(_localctx, 2);
				{
				setState(10008);
				_la = _input.LA(1);
				if ( !(_la==COUNT || _la==COUNT_BIG) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(10009);
				match(LR_BRACKET);
				setState(10012);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STAR:
					{
					setState(10010);
					match(STAR);
					}
					break;
				case ALL:
				case BLOCKING_HIERARCHY:
				case CALLED:
				case CASE:
				case COALESCE:
				case CONVERT:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DATA_COMPRESSION:
				case DEFAULT:
				case DISTINCT:
				case EVENTDATA:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case IDENTITY:
				case INIT:
				case ISNULL:
				case KEY:
				case LEFT:
				case MASTER:
				case MAX_MEMORY:
				case NULL:
				case NULLIF:
				case OFFSETS:
				case OVER:
				case PAGE:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case RIGHT:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SESSION_USER:
				case SID:
				case SOURCE:
				case STATE:
				case START:
				case SYSTEM_USER:
				case TARGET:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case LOCAL_ID:
				case DECIMAL:
				case ID:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case LR_BRACKET:
				case PLUS:
				case MINUS:
				case BIT_NOT:
					{
					setState(10011);
					all_distinct_expression();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(10014);
				match(RR_BRACKET);
				setState(10016);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1404,_ctx) ) {
				case 1:
					{
					setState(10015);
					over_clause();
					}
					break;
				}
				}
				break;
			case CHECKSUM_AGG:
				enterOuterAlt(_localctx, 3);
				{
				setState(10018);
				match(CHECKSUM_AGG);
				setState(10019);
				match(LR_BRACKET);
				setState(10020);
				all_distinct_expression();
				setState(10021);
				match(RR_BRACKET);
				}
				break;
			case GROUPING:
				enterOuterAlt(_localctx, 4);
				{
				setState(10023);
				match(GROUPING);
				setState(10024);
				match(LR_BRACKET);
				setState(10025);
				expression(0);
				setState(10026);
				match(RR_BRACKET);
				}
				break;
			case GROUPING_ID:
				enterOuterAlt(_localctx, 5);
				{
				setState(10028);
				match(GROUPING_ID);
				setState(10029);
				match(LR_BRACKET);
				setState(10030);
				expression_list();
				setState(10031);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Analytic_windowed_functionContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public TerminalNode FIRST_VALUE() { return getToken(TSqlParser.FIRST_VALUE, 0); }
		public TerminalNode LAST_VALUE() { return getToken(TSqlParser.LAST_VALUE, 0); }
		public TerminalNode LAG() { return getToken(TSqlParser.LAG, 0); }
		public TerminalNode LEAD() { return getToken(TSqlParser.LEAD, 0); }
		public Analytic_windowed_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analytic_windowed_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAnalytic_windowed_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAnalytic_windowed_function(this);
		}
	}

	public final Analytic_windowed_functionContext analytic_windowed_function() throws RecognitionException {
		Analytic_windowed_functionContext _localctx = new Analytic_windowed_functionContext(_ctx, getState());
		enterRule(_localctx, 862, RULE_analytic_windowed_function);
		int _la;
		try {
			setState(10055);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FIRST_VALUE:
			case LAST_VALUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(10035);
				_la = _input.LA(1);
				if ( !(_la==FIRST_VALUE || _la==LAST_VALUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(10036);
				match(LR_BRACKET);
				setState(10037);
				expression(0);
				setState(10038);
				match(RR_BRACKET);
				setState(10039);
				over_clause();
				}
				break;
			case LAG:
			case LEAD:
				enterOuterAlt(_localctx, 2);
				{
				setState(10041);
				_la = _input.LA(1);
				if ( !(_la==LAG || _la==LEAD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(10042);
				match(LR_BRACKET);
				setState(10043);
				expression(0);
				setState(10050);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(10044);
					match(COMMA);
					setState(10045);
					expression(0);
					setState(10048);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(10046);
						match(COMMA);
						setState(10047);
						expression(0);
						}
					}

					}
				}

				setState(10052);
				match(RR_BRACKET);
				setState(10053);
				over_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class All_distinct_expressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ALL() { return getToken(TSqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(TSqlParser.DISTINCT, 0); }
		public All_distinct_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_all_distinct_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAll_distinct_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAll_distinct_expression(this);
		}
	}

	public final All_distinct_expressionContext all_distinct_expression() throws RecognitionException {
		All_distinct_expressionContext _localctx = new All_distinct_expressionContext(_ctx, getState());
		enterRule(_localctx, 864, RULE_all_distinct_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10058);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(10057);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(10060);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Over_clauseContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(TSqlParser.OVER, 0); }
		public TerminalNode PARTITION() { return getToken(TSqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Row_or_range_clauseContext row_or_range_clause() {
			return getRuleContext(Row_or_range_clauseContext.class,0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterOver_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitOver_clause(this);
		}
	}

	public final Over_clauseContext over_clause() throws RecognitionException {
		Over_clauseContext _localctx = new Over_clauseContext(_ctx, getState());
		enterRule(_localctx, 866, RULE_over_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10062);
			match(OVER);
			setState(10063);
			match(LR_BRACKET);
			setState(10067);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(10064);
				match(PARTITION);
				setState(10065);
				match(BY);
				setState(10066);
				expression_list();
				}
			}

			setState(10070);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(10069);
				order_by_clause();
				}
			}

			setState(10073);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RANGE || _la==ROWS) {
				{
				setState(10072);
				row_or_range_clause();
				}
			}

			setState(10075);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_or_range_clauseContext extends ParserRuleContext {
		public Window_frame_extentContext window_frame_extent() {
			return getRuleContext(Window_frame_extentContext.class,0);
		}
		public TerminalNode ROWS() { return getToken(TSqlParser.ROWS, 0); }
		public TerminalNode RANGE() { return getToken(TSqlParser.RANGE, 0); }
		public Row_or_range_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_or_range_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterRow_or_range_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitRow_or_range_clause(this);
		}
	}

	public final Row_or_range_clauseContext row_or_range_clause() throws RecognitionException {
		Row_or_range_clauseContext _localctx = new Row_or_range_clauseContext(_ctx, getState());
		enterRule(_localctx, 868, RULE_row_or_range_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10077);
			_la = _input.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(10078);
			window_frame_extent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_frame_extentContext extends ParserRuleContext {
		public Window_frame_precedingContext window_frame_preceding() {
			return getRuleContext(Window_frame_precedingContext.class,0);
		}
		public TerminalNode BETWEEN() { return getToken(TSqlParser.BETWEEN, 0); }
		public List<Window_frame_boundContext> window_frame_bound() {
			return getRuleContexts(Window_frame_boundContext.class);
		}
		public Window_frame_boundContext window_frame_bound(int i) {
			return getRuleContext(Window_frame_boundContext.class,i);
		}
		public TerminalNode AND() { return getToken(TSqlParser.AND, 0); }
		public Window_frame_extentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_extent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterWindow_frame_extent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitWindow_frame_extent(this);
		}
	}

	public final Window_frame_extentContext window_frame_extent() throws RecognitionException {
		Window_frame_extentContext _localctx = new Window_frame_extentContext(_ctx, getState());
		enterRule(_localctx, 870, RULE_window_frame_extent);
		try {
			setState(10086);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT:
			case UNBOUNDED:
			case DECIMAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(10080);
				window_frame_preceding();
				}
				break;
			case BETWEEN:
				enterOuterAlt(_localctx, 2);
				{
				setState(10081);
				match(BETWEEN);
				setState(10082);
				window_frame_bound();
				setState(10083);
				match(AND);
				setState(10084);
				window_frame_bound();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_frame_boundContext extends ParserRuleContext {
		public Window_frame_precedingContext window_frame_preceding() {
			return getRuleContext(Window_frame_precedingContext.class,0);
		}
		public Window_frame_followingContext window_frame_following() {
			return getRuleContext(Window_frame_followingContext.class,0);
		}
		public Window_frame_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterWindow_frame_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitWindow_frame_bound(this);
		}
	}

	public final Window_frame_boundContext window_frame_bound() throws RecognitionException {
		Window_frame_boundContext _localctx = new Window_frame_boundContext(_ctx, getState());
		enterRule(_localctx, 872, RULE_window_frame_bound);
		try {
			setState(10090);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1414,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10088);
				window_frame_preceding();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10089);
				window_frame_following();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_frame_precedingContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(TSqlParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(TSqlParser.PRECEDING, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode CURRENT() { return getToken(TSqlParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(TSqlParser.ROW, 0); }
		public Window_frame_precedingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_preceding; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterWindow_frame_preceding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitWindow_frame_preceding(this);
		}
	}

	public final Window_frame_precedingContext window_frame_preceding() throws RecognitionException {
		Window_frame_precedingContext _localctx = new Window_frame_precedingContext(_ctx, getState());
		enterRule(_localctx, 874, RULE_window_frame_preceding);
		try {
			setState(10098);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNBOUNDED:
				enterOuterAlt(_localctx, 1);
				{
				setState(10092);
				match(UNBOUNDED);
				setState(10093);
				match(PRECEDING);
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(10094);
				match(DECIMAL);
				setState(10095);
				match(PRECEDING);
				}
				break;
			case CURRENT:
				enterOuterAlt(_localctx, 3);
				{
				setState(10096);
				match(CURRENT);
				setState(10097);
				match(ROW);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_frame_followingContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(TSqlParser.UNBOUNDED, 0); }
		public TerminalNode FOLLOWING() { return getToken(TSqlParser.FOLLOWING, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public Window_frame_followingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_following; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterWindow_frame_following(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitWindow_frame_following(this);
		}
	}

	public final Window_frame_followingContext window_frame_following() throws RecognitionException {
		Window_frame_followingContext _localctx = new Window_frame_followingContext(_ctx, getState());
		enterRule(_localctx, 876, RULE_window_frame_following);
		try {
			setState(10104);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNBOUNDED:
				enterOuterAlt(_localctx, 1);
				{
				setState(10100);
				match(UNBOUNDED);
				setState(10101);
				match(FOLLOWING);
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(10102);
				match(DECIMAL);
				setState(10103);
				match(FOLLOWING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_database_optionContext extends ParserRuleContext {
		public TerminalNode FILESTREAM() { return getToken(TSqlParser.FILESTREAM, 0); }
		public List<Database_filestream_optionContext> database_filestream_option() {
			return getRuleContexts(Database_filestream_optionContext.class);
		}
		public Database_filestream_optionContext database_filestream_option(int i) {
			return getRuleContext(Database_filestream_optionContext.class,i);
		}
		public TerminalNode DEFAULT_LANGUAGE() { return getToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode DEFAULT_FULLTEXT_LANGUAGE() { return getToken(TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0); }
		public TerminalNode NESTED_TRIGGERS() { return getToken(TSqlParser.NESTED_TRIGGERS, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode TRANSFORM_NOISE_WORDS() { return getToken(TSqlParser.TRANSFORM_NOISE_WORDS, 0); }
		public TerminalNode TWO_DIGIT_YEAR_CUTOFF() { return getToken(TSqlParser.TWO_DIGIT_YEAR_CUTOFF, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode DB_CHAINING() { return getToken(TSqlParser.DB_CHAINING, 0); }
		public TerminalNode TRUSTWORTHY() { return getToken(TSqlParser.TRUSTWORTHY, 0); }
		public Create_database_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_database_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCreate_database_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCreate_database_option(this);
		}
	}

	public final Create_database_optionContext create_database_option() throws RecognitionException {
		Create_database_optionContext _localctx = new Create_database_optionContext(_ctx, getState());
		enterRule(_localctx, 878, RULE_create_database_option);
		int _la;
		try {
			int _alt;
			setState(10140);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILESTREAM:
				enterOuterAlt(_localctx, 1);
				{
				setState(10106);
				match(FILESTREAM);
				{
				setState(10107);
				database_filestream_option();
				setState(10112);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1417,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(10108);
						match(COMMA);
						setState(10109);
						database_filestream_option();
						}
						} 
					}
					setState(10114);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1417,_ctx);
				}
				}
				}
				break;
			case DEFAULT_LANGUAGE:
				enterOuterAlt(_localctx, 2);
				{
				setState(10115);
				match(DEFAULT_LANGUAGE);
				setState(10116);
				match(EQUAL);
				setState(10119);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SID:
				case SOURCE:
				case STATE:
				case START:
				case TARGET:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(10117);
					id();
					}
					break;
				case STRING:
					{
					setState(10118);
					match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DEFAULT_FULLTEXT_LANGUAGE:
				enterOuterAlt(_localctx, 3);
				{
				setState(10121);
				match(DEFAULT_FULLTEXT_LANGUAGE);
				setState(10122);
				match(EQUAL);
				setState(10125);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CALLED:
				case DATA_COMPRESSION:
				case EVENTDATA:
				case FILENAME:
				case FILLFACTOR:
				case FORCESEEK:
				case INIT:
				case KEY:
				case MASTER:
				case MAX_MEMORY:
				case OFFSETS:
				case PAGE:
				case PUBLIC:
				case R:
				case RAW:
				case RETURN:
				case RETURNS:
				case ROWCOUNT:
				case SAFETY:
				case SERVER:
				case SID:
				case SOURCE:
				case STATE:
				case START:
				case TARGET:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STUFF:
				case SUBJECT:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLNAMESPACES:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(10123);
					id();
					}
					break;
				case STRING:
					{
					setState(10124);
					match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NESTED_TRIGGERS:
				enterOuterAlt(_localctx, 4);
				{
				setState(10127);
				match(NESTED_TRIGGERS);
				setState(10128);
				match(EQUAL);
				setState(10129);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case TRANSFORM_NOISE_WORDS:
				enterOuterAlt(_localctx, 5);
				{
				setState(10130);
				match(TRANSFORM_NOISE_WORDS);
				setState(10131);
				match(EQUAL);
				setState(10132);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case TWO_DIGIT_YEAR_CUTOFF:
				enterOuterAlt(_localctx, 6);
				{
				setState(10133);
				match(TWO_DIGIT_YEAR_CUTOFF);
				setState(10134);
				match(EQUAL);
				setState(10135);
				match(DECIMAL);
				}
				break;
			case DB_CHAINING:
				enterOuterAlt(_localctx, 7);
				{
				setState(10136);
				match(DB_CHAINING);
				setState(10137);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case TRUSTWORTHY:
				enterOuterAlt(_localctx, 8);
				{
				setState(10138);
				match(TRUSTWORTHY);
				setState(10139);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Database_filestream_optionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode NON_TRANSACTED_ACCESS() { return getToken(TSqlParser.NON_TRANSACTED_ACCESS, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode DIRECTORY_NAME() { return getToken(TSqlParser.DIRECTORY_NAME, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public TerminalNode READ_ONLY() { return getToken(TSqlParser.READ_ONLY, 0); }
		public TerminalNode FULL() { return getToken(TSqlParser.FULL, 0); }
		public Database_filestream_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_database_filestream_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDatabase_filestream_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDatabase_filestream_option(this);
		}
	}

	public final Database_filestream_optionContext database_filestream_option() throws RecognitionException {
		Database_filestream_optionContext _localctx = new Database_filestream_optionContext(_ctx, getState());
		enterRule(_localctx, 880, RULE_database_filestream_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10142);
			match(LR_BRACKET);
			setState(10149);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NON_TRANSACTED_ACCESS:
				{
				{
				setState(10143);
				match(NON_TRANSACTED_ACCESS);
				setState(10144);
				match(EQUAL);
				setState(10145);
				_la = _input.LA(1);
				if ( !(_la==FULL || _la==OFF || _la==READ_ONLY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case DIRECTORY_NAME:
				{
				{
				setState(10146);
				match(DIRECTORY_NAME);
				setState(10147);
				match(EQUAL);
				setState(10148);
				match(STRING);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(10151);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Database_file_specContext extends ParserRuleContext {
		public File_groupContext file_group() {
			return getRuleContext(File_groupContext.class,0);
		}
		public File_specContext file_spec() {
			return getRuleContext(File_specContext.class,0);
		}
		public Database_file_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_database_file_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDatabase_file_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDatabase_file_spec(this);
		}
	}

	public final Database_file_specContext database_file_spec() throws RecognitionException {
		Database_file_specContext _localctx = new Database_file_specContext(_ctx, getState());
		enterRule(_localctx, 882, RULE_database_file_spec);
		try {
			setState(10155);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILEGROUP:
				enterOuterAlt(_localctx, 1);
				{
				setState(10153);
				file_group();
				}
				break;
			case LR_BRACKET:
				enterOuterAlt(_localctx, 2);
				{
				setState(10154);
				file_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_groupContext extends ParserRuleContext {
		public TerminalNode FILEGROUP() { return getToken(TSqlParser.FILEGROUP, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<File_specContext> file_spec() {
			return getRuleContexts(File_specContext.class);
		}
		public File_specContext file_spec(int i) {
			return getRuleContext(File_specContext.class,i);
		}
		public List<TerminalNode> CONTAINS() { return getTokens(TSqlParser.CONTAINS); }
		public TerminalNode CONTAINS(int i) {
			return getToken(TSqlParser.CONTAINS, i);
		}
		public TerminalNode FILESTREAM() { return getToken(TSqlParser.FILESTREAM, 0); }
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public TerminalNode MEMORY_OPTIMIZED_DATA() { return getToken(TSqlParser.MEMORY_OPTIMIZED_DATA, 0); }
		public File_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_group; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterFile_group(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitFile_group(this);
		}
	}

	public final File_groupContext file_group() throws RecognitionException {
		File_groupContext _localctx = new File_groupContext(_ctx, getState());
		enterRule(_localctx, 884, RULE_file_group);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(10157);
			match(FILEGROUP);
			setState(10158);
			id();
			setState(10161);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1423,_ctx) ) {
			case 1:
				{
				setState(10159);
				match(CONTAINS);
				setState(10160);
				match(FILESTREAM);
				}
				break;
			}
			setState(10164);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(10163);
				match(DEFAULT);
				}
			}

			setState(10168);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONTAINS) {
				{
				setState(10166);
				match(CONTAINS);
				setState(10167);
				match(MEMORY_OPTIMIZED_DATA);
				}
			}

			setState(10170);
			file_spec();
			setState(10175);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1426,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(10171);
					match(COMMA);
					setState(10172);
					file_spec();
					}
					} 
				}
				setState(10177);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1426,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_specContext extends ParserRuleContext {
		public Token file;
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode NAME() { return getToken(TSqlParser.NAME, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode FILENAME() { return getToken(TSqlParser.FILENAME, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode SIZE() { return getToken(TSqlParser.SIZE, 0); }
		public List<File_sizeContext> file_size() {
			return getRuleContexts(File_sizeContext.class);
		}
		public File_sizeContext file_size(int i) {
			return getRuleContext(File_sizeContext.class,i);
		}
		public TerminalNode MAXSIZE() { return getToken(TSqlParser.MAXSIZE, 0); }
		public TerminalNode FILEGROWTH() { return getToken(TSqlParser.FILEGROWTH, 0); }
		public TerminalNode UNLIMITED() { return getToken(TSqlParser.UNLIMITED, 0); }
		public File_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterFile_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitFile_spec(this);
		}
	}

	public final File_specContext file_spec() throws RecognitionException {
		File_specContext _localctx = new File_specContext(_ctx, getState());
		enterRule(_localctx, 886, RULE_file_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10178);
			match(LR_BRACKET);
			setState(10179);
			match(NAME);
			setState(10180);
			match(EQUAL);
			setState(10183);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case START:
			case TARGET:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				setState(10181);
				id();
				}
				break;
			case STRING:
				{
				setState(10182);
				match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(10186);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(10185);
				match(COMMA);
				}
			}

			setState(10188);
			match(FILENAME);
			setState(10189);
			match(EQUAL);
			setState(10190);
			((File_specContext)_localctx).file = match(STRING);
			setState(10192);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(10191);
				match(COMMA);
				}
			}

			setState(10200);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SIZE) {
				{
				setState(10194);
				match(SIZE);
				setState(10195);
				match(EQUAL);
				setState(10196);
				file_size();
				setState(10198);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(10197);
					match(COMMA);
					}
				}

				}
			}

			setState(10211);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MAXSIZE) {
				{
				setState(10202);
				match(MAXSIZE);
				setState(10203);
				match(EQUAL);
				setState(10206);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DECIMAL:
					{
					setState(10204);
					file_size();
					}
					break;
				case UNLIMITED:
					{
					setState(10205);
					match(UNLIMITED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(10209);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(10208);
					match(COMMA);
					}
				}

				}
			}

			setState(10219);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILEGROWTH) {
				{
				setState(10213);
				match(FILEGROWTH);
				setState(10214);
				match(EQUAL);
				setState(10215);
				file_size();
				setState(10217);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(10216);
					match(COMMA);
					}
				}

				}
			}

			setState(10221);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Entity_nameContext extends ParserRuleContext {
		public IdContext server;
		public IdContext database;
		public IdContext schema;
		public IdContext table;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Entity_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_entity_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterEntity_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitEntity_name(this);
		}
	}

	public final Entity_nameContext entity_name() throws RecognitionException {
		Entity_nameContext _localctx = new Entity_nameContext(_ctx, getState());
		enterRule(_localctx, 888, RULE_entity_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10240);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1438,_ctx) ) {
			case 1:
				{
				setState(10223);
				((Entity_nameContext)_localctx).server = id();
				setState(10224);
				match(DOT);
				setState(10225);
				((Entity_nameContext)_localctx).database = id();
				setState(10226);
				match(DOT);
				setState(10227);
				((Entity_nameContext)_localctx).schema = id();
				setState(10228);
				match(DOT);
				}
				break;
			case 2:
				{
				setState(10230);
				((Entity_nameContext)_localctx).database = id();
				setState(10231);
				match(DOT);
				setState(10233);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (EVENTDATA - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & ((1L << (INIT - 158)) | (1L << (KEY - 158)) | (1L << (MASTER - 158)) | (1L << (MAX_MEMORY - 158)))) != 0) || ((((_la - 225)) & ~0x3f) == 0 && ((1L << (_la - 225)) & ((1L << (OFFSETS - 225)) | (1L << (PAGE - 225)) | (1L << (PUBLIC - 225)) | (1L << (R - 225)) | (1L << (RAW - 225)) | (1L << (RETURN - 225)) | (1L << (RETURNS - 225)) | (1L << (ROWCOUNT - 225)))) != 0) || ((((_la - 295)) & ~0x3f) == 0 && ((1L << (_la - 295)) & ((1L << (SAFETY - 295)) | (1L << (SERVER - 295)) | (1L << (SID - 295)) | (1L << (SOURCE - 295)) | (1L << (STATE - 295)) | (1L << (START - 295)) | (1L << (TARGET - 295)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (ABSOLUTE - 383)) | (1L << (ACCENT_SENSITIVITY - 383)) | (1L << (ACTION - 383)) | (1L << (ACTIVATION - 383)) | (1L << (ACTIVE - 383)) | (1L << (ADDRESS - 383)) | (1L << (AES_128 - 383)) | (1L << (AES_192 - 383)) | (1L << (AES_256 - 383)) | (1L << (AFFINITY - 383)) | (1L << (AFTER - 383)) | (1L << (AGGREGATE - 383)) | (1L << (ALGORITHM - 383)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 383)) | (1L << (ALLOWED - 383)) | (1L << (ANSI_NULL_DEFAULT - 383)) | (1L << (ANSI_NULLS - 383)) | (1L << (ANSI_PADDING - 383)) | (1L << (ANSI_WARNINGS - 383)) | (1L << (APPLICATION_LOG - 383)) | (1L << (APPLY - 383)) | (1L << (ARITHABORT - 383)) | (1L << (ASSEMBLY - 383)) | (1L << (AUDIT - 383)) | (1L << (AUDIT_GUID - 383)) | (1L << (AUTO - 383)) | (1L << (AUTO_CLEANUP - 383)) | (1L << (AUTO_CLOSE - 383)) | (1L << (AUTO_CREATE_STATISTICS - 383)) | (1L << (AUTO_SHRINK - 383)) | (1L << (AUTO_UPDATE_STATISTICS - 383)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 383)) | (1L << (AVAILABILITY - 383)) | (1L << (AVG - 383)) | (1L << (BACKUP_PRIORITY - 383)) | (1L << (BEGIN_DIALOG - 383)) | (1L << (BIGINT - 383)) | (1L << (BINARY_BASE64 - 383)) | (1L << (BINARY_CHECKSUM - 383)) | (1L << (BINDING - 383)) | (1L << (BLOB_STORAGE - 383)) | (1L << (BROKER - 383)) | (1L << (BROKER_INSTANCE - 383)) | (1L << (BULK_LOGGED - 383)) | (1L << (CALLER - 383)) | (1L << (CAP_CPU_PERCENT - 383)) | (1L << (CAST - 383)) | (1L << (CATALOG - 383)) | (1L << (CATCH - 383)) | (1L << (CHANGE_RETENTION - 383)) | (1L << (CHANGE_TRACKING - 383)) | (1L << (CHECKSUM - 383)) | (1L << (CHECKSUM_AGG - 383)) | (1L << (CLEANUP - 383)) | (1L << (COLLECTION - 383)) | (1L << (COLUMN_MASTER_KEY - 383)) | (1L << (COMMITTED - 383)) | (1L << (COMPATIBILITY_LEVEL - 383)) | (1L << (CONCAT - 383)) | (1L << (CONCAT_NULL_YIELDS_NULL - 383)) | (1L << (CONTENT - 383)) | (1L << (CONTROL - 383)) | (1L << (COOKIE - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (COUNT - 447)) | (1L << (COUNT_BIG - 447)) | (1L << (COUNTER - 447)) | (1L << (CPU - 447)) | (1L << (CREATE_NEW - 447)) | (1L << (CREATION_DISPOSITION - 447)) | (1L << (CREDENTIAL - 447)) | (1L << (CRYPTOGRAPHIC - 447)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 447)) | (1L << (CURSOR_DEFAULT - 447)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 447)) | (1L << (DATEADD - 447)) | (1L << (DATEDIFF - 447)) | (1L << (DATENAME - 447)) | (1L << (DATEPART - 447)) | (1L << (DAYS - 447)) | (1L << (DB_CHAINING - 447)) | (1L << (DB_FAILOVER - 447)) | (1L << (DECRYPTION - 447)) | (1L << (DEFAULT_DOUBLE_QUOTE - 447)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1L << (DEFAULT_LANGUAGE - 447)) | (1L << (DELAY - 447)) | (1L << (DELAYED_DURABILITY - 447)) | (1L << (DELETED - 447)) | (1L << (DENSE_RANK - 447)) | (1L << (DEPENDENTS - 447)) | (1L << (DES - 447)) | (1L << (DESCRIPTION - 447)) | (1L << (DESX - 447)) | (1L << (DHCP - 447)) | (1L << (DIALOG - 447)) | (1L << (DIRECTORY_NAME - 447)) | (1L << (DISABLE - 447)) | (1L << (DISABLE_BROKER - 447)) | (1L << (DISABLED - 447)) | (1L << (DISK_DRIVE - 447)) | (1L << (DOCUMENT - 447)) | (1L << (DYNAMIC - 447)) | (1L << (EMERGENCY - 447)) | (1L << (EMPTY - 447)) | (1L << (ENABLE - 447)) | (1L << (ENABLE_BROKER - 447)) | (1L << (ENCRYPTED_VALUE - 447)) | (1L << (ENCRYPTION - 447)) | (1L << (ENDPOINT_URL - 447)) | (1L << (ERROR_BROKER_CONVERSATIONS - 447)) | (1L << (EXCLUSIVE - 447)) | (1L << (EXECUTABLE - 447)) | (1L << (EXIST - 447)) | (1L << (EXPAND - 447)) | (1L << (EXPIRY_DATE - 447)) | (1L << (EXPLICIT - 447)) | (1L << (FAIL_OPERATION - 447)) | (1L << (FAILOVER_MODE - 447)) | (1L << (FAILURE - 447)) | (1L << (FAILURE_CONDITION_LEVEL - 447)) | (1L << (FAST - 447)) | (1L << (FAST_FORWARD - 447)) | (1L << (FILEGROUP - 447)) | (1L << (FILEGROWTH - 447)) | (1L << (FILEPATH - 447)) | (1L << (FILESTREAM - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (FILTER - 511)) | (1L << (FIRST - 511)) | (1L << (FIRST_VALUE - 511)) | (1L << (FOLLOWING - 511)) | (1L << (FORCE - 511)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1L << (FORCED - 511)) | (1L << (FORMAT - 511)) | (1L << (FORWARD_ONLY - 511)) | (1L << (FULLSCAN - 511)) | (1L << (FULLTEXT - 511)) | (1L << (GB - 511)) | (1L << (GETDATE - 511)) | (1L << (GETUTCDATE - 511)) | (1L << (GLOBAL - 511)) | (1L << (GO - 511)) | (1L << (GROUP_MAX_REQUESTS - 511)) | (1L << (GROUPING - 511)) | (1L << (GROUPING_ID - 511)) | (1L << (HADR - 511)) | (1L << (HASH - 511)) | (1L << (HEALTH_CHECK_TIMEOUT - 511)) | (1L << (HIGH - 511)) | (1L << (HONOR_BROKER_PRIORITY - 511)) | (1L << (HOURS - 511)) | (1L << (IDENTITY_VALUE - 511)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1L << (IMMEDIATE - 511)) | (1L << (IMPERSONATE - 511)) | (1L << (IMPORTANCE - 511)) | (1L << (INCREMENTAL - 511)) | (1L << (INITIATOR - 511)) | (1L << (INPUT - 511)) | (1L << (INSENSITIVE - 511)) | (1L << (INSERTED - 511)) | (1L << (INT - 511)) | (1L << (IP - 511)) | (1L << (ISOLATION - 511)) | (1L << (KB - 511)) | (1L << (KEEP - 511)) | (1L << (KEEPFIXED - 511)) | (1L << (KEY_SOURCE - 511)) | (1L << (KEYS - 511)) | (1L << (KEYSET - 511)) | (1L << (LAG - 511)) | (1L << (LAST - 511)) | (1L << (LAST_VALUE - 511)) | (1L << (LEAD - 511)) | (1L << (LEVEL - 511)) | (1L << (LIST - 511)) | (1L << (LISTENER - 511)) | (1L << (LISTENER_URL - 511)) | (1L << (LOB_COMPACTION - 511)) | (1L << (LOCAL - 511)) | (1L << (LOCATION - 511)) | (1L << (LOCK - 511)) | (1L << (LOCK_ESCALATION - 511)) | (1L << (LOGIN - 511)) | (1L << (LOOP - 511)) | (1L << (LOW - 511)) | (1L << (MANUAL - 511)) | (1L << (MARK - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (MATERIALIZED - 575)) | (1L << (MAX - 575)) | (1L << (MAX_CPU_PERCENT - 575)) | (1L << (MAX_DOP - 575)) | (1L << (MAX_FILES - 575)) | (1L << (MAX_IOPS_PER_VOLUME - 575)) | (1L << (MAX_MEMORY_PERCENT - 575)) | (1L << (MAX_PROCESSES - 575)) | (1L << (MAX_QUEUE_READERS - 575)) | (1L << (MAX_ROLLOVER_FILES - 575)) | (1L << (MAXDOP - 575)) | (1L << (MAXRECURSION - 575)) | (1L << (MAXSIZE - 575)) | (1L << (MB - 575)) | (1L << (MEDIUM - 575)) | (1L << (MEMORY_OPTIMIZED_DATA - 575)) | (1L << (MESSAGE - 575)) | (1L << (MIN - 575)) | (1L << (MIN_ACTIVE_ROWVERSION - 575)) | (1L << (MIN_CPU_PERCENT - 575)) | (1L << (MIN_IOPS_PER_VOLUME - 575)) | (1L << (MIN_MEMORY_PERCENT - 575)) | (1L << (MINUTES - 575)) | (1L << (MIRROR_ADDRESS - 575)) | (1L << (MIXED_PAGE_ALLOCATION - 575)) | (1L << (MODE - 575)) | (1L << (MODIFY - 575)) | (1L << (MOVE - 575)) | (1L << (MULTI_USER - 575)) | (1L << (NAME - 575)) | (1L << (NESTED_TRIGGERS - 575)) | (1L << (NEW_ACCOUNT - 575)) | (1L << (NEW_BROKER - 575)) | (1L << (NEW_PASSWORD - 575)) | (1L << (NEXT - 575)) | (1L << (NO - 575)) | (1L << (NO_TRUNCATE - 575)) | (1L << (NO_WAIT - 575)) | (1L << (NOCOUNT - 575)) | (1L << (NODES - 575)) | (1L << (NOEXPAND - 575)) | (1L << (NON_TRANSACTED_ACCESS - 575)) | (1L << (NORECOMPUTE - 575)) | (1L << (NORECOVERY - 575)) | (1L << (NOWAIT - 575)) | (1L << (NTILE - 575)) | (1L << (NUMANODE - 575)) | (1L << (NUMBER - 575)) | (1L << (NUMERIC_ROUNDABORT - 575)) | (1L << (OBJECT - 575)) | (1L << (OFFLINE - 575)) | (1L << (OFFSET - 575)) | (1L << (OLD_ACCOUNT - 575)) | (1L << (ONLINE - 575)) | (1L << (ONLY - 575)) | (1L << (OPEN_EXISTING - 575)) | (1L << (OPTIMISTIC - 575)) | (1L << (OPTIMIZE - 575)) | (1L << (OUT - 575)) | (1L << (OUTPUT - 575)) | (1L << (OWNER - 575)) | (1L << (PAGE_VERIFY - 575)) | (1L << (PARAMETERIZATION - 575)) | (1L << (PARTITION - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (PARTITIONS - 639)) | (1L << (PARTNER - 639)) | (1L << (PATH - 639)) | (1L << (POISON_MESSAGE_HANDLING - 639)) | (1L << (POOL - 639)) | (1L << (PORT - 639)) | (1L << (PRECEDING - 639)) | (1L << (PRIMARY_ROLE - 639)) | (1L << (PRIOR - 639)) | (1L << (PRIORITY - 639)) | (1L << (PRIORITY_LEVEL - 639)) | (1L << (PRIVATE - 639)) | (1L << (PRIVATE_KEY - 639)) | (1L << (PRIVILEGES - 639)) | (1L << (PROCEDURE_NAME - 639)) | (1L << (PROPERTY - 639)) | (1L << (PROVIDER - 639)) | (1L << (PROVIDER_KEY_NAME - 639)) | (1L << (QUERY - 639)) | (1L << (QUEUE - 639)) | (1L << (QUEUE_DELAY - 639)) | (1L << (QUOTED_IDENTIFIER - 639)) | (1L << (RANGE - 639)) | (1L << (RANK - 639)) | (1L << (RC2 - 639)) | (1L << (RC4 - 639)) | (1L << (RC4_128 - 639)) | (1L << (READ_COMMITTED_SNAPSHOT - 639)) | (1L << (READ_ONLY - 639)) | (1L << (READ_ONLY_ROUTING_LIST - 639)) | (1L << (READ_WRITE - 639)) | (1L << (READONLY - 639)) | (1L << (REBUILD - 639)) | (1L << (RECEIVE - 639)) | (1L << (RECOMPILE - 639)) | (1L << (RECOVERY - 639)) | (1L << (RECURSIVE_TRIGGERS - 639)) | (1L << (RELATIVE - 639)) | (1L << (REMOTE - 639)) | (1L << (REMOTE_SERVICE_NAME - 639)) | (1L << (REMOVE - 639)) | (1L << (REORGANIZE - 639)) | (1L << (REPEATABLE - 639)) | (1L << (REPLICA - 639)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 639)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 639)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 639)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 639)) | (1L << (RESERVE_DISK_SPACE - 639)) | (1L << (RESOURCE - 639)) | (1L << (RESOURCE_MANAGER_LOCATION - 639)) | (1L << (RESTRICTED_USER - 639)) | (1L << (RETENTION - 639)) | (1L << (ROBUST - 639)) | (1L << (ROOT - 639)) | (1L << (ROUTE - 639)) | (1L << (ROW - 639)) | (1L << (ROW_NUMBER - 639)) | (1L << (ROWGUID - 639)) | (1L << (ROWS - 639)) | (1L << (SAMPLE - 639)) | (1L << (SCHEMABINDING - 639)) | (1L << (SCOPED - 639)) | (1L << (SCROLL - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (SCROLL_LOCKS - 703)) | (1L << (SEARCH - 703)) | (1L << (SECONDARY - 703)) | (1L << (SECONDARY_ONLY - 703)) | (1L << (SECONDARY_ROLE - 703)) | (1L << (SECONDS - 703)) | (1L << (SECRET - 703)) | (1L << (SECURITY_LOG - 703)) | (1L << (SEEDING_MODE - 703)) | (1L << (SELF - 703)) | (1L << (SEMI_SENSITIVE - 703)) | (1L << (SEND - 703)) | (1L << (SENT - 703)) | (1L << (SERIALIZABLE - 703)) | (1L << (SESSION_TIMEOUT - 703)) | (1L << (SETERROR - 703)) | (1L << (SHARE - 703)) | (1L << (SHOWPLAN - 703)) | (1L << (SIGNATURE - 703)) | (1L << (SIMPLE - 703)) | (1L << (SINGLE_USER - 703)) | (1L << (SIZE - 703)) | (1L << (SMALLINT - 703)) | (1L << (SNAPSHOT - 703)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 703)) | (1L << (STANDBY - 703)) | (1L << (START_DATE - 703)) | (1L << (STATIC - 703)) | (1L << (STATS_STREAM - 703)) | (1L << (STATUS - 703)) | (1L << (STDEV - 703)) | (1L << (STDEVP - 703)) | (1L << (STOPLIST - 703)) | (1L << (STUFF - 703)) | (1L << (SUBJECT - 703)) | (1L << (SUM - 703)) | (1L << (SUSPEND - 703)) | (1L << (SYMMETRIC - 703)) | (1L << (SYNCHRONOUS_COMMIT - 703)) | (1L << (SYNONYM - 703)) | (1L << (TAKE - 703)) | (1L << (TARGET_RECOVERY_TIME - 703)) | (1L << (TB - 703)) | (1L << (TEXTIMAGE_ON - 703)) | (1L << (THROW - 703)) | (1L << (TIES - 703)) | (1L << (TIME - 703)) | (1L << (TIMEOUT - 703)) | (1L << (TIMER - 703)) | (1L << (TINYINT - 703)) | (1L << (TORN_PAGE_DETECTION - 703)) | (1L << (TRANSFORM_NOISE_WORDS - 703)) | (1L << (TRIPLE_DES - 703)) | (1L << (TRIPLE_DES_3KEY - 703)) | (1L << (TRUSTWORTHY - 703)) | (1L << (TRY - 703)) | (1L << (TSQL - 703)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 703)) | (1L << (TYPE - 703)) | (1L << (TYPE_WARNING - 703)) | (1L << (UNBOUNDED - 703)) | (1L << (UNCOMMITTED - 703)) | (1L << (UNKNOWN - 703)) | (1L << (UNLIMITED - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (USING - 767)) | (1L << (VALID_XML - 767)) | (1L << (VALIDATION - 767)) | (1L << (VALUE - 767)) | (1L << (VAR - 767)) | (1L << (VARP - 767)) | (1L << (VIEW_METADATA - 767)) | (1L << (VIEWS - 767)) | (1L << (WAIT - 767)) | (1L << (WELL_FORMED_XML - 767)) | (1L << (WORK - 767)) | (1L << (WORKLOAD - 767)) | (1L << (XML - 767)) | (1L << (XMLNAMESPACES - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)))) != 0)) {
					{
					setState(10232);
					((Entity_nameContext)_localctx).schema = id();
					}
				}

				setState(10235);
				match(DOT);
				}
				break;
			case 3:
				{
				setState(10237);
				((Entity_nameContext)_localctx).schema = id();
				setState(10238);
				match(DOT);
				}
				break;
			}
			setState(10242);
			((Entity_nameContext)_localctx).table = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Entity_name_for_azure_dwContext extends ParserRuleContext {
		public IdContext schema;
		public IdContext object_name;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Entity_name_for_azure_dwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_entity_name_for_azure_dw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterEntity_name_for_azure_dw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitEntity_name_for_azure_dw(this);
		}
	}

	public final Entity_name_for_azure_dwContext entity_name_for_azure_dw() throws RecognitionException {
		Entity_name_for_azure_dwContext _localctx = new Entity_name_for_azure_dwContext(_ctx, getState());
		enterRule(_localctx, 890, RULE_entity_name_for_azure_dw);
		try {
			setState(10249);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1439,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10244);
				((Entity_name_for_azure_dwContext)_localctx).schema = id();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10245);
				((Entity_name_for_azure_dwContext)_localctx).schema = id();
				setState(10246);
				match(DOT);
				setState(10247);
				((Entity_name_for_azure_dwContext)_localctx).object_name = id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Entity_name_for_parallel_dwContext extends ParserRuleContext {
		public IdContext schema_database;
		public IdContext schema;
		public IdContext object_name;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Entity_name_for_parallel_dwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_entity_name_for_parallel_dw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterEntity_name_for_parallel_dw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitEntity_name_for_parallel_dw(this);
		}
	}

	public final Entity_name_for_parallel_dwContext entity_name_for_parallel_dw() throws RecognitionException {
		Entity_name_for_parallel_dwContext _localctx = new Entity_name_for_parallel_dwContext(_ctx, getState());
		enterRule(_localctx, 892, RULE_entity_name_for_parallel_dw);
		try {
			setState(10256);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1440,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10251);
				((Entity_name_for_parallel_dwContext)_localctx).schema_database = id();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10252);
				((Entity_name_for_parallel_dwContext)_localctx).schema = id();
				setState(10253);
				match(DOT);
				setState(10254);
				((Entity_name_for_parallel_dwContext)_localctx).object_name = id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Full_table_nameContext extends ParserRuleContext {
		public IdContext server;
		public IdContext database;
		public IdContext schema;
		public IdContext table;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Full_table_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_full_table_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterFull_table_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitFull_table_name(this);
		}
	}

	public final Full_table_nameContext full_table_name() throws RecognitionException {
		Full_table_nameContext _localctx = new Full_table_nameContext(_ctx, getState());
		enterRule(_localctx, 894, RULE_full_table_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10275);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1442,_ctx) ) {
			case 1:
				{
				setState(10258);
				((Full_table_nameContext)_localctx).server = id();
				setState(10259);
				match(DOT);
				setState(10260);
				((Full_table_nameContext)_localctx).database = id();
				setState(10261);
				match(DOT);
				setState(10262);
				((Full_table_nameContext)_localctx).schema = id();
				setState(10263);
				match(DOT);
				}
				break;
			case 2:
				{
				setState(10265);
				((Full_table_nameContext)_localctx).database = id();
				setState(10266);
				match(DOT);
				setState(10268);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (EVENTDATA - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & ((1L << (INIT - 158)) | (1L << (KEY - 158)) | (1L << (MASTER - 158)) | (1L << (MAX_MEMORY - 158)))) != 0) || ((((_la - 225)) & ~0x3f) == 0 && ((1L << (_la - 225)) & ((1L << (OFFSETS - 225)) | (1L << (PAGE - 225)) | (1L << (PUBLIC - 225)) | (1L << (R - 225)) | (1L << (RAW - 225)) | (1L << (RETURN - 225)) | (1L << (RETURNS - 225)) | (1L << (ROWCOUNT - 225)))) != 0) || ((((_la - 295)) & ~0x3f) == 0 && ((1L << (_la - 295)) & ((1L << (SAFETY - 295)) | (1L << (SERVER - 295)) | (1L << (SID - 295)) | (1L << (SOURCE - 295)) | (1L << (STATE - 295)) | (1L << (START - 295)) | (1L << (TARGET - 295)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (ABSOLUTE - 383)) | (1L << (ACCENT_SENSITIVITY - 383)) | (1L << (ACTION - 383)) | (1L << (ACTIVATION - 383)) | (1L << (ACTIVE - 383)) | (1L << (ADDRESS - 383)) | (1L << (AES_128 - 383)) | (1L << (AES_192 - 383)) | (1L << (AES_256 - 383)) | (1L << (AFFINITY - 383)) | (1L << (AFTER - 383)) | (1L << (AGGREGATE - 383)) | (1L << (ALGORITHM - 383)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 383)) | (1L << (ALLOWED - 383)) | (1L << (ANSI_NULL_DEFAULT - 383)) | (1L << (ANSI_NULLS - 383)) | (1L << (ANSI_PADDING - 383)) | (1L << (ANSI_WARNINGS - 383)) | (1L << (APPLICATION_LOG - 383)) | (1L << (APPLY - 383)) | (1L << (ARITHABORT - 383)) | (1L << (ASSEMBLY - 383)) | (1L << (AUDIT - 383)) | (1L << (AUDIT_GUID - 383)) | (1L << (AUTO - 383)) | (1L << (AUTO_CLEANUP - 383)) | (1L << (AUTO_CLOSE - 383)) | (1L << (AUTO_CREATE_STATISTICS - 383)) | (1L << (AUTO_SHRINK - 383)) | (1L << (AUTO_UPDATE_STATISTICS - 383)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 383)) | (1L << (AVAILABILITY - 383)) | (1L << (AVG - 383)) | (1L << (BACKUP_PRIORITY - 383)) | (1L << (BEGIN_DIALOG - 383)) | (1L << (BIGINT - 383)) | (1L << (BINARY_BASE64 - 383)) | (1L << (BINARY_CHECKSUM - 383)) | (1L << (BINDING - 383)) | (1L << (BLOB_STORAGE - 383)) | (1L << (BROKER - 383)) | (1L << (BROKER_INSTANCE - 383)) | (1L << (BULK_LOGGED - 383)) | (1L << (CALLER - 383)) | (1L << (CAP_CPU_PERCENT - 383)) | (1L << (CAST - 383)) | (1L << (CATALOG - 383)) | (1L << (CATCH - 383)) | (1L << (CHANGE_RETENTION - 383)) | (1L << (CHANGE_TRACKING - 383)) | (1L << (CHECKSUM - 383)) | (1L << (CHECKSUM_AGG - 383)) | (1L << (CLEANUP - 383)) | (1L << (COLLECTION - 383)) | (1L << (COLUMN_MASTER_KEY - 383)) | (1L << (COMMITTED - 383)) | (1L << (COMPATIBILITY_LEVEL - 383)) | (1L << (CONCAT - 383)) | (1L << (CONCAT_NULL_YIELDS_NULL - 383)) | (1L << (CONTENT - 383)) | (1L << (CONTROL - 383)) | (1L << (COOKIE - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (COUNT - 447)) | (1L << (COUNT_BIG - 447)) | (1L << (COUNTER - 447)) | (1L << (CPU - 447)) | (1L << (CREATE_NEW - 447)) | (1L << (CREATION_DISPOSITION - 447)) | (1L << (CREDENTIAL - 447)) | (1L << (CRYPTOGRAPHIC - 447)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 447)) | (1L << (CURSOR_DEFAULT - 447)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 447)) | (1L << (DATEADD - 447)) | (1L << (DATEDIFF - 447)) | (1L << (DATENAME - 447)) | (1L << (DATEPART - 447)) | (1L << (DAYS - 447)) | (1L << (DB_CHAINING - 447)) | (1L << (DB_FAILOVER - 447)) | (1L << (DECRYPTION - 447)) | (1L << (DEFAULT_DOUBLE_QUOTE - 447)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1L << (DEFAULT_LANGUAGE - 447)) | (1L << (DELAY - 447)) | (1L << (DELAYED_DURABILITY - 447)) | (1L << (DELETED - 447)) | (1L << (DENSE_RANK - 447)) | (1L << (DEPENDENTS - 447)) | (1L << (DES - 447)) | (1L << (DESCRIPTION - 447)) | (1L << (DESX - 447)) | (1L << (DHCP - 447)) | (1L << (DIALOG - 447)) | (1L << (DIRECTORY_NAME - 447)) | (1L << (DISABLE - 447)) | (1L << (DISABLE_BROKER - 447)) | (1L << (DISABLED - 447)) | (1L << (DISK_DRIVE - 447)) | (1L << (DOCUMENT - 447)) | (1L << (DYNAMIC - 447)) | (1L << (EMERGENCY - 447)) | (1L << (EMPTY - 447)) | (1L << (ENABLE - 447)) | (1L << (ENABLE_BROKER - 447)) | (1L << (ENCRYPTED_VALUE - 447)) | (1L << (ENCRYPTION - 447)) | (1L << (ENDPOINT_URL - 447)) | (1L << (ERROR_BROKER_CONVERSATIONS - 447)) | (1L << (EXCLUSIVE - 447)) | (1L << (EXECUTABLE - 447)) | (1L << (EXIST - 447)) | (1L << (EXPAND - 447)) | (1L << (EXPIRY_DATE - 447)) | (1L << (EXPLICIT - 447)) | (1L << (FAIL_OPERATION - 447)) | (1L << (FAILOVER_MODE - 447)) | (1L << (FAILURE - 447)) | (1L << (FAILURE_CONDITION_LEVEL - 447)) | (1L << (FAST - 447)) | (1L << (FAST_FORWARD - 447)) | (1L << (FILEGROUP - 447)) | (1L << (FILEGROWTH - 447)) | (1L << (FILEPATH - 447)) | (1L << (FILESTREAM - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (FILTER - 511)) | (1L << (FIRST - 511)) | (1L << (FIRST_VALUE - 511)) | (1L << (FOLLOWING - 511)) | (1L << (FORCE - 511)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1L << (FORCED - 511)) | (1L << (FORMAT - 511)) | (1L << (FORWARD_ONLY - 511)) | (1L << (FULLSCAN - 511)) | (1L << (FULLTEXT - 511)) | (1L << (GB - 511)) | (1L << (GETDATE - 511)) | (1L << (GETUTCDATE - 511)) | (1L << (GLOBAL - 511)) | (1L << (GO - 511)) | (1L << (GROUP_MAX_REQUESTS - 511)) | (1L << (GROUPING - 511)) | (1L << (GROUPING_ID - 511)) | (1L << (HADR - 511)) | (1L << (HASH - 511)) | (1L << (HEALTH_CHECK_TIMEOUT - 511)) | (1L << (HIGH - 511)) | (1L << (HONOR_BROKER_PRIORITY - 511)) | (1L << (HOURS - 511)) | (1L << (IDENTITY_VALUE - 511)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1L << (IMMEDIATE - 511)) | (1L << (IMPERSONATE - 511)) | (1L << (IMPORTANCE - 511)) | (1L << (INCREMENTAL - 511)) | (1L << (INITIATOR - 511)) | (1L << (INPUT - 511)) | (1L << (INSENSITIVE - 511)) | (1L << (INSERTED - 511)) | (1L << (INT - 511)) | (1L << (IP - 511)) | (1L << (ISOLATION - 511)) | (1L << (KB - 511)) | (1L << (KEEP - 511)) | (1L << (KEEPFIXED - 511)) | (1L << (KEY_SOURCE - 511)) | (1L << (KEYS - 511)) | (1L << (KEYSET - 511)) | (1L << (LAG - 511)) | (1L << (LAST - 511)) | (1L << (LAST_VALUE - 511)) | (1L << (LEAD - 511)) | (1L << (LEVEL - 511)) | (1L << (LIST - 511)) | (1L << (LISTENER - 511)) | (1L << (LISTENER_URL - 511)) | (1L << (LOB_COMPACTION - 511)) | (1L << (LOCAL - 511)) | (1L << (LOCATION - 511)) | (1L << (LOCK - 511)) | (1L << (LOCK_ESCALATION - 511)) | (1L << (LOGIN - 511)) | (1L << (LOOP - 511)) | (1L << (LOW - 511)) | (1L << (MANUAL - 511)) | (1L << (MARK - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (MATERIALIZED - 575)) | (1L << (MAX - 575)) | (1L << (MAX_CPU_PERCENT - 575)) | (1L << (MAX_DOP - 575)) | (1L << (MAX_FILES - 575)) | (1L << (MAX_IOPS_PER_VOLUME - 575)) | (1L << (MAX_MEMORY_PERCENT - 575)) | (1L << (MAX_PROCESSES - 575)) | (1L << (MAX_QUEUE_READERS - 575)) | (1L << (MAX_ROLLOVER_FILES - 575)) | (1L << (MAXDOP - 575)) | (1L << (MAXRECURSION - 575)) | (1L << (MAXSIZE - 575)) | (1L << (MB - 575)) | (1L << (MEDIUM - 575)) | (1L << (MEMORY_OPTIMIZED_DATA - 575)) | (1L << (MESSAGE - 575)) | (1L << (MIN - 575)) | (1L << (MIN_ACTIVE_ROWVERSION - 575)) | (1L << (MIN_CPU_PERCENT - 575)) | (1L << (MIN_IOPS_PER_VOLUME - 575)) | (1L << (MIN_MEMORY_PERCENT - 575)) | (1L << (MINUTES - 575)) | (1L << (MIRROR_ADDRESS - 575)) | (1L << (MIXED_PAGE_ALLOCATION - 575)) | (1L << (MODE - 575)) | (1L << (MODIFY - 575)) | (1L << (MOVE - 575)) | (1L << (MULTI_USER - 575)) | (1L << (NAME - 575)) | (1L << (NESTED_TRIGGERS - 575)) | (1L << (NEW_ACCOUNT - 575)) | (1L << (NEW_BROKER - 575)) | (1L << (NEW_PASSWORD - 575)) | (1L << (NEXT - 575)) | (1L << (NO - 575)) | (1L << (NO_TRUNCATE - 575)) | (1L << (NO_WAIT - 575)) | (1L << (NOCOUNT - 575)) | (1L << (NODES - 575)) | (1L << (NOEXPAND - 575)) | (1L << (NON_TRANSACTED_ACCESS - 575)) | (1L << (NORECOMPUTE - 575)) | (1L << (NORECOVERY - 575)) | (1L << (NOWAIT - 575)) | (1L << (NTILE - 575)) | (1L << (NUMANODE - 575)) | (1L << (NUMBER - 575)) | (1L << (NUMERIC_ROUNDABORT - 575)) | (1L << (OBJECT - 575)) | (1L << (OFFLINE - 575)) | (1L << (OFFSET - 575)) | (1L << (OLD_ACCOUNT - 575)) | (1L << (ONLINE - 575)) | (1L << (ONLY - 575)) | (1L << (OPEN_EXISTING - 575)) | (1L << (OPTIMISTIC - 575)) | (1L << (OPTIMIZE - 575)) | (1L << (OUT - 575)) | (1L << (OUTPUT - 575)) | (1L << (OWNER - 575)) | (1L << (PAGE_VERIFY - 575)) | (1L << (PARAMETERIZATION - 575)) | (1L << (PARTITION - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (PARTITIONS - 639)) | (1L << (PARTNER - 639)) | (1L << (PATH - 639)) | (1L << (POISON_MESSAGE_HANDLING - 639)) | (1L << (POOL - 639)) | (1L << (PORT - 639)) | (1L << (PRECEDING - 639)) | (1L << (PRIMARY_ROLE - 639)) | (1L << (PRIOR - 639)) | (1L << (PRIORITY - 639)) | (1L << (PRIORITY_LEVEL - 639)) | (1L << (PRIVATE - 639)) | (1L << (PRIVATE_KEY - 639)) | (1L << (PRIVILEGES - 639)) | (1L << (PROCEDURE_NAME - 639)) | (1L << (PROPERTY - 639)) | (1L << (PROVIDER - 639)) | (1L << (PROVIDER_KEY_NAME - 639)) | (1L << (QUERY - 639)) | (1L << (QUEUE - 639)) | (1L << (QUEUE_DELAY - 639)) | (1L << (QUOTED_IDENTIFIER - 639)) | (1L << (RANGE - 639)) | (1L << (RANK - 639)) | (1L << (RC2 - 639)) | (1L << (RC4 - 639)) | (1L << (RC4_128 - 639)) | (1L << (READ_COMMITTED_SNAPSHOT - 639)) | (1L << (READ_ONLY - 639)) | (1L << (READ_ONLY_ROUTING_LIST - 639)) | (1L << (READ_WRITE - 639)) | (1L << (READONLY - 639)) | (1L << (REBUILD - 639)) | (1L << (RECEIVE - 639)) | (1L << (RECOMPILE - 639)) | (1L << (RECOVERY - 639)) | (1L << (RECURSIVE_TRIGGERS - 639)) | (1L << (RELATIVE - 639)) | (1L << (REMOTE - 639)) | (1L << (REMOTE_SERVICE_NAME - 639)) | (1L << (REMOVE - 639)) | (1L << (REORGANIZE - 639)) | (1L << (REPEATABLE - 639)) | (1L << (REPLICA - 639)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 639)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 639)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 639)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 639)) | (1L << (RESERVE_DISK_SPACE - 639)) | (1L << (RESOURCE - 639)) | (1L << (RESOURCE_MANAGER_LOCATION - 639)) | (1L << (RESTRICTED_USER - 639)) | (1L << (RETENTION - 639)) | (1L << (ROBUST - 639)) | (1L << (ROOT - 639)) | (1L << (ROUTE - 639)) | (1L << (ROW - 639)) | (1L << (ROW_NUMBER - 639)) | (1L << (ROWGUID - 639)) | (1L << (ROWS - 639)) | (1L << (SAMPLE - 639)) | (1L << (SCHEMABINDING - 639)) | (1L << (SCOPED - 639)) | (1L << (SCROLL - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (SCROLL_LOCKS - 703)) | (1L << (SEARCH - 703)) | (1L << (SECONDARY - 703)) | (1L << (SECONDARY_ONLY - 703)) | (1L << (SECONDARY_ROLE - 703)) | (1L << (SECONDS - 703)) | (1L << (SECRET - 703)) | (1L << (SECURITY_LOG - 703)) | (1L << (SEEDING_MODE - 703)) | (1L << (SELF - 703)) | (1L << (SEMI_SENSITIVE - 703)) | (1L << (SEND - 703)) | (1L << (SENT - 703)) | (1L << (SERIALIZABLE - 703)) | (1L << (SESSION_TIMEOUT - 703)) | (1L << (SETERROR - 703)) | (1L << (SHARE - 703)) | (1L << (SHOWPLAN - 703)) | (1L << (SIGNATURE - 703)) | (1L << (SIMPLE - 703)) | (1L << (SINGLE_USER - 703)) | (1L << (SIZE - 703)) | (1L << (SMALLINT - 703)) | (1L << (SNAPSHOT - 703)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 703)) | (1L << (STANDBY - 703)) | (1L << (START_DATE - 703)) | (1L << (STATIC - 703)) | (1L << (STATS_STREAM - 703)) | (1L << (STATUS - 703)) | (1L << (STDEV - 703)) | (1L << (STDEVP - 703)) | (1L << (STOPLIST - 703)) | (1L << (STUFF - 703)) | (1L << (SUBJECT - 703)) | (1L << (SUM - 703)) | (1L << (SUSPEND - 703)) | (1L << (SYMMETRIC - 703)) | (1L << (SYNCHRONOUS_COMMIT - 703)) | (1L << (SYNONYM - 703)) | (1L << (TAKE - 703)) | (1L << (TARGET_RECOVERY_TIME - 703)) | (1L << (TB - 703)) | (1L << (TEXTIMAGE_ON - 703)) | (1L << (THROW - 703)) | (1L << (TIES - 703)) | (1L << (TIME - 703)) | (1L << (TIMEOUT - 703)) | (1L << (TIMER - 703)) | (1L << (TINYINT - 703)) | (1L << (TORN_PAGE_DETECTION - 703)) | (1L << (TRANSFORM_NOISE_WORDS - 703)) | (1L << (TRIPLE_DES - 703)) | (1L << (TRIPLE_DES_3KEY - 703)) | (1L << (TRUSTWORTHY - 703)) | (1L << (TRY - 703)) | (1L << (TSQL - 703)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 703)) | (1L << (TYPE - 703)) | (1L << (TYPE_WARNING - 703)) | (1L << (UNBOUNDED - 703)) | (1L << (UNCOMMITTED - 703)) | (1L << (UNKNOWN - 703)) | (1L << (UNLIMITED - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (USING - 767)) | (1L << (VALID_XML - 767)) | (1L << (VALIDATION - 767)) | (1L << (VALUE - 767)) | (1L << (VAR - 767)) | (1L << (VARP - 767)) | (1L << (VIEW_METADATA - 767)) | (1L << (VIEWS - 767)) | (1L << (WAIT - 767)) | (1L << (WELL_FORMED_XML - 767)) | (1L << (WORK - 767)) | (1L << (WORKLOAD - 767)) | (1L << (XML - 767)) | (1L << (XMLNAMESPACES - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)))) != 0)) {
					{
					setState(10267);
					((Full_table_nameContext)_localctx).schema = id();
					}
				}

				setState(10270);
				match(DOT);
				}
				break;
			case 3:
				{
				setState(10272);
				((Full_table_nameContext)_localctx).schema = id();
				setState(10273);
				match(DOT);
				}
				break;
			}
			setState(10277);
			((Full_table_nameContext)_localctx).table = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_nameContext extends ParserRuleContext {
		public IdContext database;
		public IdContext schema;
		public IdContext table;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode BLOCKING_HIERARCHY() { return getToken(TSqlParser.BLOCKING_HIERARCHY, 0); }
		public Table_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterTable_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitTable_name(this);
		}
	}

	public final Table_nameContext table_name() throws RecognitionException {
		Table_nameContext _localctx = new Table_nameContext(_ctx, getState());
		enterRule(_localctx, 896, RULE_table_name);
		int _la;
		try {
			setState(10305);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1447,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10289);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1444,_ctx) ) {
				case 1:
					{
					setState(10279);
					((Table_nameContext)_localctx).database = id();
					setState(10280);
					match(DOT);
					setState(10282);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (EVENTDATA - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & ((1L << (INIT - 158)) | (1L << (KEY - 158)) | (1L << (MASTER - 158)) | (1L << (MAX_MEMORY - 158)))) != 0) || ((((_la - 225)) & ~0x3f) == 0 && ((1L << (_la - 225)) & ((1L << (OFFSETS - 225)) | (1L << (PAGE - 225)) | (1L << (PUBLIC - 225)) | (1L << (R - 225)) | (1L << (RAW - 225)) | (1L << (RETURN - 225)) | (1L << (RETURNS - 225)) | (1L << (ROWCOUNT - 225)))) != 0) || ((((_la - 295)) & ~0x3f) == 0 && ((1L << (_la - 295)) & ((1L << (SAFETY - 295)) | (1L << (SERVER - 295)) | (1L << (SID - 295)) | (1L << (SOURCE - 295)) | (1L << (STATE - 295)) | (1L << (START - 295)) | (1L << (TARGET - 295)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (ABSOLUTE - 383)) | (1L << (ACCENT_SENSITIVITY - 383)) | (1L << (ACTION - 383)) | (1L << (ACTIVATION - 383)) | (1L << (ACTIVE - 383)) | (1L << (ADDRESS - 383)) | (1L << (AES_128 - 383)) | (1L << (AES_192 - 383)) | (1L << (AES_256 - 383)) | (1L << (AFFINITY - 383)) | (1L << (AFTER - 383)) | (1L << (AGGREGATE - 383)) | (1L << (ALGORITHM - 383)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 383)) | (1L << (ALLOWED - 383)) | (1L << (ANSI_NULL_DEFAULT - 383)) | (1L << (ANSI_NULLS - 383)) | (1L << (ANSI_PADDING - 383)) | (1L << (ANSI_WARNINGS - 383)) | (1L << (APPLICATION_LOG - 383)) | (1L << (APPLY - 383)) | (1L << (ARITHABORT - 383)) | (1L << (ASSEMBLY - 383)) | (1L << (AUDIT - 383)) | (1L << (AUDIT_GUID - 383)) | (1L << (AUTO - 383)) | (1L << (AUTO_CLEANUP - 383)) | (1L << (AUTO_CLOSE - 383)) | (1L << (AUTO_CREATE_STATISTICS - 383)) | (1L << (AUTO_SHRINK - 383)) | (1L << (AUTO_UPDATE_STATISTICS - 383)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 383)) | (1L << (AVAILABILITY - 383)) | (1L << (AVG - 383)) | (1L << (BACKUP_PRIORITY - 383)) | (1L << (BEGIN_DIALOG - 383)) | (1L << (BIGINT - 383)) | (1L << (BINARY_BASE64 - 383)) | (1L << (BINARY_CHECKSUM - 383)) | (1L << (BINDING - 383)) | (1L << (BLOB_STORAGE - 383)) | (1L << (BROKER - 383)) | (1L << (BROKER_INSTANCE - 383)) | (1L << (BULK_LOGGED - 383)) | (1L << (CALLER - 383)) | (1L << (CAP_CPU_PERCENT - 383)) | (1L << (CAST - 383)) | (1L << (CATALOG - 383)) | (1L << (CATCH - 383)) | (1L << (CHANGE_RETENTION - 383)) | (1L << (CHANGE_TRACKING - 383)) | (1L << (CHECKSUM - 383)) | (1L << (CHECKSUM_AGG - 383)) | (1L << (CLEANUP - 383)) | (1L << (COLLECTION - 383)) | (1L << (COLUMN_MASTER_KEY - 383)) | (1L << (COMMITTED - 383)) | (1L << (COMPATIBILITY_LEVEL - 383)) | (1L << (CONCAT - 383)) | (1L << (CONCAT_NULL_YIELDS_NULL - 383)) | (1L << (CONTENT - 383)) | (1L << (CONTROL - 383)) | (1L << (COOKIE - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (COUNT - 447)) | (1L << (COUNT_BIG - 447)) | (1L << (COUNTER - 447)) | (1L << (CPU - 447)) | (1L << (CREATE_NEW - 447)) | (1L << (CREATION_DISPOSITION - 447)) | (1L << (CREDENTIAL - 447)) | (1L << (CRYPTOGRAPHIC - 447)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 447)) | (1L << (CURSOR_DEFAULT - 447)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 447)) | (1L << (DATEADD - 447)) | (1L << (DATEDIFF - 447)) | (1L << (DATENAME - 447)) | (1L << (DATEPART - 447)) | (1L << (DAYS - 447)) | (1L << (DB_CHAINING - 447)) | (1L << (DB_FAILOVER - 447)) | (1L << (DECRYPTION - 447)) | (1L << (DEFAULT_DOUBLE_QUOTE - 447)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1L << (DEFAULT_LANGUAGE - 447)) | (1L << (DELAY - 447)) | (1L << (DELAYED_DURABILITY - 447)) | (1L << (DELETED - 447)) | (1L << (DENSE_RANK - 447)) | (1L << (DEPENDENTS - 447)) | (1L << (DES - 447)) | (1L << (DESCRIPTION - 447)) | (1L << (DESX - 447)) | (1L << (DHCP - 447)) | (1L << (DIALOG - 447)) | (1L << (DIRECTORY_NAME - 447)) | (1L << (DISABLE - 447)) | (1L << (DISABLE_BROKER - 447)) | (1L << (DISABLED - 447)) | (1L << (DISK_DRIVE - 447)) | (1L << (DOCUMENT - 447)) | (1L << (DYNAMIC - 447)) | (1L << (EMERGENCY - 447)) | (1L << (EMPTY - 447)) | (1L << (ENABLE - 447)) | (1L << (ENABLE_BROKER - 447)) | (1L << (ENCRYPTED_VALUE - 447)) | (1L << (ENCRYPTION - 447)) | (1L << (ENDPOINT_URL - 447)) | (1L << (ERROR_BROKER_CONVERSATIONS - 447)) | (1L << (EXCLUSIVE - 447)) | (1L << (EXECUTABLE - 447)) | (1L << (EXIST - 447)) | (1L << (EXPAND - 447)) | (1L << (EXPIRY_DATE - 447)) | (1L << (EXPLICIT - 447)) | (1L << (FAIL_OPERATION - 447)) | (1L << (FAILOVER_MODE - 447)) | (1L << (FAILURE - 447)) | (1L << (FAILURE_CONDITION_LEVEL - 447)) | (1L << (FAST - 447)) | (1L << (FAST_FORWARD - 447)) | (1L << (FILEGROUP - 447)) | (1L << (FILEGROWTH - 447)) | (1L << (FILEPATH - 447)) | (1L << (FILESTREAM - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (FILTER - 511)) | (1L << (FIRST - 511)) | (1L << (FIRST_VALUE - 511)) | (1L << (FOLLOWING - 511)) | (1L << (FORCE - 511)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1L << (FORCED - 511)) | (1L << (FORMAT - 511)) | (1L << (FORWARD_ONLY - 511)) | (1L << (FULLSCAN - 511)) | (1L << (FULLTEXT - 511)) | (1L << (GB - 511)) | (1L << (GETDATE - 511)) | (1L << (GETUTCDATE - 511)) | (1L << (GLOBAL - 511)) | (1L << (GO - 511)) | (1L << (GROUP_MAX_REQUESTS - 511)) | (1L << (GROUPING - 511)) | (1L << (GROUPING_ID - 511)) | (1L << (HADR - 511)) | (1L << (HASH - 511)) | (1L << (HEALTH_CHECK_TIMEOUT - 511)) | (1L << (HIGH - 511)) | (1L << (HONOR_BROKER_PRIORITY - 511)) | (1L << (HOURS - 511)) | (1L << (IDENTITY_VALUE - 511)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1L << (IMMEDIATE - 511)) | (1L << (IMPERSONATE - 511)) | (1L << (IMPORTANCE - 511)) | (1L << (INCREMENTAL - 511)) | (1L << (INITIATOR - 511)) | (1L << (INPUT - 511)) | (1L << (INSENSITIVE - 511)) | (1L << (INSERTED - 511)) | (1L << (INT - 511)) | (1L << (IP - 511)) | (1L << (ISOLATION - 511)) | (1L << (KB - 511)) | (1L << (KEEP - 511)) | (1L << (KEEPFIXED - 511)) | (1L << (KEY_SOURCE - 511)) | (1L << (KEYS - 511)) | (1L << (KEYSET - 511)) | (1L << (LAG - 511)) | (1L << (LAST - 511)) | (1L << (LAST_VALUE - 511)) | (1L << (LEAD - 511)) | (1L << (LEVEL - 511)) | (1L << (LIST - 511)) | (1L << (LISTENER - 511)) | (1L << (LISTENER_URL - 511)) | (1L << (LOB_COMPACTION - 511)) | (1L << (LOCAL - 511)) | (1L << (LOCATION - 511)) | (1L << (LOCK - 511)) | (1L << (LOCK_ESCALATION - 511)) | (1L << (LOGIN - 511)) | (1L << (LOOP - 511)) | (1L << (LOW - 511)) | (1L << (MANUAL - 511)) | (1L << (MARK - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (MATERIALIZED - 575)) | (1L << (MAX - 575)) | (1L << (MAX_CPU_PERCENT - 575)) | (1L << (MAX_DOP - 575)) | (1L << (MAX_FILES - 575)) | (1L << (MAX_IOPS_PER_VOLUME - 575)) | (1L << (MAX_MEMORY_PERCENT - 575)) | (1L << (MAX_PROCESSES - 575)) | (1L << (MAX_QUEUE_READERS - 575)) | (1L << (MAX_ROLLOVER_FILES - 575)) | (1L << (MAXDOP - 575)) | (1L << (MAXRECURSION - 575)) | (1L << (MAXSIZE - 575)) | (1L << (MB - 575)) | (1L << (MEDIUM - 575)) | (1L << (MEMORY_OPTIMIZED_DATA - 575)) | (1L << (MESSAGE - 575)) | (1L << (MIN - 575)) | (1L << (MIN_ACTIVE_ROWVERSION - 575)) | (1L << (MIN_CPU_PERCENT - 575)) | (1L << (MIN_IOPS_PER_VOLUME - 575)) | (1L << (MIN_MEMORY_PERCENT - 575)) | (1L << (MINUTES - 575)) | (1L << (MIRROR_ADDRESS - 575)) | (1L << (MIXED_PAGE_ALLOCATION - 575)) | (1L << (MODE - 575)) | (1L << (MODIFY - 575)) | (1L << (MOVE - 575)) | (1L << (MULTI_USER - 575)) | (1L << (NAME - 575)) | (1L << (NESTED_TRIGGERS - 575)) | (1L << (NEW_ACCOUNT - 575)) | (1L << (NEW_BROKER - 575)) | (1L << (NEW_PASSWORD - 575)) | (1L << (NEXT - 575)) | (1L << (NO - 575)) | (1L << (NO_TRUNCATE - 575)) | (1L << (NO_WAIT - 575)) | (1L << (NOCOUNT - 575)) | (1L << (NODES - 575)) | (1L << (NOEXPAND - 575)) | (1L << (NON_TRANSACTED_ACCESS - 575)) | (1L << (NORECOMPUTE - 575)) | (1L << (NORECOVERY - 575)) | (1L << (NOWAIT - 575)) | (1L << (NTILE - 575)) | (1L << (NUMANODE - 575)) | (1L << (NUMBER - 575)) | (1L << (NUMERIC_ROUNDABORT - 575)) | (1L << (OBJECT - 575)) | (1L << (OFFLINE - 575)) | (1L << (OFFSET - 575)) | (1L << (OLD_ACCOUNT - 575)) | (1L << (ONLINE - 575)) | (1L << (ONLY - 575)) | (1L << (OPEN_EXISTING - 575)) | (1L << (OPTIMISTIC - 575)) | (1L << (OPTIMIZE - 575)) | (1L << (OUT - 575)) | (1L << (OUTPUT - 575)) | (1L << (OWNER - 575)) | (1L << (PAGE_VERIFY - 575)) | (1L << (PARAMETERIZATION - 575)) | (1L << (PARTITION - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (PARTITIONS - 639)) | (1L << (PARTNER - 639)) | (1L << (PATH - 639)) | (1L << (POISON_MESSAGE_HANDLING - 639)) | (1L << (POOL - 639)) | (1L << (PORT - 639)) | (1L << (PRECEDING - 639)) | (1L << (PRIMARY_ROLE - 639)) | (1L << (PRIOR - 639)) | (1L << (PRIORITY - 639)) | (1L << (PRIORITY_LEVEL - 639)) | (1L << (PRIVATE - 639)) | (1L << (PRIVATE_KEY - 639)) | (1L << (PRIVILEGES - 639)) | (1L << (PROCEDURE_NAME - 639)) | (1L << (PROPERTY - 639)) | (1L << (PROVIDER - 639)) | (1L << (PROVIDER_KEY_NAME - 639)) | (1L << (QUERY - 639)) | (1L << (QUEUE - 639)) | (1L << (QUEUE_DELAY - 639)) | (1L << (QUOTED_IDENTIFIER - 639)) | (1L << (RANGE - 639)) | (1L << (RANK - 639)) | (1L << (RC2 - 639)) | (1L << (RC4 - 639)) | (1L << (RC4_128 - 639)) | (1L << (READ_COMMITTED_SNAPSHOT - 639)) | (1L << (READ_ONLY - 639)) | (1L << (READ_ONLY_ROUTING_LIST - 639)) | (1L << (READ_WRITE - 639)) | (1L << (READONLY - 639)) | (1L << (REBUILD - 639)) | (1L << (RECEIVE - 639)) | (1L << (RECOMPILE - 639)) | (1L << (RECOVERY - 639)) | (1L << (RECURSIVE_TRIGGERS - 639)) | (1L << (RELATIVE - 639)) | (1L << (REMOTE - 639)) | (1L << (REMOTE_SERVICE_NAME - 639)) | (1L << (REMOVE - 639)) | (1L << (REORGANIZE - 639)) | (1L << (REPEATABLE - 639)) | (1L << (REPLICA - 639)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 639)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 639)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 639)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 639)) | (1L << (RESERVE_DISK_SPACE - 639)) | (1L << (RESOURCE - 639)) | (1L << (RESOURCE_MANAGER_LOCATION - 639)) | (1L << (RESTRICTED_USER - 639)) | (1L << (RETENTION - 639)) | (1L << (ROBUST - 639)) | (1L << (ROOT - 639)) | (1L << (ROUTE - 639)) | (1L << (ROW - 639)) | (1L << (ROW_NUMBER - 639)) | (1L << (ROWGUID - 639)) | (1L << (ROWS - 639)) | (1L << (SAMPLE - 639)) | (1L << (SCHEMABINDING - 639)) | (1L << (SCOPED - 639)) | (1L << (SCROLL - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (SCROLL_LOCKS - 703)) | (1L << (SEARCH - 703)) | (1L << (SECONDARY - 703)) | (1L << (SECONDARY_ONLY - 703)) | (1L << (SECONDARY_ROLE - 703)) | (1L << (SECONDS - 703)) | (1L << (SECRET - 703)) | (1L << (SECURITY_LOG - 703)) | (1L << (SEEDING_MODE - 703)) | (1L << (SELF - 703)) | (1L << (SEMI_SENSITIVE - 703)) | (1L << (SEND - 703)) | (1L << (SENT - 703)) | (1L << (SERIALIZABLE - 703)) | (1L << (SESSION_TIMEOUT - 703)) | (1L << (SETERROR - 703)) | (1L << (SHARE - 703)) | (1L << (SHOWPLAN - 703)) | (1L << (SIGNATURE - 703)) | (1L << (SIMPLE - 703)) | (1L << (SINGLE_USER - 703)) | (1L << (SIZE - 703)) | (1L << (SMALLINT - 703)) | (1L << (SNAPSHOT - 703)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 703)) | (1L << (STANDBY - 703)) | (1L << (START_DATE - 703)) | (1L << (STATIC - 703)) | (1L << (STATS_STREAM - 703)) | (1L << (STATUS - 703)) | (1L << (STDEV - 703)) | (1L << (STDEVP - 703)) | (1L << (STOPLIST - 703)) | (1L << (STUFF - 703)) | (1L << (SUBJECT - 703)) | (1L << (SUM - 703)) | (1L << (SUSPEND - 703)) | (1L << (SYMMETRIC - 703)) | (1L << (SYNCHRONOUS_COMMIT - 703)) | (1L << (SYNONYM - 703)) | (1L << (TAKE - 703)) | (1L << (TARGET_RECOVERY_TIME - 703)) | (1L << (TB - 703)) | (1L << (TEXTIMAGE_ON - 703)) | (1L << (THROW - 703)) | (1L << (TIES - 703)) | (1L << (TIME - 703)) | (1L << (TIMEOUT - 703)) | (1L << (TIMER - 703)) | (1L << (TINYINT - 703)) | (1L << (TORN_PAGE_DETECTION - 703)) | (1L << (TRANSFORM_NOISE_WORDS - 703)) | (1L << (TRIPLE_DES - 703)) | (1L << (TRIPLE_DES_3KEY - 703)) | (1L << (TRUSTWORTHY - 703)) | (1L << (TRY - 703)) | (1L << (TSQL - 703)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 703)) | (1L << (TYPE - 703)) | (1L << (TYPE_WARNING - 703)) | (1L << (UNBOUNDED - 703)) | (1L << (UNCOMMITTED - 703)) | (1L << (UNKNOWN - 703)) | (1L << (UNLIMITED - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (USING - 767)) | (1L << (VALID_XML - 767)) | (1L << (VALIDATION - 767)) | (1L << (VALUE - 767)) | (1L << (VAR - 767)) | (1L << (VARP - 767)) | (1L << (VIEW_METADATA - 767)) | (1L << (VIEWS - 767)) | (1L << (WAIT - 767)) | (1L << (WELL_FORMED_XML - 767)) | (1L << (WORK - 767)) | (1L << (WORKLOAD - 767)) | (1L << (XML - 767)) | (1L << (XMLNAMESPACES - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)))) != 0)) {
						{
						setState(10281);
						((Table_nameContext)_localctx).schema = id();
						}
					}

					setState(10284);
					match(DOT);
					}
					break;
				case 2:
					{
					setState(10286);
					((Table_nameContext)_localctx).schema = id();
					setState(10287);
					match(DOT);
					}
					break;
				}
				setState(10291);
				((Table_nameContext)_localctx).table = id();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10302);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1446,_ctx) ) {
				case 1:
					{
					setState(10292);
					((Table_nameContext)_localctx).database = id();
					setState(10293);
					match(DOT);
					setState(10295);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (EVENTDATA - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & ((1L << (INIT - 158)) | (1L << (KEY - 158)) | (1L << (MASTER - 158)) | (1L << (MAX_MEMORY - 158)))) != 0) || ((((_la - 225)) & ~0x3f) == 0 && ((1L << (_la - 225)) & ((1L << (OFFSETS - 225)) | (1L << (PAGE - 225)) | (1L << (PUBLIC - 225)) | (1L << (R - 225)) | (1L << (RAW - 225)) | (1L << (RETURN - 225)) | (1L << (RETURNS - 225)) | (1L << (ROWCOUNT - 225)))) != 0) || ((((_la - 295)) & ~0x3f) == 0 && ((1L << (_la - 295)) & ((1L << (SAFETY - 295)) | (1L << (SERVER - 295)) | (1L << (SID - 295)) | (1L << (SOURCE - 295)) | (1L << (STATE - 295)) | (1L << (START - 295)) | (1L << (TARGET - 295)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (ABSOLUTE - 383)) | (1L << (ACCENT_SENSITIVITY - 383)) | (1L << (ACTION - 383)) | (1L << (ACTIVATION - 383)) | (1L << (ACTIVE - 383)) | (1L << (ADDRESS - 383)) | (1L << (AES_128 - 383)) | (1L << (AES_192 - 383)) | (1L << (AES_256 - 383)) | (1L << (AFFINITY - 383)) | (1L << (AFTER - 383)) | (1L << (AGGREGATE - 383)) | (1L << (ALGORITHM - 383)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 383)) | (1L << (ALLOWED - 383)) | (1L << (ANSI_NULL_DEFAULT - 383)) | (1L << (ANSI_NULLS - 383)) | (1L << (ANSI_PADDING - 383)) | (1L << (ANSI_WARNINGS - 383)) | (1L << (APPLICATION_LOG - 383)) | (1L << (APPLY - 383)) | (1L << (ARITHABORT - 383)) | (1L << (ASSEMBLY - 383)) | (1L << (AUDIT - 383)) | (1L << (AUDIT_GUID - 383)) | (1L << (AUTO - 383)) | (1L << (AUTO_CLEANUP - 383)) | (1L << (AUTO_CLOSE - 383)) | (1L << (AUTO_CREATE_STATISTICS - 383)) | (1L << (AUTO_SHRINK - 383)) | (1L << (AUTO_UPDATE_STATISTICS - 383)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 383)) | (1L << (AVAILABILITY - 383)) | (1L << (AVG - 383)) | (1L << (BACKUP_PRIORITY - 383)) | (1L << (BEGIN_DIALOG - 383)) | (1L << (BIGINT - 383)) | (1L << (BINARY_BASE64 - 383)) | (1L << (BINARY_CHECKSUM - 383)) | (1L << (BINDING - 383)) | (1L << (BLOB_STORAGE - 383)) | (1L << (BROKER - 383)) | (1L << (BROKER_INSTANCE - 383)) | (1L << (BULK_LOGGED - 383)) | (1L << (CALLER - 383)) | (1L << (CAP_CPU_PERCENT - 383)) | (1L << (CAST - 383)) | (1L << (CATALOG - 383)) | (1L << (CATCH - 383)) | (1L << (CHANGE_RETENTION - 383)) | (1L << (CHANGE_TRACKING - 383)) | (1L << (CHECKSUM - 383)) | (1L << (CHECKSUM_AGG - 383)) | (1L << (CLEANUP - 383)) | (1L << (COLLECTION - 383)) | (1L << (COLUMN_MASTER_KEY - 383)) | (1L << (COMMITTED - 383)) | (1L << (COMPATIBILITY_LEVEL - 383)) | (1L << (CONCAT - 383)) | (1L << (CONCAT_NULL_YIELDS_NULL - 383)) | (1L << (CONTENT - 383)) | (1L << (CONTROL - 383)) | (1L << (COOKIE - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (COUNT - 447)) | (1L << (COUNT_BIG - 447)) | (1L << (COUNTER - 447)) | (1L << (CPU - 447)) | (1L << (CREATE_NEW - 447)) | (1L << (CREATION_DISPOSITION - 447)) | (1L << (CREDENTIAL - 447)) | (1L << (CRYPTOGRAPHIC - 447)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 447)) | (1L << (CURSOR_DEFAULT - 447)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 447)) | (1L << (DATEADD - 447)) | (1L << (DATEDIFF - 447)) | (1L << (DATENAME - 447)) | (1L << (DATEPART - 447)) | (1L << (DAYS - 447)) | (1L << (DB_CHAINING - 447)) | (1L << (DB_FAILOVER - 447)) | (1L << (DECRYPTION - 447)) | (1L << (DEFAULT_DOUBLE_QUOTE - 447)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1L << (DEFAULT_LANGUAGE - 447)) | (1L << (DELAY - 447)) | (1L << (DELAYED_DURABILITY - 447)) | (1L << (DELETED - 447)) | (1L << (DENSE_RANK - 447)) | (1L << (DEPENDENTS - 447)) | (1L << (DES - 447)) | (1L << (DESCRIPTION - 447)) | (1L << (DESX - 447)) | (1L << (DHCP - 447)) | (1L << (DIALOG - 447)) | (1L << (DIRECTORY_NAME - 447)) | (1L << (DISABLE - 447)) | (1L << (DISABLE_BROKER - 447)) | (1L << (DISABLED - 447)) | (1L << (DISK_DRIVE - 447)) | (1L << (DOCUMENT - 447)) | (1L << (DYNAMIC - 447)) | (1L << (EMERGENCY - 447)) | (1L << (EMPTY - 447)) | (1L << (ENABLE - 447)) | (1L << (ENABLE_BROKER - 447)) | (1L << (ENCRYPTED_VALUE - 447)) | (1L << (ENCRYPTION - 447)) | (1L << (ENDPOINT_URL - 447)) | (1L << (ERROR_BROKER_CONVERSATIONS - 447)) | (1L << (EXCLUSIVE - 447)) | (1L << (EXECUTABLE - 447)) | (1L << (EXIST - 447)) | (1L << (EXPAND - 447)) | (1L << (EXPIRY_DATE - 447)) | (1L << (EXPLICIT - 447)) | (1L << (FAIL_OPERATION - 447)) | (1L << (FAILOVER_MODE - 447)) | (1L << (FAILURE - 447)) | (1L << (FAILURE_CONDITION_LEVEL - 447)) | (1L << (FAST - 447)) | (1L << (FAST_FORWARD - 447)) | (1L << (FILEGROUP - 447)) | (1L << (FILEGROWTH - 447)) | (1L << (FILEPATH - 447)) | (1L << (FILESTREAM - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (FILTER - 511)) | (1L << (FIRST - 511)) | (1L << (FIRST_VALUE - 511)) | (1L << (FOLLOWING - 511)) | (1L << (FORCE - 511)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1L << (FORCED - 511)) | (1L << (FORMAT - 511)) | (1L << (FORWARD_ONLY - 511)) | (1L << (FULLSCAN - 511)) | (1L << (FULLTEXT - 511)) | (1L << (GB - 511)) | (1L << (GETDATE - 511)) | (1L << (GETUTCDATE - 511)) | (1L << (GLOBAL - 511)) | (1L << (GO - 511)) | (1L << (GROUP_MAX_REQUESTS - 511)) | (1L << (GROUPING - 511)) | (1L << (GROUPING_ID - 511)) | (1L << (HADR - 511)) | (1L << (HASH - 511)) | (1L << (HEALTH_CHECK_TIMEOUT - 511)) | (1L << (HIGH - 511)) | (1L << (HONOR_BROKER_PRIORITY - 511)) | (1L << (HOURS - 511)) | (1L << (IDENTITY_VALUE - 511)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1L << (IMMEDIATE - 511)) | (1L << (IMPERSONATE - 511)) | (1L << (IMPORTANCE - 511)) | (1L << (INCREMENTAL - 511)) | (1L << (INITIATOR - 511)) | (1L << (INPUT - 511)) | (1L << (INSENSITIVE - 511)) | (1L << (INSERTED - 511)) | (1L << (INT - 511)) | (1L << (IP - 511)) | (1L << (ISOLATION - 511)) | (1L << (KB - 511)) | (1L << (KEEP - 511)) | (1L << (KEEPFIXED - 511)) | (1L << (KEY_SOURCE - 511)) | (1L << (KEYS - 511)) | (1L << (KEYSET - 511)) | (1L << (LAG - 511)) | (1L << (LAST - 511)) | (1L << (LAST_VALUE - 511)) | (1L << (LEAD - 511)) | (1L << (LEVEL - 511)) | (1L << (LIST - 511)) | (1L << (LISTENER - 511)) | (1L << (LISTENER_URL - 511)) | (1L << (LOB_COMPACTION - 511)) | (1L << (LOCAL - 511)) | (1L << (LOCATION - 511)) | (1L << (LOCK - 511)) | (1L << (LOCK_ESCALATION - 511)) | (1L << (LOGIN - 511)) | (1L << (LOOP - 511)) | (1L << (LOW - 511)) | (1L << (MANUAL - 511)) | (1L << (MARK - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (MATERIALIZED - 575)) | (1L << (MAX - 575)) | (1L << (MAX_CPU_PERCENT - 575)) | (1L << (MAX_DOP - 575)) | (1L << (MAX_FILES - 575)) | (1L << (MAX_IOPS_PER_VOLUME - 575)) | (1L << (MAX_MEMORY_PERCENT - 575)) | (1L << (MAX_PROCESSES - 575)) | (1L << (MAX_QUEUE_READERS - 575)) | (1L << (MAX_ROLLOVER_FILES - 575)) | (1L << (MAXDOP - 575)) | (1L << (MAXRECURSION - 575)) | (1L << (MAXSIZE - 575)) | (1L << (MB - 575)) | (1L << (MEDIUM - 575)) | (1L << (MEMORY_OPTIMIZED_DATA - 575)) | (1L << (MESSAGE - 575)) | (1L << (MIN - 575)) | (1L << (MIN_ACTIVE_ROWVERSION - 575)) | (1L << (MIN_CPU_PERCENT - 575)) | (1L << (MIN_IOPS_PER_VOLUME - 575)) | (1L << (MIN_MEMORY_PERCENT - 575)) | (1L << (MINUTES - 575)) | (1L << (MIRROR_ADDRESS - 575)) | (1L << (MIXED_PAGE_ALLOCATION - 575)) | (1L << (MODE - 575)) | (1L << (MODIFY - 575)) | (1L << (MOVE - 575)) | (1L << (MULTI_USER - 575)) | (1L << (NAME - 575)) | (1L << (NESTED_TRIGGERS - 575)) | (1L << (NEW_ACCOUNT - 575)) | (1L << (NEW_BROKER - 575)) | (1L << (NEW_PASSWORD - 575)) | (1L << (NEXT - 575)) | (1L << (NO - 575)) | (1L << (NO_TRUNCATE - 575)) | (1L << (NO_WAIT - 575)) | (1L << (NOCOUNT - 575)) | (1L << (NODES - 575)) | (1L << (NOEXPAND - 575)) | (1L << (NON_TRANSACTED_ACCESS - 575)) | (1L << (NORECOMPUTE - 575)) | (1L << (NORECOVERY - 575)) | (1L << (NOWAIT - 575)) | (1L << (NTILE - 575)) | (1L << (NUMANODE - 575)) | (1L << (NUMBER - 575)) | (1L << (NUMERIC_ROUNDABORT - 575)) | (1L << (OBJECT - 575)) | (1L << (OFFLINE - 575)) | (1L << (OFFSET - 575)) | (1L << (OLD_ACCOUNT - 575)) | (1L << (ONLINE - 575)) | (1L << (ONLY - 575)) | (1L << (OPEN_EXISTING - 575)) | (1L << (OPTIMISTIC - 575)) | (1L << (OPTIMIZE - 575)) | (1L << (OUT - 575)) | (1L << (OUTPUT - 575)) | (1L << (OWNER - 575)) | (1L << (PAGE_VERIFY - 575)) | (1L << (PARAMETERIZATION - 575)) | (1L << (PARTITION - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (PARTITIONS - 639)) | (1L << (PARTNER - 639)) | (1L << (PATH - 639)) | (1L << (POISON_MESSAGE_HANDLING - 639)) | (1L << (POOL - 639)) | (1L << (PORT - 639)) | (1L << (PRECEDING - 639)) | (1L << (PRIMARY_ROLE - 639)) | (1L << (PRIOR - 639)) | (1L << (PRIORITY - 639)) | (1L << (PRIORITY_LEVEL - 639)) | (1L << (PRIVATE - 639)) | (1L << (PRIVATE_KEY - 639)) | (1L << (PRIVILEGES - 639)) | (1L << (PROCEDURE_NAME - 639)) | (1L << (PROPERTY - 639)) | (1L << (PROVIDER - 639)) | (1L << (PROVIDER_KEY_NAME - 639)) | (1L << (QUERY - 639)) | (1L << (QUEUE - 639)) | (1L << (QUEUE_DELAY - 639)) | (1L << (QUOTED_IDENTIFIER - 639)) | (1L << (RANGE - 639)) | (1L << (RANK - 639)) | (1L << (RC2 - 639)) | (1L << (RC4 - 639)) | (1L << (RC4_128 - 639)) | (1L << (READ_COMMITTED_SNAPSHOT - 639)) | (1L << (READ_ONLY - 639)) | (1L << (READ_ONLY_ROUTING_LIST - 639)) | (1L << (READ_WRITE - 639)) | (1L << (READONLY - 639)) | (1L << (REBUILD - 639)) | (1L << (RECEIVE - 639)) | (1L << (RECOMPILE - 639)) | (1L << (RECOVERY - 639)) | (1L << (RECURSIVE_TRIGGERS - 639)) | (1L << (RELATIVE - 639)) | (1L << (REMOTE - 639)) | (1L << (REMOTE_SERVICE_NAME - 639)) | (1L << (REMOVE - 639)) | (1L << (REORGANIZE - 639)) | (1L << (REPEATABLE - 639)) | (1L << (REPLICA - 639)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 639)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 639)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 639)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 639)) | (1L << (RESERVE_DISK_SPACE - 639)) | (1L << (RESOURCE - 639)) | (1L << (RESOURCE_MANAGER_LOCATION - 639)) | (1L << (RESTRICTED_USER - 639)) | (1L << (RETENTION - 639)) | (1L << (ROBUST - 639)) | (1L << (ROOT - 639)) | (1L << (ROUTE - 639)) | (1L << (ROW - 639)) | (1L << (ROW_NUMBER - 639)) | (1L << (ROWGUID - 639)) | (1L << (ROWS - 639)) | (1L << (SAMPLE - 639)) | (1L << (SCHEMABINDING - 639)) | (1L << (SCOPED - 639)) | (1L << (SCROLL - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (SCROLL_LOCKS - 703)) | (1L << (SEARCH - 703)) | (1L << (SECONDARY - 703)) | (1L << (SECONDARY_ONLY - 703)) | (1L << (SECONDARY_ROLE - 703)) | (1L << (SECONDS - 703)) | (1L << (SECRET - 703)) | (1L << (SECURITY_LOG - 703)) | (1L << (SEEDING_MODE - 703)) | (1L << (SELF - 703)) | (1L << (SEMI_SENSITIVE - 703)) | (1L << (SEND - 703)) | (1L << (SENT - 703)) | (1L << (SERIALIZABLE - 703)) | (1L << (SESSION_TIMEOUT - 703)) | (1L << (SETERROR - 703)) | (1L << (SHARE - 703)) | (1L << (SHOWPLAN - 703)) | (1L << (SIGNATURE - 703)) | (1L << (SIMPLE - 703)) | (1L << (SINGLE_USER - 703)) | (1L << (SIZE - 703)) | (1L << (SMALLINT - 703)) | (1L << (SNAPSHOT - 703)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 703)) | (1L << (STANDBY - 703)) | (1L << (START_DATE - 703)) | (1L << (STATIC - 703)) | (1L << (STATS_STREAM - 703)) | (1L << (STATUS - 703)) | (1L << (STDEV - 703)) | (1L << (STDEVP - 703)) | (1L << (STOPLIST - 703)) | (1L << (STUFF - 703)) | (1L << (SUBJECT - 703)) | (1L << (SUM - 703)) | (1L << (SUSPEND - 703)) | (1L << (SYMMETRIC - 703)) | (1L << (SYNCHRONOUS_COMMIT - 703)) | (1L << (SYNONYM - 703)) | (1L << (TAKE - 703)) | (1L << (TARGET_RECOVERY_TIME - 703)) | (1L << (TB - 703)) | (1L << (TEXTIMAGE_ON - 703)) | (1L << (THROW - 703)) | (1L << (TIES - 703)) | (1L << (TIME - 703)) | (1L << (TIMEOUT - 703)) | (1L << (TIMER - 703)) | (1L << (TINYINT - 703)) | (1L << (TORN_PAGE_DETECTION - 703)) | (1L << (TRANSFORM_NOISE_WORDS - 703)) | (1L << (TRIPLE_DES - 703)) | (1L << (TRIPLE_DES_3KEY - 703)) | (1L << (TRUSTWORTHY - 703)) | (1L << (TRY - 703)) | (1L << (TSQL - 703)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 703)) | (1L << (TYPE - 703)) | (1L << (TYPE_WARNING - 703)) | (1L << (UNBOUNDED - 703)) | (1L << (UNCOMMITTED - 703)) | (1L << (UNKNOWN - 703)) | (1L << (UNLIMITED - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (USING - 767)) | (1L << (VALID_XML - 767)) | (1L << (VALIDATION - 767)) | (1L << (VALUE - 767)) | (1L << (VAR - 767)) | (1L << (VARP - 767)) | (1L << (VIEW_METADATA - 767)) | (1L << (VIEWS - 767)) | (1L << (WAIT - 767)) | (1L << (WELL_FORMED_XML - 767)) | (1L << (WORK - 767)) | (1L << (WORKLOAD - 767)) | (1L << (XML - 767)) | (1L << (XMLNAMESPACES - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)))) != 0)) {
						{
						setState(10294);
						((Table_nameContext)_localctx).schema = id();
						}
					}

					setState(10297);
					match(DOT);
					}
					break;
				case 2:
					{
					setState(10299);
					((Table_nameContext)_localctx).schema = id();
					setState(10300);
					match(DOT);
					}
					break;
				}
				setState(10304);
				match(BLOCKING_HIERARCHY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_nameContext extends ParserRuleContext {
		public IdContext schema;
		public IdContext name;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Simple_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSimple_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSimple_name(this);
		}
	}

	public final Simple_nameContext simple_name() throws RecognitionException {
		Simple_nameContext _localctx = new Simple_nameContext(_ctx, getState());
		enterRule(_localctx, 898, RULE_simple_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10310);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1448,_ctx) ) {
			case 1:
				{
				setState(10307);
				((Simple_nameContext)_localctx).schema = id();
				setState(10308);
				match(DOT);
				}
				break;
			}
			setState(10312);
			((Simple_nameContext)_localctx).name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_proc_nameContext extends ParserRuleContext {
		public IdContext database;
		public IdContext schema;
		public IdContext procedure;
		public IdContext server;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Func_proc_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_proc_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterFunc_proc_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitFunc_proc_name(this);
		}
	}

	public final Func_proc_nameContext func_proc_name() throws RecognitionException {
		Func_proc_nameContext _localctx = new Func_proc_nameContext(_ctx, getState());
		enterRule(_localctx, 900, RULE_func_proc_name);
		int _la;
		try {
			setState(10337);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1452,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10324);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1450,_ctx) ) {
				case 1:
					{
					setState(10314);
					((Func_proc_nameContext)_localctx).database = id();
					setState(10315);
					match(DOT);
					setState(10317);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (EVENTDATA - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & ((1L << (INIT - 158)) | (1L << (KEY - 158)) | (1L << (MASTER - 158)) | (1L << (MAX_MEMORY - 158)))) != 0) || ((((_la - 225)) & ~0x3f) == 0 && ((1L << (_la - 225)) & ((1L << (OFFSETS - 225)) | (1L << (PAGE - 225)) | (1L << (PUBLIC - 225)) | (1L << (R - 225)) | (1L << (RAW - 225)) | (1L << (RETURN - 225)) | (1L << (RETURNS - 225)) | (1L << (ROWCOUNT - 225)))) != 0) || ((((_la - 295)) & ~0x3f) == 0 && ((1L << (_la - 295)) & ((1L << (SAFETY - 295)) | (1L << (SERVER - 295)) | (1L << (SID - 295)) | (1L << (SOURCE - 295)) | (1L << (STATE - 295)) | (1L << (START - 295)) | (1L << (TARGET - 295)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (ABSOLUTE - 383)) | (1L << (ACCENT_SENSITIVITY - 383)) | (1L << (ACTION - 383)) | (1L << (ACTIVATION - 383)) | (1L << (ACTIVE - 383)) | (1L << (ADDRESS - 383)) | (1L << (AES_128 - 383)) | (1L << (AES_192 - 383)) | (1L << (AES_256 - 383)) | (1L << (AFFINITY - 383)) | (1L << (AFTER - 383)) | (1L << (AGGREGATE - 383)) | (1L << (ALGORITHM - 383)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 383)) | (1L << (ALLOWED - 383)) | (1L << (ANSI_NULL_DEFAULT - 383)) | (1L << (ANSI_NULLS - 383)) | (1L << (ANSI_PADDING - 383)) | (1L << (ANSI_WARNINGS - 383)) | (1L << (APPLICATION_LOG - 383)) | (1L << (APPLY - 383)) | (1L << (ARITHABORT - 383)) | (1L << (ASSEMBLY - 383)) | (1L << (AUDIT - 383)) | (1L << (AUDIT_GUID - 383)) | (1L << (AUTO - 383)) | (1L << (AUTO_CLEANUP - 383)) | (1L << (AUTO_CLOSE - 383)) | (1L << (AUTO_CREATE_STATISTICS - 383)) | (1L << (AUTO_SHRINK - 383)) | (1L << (AUTO_UPDATE_STATISTICS - 383)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 383)) | (1L << (AVAILABILITY - 383)) | (1L << (AVG - 383)) | (1L << (BACKUP_PRIORITY - 383)) | (1L << (BEGIN_DIALOG - 383)) | (1L << (BIGINT - 383)) | (1L << (BINARY_BASE64 - 383)) | (1L << (BINARY_CHECKSUM - 383)) | (1L << (BINDING - 383)) | (1L << (BLOB_STORAGE - 383)) | (1L << (BROKER - 383)) | (1L << (BROKER_INSTANCE - 383)) | (1L << (BULK_LOGGED - 383)) | (1L << (CALLER - 383)) | (1L << (CAP_CPU_PERCENT - 383)) | (1L << (CAST - 383)) | (1L << (CATALOG - 383)) | (1L << (CATCH - 383)) | (1L << (CHANGE_RETENTION - 383)) | (1L << (CHANGE_TRACKING - 383)) | (1L << (CHECKSUM - 383)) | (1L << (CHECKSUM_AGG - 383)) | (1L << (CLEANUP - 383)) | (1L << (COLLECTION - 383)) | (1L << (COLUMN_MASTER_KEY - 383)) | (1L << (COMMITTED - 383)) | (1L << (COMPATIBILITY_LEVEL - 383)) | (1L << (CONCAT - 383)) | (1L << (CONCAT_NULL_YIELDS_NULL - 383)) | (1L << (CONTENT - 383)) | (1L << (CONTROL - 383)) | (1L << (COOKIE - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (COUNT - 447)) | (1L << (COUNT_BIG - 447)) | (1L << (COUNTER - 447)) | (1L << (CPU - 447)) | (1L << (CREATE_NEW - 447)) | (1L << (CREATION_DISPOSITION - 447)) | (1L << (CREDENTIAL - 447)) | (1L << (CRYPTOGRAPHIC - 447)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 447)) | (1L << (CURSOR_DEFAULT - 447)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 447)) | (1L << (DATEADD - 447)) | (1L << (DATEDIFF - 447)) | (1L << (DATENAME - 447)) | (1L << (DATEPART - 447)) | (1L << (DAYS - 447)) | (1L << (DB_CHAINING - 447)) | (1L << (DB_FAILOVER - 447)) | (1L << (DECRYPTION - 447)) | (1L << (DEFAULT_DOUBLE_QUOTE - 447)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1L << (DEFAULT_LANGUAGE - 447)) | (1L << (DELAY - 447)) | (1L << (DELAYED_DURABILITY - 447)) | (1L << (DELETED - 447)) | (1L << (DENSE_RANK - 447)) | (1L << (DEPENDENTS - 447)) | (1L << (DES - 447)) | (1L << (DESCRIPTION - 447)) | (1L << (DESX - 447)) | (1L << (DHCP - 447)) | (1L << (DIALOG - 447)) | (1L << (DIRECTORY_NAME - 447)) | (1L << (DISABLE - 447)) | (1L << (DISABLE_BROKER - 447)) | (1L << (DISABLED - 447)) | (1L << (DISK_DRIVE - 447)) | (1L << (DOCUMENT - 447)) | (1L << (DYNAMIC - 447)) | (1L << (EMERGENCY - 447)) | (1L << (EMPTY - 447)) | (1L << (ENABLE - 447)) | (1L << (ENABLE_BROKER - 447)) | (1L << (ENCRYPTED_VALUE - 447)) | (1L << (ENCRYPTION - 447)) | (1L << (ENDPOINT_URL - 447)) | (1L << (ERROR_BROKER_CONVERSATIONS - 447)) | (1L << (EXCLUSIVE - 447)) | (1L << (EXECUTABLE - 447)) | (1L << (EXIST - 447)) | (1L << (EXPAND - 447)) | (1L << (EXPIRY_DATE - 447)) | (1L << (EXPLICIT - 447)) | (1L << (FAIL_OPERATION - 447)) | (1L << (FAILOVER_MODE - 447)) | (1L << (FAILURE - 447)) | (1L << (FAILURE_CONDITION_LEVEL - 447)) | (1L << (FAST - 447)) | (1L << (FAST_FORWARD - 447)) | (1L << (FILEGROUP - 447)) | (1L << (FILEGROWTH - 447)) | (1L << (FILEPATH - 447)) | (1L << (FILESTREAM - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (FILTER - 511)) | (1L << (FIRST - 511)) | (1L << (FIRST_VALUE - 511)) | (1L << (FOLLOWING - 511)) | (1L << (FORCE - 511)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1L << (FORCED - 511)) | (1L << (FORMAT - 511)) | (1L << (FORWARD_ONLY - 511)) | (1L << (FULLSCAN - 511)) | (1L << (FULLTEXT - 511)) | (1L << (GB - 511)) | (1L << (GETDATE - 511)) | (1L << (GETUTCDATE - 511)) | (1L << (GLOBAL - 511)) | (1L << (GO - 511)) | (1L << (GROUP_MAX_REQUESTS - 511)) | (1L << (GROUPING - 511)) | (1L << (GROUPING_ID - 511)) | (1L << (HADR - 511)) | (1L << (HASH - 511)) | (1L << (HEALTH_CHECK_TIMEOUT - 511)) | (1L << (HIGH - 511)) | (1L << (HONOR_BROKER_PRIORITY - 511)) | (1L << (HOURS - 511)) | (1L << (IDENTITY_VALUE - 511)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1L << (IMMEDIATE - 511)) | (1L << (IMPERSONATE - 511)) | (1L << (IMPORTANCE - 511)) | (1L << (INCREMENTAL - 511)) | (1L << (INITIATOR - 511)) | (1L << (INPUT - 511)) | (1L << (INSENSITIVE - 511)) | (1L << (INSERTED - 511)) | (1L << (INT - 511)) | (1L << (IP - 511)) | (1L << (ISOLATION - 511)) | (1L << (KB - 511)) | (1L << (KEEP - 511)) | (1L << (KEEPFIXED - 511)) | (1L << (KEY_SOURCE - 511)) | (1L << (KEYS - 511)) | (1L << (KEYSET - 511)) | (1L << (LAG - 511)) | (1L << (LAST - 511)) | (1L << (LAST_VALUE - 511)) | (1L << (LEAD - 511)) | (1L << (LEVEL - 511)) | (1L << (LIST - 511)) | (1L << (LISTENER - 511)) | (1L << (LISTENER_URL - 511)) | (1L << (LOB_COMPACTION - 511)) | (1L << (LOCAL - 511)) | (1L << (LOCATION - 511)) | (1L << (LOCK - 511)) | (1L << (LOCK_ESCALATION - 511)) | (1L << (LOGIN - 511)) | (1L << (LOOP - 511)) | (1L << (LOW - 511)) | (1L << (MANUAL - 511)) | (1L << (MARK - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (MATERIALIZED - 575)) | (1L << (MAX - 575)) | (1L << (MAX_CPU_PERCENT - 575)) | (1L << (MAX_DOP - 575)) | (1L << (MAX_FILES - 575)) | (1L << (MAX_IOPS_PER_VOLUME - 575)) | (1L << (MAX_MEMORY_PERCENT - 575)) | (1L << (MAX_PROCESSES - 575)) | (1L << (MAX_QUEUE_READERS - 575)) | (1L << (MAX_ROLLOVER_FILES - 575)) | (1L << (MAXDOP - 575)) | (1L << (MAXRECURSION - 575)) | (1L << (MAXSIZE - 575)) | (1L << (MB - 575)) | (1L << (MEDIUM - 575)) | (1L << (MEMORY_OPTIMIZED_DATA - 575)) | (1L << (MESSAGE - 575)) | (1L << (MIN - 575)) | (1L << (MIN_ACTIVE_ROWVERSION - 575)) | (1L << (MIN_CPU_PERCENT - 575)) | (1L << (MIN_IOPS_PER_VOLUME - 575)) | (1L << (MIN_MEMORY_PERCENT - 575)) | (1L << (MINUTES - 575)) | (1L << (MIRROR_ADDRESS - 575)) | (1L << (MIXED_PAGE_ALLOCATION - 575)) | (1L << (MODE - 575)) | (1L << (MODIFY - 575)) | (1L << (MOVE - 575)) | (1L << (MULTI_USER - 575)) | (1L << (NAME - 575)) | (1L << (NESTED_TRIGGERS - 575)) | (1L << (NEW_ACCOUNT - 575)) | (1L << (NEW_BROKER - 575)) | (1L << (NEW_PASSWORD - 575)) | (1L << (NEXT - 575)) | (1L << (NO - 575)) | (1L << (NO_TRUNCATE - 575)) | (1L << (NO_WAIT - 575)) | (1L << (NOCOUNT - 575)) | (1L << (NODES - 575)) | (1L << (NOEXPAND - 575)) | (1L << (NON_TRANSACTED_ACCESS - 575)) | (1L << (NORECOMPUTE - 575)) | (1L << (NORECOVERY - 575)) | (1L << (NOWAIT - 575)) | (1L << (NTILE - 575)) | (1L << (NUMANODE - 575)) | (1L << (NUMBER - 575)) | (1L << (NUMERIC_ROUNDABORT - 575)) | (1L << (OBJECT - 575)) | (1L << (OFFLINE - 575)) | (1L << (OFFSET - 575)) | (1L << (OLD_ACCOUNT - 575)) | (1L << (ONLINE - 575)) | (1L << (ONLY - 575)) | (1L << (OPEN_EXISTING - 575)) | (1L << (OPTIMISTIC - 575)) | (1L << (OPTIMIZE - 575)) | (1L << (OUT - 575)) | (1L << (OUTPUT - 575)) | (1L << (OWNER - 575)) | (1L << (PAGE_VERIFY - 575)) | (1L << (PARAMETERIZATION - 575)) | (1L << (PARTITION - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (PARTITIONS - 639)) | (1L << (PARTNER - 639)) | (1L << (PATH - 639)) | (1L << (POISON_MESSAGE_HANDLING - 639)) | (1L << (POOL - 639)) | (1L << (PORT - 639)) | (1L << (PRECEDING - 639)) | (1L << (PRIMARY_ROLE - 639)) | (1L << (PRIOR - 639)) | (1L << (PRIORITY - 639)) | (1L << (PRIORITY_LEVEL - 639)) | (1L << (PRIVATE - 639)) | (1L << (PRIVATE_KEY - 639)) | (1L << (PRIVILEGES - 639)) | (1L << (PROCEDURE_NAME - 639)) | (1L << (PROPERTY - 639)) | (1L << (PROVIDER - 639)) | (1L << (PROVIDER_KEY_NAME - 639)) | (1L << (QUERY - 639)) | (1L << (QUEUE - 639)) | (1L << (QUEUE_DELAY - 639)) | (1L << (QUOTED_IDENTIFIER - 639)) | (1L << (RANGE - 639)) | (1L << (RANK - 639)) | (1L << (RC2 - 639)) | (1L << (RC4 - 639)) | (1L << (RC4_128 - 639)) | (1L << (READ_COMMITTED_SNAPSHOT - 639)) | (1L << (READ_ONLY - 639)) | (1L << (READ_ONLY_ROUTING_LIST - 639)) | (1L << (READ_WRITE - 639)) | (1L << (READONLY - 639)) | (1L << (REBUILD - 639)) | (1L << (RECEIVE - 639)) | (1L << (RECOMPILE - 639)) | (1L << (RECOVERY - 639)) | (1L << (RECURSIVE_TRIGGERS - 639)) | (1L << (RELATIVE - 639)) | (1L << (REMOTE - 639)) | (1L << (REMOTE_SERVICE_NAME - 639)) | (1L << (REMOVE - 639)) | (1L << (REORGANIZE - 639)) | (1L << (REPEATABLE - 639)) | (1L << (REPLICA - 639)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 639)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 639)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 639)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 639)) | (1L << (RESERVE_DISK_SPACE - 639)) | (1L << (RESOURCE - 639)) | (1L << (RESOURCE_MANAGER_LOCATION - 639)) | (1L << (RESTRICTED_USER - 639)) | (1L << (RETENTION - 639)) | (1L << (ROBUST - 639)) | (1L << (ROOT - 639)) | (1L << (ROUTE - 639)) | (1L << (ROW - 639)) | (1L << (ROW_NUMBER - 639)) | (1L << (ROWGUID - 639)) | (1L << (ROWS - 639)) | (1L << (SAMPLE - 639)) | (1L << (SCHEMABINDING - 639)) | (1L << (SCOPED - 639)) | (1L << (SCROLL - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (SCROLL_LOCKS - 703)) | (1L << (SEARCH - 703)) | (1L << (SECONDARY - 703)) | (1L << (SECONDARY_ONLY - 703)) | (1L << (SECONDARY_ROLE - 703)) | (1L << (SECONDS - 703)) | (1L << (SECRET - 703)) | (1L << (SECURITY_LOG - 703)) | (1L << (SEEDING_MODE - 703)) | (1L << (SELF - 703)) | (1L << (SEMI_SENSITIVE - 703)) | (1L << (SEND - 703)) | (1L << (SENT - 703)) | (1L << (SERIALIZABLE - 703)) | (1L << (SESSION_TIMEOUT - 703)) | (1L << (SETERROR - 703)) | (1L << (SHARE - 703)) | (1L << (SHOWPLAN - 703)) | (1L << (SIGNATURE - 703)) | (1L << (SIMPLE - 703)) | (1L << (SINGLE_USER - 703)) | (1L << (SIZE - 703)) | (1L << (SMALLINT - 703)) | (1L << (SNAPSHOT - 703)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 703)) | (1L << (STANDBY - 703)) | (1L << (START_DATE - 703)) | (1L << (STATIC - 703)) | (1L << (STATS_STREAM - 703)) | (1L << (STATUS - 703)) | (1L << (STDEV - 703)) | (1L << (STDEVP - 703)) | (1L << (STOPLIST - 703)) | (1L << (STUFF - 703)) | (1L << (SUBJECT - 703)) | (1L << (SUM - 703)) | (1L << (SUSPEND - 703)) | (1L << (SYMMETRIC - 703)) | (1L << (SYNCHRONOUS_COMMIT - 703)) | (1L << (SYNONYM - 703)) | (1L << (TAKE - 703)) | (1L << (TARGET_RECOVERY_TIME - 703)) | (1L << (TB - 703)) | (1L << (TEXTIMAGE_ON - 703)) | (1L << (THROW - 703)) | (1L << (TIES - 703)) | (1L << (TIME - 703)) | (1L << (TIMEOUT - 703)) | (1L << (TIMER - 703)) | (1L << (TINYINT - 703)) | (1L << (TORN_PAGE_DETECTION - 703)) | (1L << (TRANSFORM_NOISE_WORDS - 703)) | (1L << (TRIPLE_DES - 703)) | (1L << (TRIPLE_DES_3KEY - 703)) | (1L << (TRUSTWORTHY - 703)) | (1L << (TRY - 703)) | (1L << (TSQL - 703)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 703)) | (1L << (TYPE - 703)) | (1L << (TYPE_WARNING - 703)) | (1L << (UNBOUNDED - 703)) | (1L << (UNCOMMITTED - 703)) | (1L << (UNKNOWN - 703)) | (1L << (UNLIMITED - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (USING - 767)) | (1L << (VALID_XML - 767)) | (1L << (VALIDATION - 767)) | (1L << (VALUE - 767)) | (1L << (VAR - 767)) | (1L << (VARP - 767)) | (1L << (VIEW_METADATA - 767)) | (1L << (VIEWS - 767)) | (1L << (WAIT - 767)) | (1L << (WELL_FORMED_XML - 767)) | (1L << (WORK - 767)) | (1L << (WORKLOAD - 767)) | (1L << (XML - 767)) | (1L << (XMLNAMESPACES - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)))) != 0)) {
						{
						setState(10316);
						((Func_proc_nameContext)_localctx).schema = id();
						}
					}

					setState(10319);
					match(DOT);
					}
					break;
				case 2:
					{
					{
					setState(10321);
					((Func_proc_nameContext)_localctx).schema = id();
					}
					setState(10322);
					match(DOT);
					}
					break;
				}
				setState(10326);
				((Func_proc_nameContext)_localctx).procedure = id();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10327);
				((Func_proc_nameContext)_localctx).server = id();
				setState(10328);
				match(DOT);
				setState(10329);
				((Func_proc_nameContext)_localctx).database = id();
				setState(10330);
				match(DOT);
				setState(10332);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (EVENTDATA - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & ((1L << (INIT - 158)) | (1L << (KEY - 158)) | (1L << (MASTER - 158)) | (1L << (MAX_MEMORY - 158)))) != 0) || ((((_la - 225)) & ~0x3f) == 0 && ((1L << (_la - 225)) & ((1L << (OFFSETS - 225)) | (1L << (PAGE - 225)) | (1L << (PUBLIC - 225)) | (1L << (R - 225)) | (1L << (RAW - 225)) | (1L << (RETURN - 225)) | (1L << (RETURNS - 225)) | (1L << (ROWCOUNT - 225)))) != 0) || ((((_la - 295)) & ~0x3f) == 0 && ((1L << (_la - 295)) & ((1L << (SAFETY - 295)) | (1L << (SERVER - 295)) | (1L << (SID - 295)) | (1L << (SOURCE - 295)) | (1L << (STATE - 295)) | (1L << (START - 295)) | (1L << (TARGET - 295)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (ABSOLUTE - 383)) | (1L << (ACCENT_SENSITIVITY - 383)) | (1L << (ACTION - 383)) | (1L << (ACTIVATION - 383)) | (1L << (ACTIVE - 383)) | (1L << (ADDRESS - 383)) | (1L << (AES_128 - 383)) | (1L << (AES_192 - 383)) | (1L << (AES_256 - 383)) | (1L << (AFFINITY - 383)) | (1L << (AFTER - 383)) | (1L << (AGGREGATE - 383)) | (1L << (ALGORITHM - 383)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 383)) | (1L << (ALLOWED - 383)) | (1L << (ANSI_NULL_DEFAULT - 383)) | (1L << (ANSI_NULLS - 383)) | (1L << (ANSI_PADDING - 383)) | (1L << (ANSI_WARNINGS - 383)) | (1L << (APPLICATION_LOG - 383)) | (1L << (APPLY - 383)) | (1L << (ARITHABORT - 383)) | (1L << (ASSEMBLY - 383)) | (1L << (AUDIT - 383)) | (1L << (AUDIT_GUID - 383)) | (1L << (AUTO - 383)) | (1L << (AUTO_CLEANUP - 383)) | (1L << (AUTO_CLOSE - 383)) | (1L << (AUTO_CREATE_STATISTICS - 383)) | (1L << (AUTO_SHRINK - 383)) | (1L << (AUTO_UPDATE_STATISTICS - 383)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 383)) | (1L << (AVAILABILITY - 383)) | (1L << (AVG - 383)) | (1L << (BACKUP_PRIORITY - 383)) | (1L << (BEGIN_DIALOG - 383)) | (1L << (BIGINT - 383)) | (1L << (BINARY_BASE64 - 383)) | (1L << (BINARY_CHECKSUM - 383)) | (1L << (BINDING - 383)) | (1L << (BLOB_STORAGE - 383)) | (1L << (BROKER - 383)) | (1L << (BROKER_INSTANCE - 383)) | (1L << (BULK_LOGGED - 383)) | (1L << (CALLER - 383)) | (1L << (CAP_CPU_PERCENT - 383)) | (1L << (CAST - 383)) | (1L << (CATALOG - 383)) | (1L << (CATCH - 383)) | (1L << (CHANGE_RETENTION - 383)) | (1L << (CHANGE_TRACKING - 383)) | (1L << (CHECKSUM - 383)) | (1L << (CHECKSUM_AGG - 383)) | (1L << (CLEANUP - 383)) | (1L << (COLLECTION - 383)) | (1L << (COLUMN_MASTER_KEY - 383)) | (1L << (COMMITTED - 383)) | (1L << (COMPATIBILITY_LEVEL - 383)) | (1L << (CONCAT - 383)) | (1L << (CONCAT_NULL_YIELDS_NULL - 383)) | (1L << (CONTENT - 383)) | (1L << (CONTROL - 383)) | (1L << (COOKIE - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (COUNT - 447)) | (1L << (COUNT_BIG - 447)) | (1L << (COUNTER - 447)) | (1L << (CPU - 447)) | (1L << (CREATE_NEW - 447)) | (1L << (CREATION_DISPOSITION - 447)) | (1L << (CREDENTIAL - 447)) | (1L << (CRYPTOGRAPHIC - 447)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 447)) | (1L << (CURSOR_DEFAULT - 447)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 447)) | (1L << (DATEADD - 447)) | (1L << (DATEDIFF - 447)) | (1L << (DATENAME - 447)) | (1L << (DATEPART - 447)) | (1L << (DAYS - 447)) | (1L << (DB_CHAINING - 447)) | (1L << (DB_FAILOVER - 447)) | (1L << (DECRYPTION - 447)) | (1L << (DEFAULT_DOUBLE_QUOTE - 447)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1L << (DEFAULT_LANGUAGE - 447)) | (1L << (DELAY - 447)) | (1L << (DELAYED_DURABILITY - 447)) | (1L << (DELETED - 447)) | (1L << (DENSE_RANK - 447)) | (1L << (DEPENDENTS - 447)) | (1L << (DES - 447)) | (1L << (DESCRIPTION - 447)) | (1L << (DESX - 447)) | (1L << (DHCP - 447)) | (1L << (DIALOG - 447)) | (1L << (DIRECTORY_NAME - 447)) | (1L << (DISABLE - 447)) | (1L << (DISABLE_BROKER - 447)) | (1L << (DISABLED - 447)) | (1L << (DISK_DRIVE - 447)) | (1L << (DOCUMENT - 447)) | (1L << (DYNAMIC - 447)) | (1L << (EMERGENCY - 447)) | (1L << (EMPTY - 447)) | (1L << (ENABLE - 447)) | (1L << (ENABLE_BROKER - 447)) | (1L << (ENCRYPTED_VALUE - 447)) | (1L << (ENCRYPTION - 447)) | (1L << (ENDPOINT_URL - 447)) | (1L << (ERROR_BROKER_CONVERSATIONS - 447)) | (1L << (EXCLUSIVE - 447)) | (1L << (EXECUTABLE - 447)) | (1L << (EXIST - 447)) | (1L << (EXPAND - 447)) | (1L << (EXPIRY_DATE - 447)) | (1L << (EXPLICIT - 447)) | (1L << (FAIL_OPERATION - 447)) | (1L << (FAILOVER_MODE - 447)) | (1L << (FAILURE - 447)) | (1L << (FAILURE_CONDITION_LEVEL - 447)) | (1L << (FAST - 447)) | (1L << (FAST_FORWARD - 447)) | (1L << (FILEGROUP - 447)) | (1L << (FILEGROWTH - 447)) | (1L << (FILEPATH - 447)) | (1L << (FILESTREAM - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (FILTER - 511)) | (1L << (FIRST - 511)) | (1L << (FIRST_VALUE - 511)) | (1L << (FOLLOWING - 511)) | (1L << (FORCE - 511)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1L << (FORCED - 511)) | (1L << (FORMAT - 511)) | (1L << (FORWARD_ONLY - 511)) | (1L << (FULLSCAN - 511)) | (1L << (FULLTEXT - 511)) | (1L << (GB - 511)) | (1L << (GETDATE - 511)) | (1L << (GETUTCDATE - 511)) | (1L << (GLOBAL - 511)) | (1L << (GO - 511)) | (1L << (GROUP_MAX_REQUESTS - 511)) | (1L << (GROUPING - 511)) | (1L << (GROUPING_ID - 511)) | (1L << (HADR - 511)) | (1L << (HASH - 511)) | (1L << (HEALTH_CHECK_TIMEOUT - 511)) | (1L << (HIGH - 511)) | (1L << (HONOR_BROKER_PRIORITY - 511)) | (1L << (HOURS - 511)) | (1L << (IDENTITY_VALUE - 511)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1L << (IMMEDIATE - 511)) | (1L << (IMPERSONATE - 511)) | (1L << (IMPORTANCE - 511)) | (1L << (INCREMENTAL - 511)) | (1L << (INITIATOR - 511)) | (1L << (INPUT - 511)) | (1L << (INSENSITIVE - 511)) | (1L << (INSERTED - 511)) | (1L << (INT - 511)) | (1L << (IP - 511)) | (1L << (ISOLATION - 511)) | (1L << (KB - 511)) | (1L << (KEEP - 511)) | (1L << (KEEPFIXED - 511)) | (1L << (KEY_SOURCE - 511)) | (1L << (KEYS - 511)) | (1L << (KEYSET - 511)) | (1L << (LAG - 511)) | (1L << (LAST - 511)) | (1L << (LAST_VALUE - 511)) | (1L << (LEAD - 511)) | (1L << (LEVEL - 511)) | (1L << (LIST - 511)) | (1L << (LISTENER - 511)) | (1L << (LISTENER_URL - 511)) | (1L << (LOB_COMPACTION - 511)) | (1L << (LOCAL - 511)) | (1L << (LOCATION - 511)) | (1L << (LOCK - 511)) | (1L << (LOCK_ESCALATION - 511)) | (1L << (LOGIN - 511)) | (1L << (LOOP - 511)) | (1L << (LOW - 511)) | (1L << (MANUAL - 511)) | (1L << (MARK - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (MATERIALIZED - 575)) | (1L << (MAX - 575)) | (1L << (MAX_CPU_PERCENT - 575)) | (1L << (MAX_DOP - 575)) | (1L << (MAX_FILES - 575)) | (1L << (MAX_IOPS_PER_VOLUME - 575)) | (1L << (MAX_MEMORY_PERCENT - 575)) | (1L << (MAX_PROCESSES - 575)) | (1L << (MAX_QUEUE_READERS - 575)) | (1L << (MAX_ROLLOVER_FILES - 575)) | (1L << (MAXDOP - 575)) | (1L << (MAXRECURSION - 575)) | (1L << (MAXSIZE - 575)) | (1L << (MB - 575)) | (1L << (MEDIUM - 575)) | (1L << (MEMORY_OPTIMIZED_DATA - 575)) | (1L << (MESSAGE - 575)) | (1L << (MIN - 575)) | (1L << (MIN_ACTIVE_ROWVERSION - 575)) | (1L << (MIN_CPU_PERCENT - 575)) | (1L << (MIN_IOPS_PER_VOLUME - 575)) | (1L << (MIN_MEMORY_PERCENT - 575)) | (1L << (MINUTES - 575)) | (1L << (MIRROR_ADDRESS - 575)) | (1L << (MIXED_PAGE_ALLOCATION - 575)) | (1L << (MODE - 575)) | (1L << (MODIFY - 575)) | (1L << (MOVE - 575)) | (1L << (MULTI_USER - 575)) | (1L << (NAME - 575)) | (1L << (NESTED_TRIGGERS - 575)) | (1L << (NEW_ACCOUNT - 575)) | (1L << (NEW_BROKER - 575)) | (1L << (NEW_PASSWORD - 575)) | (1L << (NEXT - 575)) | (1L << (NO - 575)) | (1L << (NO_TRUNCATE - 575)) | (1L << (NO_WAIT - 575)) | (1L << (NOCOUNT - 575)) | (1L << (NODES - 575)) | (1L << (NOEXPAND - 575)) | (1L << (NON_TRANSACTED_ACCESS - 575)) | (1L << (NORECOMPUTE - 575)) | (1L << (NORECOVERY - 575)) | (1L << (NOWAIT - 575)) | (1L << (NTILE - 575)) | (1L << (NUMANODE - 575)) | (1L << (NUMBER - 575)) | (1L << (NUMERIC_ROUNDABORT - 575)) | (1L << (OBJECT - 575)) | (1L << (OFFLINE - 575)) | (1L << (OFFSET - 575)) | (1L << (OLD_ACCOUNT - 575)) | (1L << (ONLINE - 575)) | (1L << (ONLY - 575)) | (1L << (OPEN_EXISTING - 575)) | (1L << (OPTIMISTIC - 575)) | (1L << (OPTIMIZE - 575)) | (1L << (OUT - 575)) | (1L << (OUTPUT - 575)) | (1L << (OWNER - 575)) | (1L << (PAGE_VERIFY - 575)) | (1L << (PARAMETERIZATION - 575)) | (1L << (PARTITION - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (PARTITIONS - 639)) | (1L << (PARTNER - 639)) | (1L << (PATH - 639)) | (1L << (POISON_MESSAGE_HANDLING - 639)) | (1L << (POOL - 639)) | (1L << (PORT - 639)) | (1L << (PRECEDING - 639)) | (1L << (PRIMARY_ROLE - 639)) | (1L << (PRIOR - 639)) | (1L << (PRIORITY - 639)) | (1L << (PRIORITY_LEVEL - 639)) | (1L << (PRIVATE - 639)) | (1L << (PRIVATE_KEY - 639)) | (1L << (PRIVILEGES - 639)) | (1L << (PROCEDURE_NAME - 639)) | (1L << (PROPERTY - 639)) | (1L << (PROVIDER - 639)) | (1L << (PROVIDER_KEY_NAME - 639)) | (1L << (QUERY - 639)) | (1L << (QUEUE - 639)) | (1L << (QUEUE_DELAY - 639)) | (1L << (QUOTED_IDENTIFIER - 639)) | (1L << (RANGE - 639)) | (1L << (RANK - 639)) | (1L << (RC2 - 639)) | (1L << (RC4 - 639)) | (1L << (RC4_128 - 639)) | (1L << (READ_COMMITTED_SNAPSHOT - 639)) | (1L << (READ_ONLY - 639)) | (1L << (READ_ONLY_ROUTING_LIST - 639)) | (1L << (READ_WRITE - 639)) | (1L << (READONLY - 639)) | (1L << (REBUILD - 639)) | (1L << (RECEIVE - 639)) | (1L << (RECOMPILE - 639)) | (1L << (RECOVERY - 639)) | (1L << (RECURSIVE_TRIGGERS - 639)) | (1L << (RELATIVE - 639)) | (1L << (REMOTE - 639)) | (1L << (REMOTE_SERVICE_NAME - 639)) | (1L << (REMOVE - 639)) | (1L << (REORGANIZE - 639)) | (1L << (REPEATABLE - 639)) | (1L << (REPLICA - 639)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 639)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 639)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 639)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 639)) | (1L << (RESERVE_DISK_SPACE - 639)) | (1L << (RESOURCE - 639)) | (1L << (RESOURCE_MANAGER_LOCATION - 639)) | (1L << (RESTRICTED_USER - 639)) | (1L << (RETENTION - 639)) | (1L << (ROBUST - 639)) | (1L << (ROOT - 639)) | (1L << (ROUTE - 639)) | (1L << (ROW - 639)) | (1L << (ROW_NUMBER - 639)) | (1L << (ROWGUID - 639)) | (1L << (ROWS - 639)) | (1L << (SAMPLE - 639)) | (1L << (SCHEMABINDING - 639)) | (1L << (SCOPED - 639)) | (1L << (SCROLL - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (SCROLL_LOCKS - 703)) | (1L << (SEARCH - 703)) | (1L << (SECONDARY - 703)) | (1L << (SECONDARY_ONLY - 703)) | (1L << (SECONDARY_ROLE - 703)) | (1L << (SECONDS - 703)) | (1L << (SECRET - 703)) | (1L << (SECURITY_LOG - 703)) | (1L << (SEEDING_MODE - 703)) | (1L << (SELF - 703)) | (1L << (SEMI_SENSITIVE - 703)) | (1L << (SEND - 703)) | (1L << (SENT - 703)) | (1L << (SERIALIZABLE - 703)) | (1L << (SESSION_TIMEOUT - 703)) | (1L << (SETERROR - 703)) | (1L << (SHARE - 703)) | (1L << (SHOWPLAN - 703)) | (1L << (SIGNATURE - 703)) | (1L << (SIMPLE - 703)) | (1L << (SINGLE_USER - 703)) | (1L << (SIZE - 703)) | (1L << (SMALLINT - 703)) | (1L << (SNAPSHOT - 703)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 703)) | (1L << (STANDBY - 703)) | (1L << (START_DATE - 703)) | (1L << (STATIC - 703)) | (1L << (STATS_STREAM - 703)) | (1L << (STATUS - 703)) | (1L << (STDEV - 703)) | (1L << (STDEVP - 703)) | (1L << (STOPLIST - 703)) | (1L << (STUFF - 703)) | (1L << (SUBJECT - 703)) | (1L << (SUM - 703)) | (1L << (SUSPEND - 703)) | (1L << (SYMMETRIC - 703)) | (1L << (SYNCHRONOUS_COMMIT - 703)) | (1L << (SYNONYM - 703)) | (1L << (TAKE - 703)) | (1L << (TARGET_RECOVERY_TIME - 703)) | (1L << (TB - 703)) | (1L << (TEXTIMAGE_ON - 703)) | (1L << (THROW - 703)) | (1L << (TIES - 703)) | (1L << (TIME - 703)) | (1L << (TIMEOUT - 703)) | (1L << (TIMER - 703)) | (1L << (TINYINT - 703)) | (1L << (TORN_PAGE_DETECTION - 703)) | (1L << (TRANSFORM_NOISE_WORDS - 703)) | (1L << (TRIPLE_DES - 703)) | (1L << (TRIPLE_DES_3KEY - 703)) | (1L << (TRUSTWORTHY - 703)) | (1L << (TRY - 703)) | (1L << (TSQL - 703)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 703)) | (1L << (TYPE - 703)) | (1L << (TYPE_WARNING - 703)) | (1L << (UNBOUNDED - 703)) | (1L << (UNCOMMITTED - 703)) | (1L << (UNKNOWN - 703)) | (1L << (UNLIMITED - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (USING - 767)) | (1L << (VALID_XML - 767)) | (1L << (VALIDATION - 767)) | (1L << (VALUE - 767)) | (1L << (VAR - 767)) | (1L << (VARP - 767)) | (1L << (VIEW_METADATA - 767)) | (1L << (VIEWS - 767)) | (1L << (WAIT - 767)) | (1L << (WELL_FORMED_XML - 767)) | (1L << (WORK - 767)) | (1L << (WORKLOAD - 767)) | (1L << (XML - 767)) | (1L << (XMLNAMESPACES - 767)) | (1L << (DOUBLE_QUOTE_ID - 767)) | (1L << (SQUARE_BRACKET_ID - 767)) | (1L << (ID - 767)))) != 0)) {
					{
					setState(10331);
					((Func_proc_nameContext)_localctx).schema = id();
					}
				}

				setState(10334);
				match(DOT);
				setState(10335);
				((Func_proc_nameContext)_localctx).procedure = id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ddl_objectContext extends ParserRuleContext {
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Ddl_objectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ddl_object; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDdl_object(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDdl_object(this);
		}
	}

	public final Ddl_objectContext ddl_object() throws RecognitionException {
		Ddl_objectContext _localctx = new Ddl_objectContext(_ctx, getState());
		enterRule(_localctx, 902, RULE_ddl_object);
		try {
			setState(10341);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case START:
			case TARGET:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(10339);
				full_table_name();
				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(10340);
				match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Full_column_nameContext extends ParserRuleContext {
		public IdContext column_name;
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode COMPATIBILITY_LEVEL() { return getToken(TSqlParser.COMPATIBILITY_LEVEL, 0); }
		public TerminalNode STATUS() { return getToken(TSqlParser.STATUS, 0); }
		public TerminalNode QUOTED_IDENTIFIER() { return getToken(TSqlParser.QUOTED_IDENTIFIER, 0); }
		public TerminalNode ARITHABORT() { return getToken(TSqlParser.ARITHABORT, 0); }
		public TerminalNode ANSI_WARNINGS() { return getToken(TSqlParser.ANSI_WARNINGS, 0); }
		public TerminalNode ANSI_PADDING() { return getToken(TSqlParser.ANSI_PADDING, 0); }
		public TerminalNode ANSI_NULLS() { return getToken(TSqlParser.ANSI_NULLS, 0); }
		public Full_column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_full_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterFull_column_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitFull_column_name(this);
		}
	}

	public final Full_column_nameContext full_column_name() throws RecognitionException {
		Full_column_nameContext _localctx = new Full_column_nameContext(_ctx, getState());
		enterRule(_localctx, 904, RULE_full_column_name);
		try {
			setState(10391);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1462,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10346);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1454,_ctx) ) {
				case 1:
					{
					setState(10343);
					table_name();
					setState(10344);
					match(DOT);
					}
					break;
				}
				setState(10348);
				((Full_column_nameContext)_localctx).column_name = id();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10352);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1455,_ctx) ) {
				case 1:
					{
					setState(10349);
					table_name();
					setState(10350);
					match(DOT);
					}
					break;
				}
				setState(10354);
				match(COMPATIBILITY_LEVEL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10358);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1456,_ctx) ) {
				case 1:
					{
					setState(10355);
					table_name();
					setState(10356);
					match(DOT);
					}
					break;
				}
				setState(10360);
				match(STATUS);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10364);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1457,_ctx) ) {
				case 1:
					{
					setState(10361);
					table_name();
					setState(10362);
					match(DOT);
					}
					break;
				}
				setState(10366);
				match(QUOTED_IDENTIFIER);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(10370);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1458,_ctx) ) {
				case 1:
					{
					setState(10367);
					table_name();
					setState(10368);
					match(DOT);
					}
					break;
				}
				setState(10372);
				match(ARITHABORT);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(10376);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1459,_ctx) ) {
				case 1:
					{
					setState(10373);
					table_name();
					setState(10374);
					match(DOT);
					}
					break;
				}
				setState(10378);
				match(ANSI_WARNINGS);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(10382);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1460,_ctx) ) {
				case 1:
					{
					setState(10379);
					table_name();
					setState(10380);
					match(DOT);
					}
					break;
				}
				setState(10384);
				match(ANSI_PADDING);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(10388);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1461,_ctx) ) {
				case 1:
					{
					setState(10385);
					table_name();
					setState(10386);
					match(DOT);
					}
					break;
				}
				setState(10390);
				match(ANSI_NULLS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_name_list_with_orderContext extends ParserRuleContext {
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> ASC() { return getTokens(TSqlParser.ASC); }
		public TerminalNode ASC(int i) {
			return getToken(TSqlParser.ASC, i);
		}
		public List<TerminalNode> DESC() { return getTokens(TSqlParser.DESC); }
		public TerminalNode DESC(int i) {
			return getToken(TSqlParser.DESC, i);
		}
		public Column_name_list_with_orderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name_list_with_order; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterColumn_name_list_with_order(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitColumn_name_list_with_order(this);
		}
	}

	public final Column_name_list_with_orderContext column_name_list_with_order() throws RecognitionException {
		Column_name_list_with_orderContext _localctx = new Column_name_list_with_orderContext(_ctx, getState());
		enterRule(_localctx, 906, RULE_column_name_list_with_order);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10393);
			id();
			setState(10395);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(10394);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(10404);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(10397);
				match(COMMA);
				setState(10398);
				id();
				setState(10400);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					setState(10399);
					_la = _input.LA(1);
					if ( !(_la==ASC || _la==DESC) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				}
				setState(10406);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_name_listContext extends ParserRuleContext {
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Column_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterColumn_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitColumn_name_list(this);
		}
	}

	public final Column_name_listContext column_name_list() throws RecognitionException {
		Column_name_listContext _localctx = new Column_name_listContext(_ctx, getState());
		enterRule(_localctx, 908, RULE_column_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10407);
			id();
			setState(10412);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(10408);
				match(COMMA);
				setState(10409);
				id();
				}
				}
				setState(10414);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Cursor_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterCursor_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitCursor_name(this);
		}
	}

	public final Cursor_nameContext cursor_name() throws RecognitionException {
		Cursor_nameContext _localctx = new Cursor_nameContext(_ctx, getState());
		enterRule(_localctx, 910, RULE_cursor_name);
		try {
			setState(10417);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case START:
			case TARGET:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(10415);
				id();
				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(10416);
				match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_offContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public On_offContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_off; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterOn_off(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitOn_off(this);
		}
	}

	public final On_offContext on_off() throws RecognitionException {
		On_offContext _localctx = new On_offContext(_ctx, getState());
		enterRule(_localctx, 912, RULE_on_off);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10419);
			_la = _input.LA(1);
			if ( !(_la==OFF || _la==ON) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ClusteredContext extends ParserRuleContext {
		public TerminalNode CLUSTERED() { return getToken(TSqlParser.CLUSTERED, 0); }
		public TerminalNode NONCLUSTERED() { return getToken(TSqlParser.NONCLUSTERED, 0); }
		public ClusteredContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_clustered; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterClustered(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitClustered(this);
		}
	}

	public final ClusteredContext clustered() throws RecognitionException {
		ClusteredContext _localctx = new ClusteredContext(_ctx, getState());
		enterRule(_localctx, 914, RULE_clustered);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10421);
			_la = _input.LA(1);
			if ( !(_la==CLUSTERED || _la==NONCLUSTERED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_notnullContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(TSqlParser.NULL, 0); }
		public TerminalNode NOT() { return getToken(TSqlParser.NOT, 0); }
		public Null_notnullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_notnull; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterNull_notnull(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitNull_notnull(this);
		}
	}

	public final Null_notnullContext null_notnull() throws RecognitionException {
		Null_notnullContext _localctx = new Null_notnullContext(_ctx, getState());
		enterRule(_localctx, 916, RULE_null_notnull);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10424);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(10423);
				match(NOT);
				}
			}

			setState(10426);
			match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_or_defaultContext extends ParserRuleContext {
		public Null_notnullContext null_notnull() {
			return getRuleContext(Null_notnullContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public Constant_expressionContext constant_expression() {
			return getRuleContext(Constant_expressionContext.class,0);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode VALUES() { return getToken(TSqlParser.VALUES, 0); }
		public Null_or_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_or_default; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterNull_or_default(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitNull_or_default(this);
		}
	}

	public final Null_or_defaultContext null_or_default() throws RecognitionException {
		Null_or_defaultContext _localctx = new Null_or_defaultContext(_ctx, getState());
		enterRule(_localctx, 918, RULE_null_or_default);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10435);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT:
			case NULL:
				{
				setState(10428);
				null_notnull();
				}
				break;
			case DEFAULT:
				{
				setState(10429);
				match(DEFAULT);
				setState(10430);
				constant_expression();
				setState(10433);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1469,_ctx) ) {
				case 1:
					{
					setState(10431);
					match(WITH);
					setState(10432);
					match(VALUES);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Scalar_function_nameContext extends ParserRuleContext {
		public Func_proc_nameContext func_proc_name() {
			return getRuleContext(Func_proc_nameContext.class,0);
		}
		public TerminalNode RIGHT() { return getToken(TSqlParser.RIGHT, 0); }
		public TerminalNode LEFT() { return getToken(TSqlParser.LEFT, 0); }
		public TerminalNode BINARY_CHECKSUM() { return getToken(TSqlParser.BINARY_CHECKSUM, 0); }
		public TerminalNode CHECKSUM() { return getToken(TSqlParser.CHECKSUM, 0); }
		public Scalar_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scalar_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterScalar_function_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitScalar_function_name(this);
		}
	}

	public final Scalar_function_nameContext scalar_function_name() throws RecognitionException {
		Scalar_function_nameContext _localctx = new Scalar_function_nameContext(_ctx, getState());
		enterRule(_localctx, 920, RULE_scalar_function_name);
		try {
			setState(10442);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1471,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10437);
				func_proc_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10438);
				match(RIGHT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10439);
				match(LEFT);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10440);
				match(BINARY_CHECKSUM);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(10441);
				match(CHECKSUM);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Begin_conversation_timerContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(TSqlParser.BEGIN, 0); }
		public TerminalNode CONVERSATION() { return getToken(TSqlParser.CONVERSATION, 0); }
		public TerminalNode TIMER() { return getToken(TSqlParser.TIMER, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public TerminalNode TIMEOUT() { return getToken(TSqlParser.TIMEOUT, 0); }
		public TimeContext time() {
			return getRuleContext(TimeContext.class,0);
		}
		public Begin_conversation_timerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_begin_conversation_timer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterBegin_conversation_timer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitBegin_conversation_timer(this);
		}
	}

	public final Begin_conversation_timerContext begin_conversation_timer() throws RecognitionException {
		Begin_conversation_timerContext _localctx = new Begin_conversation_timerContext(_ctx, getState());
		enterRule(_localctx, 922, RULE_begin_conversation_timer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10444);
			match(BEGIN);
			setState(10445);
			match(CONVERSATION);
			setState(10446);
			match(TIMER);
			setState(10447);
			match(LR_BRACKET);
			setState(10448);
			match(LOCAL_ID);
			setState(10449);
			match(RR_BRACKET);
			setState(10450);
			match(TIMEOUT);
			setState(10451);
			match(EQUAL);
			setState(10452);
			time();
			setState(10454);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1472,_ctx) ) {
			case 1:
				{
				setState(10453);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Begin_conversation_dialogContext extends ParserRuleContext {
		public Token dialog_handle;
		public Service_nameContext initiator_service_name;
		public Service_nameContext target_service_name;
		public Token service_broker_guid;
		public TerminalNode BEGIN() { return getToken(TSqlParser.BEGIN, 0); }
		public TerminalNode DIALOG() { return getToken(TSqlParser.DIALOG, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public List<TerminalNode> SERVICE() { return getTokens(TSqlParser.SERVICE); }
		public TerminalNode SERVICE(int i) {
			return getToken(TSqlParser.SERVICE, i);
		}
		public TerminalNode TO() { return getToken(TSqlParser.TO, 0); }
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public TerminalNode CONTRACT() { return getToken(TSqlParser.CONTRACT, 0); }
		public Contract_nameContext contract_name() {
			return getRuleContext(Contract_nameContext.class,0);
		}
		public List<TerminalNode> LOCAL_ID() { return getTokens(TSqlParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(TSqlParser.LOCAL_ID, i);
		}
		public List<Service_nameContext> service_name() {
			return getRuleContexts(Service_nameContext.class);
		}
		public Service_nameContext service_name(int i) {
			return getRuleContext(Service_nameContext.class,i);
		}
		public TerminalNode CONVERSATION() { return getToken(TSqlParser.CONVERSATION, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode LIFETIME() { return getToken(TSqlParser.LIFETIME, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode RELATED_CONVERSATION() { return getToken(TSqlParser.RELATED_CONVERSATION, 0); }
		public TerminalNode RELATED_CONVERSATION_GROUP() { return getToken(TSqlParser.RELATED_CONVERSATION_GROUP, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public Begin_conversation_dialogContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_begin_conversation_dialog; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterBegin_conversation_dialog(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitBegin_conversation_dialog(this);
		}
	}

	public final Begin_conversation_dialogContext begin_conversation_dialog() throws RecognitionException {
		Begin_conversation_dialogContext _localctx = new Begin_conversation_dialogContext(_ctx, getState());
		enterRule(_localctx, 924, RULE_begin_conversation_dialog);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10456);
			match(BEGIN);
			setState(10457);
			match(DIALOG);
			setState(10459);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONVERSATION) {
				{
				setState(10458);
				match(CONVERSATION);
				}
			}

			setState(10461);
			((Begin_conversation_dialogContext)_localctx).dialog_handle = match(LOCAL_ID);
			setState(10462);
			match(FROM);
			setState(10463);
			match(SERVICE);
			setState(10464);
			((Begin_conversation_dialogContext)_localctx).initiator_service_name = service_name();
			setState(10465);
			match(TO);
			setState(10466);
			match(SERVICE);
			setState(10467);
			((Begin_conversation_dialogContext)_localctx).target_service_name = service_name();
			setState(10470);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(10468);
				match(COMMA);
				setState(10469);
				((Begin_conversation_dialogContext)_localctx).service_broker_guid = match(STRING);
				}
			}

			setState(10472);
			match(ON);
			setState(10473);
			match(CONTRACT);
			setState(10474);
			contract_name();
			setState(10497);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1480,_ctx) ) {
			case 1:
				{
				setState(10475);
				match(WITH);
				setState(10482);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RELATED_CONVERSATION || _la==RELATED_CONVERSATION_GROUP) {
					{
					setState(10476);
					_la = _input.LA(1);
					if ( !(_la==RELATED_CONVERSATION || _la==RELATED_CONVERSATION_GROUP) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(10477);
					match(EQUAL);
					setState(10478);
					match(LOCAL_ID);
					setState(10480);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(10479);
						match(COMMA);
						}
					}

					}
				}

				setState(10490);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIFETIME) {
					{
					setState(10484);
					match(LIFETIME);
					setState(10485);
					match(EQUAL);
					setState(10486);
					_la = _input.LA(1);
					if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(10488);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(10487);
						match(COMMA);
						}
					}

					}
				}

				setState(10495);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1479,_ctx) ) {
				case 1:
					{
					setState(10492);
					match(ENCRYPTION);
					setState(10493);
					match(EQUAL);
					setState(10494);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			}
			setState(10500);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1481,_ctx) ) {
			case 1:
				{
				setState(10499);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Contract_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Contract_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_contract_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterContract_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitContract_name(this);
		}
	}

	public final Contract_nameContext contract_name() throws RecognitionException {
		Contract_nameContext _localctx = new Contract_nameContext(_ctx, getState());
		enterRule(_localctx, 926, RULE_contract_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10504);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1482,_ctx) ) {
			case 1:
				{
				setState(10502);
				id();
				}
				break;
			case 2:
				{
				setState(10503);
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Service_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Service_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_service_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterService_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitService_name(this);
		}
	}

	public final Service_nameContext service_name() throws RecognitionException {
		Service_nameContext _localctx = new Service_nameContext(_ctx, getState());
		enterRule(_localctx, 928, RULE_service_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10508);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1483,_ctx) ) {
			case 1:
				{
				setState(10506);
				id();
				}
				break;
			case 2:
				{
				setState(10507);
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class End_conversationContext extends ParserRuleContext {
		public Token conversation_handle;
		public Token faliure_code;
		public Token failure_text;
		public TerminalNode END() { return getToken(TSqlParser.END, 0); }
		public TerminalNode CONVERSATION() { return getToken(TSqlParser.CONVERSATION, 0); }
		public List<TerminalNode> LOCAL_ID() { return getTokens(TSqlParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(TSqlParser.LOCAL_ID, i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode ERROR() { return getToken(TSqlParser.ERROR, 0); }
		public TerminalNode DESCRIPTION() { return getToken(TSqlParser.DESCRIPTION, 0); }
		public TerminalNode CLEANUP() { return getToken(TSqlParser.CLEANUP, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public End_conversationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_end_conversation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterEnd_conversation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitEnd_conversation(this);
		}
	}

	public final End_conversationContext end_conversation() throws RecognitionException {
		End_conversationContext _localctx = new End_conversationContext(_ctx, getState());
		enterRule(_localctx, 930, RULE_end_conversation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10510);
			match(END);
			setState(10511);
			match(CONVERSATION);
			setState(10512);
			((End_conversationContext)_localctx).conversation_handle = match(LOCAL_ID);
			setState(10514);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1484,_ctx) ) {
			case 1:
				{
				setState(10513);
				match(SEMI);
				}
				break;
			}
			setState(10528);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1487,_ctx) ) {
			case 1:
				{
				setState(10516);
				match(WITH);
				setState(10523);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ERROR) {
					{
					setState(10517);
					match(ERROR);
					setState(10518);
					match(EQUAL);
					setState(10519);
					((End_conversationContext)_localctx).faliure_code = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==LOCAL_ID || _la==STRING) ) {
						((End_conversationContext)_localctx).faliure_code = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(10520);
					match(DESCRIPTION);
					setState(10521);
					match(EQUAL);
					setState(10522);
					((End_conversationContext)_localctx).failure_text = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==LOCAL_ID || _la==STRING) ) {
						((End_conversationContext)_localctx).failure_text = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(10526);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1486,_ctx) ) {
				case 1:
					{
					setState(10525);
					match(CLEANUP);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Waitfor_conversationContext extends ParserRuleContext {
		public TimeContext timeout;
		public Get_conversationContext get_conversation() {
			return getRuleContext(Get_conversationContext.class,0);
		}
		public TerminalNode WAITFOR() { return getToken(TSqlParser.WAITFOR, 0); }
		public TerminalNode TIMEOUT() { return getToken(TSqlParser.TIMEOUT, 0); }
		public TimeContext time() {
			return getRuleContext(TimeContext.class,0);
		}
		public Waitfor_conversationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_waitfor_conversation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterWaitfor_conversation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitWaitfor_conversation(this);
		}
	}

	public final Waitfor_conversationContext waitfor_conversation() throws RecognitionException {
		Waitfor_conversationContext _localctx = new Waitfor_conversationContext(_ctx, getState());
		enterRule(_localctx, 932, RULE_waitfor_conversation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10531);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAITFOR) {
				{
				setState(10530);
				match(WAITFOR);
				}
			}

			setState(10533);
			match(LR_BRACKET);
			setState(10534);
			get_conversation();
			setState(10535);
			match(RR_BRACKET);
			setState(10541);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1490,_ctx) ) {
			case 1:
				{
				setState(10537);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(10536);
					match(COMMA);
					}
				}

				setState(10539);
				match(TIMEOUT);
				setState(10540);
				((Waitfor_conversationContext)_localctx).timeout = time();
				}
				break;
			}
			setState(10544);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1491,_ctx) ) {
			case 1:
				{
				setState(10543);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Get_conversationContext extends ParserRuleContext {
		public Token conversation_group_id;
		public Queue_idContext queue;
		public TerminalNode GET() { return getToken(TSqlParser.GET, 0); }
		public TerminalNode CONVERSATION() { return getToken(TSqlParser.CONVERSATION, 0); }
		public TerminalNode GROUP() { return getToken(TSqlParser.GROUP, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public Queue_idContext queue_id() {
			return getRuleContext(Queue_idContext.class,0);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Get_conversationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_get_conversation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterGet_conversation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitGet_conversation(this);
		}
	}

	public final Get_conversationContext get_conversation() throws RecognitionException {
		Get_conversationContext _localctx = new Get_conversationContext(_ctx, getState());
		enterRule(_localctx, 934, RULE_get_conversation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10546);
			match(GET);
			setState(10547);
			match(CONVERSATION);
			setState(10548);
			match(GROUP);
			setState(10549);
			((Get_conversationContext)_localctx).conversation_group_id = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
				((Get_conversationContext)_localctx).conversation_group_id = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(10550);
			match(FROM);
			setState(10551);
			((Get_conversationContext)_localctx).queue = queue_id();
			setState(10553);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1492,_ctx) ) {
			case 1:
				{
				setState(10552);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Queue_idContext extends ParserRuleContext {
		public IdContext database_name;
		public IdContext schema_name;
		public IdContext name;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Queue_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queue_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterQueue_id(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitQueue_id(this);
		}
	}

	public final Queue_idContext queue_id() throws RecognitionException {
		Queue_idContext _localctx = new Queue_idContext(_ctx, getState());
		enterRule(_localctx, 936, RULE_queue_id);
		try {
			setState(10562);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1493,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(10555);
				((Queue_idContext)_localctx).database_name = id();
				setState(10556);
				match(DOT);
				setState(10557);
				((Queue_idContext)_localctx).schema_name = id();
				setState(10558);
				match(DOT);
				setState(10559);
				((Queue_idContext)_localctx).name = id();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10561);
				id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Send_conversationContext extends ParserRuleContext {
		public Token conversation_handle;
		public ExpressionContext message_type_name;
		public Token message_body_expression;
		public TerminalNode SEND() { return getToken(TSqlParser.SEND, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode CONVERSATION() { return getToken(TSqlParser.CONVERSATION, 0); }
		public TerminalNode MESSAGE() { return getToken(TSqlParser.MESSAGE, 0); }
		public TerminalNode TYPE() { return getToken(TSqlParser.TYPE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public List<TerminalNode> LOCAL_ID() { return getTokens(TSqlParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(TSqlParser.LOCAL_ID, i);
		}
		public Send_conversationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_send_conversation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSend_conversation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSend_conversation(this);
		}
	}

	public final Send_conversationContext send_conversation() throws RecognitionException {
		Send_conversationContext _localctx = new Send_conversationContext(_ctx, getState());
		enterRule(_localctx, 938, RULE_send_conversation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10564);
			match(SEND);
			setState(10565);
			match(ON);
			setState(10566);
			match(CONVERSATION);
			setState(10567);
			((Send_conversationContext)_localctx).conversation_handle = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
				((Send_conversationContext)_localctx).conversation_handle = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(10568);
			match(MESSAGE);
			setState(10569);
			match(TYPE);
			setState(10570);
			((Send_conversationContext)_localctx).message_type_name = expression(0);
			setState(10574);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1494,_ctx) ) {
			case 1:
				{
				setState(10571);
				match(LR_BRACKET);
				setState(10572);
				((Send_conversationContext)_localctx).message_body_expression = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LOCAL_ID || _la==STRING) ) {
					((Send_conversationContext)_localctx).message_body_expression = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(10573);
				match(RR_BRACKET);
				}
				break;
			}
			setState(10577);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1495,_ctx) ) {
			case 1:
				{
				setState(10576);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_typeContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode IDENTITY() { return getToken(TSqlParser.IDENTITY, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public TerminalNode MAX() { return getToken(TSqlParser.MAX, 0); }
		public TerminalNode DOUBLE() { return getToken(TSqlParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(TSqlParser.PRECISION, 0); }
		public TerminalNode INT() { return getToken(TSqlParser.INT, 0); }
		public TerminalNode TINYINT() { return getToken(TSqlParser.TINYINT, 0); }
		public TerminalNode SMALLINT() { return getToken(TSqlParser.SMALLINT, 0); }
		public TerminalNode BIGINT() { return getToken(TSqlParser.BIGINT, 0); }
		public Data_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterData_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitData_type(this);
		}
	}

	public final Data_typeContext data_type() throws RecognitionException {
		Data_typeContext _localctx = new Data_typeContext(_ctx, getState());
		enterRule(_localctx, 940, RULE_data_type);
		int _la;
		try {
			setState(10600);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1500,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10579);
				id();
				setState(10581);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1496,_ctx) ) {
				case 1:
					{
					setState(10580);
					match(IDENTITY);
					}
					break;
				}
				setState(10590);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1498,_ctx) ) {
				case 1:
					{
					setState(10583);
					match(LR_BRACKET);
					setState(10584);
					_la = _input.LA(1);
					if ( !(_la==MAX || _la==DECIMAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(10587);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(10585);
						match(COMMA);
						setState(10586);
						match(DECIMAL);
						}
					}

					setState(10589);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10592);
				match(DOUBLE);
				setState(10594);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRECISION) {
					{
					setState(10593);
					match(PRECISION);
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10596);
				match(INT);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10597);
				match(TINYINT);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(10598);
				match(SMALLINT);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(10599);
				match(BIGINT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Default_valueContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(TSqlParser.NULL, 0); }
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public Default_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_default_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterDefault_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitDefault_value(this);
		}
	}

	public final Default_valueContext default_value() throws RecognitionException {
		Default_valueContext _localctx = new Default_valueContext(_ctx, getState());
		enterRule(_localctx, 942, RULE_default_value);
		try {
			setState(10605);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NULL:
				enterOuterAlt(_localctx, 1);
				{
				setState(10602);
				match(NULL);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(10603);
				match(DEFAULT);
				}
				break;
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				enterOuterAlt(_localctx, 3);
				{
				setState(10604);
				constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantContext extends ParserRuleContext {
		public Token dollar;
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode BINARY() { return getToken(TSqlParser.BINARY, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public SignContext sign() {
			return getRuleContext(SignContext.class,0);
		}
		public TerminalNode REAL() { return getToken(TSqlParser.REAL, 0); }
		public TerminalNode FLOAT() { return getToken(TSqlParser.FLOAT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterConstant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitConstant(this);
		}
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 944, RULE_constant);
		int _la;
		try {
			setState(10622);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1505,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10607);
				match(STRING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10608);
				match(BINARY);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10610);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					setState(10609);
					sign();
					}
				}

				setState(10612);
				match(DECIMAL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10614);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					setState(10613);
					sign();
					}
				}

				setState(10616);
				_la = _input.LA(1);
				if ( !(_la==FLOAT || _la==REAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(10618);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					setState(10617);
					sign();
					}
				}

				setState(10620);
				((ConstantContext)_localctx).dollar = match(DOLLAR);
				setState(10621);
				_la = _input.LA(1);
				if ( !(_la==DECIMAL || _la==FLOAT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignContext extends ParserRuleContext {
		public SignContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sign; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSign(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSign(this);
		}
	}

	public final SignContext sign() throws RecognitionException {
		SignContext _localctx = new SignContext(_ctx, getState());
		enterRule(_localctx, 946, RULE_sign);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10624);
			_la = _input.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdContext extends ParserRuleContext {
		public Simple_idContext simple_id() {
			return getRuleContext(Simple_idContext.class,0);
		}
		public TerminalNode DOUBLE_QUOTE_ID() { return getToken(TSqlParser.DOUBLE_QUOTE_ID, 0); }
		public TerminalNode SQUARE_BRACKET_ID() { return getToken(TSqlParser.SQUARE_BRACKET_ID, 0); }
		public IdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitId(this);
		}
	}

	public final IdContext id() throws RecognitionException {
		IdContext _localctx = new IdContext(_ctx, getState());
		enterRule(_localctx, 948, RULE_id);
		try {
			setState(10629);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case DATA_COMPRESSION:
			case EVENTDATA:
			case FILENAME:
			case FILLFACTOR:
			case FORCESEEK:
			case INIT:
			case KEY:
			case MASTER:
			case MAX_MEMORY:
			case OFFSETS:
			case PAGE:
			case PUBLIC:
			case R:
			case RAW:
			case RETURN:
			case RETURNS:
			case ROWCOUNT:
			case SAFETY:
			case SERVER:
			case SID:
			case SOURCE:
			case STATE:
			case START:
			case TARGET:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STUFF:
			case SUBJECT:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLNAMESPACES:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(10626);
				simple_id();
				}
				break;
			case DOUBLE_QUOTE_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(10627);
				match(DOUBLE_QUOTE_ID);
				}
				break;
			case SQUARE_BRACKET_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(10628);
				match(SQUARE_BRACKET_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_idContext extends ParserRuleContext {
		public TerminalNode ID() { return getToken(TSqlParser.ID, 0); }
		public TerminalNode ABSOLUTE() { return getToken(TSqlParser.ABSOLUTE, 0); }
		public TerminalNode ACCENT_SENSITIVITY() { return getToken(TSqlParser.ACCENT_SENSITIVITY, 0); }
		public TerminalNode ACTION() { return getToken(TSqlParser.ACTION, 0); }
		public TerminalNode ACTIVATION() { return getToken(TSqlParser.ACTIVATION, 0); }
		public TerminalNode ACTIVE() { return getToken(TSqlParser.ACTIVE, 0); }
		public TerminalNode ADDRESS() { return getToken(TSqlParser.ADDRESS, 0); }
		public TerminalNode AES_128() { return getToken(TSqlParser.AES_128, 0); }
		public TerminalNode AES_192() { return getToken(TSqlParser.AES_192, 0); }
		public TerminalNode AES_256() { return getToken(TSqlParser.AES_256, 0); }
		public TerminalNode AFFINITY() { return getToken(TSqlParser.AFFINITY, 0); }
		public TerminalNode AFTER() { return getToken(TSqlParser.AFTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(TSqlParser.AGGREGATE, 0); }
		public TerminalNode ALGORITHM() { return getToken(TSqlParser.ALGORITHM, 0); }
		public TerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return getToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, 0); }
		public TerminalNode ALLOW_SNAPSHOT_ISOLATION() { return getToken(TSqlParser.ALLOW_SNAPSHOT_ISOLATION, 0); }
		public TerminalNode ALLOWED() { return getToken(TSqlParser.ALLOWED, 0); }
		public TerminalNode ANSI_NULL_DEFAULT() { return getToken(TSqlParser.ANSI_NULL_DEFAULT, 0); }
		public TerminalNode ANSI_NULLS() { return getToken(TSqlParser.ANSI_NULLS, 0); }
		public TerminalNode ANSI_PADDING() { return getToken(TSqlParser.ANSI_PADDING, 0); }
		public TerminalNode ANSI_WARNINGS() { return getToken(TSqlParser.ANSI_WARNINGS, 0); }
		public TerminalNode APPLICATION_LOG() { return getToken(TSqlParser.APPLICATION_LOG, 0); }
		public TerminalNode APPLY() { return getToken(TSqlParser.APPLY, 0); }
		public TerminalNode ARITHABORT() { return getToken(TSqlParser.ARITHABORT, 0); }
		public TerminalNode ASSEMBLY() { return getToken(TSqlParser.ASSEMBLY, 0); }
		public TerminalNode AUDIT() { return getToken(TSqlParser.AUDIT, 0); }
		public TerminalNode AUDIT_GUID() { return getToken(TSqlParser.AUDIT_GUID, 0); }
		public TerminalNode AUTO() { return getToken(TSqlParser.AUTO, 0); }
		public TerminalNode AUTO_CLEANUP() { return getToken(TSqlParser.AUTO_CLEANUP, 0); }
		public TerminalNode AUTO_CLOSE() { return getToken(TSqlParser.AUTO_CLOSE, 0); }
		public TerminalNode AUTO_CREATE_STATISTICS() { return getToken(TSqlParser.AUTO_CREATE_STATISTICS, 0); }
		public TerminalNode AUTO_SHRINK() { return getToken(TSqlParser.AUTO_SHRINK, 0); }
		public TerminalNode AUTO_UPDATE_STATISTICS() { return getToken(TSqlParser.AUTO_UPDATE_STATISTICS, 0); }
		public TerminalNode AUTO_UPDATE_STATISTICS_ASYNC() { return getToken(TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, 0); }
		public TerminalNode AVAILABILITY() { return getToken(TSqlParser.AVAILABILITY, 0); }
		public TerminalNode AVG() { return getToken(TSqlParser.AVG, 0); }
		public TerminalNode BACKUP_PRIORITY() { return getToken(TSqlParser.BACKUP_PRIORITY, 0); }
		public TerminalNode BEGIN_DIALOG() { return getToken(TSqlParser.BEGIN_DIALOG, 0); }
		public TerminalNode BIGINT() { return getToken(TSqlParser.BIGINT, 0); }
		public TerminalNode BINARY_BASE64() { return getToken(TSqlParser.BINARY_BASE64, 0); }
		public TerminalNode BINARY_CHECKSUM() { return getToken(TSqlParser.BINARY_CHECKSUM, 0); }
		public TerminalNode BINDING() { return getToken(TSqlParser.BINDING, 0); }
		public TerminalNode BLOB_STORAGE() { return getToken(TSqlParser.BLOB_STORAGE, 0); }
		public TerminalNode BROKER() { return getToken(TSqlParser.BROKER, 0); }
		public TerminalNode BROKER_INSTANCE() { return getToken(TSqlParser.BROKER_INSTANCE, 0); }
		public TerminalNode BULK_LOGGED() { return getToken(TSqlParser.BULK_LOGGED, 0); }
		public TerminalNode CALLED() { return getToken(TSqlParser.CALLED, 0); }
		public TerminalNode CALLER() { return getToken(TSqlParser.CALLER, 0); }
		public TerminalNode CAP_CPU_PERCENT() { return getToken(TSqlParser.CAP_CPU_PERCENT, 0); }
		public TerminalNode CAST() { return getToken(TSqlParser.CAST, 0); }
		public TerminalNode CATALOG() { return getToken(TSqlParser.CATALOG, 0); }
		public TerminalNode CATCH() { return getToken(TSqlParser.CATCH, 0); }
		public TerminalNode CHANGE_RETENTION() { return getToken(TSqlParser.CHANGE_RETENTION, 0); }
		public TerminalNode CHANGE_TRACKING() { return getToken(TSqlParser.CHANGE_TRACKING, 0); }
		public TerminalNode CHECKSUM() { return getToken(TSqlParser.CHECKSUM, 0); }
		public TerminalNode CHECKSUM_AGG() { return getToken(TSqlParser.CHECKSUM_AGG, 0); }
		public TerminalNode CLEANUP() { return getToken(TSqlParser.CLEANUP, 0); }
		public TerminalNode COLLECTION() { return getToken(TSqlParser.COLLECTION, 0); }
		public TerminalNode COLUMN_MASTER_KEY() { return getToken(TSqlParser.COLUMN_MASTER_KEY, 0); }
		public TerminalNode COMMITTED() { return getToken(TSqlParser.COMMITTED, 0); }
		public TerminalNode COMPATIBILITY_LEVEL() { return getToken(TSqlParser.COMPATIBILITY_LEVEL, 0); }
		public TerminalNode CONCAT() { return getToken(TSqlParser.CONCAT, 0); }
		public TerminalNode CONCAT_NULL_YIELDS_NULL() { return getToken(TSqlParser.CONCAT_NULL_YIELDS_NULL, 0); }
		public TerminalNode CONTENT() { return getToken(TSqlParser.CONTENT, 0); }
		public TerminalNode CONTROL() { return getToken(TSqlParser.CONTROL, 0); }
		public TerminalNode COOKIE() { return getToken(TSqlParser.COOKIE, 0); }
		public TerminalNode COUNT() { return getToken(TSqlParser.COUNT, 0); }
		public TerminalNode COUNT_BIG() { return getToken(TSqlParser.COUNT_BIG, 0); }
		public TerminalNode COUNTER() { return getToken(TSqlParser.COUNTER, 0); }
		public TerminalNode CPU() { return getToken(TSqlParser.CPU, 0); }
		public TerminalNode CREATE_NEW() { return getToken(TSqlParser.CREATE_NEW, 0); }
		public TerminalNode CREATION_DISPOSITION() { return getToken(TSqlParser.CREATION_DISPOSITION, 0); }
		public TerminalNode CREDENTIAL() { return getToken(TSqlParser.CREDENTIAL, 0); }
		public TerminalNode CRYPTOGRAPHIC() { return getToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		public TerminalNode CURSOR_CLOSE_ON_COMMIT() { return getToken(TSqlParser.CURSOR_CLOSE_ON_COMMIT, 0); }
		public TerminalNode CURSOR_DEFAULT() { return getToken(TSqlParser.CURSOR_DEFAULT, 0); }
		public TerminalNode DATA_COMPRESSION() { return getToken(TSqlParser.DATA_COMPRESSION, 0); }
		public TerminalNode DATE_CORRELATION_OPTIMIZATION() { return getToken(TSqlParser.DATE_CORRELATION_OPTIMIZATION, 0); }
		public TerminalNode DATEADD() { return getToken(TSqlParser.DATEADD, 0); }
		public TerminalNode DATEDIFF() { return getToken(TSqlParser.DATEDIFF, 0); }
		public TerminalNode DATENAME() { return getToken(TSqlParser.DATENAME, 0); }
		public TerminalNode DATEPART() { return getToken(TSqlParser.DATEPART, 0); }
		public TerminalNode DAYS() { return getToken(TSqlParser.DAYS, 0); }
		public TerminalNode DB_CHAINING() { return getToken(TSqlParser.DB_CHAINING, 0); }
		public TerminalNode DB_FAILOVER() { return getToken(TSqlParser.DB_FAILOVER, 0); }
		public TerminalNode DECRYPTION() { return getToken(TSqlParser.DECRYPTION, 0); }
		public TerminalNode DEFAULT_DOUBLE_QUOTE() { return getToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, 0); }
		public TerminalNode DEFAULT_FULLTEXT_LANGUAGE() { return getToken(TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0); }
		public TerminalNode DEFAULT_LANGUAGE() { return getToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		public TerminalNode DELAY() { return getToken(TSqlParser.DELAY, 0); }
		public TerminalNode DELAYED_DURABILITY() { return getToken(TSqlParser.DELAYED_DURABILITY, 0); }
		public TerminalNode DELETED() { return getToken(TSqlParser.DELETED, 0); }
		public TerminalNode DENSE_RANK() { return getToken(TSqlParser.DENSE_RANK, 0); }
		public TerminalNode DEPENDENTS() { return getToken(TSqlParser.DEPENDENTS, 0); }
		public TerminalNode DES() { return getToken(TSqlParser.DES, 0); }
		public TerminalNode DESCRIPTION() { return getToken(TSqlParser.DESCRIPTION, 0); }
		public TerminalNode DESX() { return getToken(TSqlParser.DESX, 0); }
		public TerminalNode DHCP() { return getToken(TSqlParser.DHCP, 0); }
		public TerminalNode DIALOG() { return getToken(TSqlParser.DIALOG, 0); }
		public TerminalNode DIRECTORY_NAME() { return getToken(TSqlParser.DIRECTORY_NAME, 0); }
		public TerminalNode DISABLE() { return getToken(TSqlParser.DISABLE, 0); }
		public TerminalNode DISABLE_BROKER() { return getToken(TSqlParser.DISABLE_BROKER, 0); }
		public TerminalNode DISABLED() { return getToken(TSqlParser.DISABLED, 0); }
		public TerminalNode DISK_DRIVE() { return getToken(TSqlParser.DISK_DRIVE, 0); }
		public TerminalNode DOCUMENT() { return getToken(TSqlParser.DOCUMENT, 0); }
		public TerminalNode DYNAMIC() { return getToken(TSqlParser.DYNAMIC, 0); }
		public TerminalNode EMERGENCY() { return getToken(TSqlParser.EMERGENCY, 0); }
		public TerminalNode EMPTY() { return getToken(TSqlParser.EMPTY, 0); }
		public TerminalNode ENABLE() { return getToken(TSqlParser.ENABLE, 0); }
		public TerminalNode ENABLE_BROKER() { return getToken(TSqlParser.ENABLE_BROKER, 0); }
		public TerminalNode ENCRYPTED_VALUE() { return getToken(TSqlParser.ENCRYPTED_VALUE, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode ENDPOINT_URL() { return getToken(TSqlParser.ENDPOINT_URL, 0); }
		public TerminalNode ERROR_BROKER_CONVERSATIONS() { return getToken(TSqlParser.ERROR_BROKER_CONVERSATIONS, 0); }
		public TerminalNode EVENTDATA() { return getToken(TSqlParser.EVENTDATA, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(TSqlParser.EXCLUSIVE, 0); }
		public TerminalNode EXECUTABLE() { return getToken(TSqlParser.EXECUTABLE, 0); }
		public TerminalNode EXIST() { return getToken(TSqlParser.EXIST, 0); }
		public TerminalNode EXPAND() { return getToken(TSqlParser.EXPAND, 0); }
		public TerminalNode EXPIRY_DATE() { return getToken(TSqlParser.EXPIRY_DATE, 0); }
		public TerminalNode EXPLICIT() { return getToken(TSqlParser.EXPLICIT, 0); }
		public TerminalNode FAIL_OPERATION() { return getToken(TSqlParser.FAIL_OPERATION, 0); }
		public TerminalNode FAILOVER_MODE() { return getToken(TSqlParser.FAILOVER_MODE, 0); }
		public TerminalNode FAILURE() { return getToken(TSqlParser.FAILURE, 0); }
		public TerminalNode FAILURE_CONDITION_LEVEL() { return getToken(TSqlParser.FAILURE_CONDITION_LEVEL, 0); }
		public TerminalNode FAST() { return getToken(TSqlParser.FAST, 0); }
		public TerminalNode FAST_FORWARD() { return getToken(TSqlParser.FAST_FORWARD, 0); }
		public TerminalNode FILEGROUP() { return getToken(TSqlParser.FILEGROUP, 0); }
		public TerminalNode FILEGROWTH() { return getToken(TSqlParser.FILEGROWTH, 0); }
		public TerminalNode FILENAME() { return getToken(TSqlParser.FILENAME, 0); }
		public TerminalNode FILEPATH() { return getToken(TSqlParser.FILEPATH, 0); }
		public TerminalNode FILESTREAM() { return getToken(TSqlParser.FILESTREAM, 0); }
		public TerminalNode FILLFACTOR() { return getToken(TSqlParser.FILLFACTOR, 0); }
		public TerminalNode FILTER() { return getToken(TSqlParser.FILTER, 0); }
		public TerminalNode FIRST() { return getToken(TSqlParser.FIRST, 0); }
		public TerminalNode FIRST_VALUE() { return getToken(TSqlParser.FIRST_VALUE, 0); }
		public TerminalNode FOLLOWING() { return getToken(TSqlParser.FOLLOWING, 0); }
		public TerminalNode FORCE() { return getToken(TSqlParser.FORCE, 0); }
		public TerminalNode FORCE_FAILOVER_ALLOW_DATA_LOSS() { return getToken(TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, 0); }
		public TerminalNode FORCED() { return getToken(TSqlParser.FORCED, 0); }
		public TerminalNode FORCESEEK() { return getToken(TSqlParser.FORCESEEK, 0); }
		public TerminalNode FORMAT() { return getToken(TSqlParser.FORMAT, 0); }
		public TerminalNode FORWARD_ONLY() { return getToken(TSqlParser.FORWARD_ONLY, 0); }
		public TerminalNode FULLSCAN() { return getToken(TSqlParser.FULLSCAN, 0); }
		public TerminalNode FULLTEXT() { return getToken(TSqlParser.FULLTEXT, 0); }
		public TerminalNode GB() { return getToken(TSqlParser.GB, 0); }
		public TerminalNode GETDATE() { return getToken(TSqlParser.GETDATE, 0); }
		public TerminalNode GETUTCDATE() { return getToken(TSqlParser.GETUTCDATE, 0); }
		public TerminalNode GLOBAL() { return getToken(TSqlParser.GLOBAL, 0); }
		public TerminalNode GO() { return getToken(TSqlParser.GO, 0); }
		public TerminalNode GROUP_MAX_REQUESTS() { return getToken(TSqlParser.GROUP_MAX_REQUESTS, 0); }
		public TerminalNode GROUPING() { return getToken(TSqlParser.GROUPING, 0); }
		public TerminalNode GROUPING_ID() { return getToken(TSqlParser.GROUPING_ID, 0); }
		public TerminalNode HADR() { return getToken(TSqlParser.HADR, 0); }
		public TerminalNode HASH() { return getToken(TSqlParser.HASH, 0); }
		public TerminalNode HEALTH_CHECK_TIMEOUT() { return getToken(TSqlParser.HEALTH_CHECK_TIMEOUT, 0); }
		public TerminalNode HIGH() { return getToken(TSqlParser.HIGH, 0); }
		public TerminalNode HONOR_BROKER_PRIORITY() { return getToken(TSqlParser.HONOR_BROKER_PRIORITY, 0); }
		public TerminalNode HOURS() { return getToken(TSqlParser.HOURS, 0); }
		public TerminalNode IDENTITY_VALUE() { return getToken(TSqlParser.IDENTITY_VALUE, 0); }
		public TerminalNode IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX() { return getToken(TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0); }
		public TerminalNode IMMEDIATE() { return getToken(TSqlParser.IMMEDIATE, 0); }
		public TerminalNode IMPERSONATE() { return getToken(TSqlParser.IMPERSONATE, 0); }
		public TerminalNode IMPORTANCE() { return getToken(TSqlParser.IMPORTANCE, 0); }
		public TerminalNode INCREMENTAL() { return getToken(TSqlParser.INCREMENTAL, 0); }
		public TerminalNode INIT() { return getToken(TSqlParser.INIT, 0); }
		public TerminalNode INITIATOR() { return getToken(TSqlParser.INITIATOR, 0); }
		public TerminalNode INPUT() { return getToken(TSqlParser.INPUT, 0); }
		public TerminalNode INSENSITIVE() { return getToken(TSqlParser.INSENSITIVE, 0); }
		public TerminalNode INSERTED() { return getToken(TSqlParser.INSERTED, 0); }
		public TerminalNode INT() { return getToken(TSqlParser.INT, 0); }
		public TerminalNode IP() { return getToken(TSqlParser.IP, 0); }
		public TerminalNode ISOLATION() { return getToken(TSqlParser.ISOLATION, 0); }
		public TerminalNode KB() { return getToken(TSqlParser.KB, 0); }
		public TerminalNode KEEP() { return getToken(TSqlParser.KEEP, 0); }
		public TerminalNode KEEPFIXED() { return getToken(TSqlParser.KEEPFIXED, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode KEY_SOURCE() { return getToken(TSqlParser.KEY_SOURCE, 0); }
		public TerminalNode KEYS() { return getToken(TSqlParser.KEYS, 0); }
		public TerminalNode KEYSET() { return getToken(TSqlParser.KEYSET, 0); }
		public TerminalNode LAG() { return getToken(TSqlParser.LAG, 0); }
		public TerminalNode LAST() { return getToken(TSqlParser.LAST, 0); }
		public TerminalNode LAST_VALUE() { return getToken(TSqlParser.LAST_VALUE, 0); }
		public TerminalNode LEAD() { return getToken(TSqlParser.LEAD, 0); }
		public TerminalNode LEVEL() { return getToken(TSqlParser.LEVEL, 0); }
		public TerminalNode LIST() { return getToken(TSqlParser.LIST, 0); }
		public TerminalNode LISTENER() { return getToken(TSqlParser.LISTENER, 0); }
		public TerminalNode LISTENER_URL() { return getToken(TSqlParser.LISTENER_URL, 0); }
		public TerminalNode LOB_COMPACTION() { return getToken(TSqlParser.LOB_COMPACTION, 0); }
		public TerminalNode LOCAL() { return getToken(TSqlParser.LOCAL, 0); }
		public TerminalNode LOCATION() { return getToken(TSqlParser.LOCATION, 0); }
		public TerminalNode LOCK() { return getToken(TSqlParser.LOCK, 0); }
		public TerminalNode LOCK_ESCALATION() { return getToken(TSqlParser.LOCK_ESCALATION, 0); }
		public TerminalNode LOGIN() { return getToken(TSqlParser.LOGIN, 0); }
		public TerminalNode LOOP() { return getToken(TSqlParser.LOOP, 0); }
		public TerminalNode LOW() { return getToken(TSqlParser.LOW, 0); }
		public TerminalNode MANUAL() { return getToken(TSqlParser.MANUAL, 0); }
		public TerminalNode MARK() { return getToken(TSqlParser.MARK, 0); }
		public TerminalNode MASTER() { return getToken(TSqlParser.MASTER, 0); }
		public TerminalNode MATERIALIZED() { return getToken(TSqlParser.MATERIALIZED, 0); }
		public TerminalNode MAX() { return getToken(TSqlParser.MAX, 0); }
		public TerminalNode MAX_CPU_PERCENT() { return getToken(TSqlParser.MAX_CPU_PERCENT, 0); }
		public TerminalNode MAX_DOP() { return getToken(TSqlParser.MAX_DOP, 0); }
		public TerminalNode MAX_FILES() { return getToken(TSqlParser.MAX_FILES, 0); }
		public TerminalNode MAX_IOPS_PER_VOLUME() { return getToken(TSqlParser.MAX_IOPS_PER_VOLUME, 0); }
		public TerminalNode MAX_MEMORY() { return getToken(TSqlParser.MAX_MEMORY, 0); }
		public TerminalNode MAX_MEMORY_PERCENT() { return getToken(TSqlParser.MAX_MEMORY_PERCENT, 0); }
		public TerminalNode MAX_PROCESSES() { return getToken(TSqlParser.MAX_PROCESSES, 0); }
		public TerminalNode MAX_QUEUE_READERS() { return getToken(TSqlParser.MAX_QUEUE_READERS, 0); }
		public TerminalNode MAX_ROLLOVER_FILES() { return getToken(TSqlParser.MAX_ROLLOVER_FILES, 0); }
		public TerminalNode MAXDOP() { return getToken(TSqlParser.MAXDOP, 0); }
		public TerminalNode MAXRECURSION() { return getToken(TSqlParser.MAXRECURSION, 0); }
		public TerminalNode MAXSIZE() { return getToken(TSqlParser.MAXSIZE, 0); }
		public TerminalNode MB() { return getToken(TSqlParser.MB, 0); }
		public TerminalNode MEDIUM() { return getToken(TSqlParser.MEDIUM, 0); }
		public TerminalNode MEMORY_OPTIMIZED_DATA() { return getToken(TSqlParser.MEMORY_OPTIMIZED_DATA, 0); }
		public TerminalNode MESSAGE() { return getToken(TSqlParser.MESSAGE, 0); }
		public TerminalNode MIN() { return getToken(TSqlParser.MIN, 0); }
		public TerminalNode MIN_ACTIVE_ROWVERSION() { return getToken(TSqlParser.MIN_ACTIVE_ROWVERSION, 0); }
		public TerminalNode MIN_CPU_PERCENT() { return getToken(TSqlParser.MIN_CPU_PERCENT, 0); }
		public TerminalNode MIN_IOPS_PER_VOLUME() { return getToken(TSqlParser.MIN_IOPS_PER_VOLUME, 0); }
		public TerminalNode MIN_MEMORY_PERCENT() { return getToken(TSqlParser.MIN_MEMORY_PERCENT, 0); }
		public TerminalNode MINUTES() { return getToken(TSqlParser.MINUTES, 0); }
		public TerminalNode MIRROR_ADDRESS() { return getToken(TSqlParser.MIRROR_ADDRESS, 0); }
		public TerminalNode MIXED_PAGE_ALLOCATION() { return getToken(TSqlParser.MIXED_PAGE_ALLOCATION, 0); }
		public TerminalNode MODE() { return getToken(TSqlParser.MODE, 0); }
		public TerminalNode MODIFY() { return getToken(TSqlParser.MODIFY, 0); }
		public TerminalNode MOVE() { return getToken(TSqlParser.MOVE, 0); }
		public TerminalNode MULTI_USER() { return getToken(TSqlParser.MULTI_USER, 0); }
		public TerminalNode NAME() { return getToken(TSqlParser.NAME, 0); }
		public TerminalNode NESTED_TRIGGERS() { return getToken(TSqlParser.NESTED_TRIGGERS, 0); }
		public TerminalNode NEW_ACCOUNT() { return getToken(TSqlParser.NEW_ACCOUNT, 0); }
		public TerminalNode NEW_BROKER() { return getToken(TSqlParser.NEW_BROKER, 0); }
		public TerminalNode NEW_PASSWORD() { return getToken(TSqlParser.NEW_PASSWORD, 0); }
		public TerminalNode NEXT() { return getToken(TSqlParser.NEXT, 0); }
		public TerminalNode NO() { return getToken(TSqlParser.NO, 0); }
		public TerminalNode NO_TRUNCATE() { return getToken(TSqlParser.NO_TRUNCATE, 0); }
		public TerminalNode NO_WAIT() { return getToken(TSqlParser.NO_WAIT, 0); }
		public TerminalNode NOCOUNT() { return getToken(TSqlParser.NOCOUNT, 0); }
		public TerminalNode NODES() { return getToken(TSqlParser.NODES, 0); }
		public TerminalNode NOEXPAND() { return getToken(TSqlParser.NOEXPAND, 0); }
		public TerminalNode NON_TRANSACTED_ACCESS() { return getToken(TSqlParser.NON_TRANSACTED_ACCESS, 0); }
		public TerminalNode NORECOMPUTE() { return getToken(TSqlParser.NORECOMPUTE, 0); }
		public TerminalNode NORECOVERY() { return getToken(TSqlParser.NORECOVERY, 0); }
		public TerminalNode NOWAIT() { return getToken(TSqlParser.NOWAIT, 0); }
		public TerminalNode NTILE() { return getToken(TSqlParser.NTILE, 0); }
		public TerminalNode NUMANODE() { return getToken(TSqlParser.NUMANODE, 0); }
		public TerminalNode NUMBER() { return getToken(TSqlParser.NUMBER, 0); }
		public TerminalNode NUMERIC_ROUNDABORT() { return getToken(TSqlParser.NUMERIC_ROUNDABORT, 0); }
		public TerminalNode OBJECT() { return getToken(TSqlParser.OBJECT, 0); }
		public TerminalNode OFFLINE() { return getToken(TSqlParser.OFFLINE, 0); }
		public TerminalNode OFFSET() { return getToken(TSqlParser.OFFSET, 0); }
		public TerminalNode OFFSETS() { return getToken(TSqlParser.OFFSETS, 0); }
		public TerminalNode OLD_ACCOUNT() { return getToken(TSqlParser.OLD_ACCOUNT, 0); }
		public TerminalNode ONLINE() { return getToken(TSqlParser.ONLINE, 0); }
		public TerminalNode ONLY() { return getToken(TSqlParser.ONLY, 0); }
		public TerminalNode OPEN_EXISTING() { return getToken(TSqlParser.OPEN_EXISTING, 0); }
		public TerminalNode OPTIMISTIC() { return getToken(TSqlParser.OPTIMISTIC, 0); }
		public TerminalNode OPTIMIZE() { return getToken(TSqlParser.OPTIMIZE, 0); }
		public TerminalNode OUT() { return getToken(TSqlParser.OUT, 0); }
		public TerminalNode OUTPUT() { return getToken(TSqlParser.OUTPUT, 0); }
		public TerminalNode OWNER() { return getToken(TSqlParser.OWNER, 0); }
		public TerminalNode PAGE() { return getToken(TSqlParser.PAGE, 0); }
		public TerminalNode PAGE_VERIFY() { return getToken(TSqlParser.PAGE_VERIFY, 0); }
		public TerminalNode PARAMETERIZATION() { return getToken(TSqlParser.PARAMETERIZATION, 0); }
		public TerminalNode PARTITION() { return getToken(TSqlParser.PARTITION, 0); }
		public TerminalNode PARTITIONS() { return getToken(TSqlParser.PARTITIONS, 0); }
		public TerminalNode PARTNER() { return getToken(TSqlParser.PARTNER, 0); }
		public TerminalNode PATH() { return getToken(TSqlParser.PATH, 0); }
		public TerminalNode POISON_MESSAGE_HANDLING() { return getToken(TSqlParser.POISON_MESSAGE_HANDLING, 0); }
		public TerminalNode POOL() { return getToken(TSqlParser.POOL, 0); }
		public TerminalNode PORT() { return getToken(TSqlParser.PORT, 0); }
		public TerminalNode PRECEDING() { return getToken(TSqlParser.PRECEDING, 0); }
		public TerminalNode PRIMARY_ROLE() { return getToken(TSqlParser.PRIMARY_ROLE, 0); }
		public TerminalNode PRIOR() { return getToken(TSqlParser.PRIOR, 0); }
		public TerminalNode PRIORITY() { return getToken(TSqlParser.PRIORITY, 0); }
		public TerminalNode PRIORITY_LEVEL() { return getToken(TSqlParser.PRIORITY_LEVEL, 0); }
		public TerminalNode PRIVATE() { return getToken(TSqlParser.PRIVATE, 0); }
		public TerminalNode PRIVATE_KEY() { return getToken(TSqlParser.PRIVATE_KEY, 0); }
		public TerminalNode PRIVILEGES() { return getToken(TSqlParser.PRIVILEGES, 0); }
		public TerminalNode PROCEDURE_NAME() { return getToken(TSqlParser.PROCEDURE_NAME, 0); }
		public TerminalNode PROPERTY() { return getToken(TSqlParser.PROPERTY, 0); }
		public TerminalNode PROVIDER() { return getToken(TSqlParser.PROVIDER, 0); }
		public TerminalNode PROVIDER_KEY_NAME() { return getToken(TSqlParser.PROVIDER_KEY_NAME, 0); }
		public TerminalNode PUBLIC() { return getToken(TSqlParser.PUBLIC, 0); }
		public TerminalNode QUERY() { return getToken(TSqlParser.QUERY, 0); }
		public TerminalNode QUEUE() { return getToken(TSqlParser.QUEUE, 0); }
		public TerminalNode QUEUE_DELAY() { return getToken(TSqlParser.QUEUE_DELAY, 0); }
		public TerminalNode QUOTED_IDENTIFIER() { return getToken(TSqlParser.QUOTED_IDENTIFIER, 0); }
		public TerminalNode R() { return getToken(TSqlParser.R, 0); }
		public TerminalNode RANGE() { return getToken(TSqlParser.RANGE, 0); }
		public TerminalNode RANK() { return getToken(TSqlParser.RANK, 0); }
		public TerminalNode RAW() { return getToken(TSqlParser.RAW, 0); }
		public TerminalNode RC2() { return getToken(TSqlParser.RC2, 0); }
		public TerminalNode RC4() { return getToken(TSqlParser.RC4, 0); }
		public TerminalNode RC4_128() { return getToken(TSqlParser.RC4_128, 0); }
		public TerminalNode READ_COMMITTED_SNAPSHOT() { return getToken(TSqlParser.READ_COMMITTED_SNAPSHOT, 0); }
		public TerminalNode READ_ONLY() { return getToken(TSqlParser.READ_ONLY, 0); }
		public TerminalNode READ_ONLY_ROUTING_LIST() { return getToken(TSqlParser.READ_ONLY_ROUTING_LIST, 0); }
		public TerminalNode READ_WRITE() { return getToken(TSqlParser.READ_WRITE, 0); }
		public TerminalNode READONLY() { return getToken(TSqlParser.READONLY, 0); }
		public TerminalNode REBUILD() { return getToken(TSqlParser.REBUILD, 0); }
		public TerminalNode RECEIVE() { return getToken(TSqlParser.RECEIVE, 0); }
		public TerminalNode RECOMPILE() { return getToken(TSqlParser.RECOMPILE, 0); }
		public TerminalNode RECOVERY() { return getToken(TSqlParser.RECOVERY, 0); }
		public TerminalNode RECURSIVE_TRIGGERS() { return getToken(TSqlParser.RECURSIVE_TRIGGERS, 0); }
		public TerminalNode RELATIVE() { return getToken(TSqlParser.RELATIVE, 0); }
		public TerminalNode REMOTE() { return getToken(TSqlParser.REMOTE, 0); }
		public TerminalNode REMOTE_SERVICE_NAME() { return getToken(TSqlParser.REMOTE_SERVICE_NAME, 0); }
		public TerminalNode REMOVE() { return getToken(TSqlParser.REMOVE, 0); }
		public TerminalNode REORGANIZE() { return getToken(TSqlParser.REORGANIZE, 0); }
		public TerminalNode REPEATABLE() { return getToken(TSqlParser.REPEATABLE, 0); }
		public TerminalNode REPLICA() { return getToken(TSqlParser.REPLICA, 0); }
		public TerminalNode REQUEST_MAX_CPU_TIME_SEC() { return getToken(TSqlParser.REQUEST_MAX_CPU_TIME_SEC, 0); }
		public TerminalNode REQUEST_MAX_MEMORY_GRANT_PERCENT() { return getToken(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, 0); }
		public TerminalNode REQUEST_MEMORY_GRANT_TIMEOUT_SEC() { return getToken(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, 0); }
		public TerminalNode REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT() { return getToken(TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, 0); }
		public TerminalNode RESERVE_DISK_SPACE() { return getToken(TSqlParser.RESERVE_DISK_SPACE, 0); }
		public TerminalNode RESOURCE() { return getToken(TSqlParser.RESOURCE, 0); }
		public TerminalNode RESOURCE_MANAGER_LOCATION() { return getToken(TSqlParser.RESOURCE_MANAGER_LOCATION, 0); }
		public TerminalNode RESTRICTED_USER() { return getToken(TSqlParser.RESTRICTED_USER, 0); }
		public TerminalNode RETENTION() { return getToken(TSqlParser.RETENTION, 0); }
		public TerminalNode RETURN() { return getToken(TSqlParser.RETURN, 0); }
		public TerminalNode RETURNS() { return getToken(TSqlParser.RETURNS, 0); }
		public TerminalNode ROBUST() { return getToken(TSqlParser.ROBUST, 0); }
		public TerminalNode ROOT() { return getToken(TSqlParser.ROOT, 0); }
		public TerminalNode ROUTE() { return getToken(TSqlParser.ROUTE, 0); }
		public TerminalNode ROW() { return getToken(TSqlParser.ROW, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(TSqlParser.ROW_NUMBER, 0); }
		public TerminalNode ROWCOUNT() { return getToken(TSqlParser.ROWCOUNT, 0); }
		public TerminalNode ROWGUID() { return getToken(TSqlParser.ROWGUID, 0); }
		public TerminalNode ROWS() { return getToken(TSqlParser.ROWS, 0); }
		public TerminalNode SAFETY() { return getToken(TSqlParser.SAFETY, 0); }
		public TerminalNode SAMPLE() { return getToken(TSqlParser.SAMPLE, 0); }
		public TerminalNode SCHEMABINDING() { return getToken(TSqlParser.SCHEMABINDING, 0); }
		public TerminalNode SCOPED() { return getToken(TSqlParser.SCOPED, 0); }
		public TerminalNode SCROLL() { return getToken(TSqlParser.SCROLL, 0); }
		public TerminalNode SCROLL_LOCKS() { return getToken(TSqlParser.SCROLL_LOCKS, 0); }
		public TerminalNode SEARCH() { return getToken(TSqlParser.SEARCH, 0); }
		public TerminalNode SECONDARY() { return getToken(TSqlParser.SECONDARY, 0); }
		public TerminalNode SECONDARY_ONLY() { return getToken(TSqlParser.SECONDARY_ONLY, 0); }
		public TerminalNode SECONDARY_ROLE() { return getToken(TSqlParser.SECONDARY_ROLE, 0); }
		public TerminalNode SECONDS() { return getToken(TSqlParser.SECONDS, 0); }
		public TerminalNode SECRET() { return getToken(TSqlParser.SECRET, 0); }
		public TerminalNode SECURITY_LOG() { return getToken(TSqlParser.SECURITY_LOG, 0); }
		public TerminalNode SEEDING_MODE() { return getToken(TSqlParser.SEEDING_MODE, 0); }
		public TerminalNode SELF() { return getToken(TSqlParser.SELF, 0); }
		public TerminalNode SEMI_SENSITIVE() { return getToken(TSqlParser.SEMI_SENSITIVE, 0); }
		public TerminalNode SEND() { return getToken(TSqlParser.SEND, 0); }
		public TerminalNode SENT() { return getToken(TSqlParser.SENT, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(TSqlParser.SERIALIZABLE, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode SESSION_TIMEOUT() { return getToken(TSqlParser.SESSION_TIMEOUT, 0); }
		public TerminalNode SETERROR() { return getToken(TSqlParser.SETERROR, 0); }
		public TerminalNode SHARE() { return getToken(TSqlParser.SHARE, 0); }
		public TerminalNode SHOWPLAN() { return getToken(TSqlParser.SHOWPLAN, 0); }
		public TerminalNode SID() { return getToken(TSqlParser.SID, 0); }
		public TerminalNode SIGNATURE() { return getToken(TSqlParser.SIGNATURE, 0); }
		public TerminalNode SIMPLE() { return getToken(TSqlParser.SIMPLE, 0); }
		public TerminalNode SINGLE_USER() { return getToken(TSqlParser.SINGLE_USER, 0); }
		public TerminalNode SIZE() { return getToken(TSqlParser.SIZE, 0); }
		public TerminalNode SMALLINT() { return getToken(TSqlParser.SMALLINT, 0); }
		public TerminalNode SNAPSHOT() { return getToken(TSqlParser.SNAPSHOT, 0); }
		public TerminalNode SOURCE() { return getToken(TSqlParser.SOURCE, 0); }
		public TerminalNode SPATIAL_WINDOW_MAX_CELLS() { return getToken(TSqlParser.SPATIAL_WINDOW_MAX_CELLS, 0); }
		public TerminalNode STANDBY() { return getToken(TSqlParser.STANDBY, 0); }
		public TerminalNode START() { return getToken(TSqlParser.START, 0); }
		public TerminalNode START_DATE() { return getToken(TSqlParser.START_DATE, 0); }
		public TerminalNode STATE() { return getToken(TSqlParser.STATE, 0); }
		public TerminalNode STATIC() { return getToken(TSqlParser.STATIC, 0); }
		public TerminalNode STATS_STREAM() { return getToken(TSqlParser.STATS_STREAM, 0); }
		public TerminalNode STATUS() { return getToken(TSqlParser.STATUS, 0); }
		public TerminalNode STDEV() { return getToken(TSqlParser.STDEV, 0); }
		public TerminalNode STDEVP() { return getToken(TSqlParser.STDEVP, 0); }
		public TerminalNode STOPLIST() { return getToken(TSqlParser.STOPLIST, 0); }
		public TerminalNode STUFF() { return getToken(TSqlParser.STUFF, 0); }
		public TerminalNode SUBJECT() { return getToken(TSqlParser.SUBJECT, 0); }
		public TerminalNode SUM() { return getToken(TSqlParser.SUM, 0); }
		public TerminalNode SUSPEND() { return getToken(TSqlParser.SUSPEND, 0); }
		public TerminalNode SYMMETRIC() { return getToken(TSqlParser.SYMMETRIC, 0); }
		public TerminalNode SYNCHRONOUS_COMMIT() { return getToken(TSqlParser.SYNCHRONOUS_COMMIT, 0); }
		public TerminalNode SYNONYM() { return getToken(TSqlParser.SYNONYM, 0); }
		public TerminalNode TAKE() { return getToken(TSqlParser.TAKE, 0); }
		public TerminalNode TARGET() { return getToken(TSqlParser.TARGET, 0); }
		public TerminalNode TARGET_RECOVERY_TIME() { return getToken(TSqlParser.TARGET_RECOVERY_TIME, 0); }
		public TerminalNode TB() { return getToken(TSqlParser.TB, 0); }
		public TerminalNode TEXTIMAGE_ON() { return getToken(TSqlParser.TEXTIMAGE_ON, 0); }
		public TerminalNode THROW() { return getToken(TSqlParser.THROW, 0); }
		public TerminalNode TIES() { return getToken(TSqlParser.TIES, 0); }
		public TerminalNode TIME() { return getToken(TSqlParser.TIME, 0); }
		public TerminalNode TIMEOUT() { return getToken(TSqlParser.TIMEOUT, 0); }
		public TerminalNode TIMER() { return getToken(TSqlParser.TIMER, 0); }
		public TerminalNode TINYINT() { return getToken(TSqlParser.TINYINT, 0); }
		public TerminalNode TORN_PAGE_DETECTION() { return getToken(TSqlParser.TORN_PAGE_DETECTION, 0); }
		public TerminalNode TRANSFORM_NOISE_WORDS() { return getToken(TSqlParser.TRANSFORM_NOISE_WORDS, 0); }
		public TerminalNode TRIPLE_DES() { return getToken(TSqlParser.TRIPLE_DES, 0); }
		public TerminalNode TRIPLE_DES_3KEY() { return getToken(TSqlParser.TRIPLE_DES_3KEY, 0); }
		public TerminalNode TRUSTWORTHY() { return getToken(TSqlParser.TRUSTWORTHY, 0); }
		public TerminalNode TRY() { return getToken(TSqlParser.TRY, 0); }
		public TerminalNode TSQL() { return getToken(TSqlParser.TSQL, 0); }
		public TerminalNode TWO_DIGIT_YEAR_CUTOFF() { return getToken(TSqlParser.TWO_DIGIT_YEAR_CUTOFF, 0); }
		public TerminalNode TYPE() { return getToken(TSqlParser.TYPE, 0); }
		public TerminalNode TYPE_WARNING() { return getToken(TSqlParser.TYPE_WARNING, 0); }
		public TerminalNode UNBOUNDED() { return getToken(TSqlParser.UNBOUNDED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(TSqlParser.UNCOMMITTED, 0); }
		public TerminalNode UNKNOWN() { return getToken(TSqlParser.UNKNOWN, 0); }
		public TerminalNode UNLIMITED() { return getToken(TSqlParser.UNLIMITED, 0); }
		public TerminalNode USING() { return getToken(TSqlParser.USING, 0); }
		public TerminalNode VALID_XML() { return getToken(TSqlParser.VALID_XML, 0); }
		public TerminalNode VALIDATION() { return getToken(TSqlParser.VALIDATION, 0); }
		public TerminalNode VALUE() { return getToken(TSqlParser.VALUE, 0); }
		public TerminalNode VAR() { return getToken(TSqlParser.VAR, 0); }
		public TerminalNode VARP() { return getToken(TSqlParser.VARP, 0); }
		public TerminalNode VIEW_METADATA() { return getToken(TSqlParser.VIEW_METADATA, 0); }
		public TerminalNode VIEWS() { return getToken(TSqlParser.VIEWS, 0); }
		public TerminalNode WAIT() { return getToken(TSqlParser.WAIT, 0); }
		public TerminalNode WELL_FORMED_XML() { return getToken(TSqlParser.WELL_FORMED_XML, 0); }
		public TerminalNode WORK() { return getToken(TSqlParser.WORK, 0); }
		public TerminalNode WORKLOAD() { return getToken(TSqlParser.WORKLOAD, 0); }
		public TerminalNode XML() { return getToken(TSqlParser.XML, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(TSqlParser.XMLNAMESPACES, 0); }
		public Simple_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterSimple_id(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitSimple_id(this);
		}
	}

	public final Simple_idContext simple_id() throws RecognitionException {
		Simple_idContext _localctx = new Simple_idContext(_ctx, getState());
		enterRule(_localctx, 950, RULE_simple_id);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10631);
			_la = _input.LA(1);
			if ( !(_la==CALLED || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (DATA_COMPRESSION - 81)) | (1L << (EVENTDATA - 81)) | (1L << (FILENAME - 81)) | (1L << (FILLFACTOR - 81)) | (1L << (FORCESEEK - 81)))) != 0) || ((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & ((1L << (INIT - 158)) | (1L << (KEY - 158)) | (1L << (MASTER - 158)) | (1L << (MAX_MEMORY - 158)))) != 0) || ((((_la - 225)) & ~0x3f) == 0 && ((1L << (_la - 225)) & ((1L << (OFFSETS - 225)) | (1L << (PAGE - 225)) | (1L << (PUBLIC - 225)) | (1L << (R - 225)) | (1L << (RAW - 225)) | (1L << (RETURN - 225)) | (1L << (RETURNS - 225)) | (1L << (ROWCOUNT - 225)))) != 0) || ((((_la - 295)) & ~0x3f) == 0 && ((1L << (_la - 295)) & ((1L << (SAFETY - 295)) | (1L << (SERVER - 295)) | (1L << (SID - 295)) | (1L << (SOURCE - 295)) | (1L << (STATE - 295)) | (1L << (START - 295)) | (1L << (TARGET - 295)))) != 0) || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (ABSOLUTE - 383)) | (1L << (ACCENT_SENSITIVITY - 383)) | (1L << (ACTION - 383)) | (1L << (ACTIVATION - 383)) | (1L << (ACTIVE - 383)) | (1L << (ADDRESS - 383)) | (1L << (AES_128 - 383)) | (1L << (AES_192 - 383)) | (1L << (AES_256 - 383)) | (1L << (AFFINITY - 383)) | (1L << (AFTER - 383)) | (1L << (AGGREGATE - 383)) | (1L << (ALGORITHM - 383)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 383)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 383)) | (1L << (ALLOWED - 383)) | (1L << (ANSI_NULL_DEFAULT - 383)) | (1L << (ANSI_NULLS - 383)) | (1L << (ANSI_PADDING - 383)) | (1L << (ANSI_WARNINGS - 383)) | (1L << (APPLICATION_LOG - 383)) | (1L << (APPLY - 383)) | (1L << (ARITHABORT - 383)) | (1L << (ASSEMBLY - 383)) | (1L << (AUDIT - 383)) | (1L << (AUDIT_GUID - 383)) | (1L << (AUTO - 383)) | (1L << (AUTO_CLEANUP - 383)) | (1L << (AUTO_CLOSE - 383)) | (1L << (AUTO_CREATE_STATISTICS - 383)) | (1L << (AUTO_SHRINK - 383)) | (1L << (AUTO_UPDATE_STATISTICS - 383)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 383)) | (1L << (AVAILABILITY - 383)) | (1L << (AVG - 383)) | (1L << (BACKUP_PRIORITY - 383)) | (1L << (BEGIN_DIALOG - 383)) | (1L << (BIGINT - 383)) | (1L << (BINARY_BASE64 - 383)) | (1L << (BINARY_CHECKSUM - 383)) | (1L << (BINDING - 383)) | (1L << (BLOB_STORAGE - 383)) | (1L << (BROKER - 383)) | (1L << (BROKER_INSTANCE - 383)) | (1L << (BULK_LOGGED - 383)) | (1L << (CALLER - 383)) | (1L << (CAP_CPU_PERCENT - 383)) | (1L << (CAST - 383)) | (1L << (CATALOG - 383)) | (1L << (CATCH - 383)) | (1L << (CHANGE_RETENTION - 383)) | (1L << (CHANGE_TRACKING - 383)) | (1L << (CHECKSUM - 383)) | (1L << (CHECKSUM_AGG - 383)) | (1L << (CLEANUP - 383)) | (1L << (COLLECTION - 383)) | (1L << (COLUMN_MASTER_KEY - 383)) | (1L << (COMMITTED - 383)) | (1L << (COMPATIBILITY_LEVEL - 383)) | (1L << (CONCAT - 383)) | (1L << (CONCAT_NULL_YIELDS_NULL - 383)) | (1L << (CONTENT - 383)) | (1L << (CONTROL - 383)) | (1L << (COOKIE - 383)))) != 0) || ((((_la - 447)) & ~0x3f) == 0 && ((1L << (_la - 447)) & ((1L << (COUNT - 447)) | (1L << (COUNT_BIG - 447)) | (1L << (COUNTER - 447)) | (1L << (CPU - 447)) | (1L << (CREATE_NEW - 447)) | (1L << (CREATION_DISPOSITION - 447)) | (1L << (CREDENTIAL - 447)) | (1L << (CRYPTOGRAPHIC - 447)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 447)) | (1L << (CURSOR_DEFAULT - 447)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 447)) | (1L << (DATEADD - 447)) | (1L << (DATEDIFF - 447)) | (1L << (DATENAME - 447)) | (1L << (DATEPART - 447)) | (1L << (DAYS - 447)) | (1L << (DB_CHAINING - 447)) | (1L << (DB_FAILOVER - 447)) | (1L << (DECRYPTION - 447)) | (1L << (DEFAULT_DOUBLE_QUOTE - 447)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 447)) | (1L << (DEFAULT_LANGUAGE - 447)) | (1L << (DELAY - 447)) | (1L << (DELAYED_DURABILITY - 447)) | (1L << (DELETED - 447)) | (1L << (DENSE_RANK - 447)) | (1L << (DEPENDENTS - 447)) | (1L << (DES - 447)) | (1L << (DESCRIPTION - 447)) | (1L << (DESX - 447)) | (1L << (DHCP - 447)) | (1L << (DIALOG - 447)) | (1L << (DIRECTORY_NAME - 447)) | (1L << (DISABLE - 447)) | (1L << (DISABLE_BROKER - 447)) | (1L << (DISABLED - 447)) | (1L << (DISK_DRIVE - 447)) | (1L << (DOCUMENT - 447)) | (1L << (DYNAMIC - 447)) | (1L << (EMERGENCY - 447)) | (1L << (EMPTY - 447)) | (1L << (ENABLE - 447)) | (1L << (ENABLE_BROKER - 447)) | (1L << (ENCRYPTED_VALUE - 447)) | (1L << (ENCRYPTION - 447)) | (1L << (ENDPOINT_URL - 447)) | (1L << (ERROR_BROKER_CONVERSATIONS - 447)) | (1L << (EXCLUSIVE - 447)) | (1L << (EXECUTABLE - 447)) | (1L << (EXIST - 447)) | (1L << (EXPAND - 447)) | (1L << (EXPIRY_DATE - 447)) | (1L << (EXPLICIT - 447)) | (1L << (FAIL_OPERATION - 447)) | (1L << (FAILOVER_MODE - 447)) | (1L << (FAILURE - 447)) | (1L << (FAILURE_CONDITION_LEVEL - 447)) | (1L << (FAST - 447)) | (1L << (FAST_FORWARD - 447)) | (1L << (FILEGROUP - 447)) | (1L << (FILEGROWTH - 447)) | (1L << (FILEPATH - 447)) | (1L << (FILESTREAM - 447)))) != 0) || ((((_la - 511)) & ~0x3f) == 0 && ((1L << (_la - 511)) & ((1L << (FILTER - 511)) | (1L << (FIRST - 511)) | (1L << (FIRST_VALUE - 511)) | (1L << (FOLLOWING - 511)) | (1L << (FORCE - 511)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 511)) | (1L << (FORCED - 511)) | (1L << (FORMAT - 511)) | (1L << (FORWARD_ONLY - 511)) | (1L << (FULLSCAN - 511)) | (1L << (FULLTEXT - 511)) | (1L << (GB - 511)) | (1L << (GETDATE - 511)) | (1L << (GETUTCDATE - 511)) | (1L << (GLOBAL - 511)) | (1L << (GO - 511)) | (1L << (GROUP_MAX_REQUESTS - 511)) | (1L << (GROUPING - 511)) | (1L << (GROUPING_ID - 511)) | (1L << (HADR - 511)) | (1L << (HASH - 511)) | (1L << (HEALTH_CHECK_TIMEOUT - 511)) | (1L << (HIGH - 511)) | (1L << (HONOR_BROKER_PRIORITY - 511)) | (1L << (HOURS - 511)) | (1L << (IDENTITY_VALUE - 511)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 511)) | (1L << (IMMEDIATE - 511)) | (1L << (IMPERSONATE - 511)) | (1L << (IMPORTANCE - 511)) | (1L << (INCREMENTAL - 511)) | (1L << (INITIATOR - 511)) | (1L << (INPUT - 511)) | (1L << (INSENSITIVE - 511)) | (1L << (INSERTED - 511)) | (1L << (INT - 511)) | (1L << (IP - 511)) | (1L << (ISOLATION - 511)) | (1L << (KB - 511)) | (1L << (KEEP - 511)) | (1L << (KEEPFIXED - 511)) | (1L << (KEY_SOURCE - 511)) | (1L << (KEYS - 511)) | (1L << (KEYSET - 511)) | (1L << (LAG - 511)) | (1L << (LAST - 511)) | (1L << (LAST_VALUE - 511)) | (1L << (LEAD - 511)) | (1L << (LEVEL - 511)) | (1L << (LIST - 511)) | (1L << (LISTENER - 511)) | (1L << (LISTENER_URL - 511)) | (1L << (LOB_COMPACTION - 511)) | (1L << (LOCAL - 511)) | (1L << (LOCATION - 511)) | (1L << (LOCK - 511)) | (1L << (LOCK_ESCALATION - 511)) | (1L << (LOGIN - 511)) | (1L << (LOOP - 511)) | (1L << (LOW - 511)) | (1L << (MANUAL - 511)) | (1L << (MARK - 511)))) != 0) || ((((_la - 575)) & ~0x3f) == 0 && ((1L << (_la - 575)) & ((1L << (MATERIALIZED - 575)) | (1L << (MAX - 575)) | (1L << (MAX_CPU_PERCENT - 575)) | (1L << (MAX_DOP - 575)) | (1L << (MAX_FILES - 575)) | (1L << (MAX_IOPS_PER_VOLUME - 575)) | (1L << (MAX_MEMORY_PERCENT - 575)) | (1L << (MAX_PROCESSES - 575)) | (1L << (MAX_QUEUE_READERS - 575)) | (1L << (MAX_ROLLOVER_FILES - 575)) | (1L << (MAXDOP - 575)) | (1L << (MAXRECURSION - 575)) | (1L << (MAXSIZE - 575)) | (1L << (MB - 575)) | (1L << (MEDIUM - 575)) | (1L << (MEMORY_OPTIMIZED_DATA - 575)) | (1L << (MESSAGE - 575)) | (1L << (MIN - 575)) | (1L << (MIN_ACTIVE_ROWVERSION - 575)) | (1L << (MIN_CPU_PERCENT - 575)) | (1L << (MIN_IOPS_PER_VOLUME - 575)) | (1L << (MIN_MEMORY_PERCENT - 575)) | (1L << (MINUTES - 575)) | (1L << (MIRROR_ADDRESS - 575)) | (1L << (MIXED_PAGE_ALLOCATION - 575)) | (1L << (MODE - 575)) | (1L << (MODIFY - 575)) | (1L << (MOVE - 575)) | (1L << (MULTI_USER - 575)) | (1L << (NAME - 575)) | (1L << (NESTED_TRIGGERS - 575)) | (1L << (NEW_ACCOUNT - 575)) | (1L << (NEW_BROKER - 575)) | (1L << (NEW_PASSWORD - 575)) | (1L << (NEXT - 575)) | (1L << (NO - 575)) | (1L << (NO_TRUNCATE - 575)) | (1L << (NO_WAIT - 575)) | (1L << (NOCOUNT - 575)) | (1L << (NODES - 575)) | (1L << (NOEXPAND - 575)) | (1L << (NON_TRANSACTED_ACCESS - 575)) | (1L << (NORECOMPUTE - 575)) | (1L << (NORECOVERY - 575)) | (1L << (NOWAIT - 575)) | (1L << (NTILE - 575)) | (1L << (NUMANODE - 575)) | (1L << (NUMBER - 575)) | (1L << (NUMERIC_ROUNDABORT - 575)) | (1L << (OBJECT - 575)) | (1L << (OFFLINE - 575)) | (1L << (OFFSET - 575)) | (1L << (OLD_ACCOUNT - 575)) | (1L << (ONLINE - 575)) | (1L << (ONLY - 575)) | (1L << (OPEN_EXISTING - 575)) | (1L << (OPTIMISTIC - 575)) | (1L << (OPTIMIZE - 575)) | (1L << (OUT - 575)) | (1L << (OUTPUT - 575)) | (1L << (OWNER - 575)) | (1L << (PAGE_VERIFY - 575)) | (1L << (PARAMETERIZATION - 575)) | (1L << (PARTITION - 575)))) != 0) || ((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (PARTITIONS - 639)) | (1L << (PARTNER - 639)) | (1L << (PATH - 639)) | (1L << (POISON_MESSAGE_HANDLING - 639)) | (1L << (POOL - 639)) | (1L << (PORT - 639)) | (1L << (PRECEDING - 639)) | (1L << (PRIMARY_ROLE - 639)) | (1L << (PRIOR - 639)) | (1L << (PRIORITY - 639)) | (1L << (PRIORITY_LEVEL - 639)) | (1L << (PRIVATE - 639)) | (1L << (PRIVATE_KEY - 639)) | (1L << (PRIVILEGES - 639)) | (1L << (PROCEDURE_NAME - 639)) | (1L << (PROPERTY - 639)) | (1L << (PROVIDER - 639)) | (1L << (PROVIDER_KEY_NAME - 639)) | (1L << (QUERY - 639)) | (1L << (QUEUE - 639)) | (1L << (QUEUE_DELAY - 639)) | (1L << (QUOTED_IDENTIFIER - 639)) | (1L << (RANGE - 639)) | (1L << (RANK - 639)) | (1L << (RC2 - 639)) | (1L << (RC4 - 639)) | (1L << (RC4_128 - 639)) | (1L << (READ_COMMITTED_SNAPSHOT - 639)) | (1L << (READ_ONLY - 639)) | (1L << (READ_ONLY_ROUTING_LIST - 639)) | (1L << (READ_WRITE - 639)) | (1L << (READONLY - 639)) | (1L << (REBUILD - 639)) | (1L << (RECEIVE - 639)) | (1L << (RECOMPILE - 639)) | (1L << (RECOVERY - 639)) | (1L << (RECURSIVE_TRIGGERS - 639)) | (1L << (RELATIVE - 639)) | (1L << (REMOTE - 639)) | (1L << (REMOTE_SERVICE_NAME - 639)) | (1L << (REMOVE - 639)) | (1L << (REORGANIZE - 639)) | (1L << (REPEATABLE - 639)) | (1L << (REPLICA - 639)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 639)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 639)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 639)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 639)) | (1L << (RESERVE_DISK_SPACE - 639)) | (1L << (RESOURCE - 639)) | (1L << (RESOURCE_MANAGER_LOCATION - 639)) | (1L << (RESTRICTED_USER - 639)) | (1L << (RETENTION - 639)) | (1L << (ROBUST - 639)) | (1L << (ROOT - 639)) | (1L << (ROUTE - 639)) | (1L << (ROW - 639)) | (1L << (ROW_NUMBER - 639)) | (1L << (ROWGUID - 639)) | (1L << (ROWS - 639)) | (1L << (SAMPLE - 639)) | (1L << (SCHEMABINDING - 639)) | (1L << (SCOPED - 639)) | (1L << (SCROLL - 639)))) != 0) || ((((_la - 703)) & ~0x3f) == 0 && ((1L << (_la - 703)) & ((1L << (SCROLL_LOCKS - 703)) | (1L << (SEARCH - 703)) | (1L << (SECONDARY - 703)) | (1L << (SECONDARY_ONLY - 703)) | (1L << (SECONDARY_ROLE - 703)) | (1L << (SECONDS - 703)) | (1L << (SECRET - 703)) | (1L << (SECURITY_LOG - 703)) | (1L << (SEEDING_MODE - 703)) | (1L << (SELF - 703)) | (1L << (SEMI_SENSITIVE - 703)) | (1L << (SEND - 703)) | (1L << (SENT - 703)) | (1L << (SERIALIZABLE - 703)) | (1L << (SESSION_TIMEOUT - 703)) | (1L << (SETERROR - 703)) | (1L << (SHARE - 703)) | (1L << (SHOWPLAN - 703)) | (1L << (SIGNATURE - 703)) | (1L << (SIMPLE - 703)) | (1L << (SINGLE_USER - 703)) | (1L << (SIZE - 703)) | (1L << (SMALLINT - 703)) | (1L << (SNAPSHOT - 703)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 703)) | (1L << (STANDBY - 703)) | (1L << (START_DATE - 703)) | (1L << (STATIC - 703)) | (1L << (STATS_STREAM - 703)) | (1L << (STATUS - 703)) | (1L << (STDEV - 703)) | (1L << (STDEVP - 703)) | (1L << (STOPLIST - 703)) | (1L << (STUFF - 703)) | (1L << (SUBJECT - 703)) | (1L << (SUM - 703)) | (1L << (SUSPEND - 703)) | (1L << (SYMMETRIC - 703)) | (1L << (SYNCHRONOUS_COMMIT - 703)) | (1L << (SYNONYM - 703)) | (1L << (TAKE - 703)) | (1L << (TARGET_RECOVERY_TIME - 703)) | (1L << (TB - 703)) | (1L << (TEXTIMAGE_ON - 703)) | (1L << (THROW - 703)) | (1L << (TIES - 703)) | (1L << (TIME - 703)) | (1L << (TIMEOUT - 703)) | (1L << (TIMER - 703)) | (1L << (TINYINT - 703)) | (1L << (TORN_PAGE_DETECTION - 703)) | (1L << (TRANSFORM_NOISE_WORDS - 703)) | (1L << (TRIPLE_DES - 703)) | (1L << (TRIPLE_DES_3KEY - 703)) | (1L << (TRUSTWORTHY - 703)) | (1L << (TRY - 703)) | (1L << (TSQL - 703)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 703)) | (1L << (TYPE - 703)) | (1L << (TYPE_WARNING - 703)) | (1L << (UNBOUNDED - 703)) | (1L << (UNCOMMITTED - 703)) | (1L << (UNKNOWN - 703)) | (1L << (UNLIMITED - 703)))) != 0) || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (USING - 767)) | (1L << (VALID_XML - 767)) | (1L << (VALIDATION - 767)) | (1L << (VALUE - 767)) | (1L << (VAR - 767)) | (1L << (VARP - 767)) | (1L << (VIEW_METADATA - 767)) | (1L << (VIEWS - 767)) | (1L << (WAIT - 767)) | (1L << (WELL_FORMED_XML - 767)) | (1L << (WORK - 767)) | (1L << (WORKLOAD - 767)) | (1L << (XML - 767)) | (1L << (XMLNAMESPACES - 767)) | (1L << (ID - 767)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comparison_operatorContext extends ParserRuleContext {
		public Comparison_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparison_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterComparison_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitComparison_operator(this);
		}
	}

	public final Comparison_operatorContext comparison_operator() throws RecognitionException {
		Comparison_operatorContext _localctx = new Comparison_operatorContext(_ctx, getState());
		enterRule(_localctx, 952, RULE_comparison_operator);
		try {
			setState(10648);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1507,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10633);
				match(EQUAL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10634);
				match(GREATER);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10635);
				match(LESS);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10636);
				match(LESS);
				setState(10637);
				match(EQUAL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(10638);
				match(GREATER);
				setState(10639);
				match(EQUAL);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(10640);
				match(LESS);
				setState(10641);
				match(GREATER);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(10642);
				match(EXCLAMATION);
				setState(10643);
				match(EQUAL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(10644);
				match(EXCLAMATION);
				setState(10645);
				match(GREATER);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(10646);
				match(EXCLAMATION);
				setState(10647);
				match(LESS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assignment_operatorContext extends ParserRuleContext {
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignment_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterAssignment_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitAssignment_operator(this);
		}
	}

	public final Assignment_operatorContext assignment_operator() throws RecognitionException {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(_ctx, getState());
		enterRule(_localctx, 954, RULE_assignment_operator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10650);
			_la = _input.LA(1);
			if ( !(((((_la - 805)) & ~0x3f) == 0 && ((1L << (_la - 805)) & ((1L << (PLUS_ASSIGN - 805)) | (1L << (MINUS_ASSIGN - 805)) | (1L << (MULT_ASSIGN - 805)) | (1L << (DIV_ASSIGN - 805)) | (1L << (MOD_ASSIGN - 805)) | (1L << (AND_ASSIGN - 805)) | (1L << (XOR_ASSIGN - 805)) | (1L << (OR_ASSIGN - 805)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_sizeContext extends ParserRuleContext {
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode KB() { return getToken(TSqlParser.KB, 0); }
		public TerminalNode MB() { return getToken(TSqlParser.MB, 0); }
		public TerminalNode GB() { return getToken(TSqlParser.GB, 0); }
		public TerminalNode TB() { return getToken(TSqlParser.TB, 0); }
		public File_sizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_size; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).enterFile_size(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSqlParserListener ) ((TSqlParserListener)listener).exitFile_size(this);
		}
	}

	public final File_sizeContext file_size() throws RecognitionException {
		File_sizeContext _localctx = new File_sizeContext(_ctx, getState());
		enterRule(_localctx, 956, RULE_file_size);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10652);
			match(DECIMAL);
			setState(10654);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GB || _la==KB || _la==MB || _la==TB || _la==MODULE) {
				{
				setState(10653);
				_la = _input.LA(1);
				if ( !(_la==GB || _la==KB || _la==MB || _la==TB || _la==MODULE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 46:
			return assembly_option_sempred((Assembly_optionContext)_localctx, predIndex);
		case 357:
			return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean assembly_option_sempred(Assembly_optionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1:
			return precpred(_ctx, 5);
		case 2:
			return precpred(_ctx, 4);
		case 3:
			return precpred(_ctx, 3);
		case 4:
			return precpred(_ctx, 2);
		case 5:
			return precpred(_ctx, 10);
		}
		return true;
	}

	private static final int _serializedATNSegments = 5;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0343\u29a3\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
		"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
		"\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
		"\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f"+
		"\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154"+
		"\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158"+
		"\4\u0159\t\u0159\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d"+
		"\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161"+
		"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165\t\u0165\4\u0166"+
		"\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a"+
		"\4\u016b\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f"+
		"\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173\t\u0173"+
		"\4\u0174\t\u0174\4\u0175\t\u0175\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178"+
		"\t\u0178\4\u0179\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c"+
		"\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180\t\u0180\4\u0181"+
		"\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183\4\u0184\t\u0184\4\u0185\t\u0185"+
		"\4\u0186\t\u0186\4\u0187\t\u0187\4\u0188\t\u0188\4\u0189\t\u0189\4\u018a"+
		"\t\u018a\4\u018b\t\u018b\4\u018c\t\u018c\4\u018d\t\u018d\4\u018e\t\u018e"+
		"\4\u018f\t\u018f\4\u0190\t\u0190\4\u0191\t\u0191\4\u0192\t\u0192\4\u0193"+
		"\t\u0193\4\u0194\t\u0194\4\u0195\t\u0195\4\u0196\t\u0196\4\u0197\t\u0197"+
		"\4\u0198\t\u0198\4\u0199\t\u0199\4\u019a\t\u019a\4\u019b\t\u019b\4\u019c"+
		"\t\u019c\4\u019d\t\u019d\4\u019e\t\u019e\4\u019f\t\u019f\4\u01a0\t\u01a0"+
		"\4\u01a1\t\u01a1\4\u01a2\t\u01a2\4\u01a3\t\u01a3\4\u01a4\t\u01a4\4\u01a5"+
		"\t\u01a5\4\u01a6\t\u01a6\4\u01a7\t\u01a7\4\u01a8\t\u01a8\4\u01a9\t\u01a9"+
		"\4\u01aa\t\u01aa\4\u01ab\t\u01ab\4\u01ac\t\u01ac\4\u01ad\t\u01ad\4\u01ae"+
		"\t\u01ae\4\u01af\t\u01af\4\u01b0\t\u01b0\4\u01b1\t\u01b1\4\u01b2\t\u01b2"+
		"\4\u01b3\t\u01b3\4\u01b4\t\u01b4\4\u01b5\t\u01b5\4\u01b6\t\u01b6\4\u01b7"+
		"\t\u01b7\4\u01b8\t\u01b8\4\u01b9\t\u01b9\4\u01ba\t\u01ba\4\u01bb\t\u01bb"+
		"\4\u01bc\t\u01bc\4\u01bd\t\u01bd\4\u01be\t\u01be\4\u01bf\t\u01bf\4\u01c0"+
		"\t\u01c0\4\u01c1\t\u01c1\4\u01c2\t\u01c2\4\u01c3\t\u01c3\4\u01c4\t\u01c4"+
		"\4\u01c5\t\u01c5\4\u01c6\t\u01c6\4\u01c7\t\u01c7\4\u01c8\t\u01c8\4\u01c9"+
		"\t\u01c9\4\u01ca\t\u01ca\4\u01cb\t\u01cb\4\u01cc\t\u01cc\4\u01cd\t\u01cd"+
		"\4\u01ce\t\u01ce\4\u01cf\t\u01cf\4\u01d0\t\u01d0\4\u01d1\t\u01d1\4\u01d2"+
		"\t\u01d2\4\u01d3\t\u01d3\4\u01d4\t\u01d4\4\u01d5\t\u01d5\4\u01d6\t\u01d6"+
		"\4\u01d7\t\u01d7\4\u01d8\t\u01d8\4\u01d9\t\u01d9\4\u01da\t\u01da\4\u01db"+
		"\t\u01db\4\u01dc\t\u01dc\4\u01dd\t\u01dd\4\u01de\t\u01de\4\u01df\t\u01df"+
		"\4\u01e0\t\u01e0\3\2\7\2\u03c2\n\2\f\2\16\2\u03c5\13\2\3\2\3\2\3\3\3\3"+
		"\7\3\u03cb\n\3\f\3\16\3\u03ce\13\3\3\3\5\3\u03d1\n\3\3\3\3\3\7\3\u03d5"+
		"\n\3\f\3\16\3\u03d8\13\3\5\3\u03da\n\3\3\4\3\4\5\4\u03de\n\4\6\4\u03e0"+
		"\n\4\r\4\16\4\u03e1\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u03eb\n\5\3\6\3\6"+
		"\3\6\3\6\3\6\5\6\u03f2\n\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7"+
		"\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3"+
		"\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7"+
		"\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3"+
		"\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7"+
		"\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3"+
		"\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7"+
		"\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3"+
		"\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7"+
		"\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u0493\n\7\3\b\3\b\3\b\3\b\3\b\5\b"+
		"\u049a\n\b\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u04a8\n"+
		"\t\3\n\3\n\5\n\u04ac\n\n\3\n\5\n\u04af\n\n\3\n\3\n\5\n\u04b3\n\n\3\13"+
		"\3\13\5\13\u04b7\n\13\3\f\3\f\5\f\u04bb\n\f\3\r\3\r\3\r\5\r\u04c0\n\r"+
		"\3\r\3\r\3\r\5\r\u04c5\n\r\5\r\u04c7\n\r\3\16\3\16\5\16\u04cb\n\16\3\16"+
		"\5\16\u04ce\n\16\3\17\3\17\3\17\3\17\3\17\5\17\u04d5\n\17\3\17\5\17\u04d8"+
		"\n\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20\5\20\u04e1\n\20\3\20\5\20\u04e4"+
		"\n\20\3\21\3\21\3\22\3\22\3\23\3\23\3\24\3\24\3\24\5\24\u04ef\n\24\3\24"+
		"\5\24\u04f2\n\24\3\24\3\24\3\24\5\24\u04f7\n\24\3\24\3\24\3\24\5\24\u04fc"+
		"\n\24\3\24\5\24\u04ff\n\24\3\24\3\24\3\24\5\24\u0504\n\24\3\25\3\25\5"+
		"\25\u0508\n\25\3\25\5\25\u050b\n\25\3\25\3\25\5\25\u050f\n\25\3\25\5\25"+
		"\u0512\n\25\3\25\5\25\u0515\n\25\3\26\3\26\3\26\3\26\3\26\5\26\u051c\n"+
		"\26\3\26\3\26\5\26\u0520\n\26\5\26\u0522\n\26\3\27\3\27\3\27\5\27\u0527"+
		"\n\27\3\27\3\27\7\27\u052b\n\27\f\27\16\27\u052e\13\27\3\27\5\27\u0531"+
		"\n\27\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\7\30\u053c\n\30\f\30"+
		"\16\30\u053f\13\30\3\30\3\30\3\30\5\30\u0544\n\30\3\30\5\30\u0547\n\30"+
		"\3\30\3\30\3\30\3\30\3\30\7\30\u054e\n\30\f\30\16\30\u0551\13\30\5\30"+
		"\u0553\n\30\3\31\3\31\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32"+
		"\3\32\3\32\3\32\5\32\u0564\n\32\3\33\3\33\3\33\3\33\3\33\3\33\5\33\u056c"+
		"\n\33\3\33\3\33\3\33\5\33\u0571\n\33\3\33\5\33\u0574\n\33\3\33\3\33\3"+
		"\33\5\33\u0579\n\33\3\33\5\33\u057c\n\33\3\33\3\33\3\33\5\33\u0581\n\33"+
		"\3\34\3\34\3\34\3\34\3\34\3\34\5\34\u0589\n\34\3\34\3\34\3\34\5\34\u058e"+
		"\n\34\3\34\5\34\u0591\n\34\3\34\3\34\3\34\5\34\u0596\n\34\3\35\3\35\3"+
		"\35\3\35\5\35\u059c\n\35\3\35\3\35\3\35\5\35\u05a1\n\35\3\35\3\35\3\36"+
		"\3\36\3\36\3\36\3\36\3\37\3\37\3\37\3\37\3 \3 \3 \3!\5!\u05b2\n!\3!\5"+
		"!\u05b5\n!\3!\5!\u05b8\n!\3!\5!\u05bb\n!\3\"\3\"\3\"\5\"\u05c0\n\"\3#"+
		"\3#\3$\3$\3$\3%\3%\5%\u05c9\n%\3&\3&\3\'\3\'\3\'\3(\3(\3(\3(\3)\3)\3)"+
		"\3)\5)\u05d8\n)\3*\3*\3+\3+\3+\3,\3,\3-\3-\3-\3.\3.\3/\3/\3/\5/\u05e9"+
		"\n/\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\5\60\u05f4\n\60\3\60"+
		"\3\60\7\60\u05f8\n\60\f\60\16\60\u05fb\13\60\3\61\3\61\3\61\3\61\3\62"+
		"\3\62\3\63\3\63\3\64\3\64\3\64\3\64\5\64\u0609\n\64\3\65\3\65\3\66\3\66"+
		"\3\66\3\67\3\67\38\38\38\38\38\38\58\u0618\n8\39\39\3:\3:\3:\3:\3:\5:"+
		"\u0621\n:\3:\3:\5:\u0625\n:\3:\6:\u0628\n:\r:\16:\u0629\3:\3:\3:\3:\5"+
		":\u0630\n:\3;\3;\3;\3;\5;\u0636\n;\3;\5;\u0639\n;\3;\6;\u063c\n;\r;\16"+
		";\u063d\3;\3;\3;\5;\u0643\n;\3<\3<\3<\3<\3<\3<\5<\u064b\n<\3=\3=\3=\3"+
		"=\3>\3>\3>\3>\5>\u0655\n>\3>\3>\3?\3?\3?\3?\3?\3@\3@\3@\3@\3@\3@\3@\3"+
		"@\3@\3@\5@\u0668\n@\3A\3A\3A\3A\3A\3A\5A\u0670\nA\3A\3A\3A\3A\3A\3A\3"+
		"A\3A\3A\3A\3A\5A\u067d\nA\5A\u067f\nA\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\5"+
		"A\u068b\nA\5A\u068d\nA\3A\3A\3A\3A\3A\5A\u0694\nA\3B\3B\3B\3B\3B\3B\3"+
		"B\5B\u069d\nB\3C\3C\3C\3C\5C\u06a3\nC\3C\3C\3C\3C\3D\3D\3D\5D\u06ac\n"+
		"D\3E\3E\3F\3F\3F\3G\3G\3G\3G\3H\3H\3H\3H\5H\u06bb\nH\3H\3H\3H\3H\3I\3"+
		"I\3I\3I\5I\u06c5\nI\3I\3I\3I\3I\3J\3J\3J\3J\5J\u06cf\nJ\3J\3J\3J\3J\3"+
		"K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3"+
		"K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\5K\u06f7\nK\3L\3L\3L\3L\3L\3L\3L\3L\3"+
		"L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\5L\u070e\nL\3M\3M\3N\3N\3O\3O\3"+
		"O\3O\3O\3P\3P\3P\3Q\3Q\3Q\3Q\3Q\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3"+
		"R\3R\3R\3R\3R\5R\u0732\nR\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3"+
		"R\3R\5R\u0744\nR\3R\5R\u0747\nR\3R\3R\3R\5R\u074c\nR\3R\5R\u074f\nR\3"+
		"R\3R\3R\5R\u0754\nR\3R\5R\u0757\nR\3R\3R\3R\5R\u075c\nR\3R\5R\u075f\n"+
		"R\3R\3R\3R\5R\u0764\nR\3R\5R\u0767\nR\3R\3R\3R\3R\3R\3R\5R\u076f\nR\3"+
		"R\5R\u0772\nR\3R\3R\3R\3R\3R\3R\5R\u077a\nR\3R\3R\3R\3R\3R\3R\3R\3R\3"+
		"R\3R\3R\5R\u0787\nR\3R\3R\3R\3R\3R\3R\3R\3R\3R\5R\u0792\nR\3R\7R\u0795"+
		"\nR\fR\16R\u0798\13R\3R\5R\u079b\nR\3R\3R\3R\3R\5R\u07a1\nR\3R\3R\3R\3"+
		"R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\5R\u07b8\nR\3R\3"+
		"R\3R\3R\3R\3R\3R\3R\3R\3R\5R\u07c4\nR\3R\3R\3R\3R\3R\3R\3R\3R\3R\5R\u07cf"+
		"\nR\3R\7R\u07d2\nR\fR\16R\u07d5\13R\3R\5R\u07d8\nR\3R\3R\3R\3R\5R\u07de"+
		"\nR\5R\u07e0\nR\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\5R\u07ed\nR\3R\3R\3R"+
		"\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\6R\u0802\nR\rR\16R\u0803"+
		"\3R\3R\3R\3R\3R\5R\u080b\nR\3R\3R\3R\3R\3R\3R\3R\5R\u0814\nR\3R\3R\3R"+
		"\5R\u0819\nR\3R\5R\u081c\nR\3R\3R\3R\5R\u0821\nR\3R\5R\u0824\nR\3R\3R"+
		"\3R\5R\u0829\nR\3R\6R\u082c\nR\rR\16R\u082d\3R\3R\3R\3R\3R\3R\3R\3R\3"+
		"R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\5R\u084a\nR\3R\3"+
		"R\3R\3R\3R\5R\u0851\nR\3R\6R\u0854\nR\rR\16R\u0855\3R\3R\3R\3R\3R\5R\u085d"+
		"\nR\5R\u085f\nR\3R\3R\3R\3R\3R\3R\3R\3R\3R\5R\u086a\nR\3R\3R\3R\3R\5R"+
		"\u0870\nR\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\5R\u087f\nR\3S\3S\3S"+
		"\3S\3S\3S\3S\3S\3S\3S\3S\3S\5S\u088d\nS\3S\5S\u0890\nS\5S\u0892\nS\3S"+
		"\3S\3S\5S\u0897\nS\3S\3S\5S\u089b\nS\3S\5S\u089e\nS\5S\u08a0\nS\3S\3S"+
		"\3S\3S\5S\u08a6\nS\3S\5S\u08a9\nS\5S\u08ab\nS\3S\3S\3S\3S\5S\u08b1\nS"+
		"\5S\u08b3\nS\3S\3S\3T\3T\3T\3T\3T\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U"+
		"\3U\5U\u08c9\nU\3U\3U\3U\3U\3U\3U\5U\u08d1\nU\3U\3U\3U\3U\3U\3U\5U\u08d9"+
		"\nU\6U\u08db\nU\rU\16U\u08dc\3U\3U\3U\3U\3U\3U\3U\5U\u08e6\nU\3V\3V\3"+
		"V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\5V\u08fb\nV\3V\3V\3"+
		"W\3W\3W\3W\3W\3W\3W\3W\3W\5W\u0908\nW\3W\3W\3W\3W\3W\3W\3W\3W\3W\3W\3"+
		"W\3W\3W\5W\u0917\nW\6W\u0919\nW\rW\16W\u091a\3X\3X\3X\3X\3Y\3Y\3Y\3Y\3"+
		"Y\3Y\3Z\3Z\3Z\3Z\3Z\3Z\3[\3[\3[\3[\3\\\3\\\3\\\3\\\3]\3]\3]\3]\3]\3^\3"+
		"^\3^\3^\5^\u093e\n^\3^\5^\u0941\n^\3^\6^\u0944\n^\r^\16^\u0945\3_\3_\3"+
		"_\3_\3_\3_\3`\3`\3`\3`\3`\3`\3a\3a\3a\3a\5a\u0958\na\3a\5a\u095b\na\3"+
		"a\3a\3a\5a\u0960\na\3a\3a\3b\3b\3b\3b\3c\3c\3c\3c\3c\3c\3d\3d\3d\3d\3"+
		"d\3d\3e\3e\3e\3e\3e\3e\5e\u097a\ne\3f\3f\3f\3f\3f\3f\3g\3g\3g\3g\3g\3"+
		"g\5g\u0988\ng\3g\3g\3g\5g\u098d\ng\3g\3g\3h\3h\3h\3h\5h\u0995\nh\3h\6"+
		"h\u0998\nh\rh\16h\u0999\3h\3h\3h\3h\3h\5h\u09a1\nh\3i\3i\3i\3i\3i\3i\3"+
		"i\3j\3j\3j\3j\3j\3k\3k\3k\3k\3k\3k\3k\5k\u09b6\nk\3k\3k\3l\3l\3l\3l\3"+
		"l\3m\3m\3m\3m\3n\3n\3n\3n\3o\3o\3o\3o\3o\3p\3p\3p\3p\3p\3q\3q\3q\3q\3"+
		"q\3r\3r\3r\3r\3r\5r\u09db\nr\3r\3r\3r\5r\u09e0\nr\3r\3r\3s\3s\3s\3s\3"+
		"s\3s\3t\3t\3t\3t\3t\3u\3u\3u\3u\5u\u09f3\nu\3u\3u\3v\3v\3v\3v\3w\3w\3"+
		"w\3w\5w\u09ff\nw\3w\5w\u0a02\nw\3w\3w\3w\5w\u0a07\nw\3w\5w\u0a0a\nw\3"+
		"x\3x\3x\3x\5x\u0a10\nx\3x\3x\3y\3y\3y\3y\3y\3y\3z\3z\3z\3z\3z\5z\u0a1f"+
		"\nz\3z\3z\3z\5z\u0a24\nz\3z\3z\3{\3{\3{\3{\5{\u0a2c\n{\3{\5{\u0a2f\n{"+
		"\3{\3{\3{\5{\u0a34\n{\3{\3{\3{\5{\u0a39\n{\3{\5{\u0a3c\n{\3|\3|\3|\3|"+
		"\3|\3}\3}\3}\3}\3}\3}\3~\3~\3~\3~\3~\3\177\3\177\3\177\3\177\3\u0080\3"+
		"\u0080\5\u0080\u0a54\n\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\5"+
		"\u0080\u0a5b\n\u0080\3\u0080\3\u0080\3\u0080\5\u0080\u0a60\n\u0080\3\u0080"+
		"\3\u0080\3\u0080\5\u0080\u0a65\n\u0080\3\u0080\3\u0080\3\u0080\6\u0080"+
		"\u0a6a\n\u0080\r\u0080\16\u0080\u0a6b\3\u0081\3\u0081\3\u0081\3\u0081"+
		"\3\u0081\5\u0081\u0a73\n\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0082"+
		"\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\5\u0082\u0a80\n\u0082"+
		"\3\u0083\3\u0083\3\u0083\3\u0083\5\u0083\u0a86\n\u0083\3\u0083\3\u0083"+
		"\3\u0083\5\u0083\u0a8b\n\u0083\3\u0083\3\u0083\3\u0084\3\u0084\3\u0084"+
		"\3\u0084\5\u0084\u0a93\n\u0084\3\u0084\3\u0084\3\u0085\3\u0085\3\u0085"+
		"\3\u0085\3\u0085\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086"+
		"\5\u0086\u0aa3\n\u0086\3\u0086\3\u0086\3\u0087\3\u0087\3\u0087\5\u0087"+
		"\u0aaa\n\u0087\3\u0087\3\u0087\3\u0087\5\u0087\u0aaf\n\u0087\3\u0087\6"+
		"\u0087\u0ab2\n\u0087\r\u0087\16\u0087\u0ab3\3\u0087\5\u0087\u0ab7\n\u0087"+
		"\3\u0087\3\u0087\3\u0087\3\u0087\5\u0087\u0abd\n\u0087\3\u0087\3\u0087"+
		"\3\u0087\3\u0087\5\u0087\u0ac3\n\u0087\3\u0088\3\u0088\3\u0088\5\u0088"+
		"\u0ac8\n\u0088\3\u0088\3\u0088\3\u0088\5\u0088\u0acd\n\u0088\3\u0088\6"+
		"\u0088\u0ad0\n\u0088\r\u0088\16\u0088\u0ad1\3\u0088\5\u0088\u0ad5\n\u0088"+
		"\3\u0088\3\u0088\3\u0088\3\u0088\5\u0088\u0adb\n\u0088\3\u0088\3\u0088"+
		"\3\u0088\3\u0088\5\u0088\u0ae1\n\u0088\3\u0089\3\u0089\3\u0089\3\u0089"+
		"\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\5\u0089\u0aec\n\u0089\3\u0089"+
		"\5\u0089\u0aef\n\u0089\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a"+
		"\3\u008a\3\u008a\5\u008a\u0af9\n\u008a\3\u008a\3\u008a\3\u008a\3\u008a"+
		"\5\u008a\u0aff\n\u008a\6\u008a\u0b01\n\u008a\r\u008a\16\u008a\u0b02\3"+
		"\u008a\3\u008a\5\u008a\u0b07\n\u008a\3\u008b\3\u008b\3\u008b\3\u008b\3"+
		"\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b"+
		"\3\u008b\3\u008b\3\u008b\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c"+
		"\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\5\u008c\u0b24\n\u008c\3\u008d"+
		"\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d"+
		"\3\u008d\5\u008d\u0b31\n\u008d\3\u008d\3\u008d\3\u008d\3\u008d\5\u008d"+
		"\u0b37\n\u008d\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e"+
		"\3\u008e\5\u008e\u0b41\n\u008e\3\u008e\5\u008e\u0b44\n\u008e\3\u008f\3"+
		"\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u0090"+
		"\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\5\u0090"+
		"\u0b58\n\u0090\3\u0090\3\u0090\5\u0090\u0b5c\n\u0090\3\u0090\3\u0090\5"+
		"\u0090\u0b60\n\u0090\3\u0090\6\u0090\u0b63\n\u0090\r\u0090\16\u0090\u0b64"+
		"\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0091\3\u0091\3\u0091"+
		"\3\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u0b74\n\u0091\3\u0091\3\u0091"+
		"\3\u0091\3\u0091\3\u0091\5\u0091\u0b7b\n\u0091\3\u0091\3\u0091\3\u0091"+
		"\3\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u0b84\n\u0091\3\u0091\3\u0091"+
		"\3\u0091\3\u0091\7\u0091\u0b8a\n\u0091\f\u0091\16\u0091\u0b8d\13\u0091"+
		"\5\u0091\u0b8f\n\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u0b94\n\u0091\3"+
		"\u0091\3\u0091\3\u0091\5\u0091\u0b99\n\u0091\3\u0091\3\u0091\3\u0091\3"+
		"\u0091\6\u0091\u0b9f\n\u0091\r\u0091\16\u0091\u0ba0\3\u0091\3\u0091\6"+
		"\u0091\u0ba5\n\u0091\r\u0091\16\u0091\u0ba6\3\u0091\3\u0091\5\u0091\u0bab"+
		"\n\u0091\3\u0091\3\u0091\7\u0091\u0baf\n\u0091\f\u0091\16\u0091\u0bb2"+
		"\13\u0091\7\u0091\u0bb4\n\u0091\f\u0091\16\u0091\u0bb7\13\u0091\3\u0091"+
		"\5\u0091\u0bba\n\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\5\u0091"+
		"\u0bc1\n\u0091\3\u0091\3\u0091\3\u0091\3\u0091\7\u0091\u0bc7\n\u0091\f"+
		"\u0091\16\u0091\u0bca\13\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091"+
		"\5\u0091\u0bd1\n\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091"+
		"\3\u0091\5\u0091\u0bda\n\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u0bdf\n"+
		"\u0091\3\u0091\3\u0091\5\u0091\u0be3\n\u0091\3\u0091\5\u0091\u0be6\n\u0091"+
		"\6\u0091\u0be8\n\u0091\r\u0091\16\u0091\u0be9\3\u0091\3\u0091\7\u0091"+
		"\u0bee\n\u0091\f\u0091\16\u0091\u0bf1\13\u0091\7\u0091\u0bf3\n\u0091\f"+
		"\u0091\16\u0091\u0bf6\13\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091"+
		"\5\u0091\u0bfd\n\u0091\3\u0091\3\u0091\3\u0091\3\u0091\7\u0091\u0c03\n"+
		"\u0091\f\u0091\16\u0091\u0c06\13\u0091\3\u0091\3\u0091\3\u0091\5\u0091"+
		"\u0c0b\n\u0091\3\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u0c11\n\u0091\3"+
		"\u0091\5\u0091\u0c14\n\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u0c19\n\u0091"+
		"\3\u0091\5\u0091\u0c1c\n\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091"+
		"\5\u0091\u0c23\n\u0091\5\u0091\u0c25\n\u0091\3\u0091\5\u0091\u0c28\n\u0091"+
		"\3\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u0c2e\n\u0091\3\u0091\5\u0091"+
		"\u0c31\n\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u0c36\n\u0091\3\u0091\5"+
		"\u0091\u0c39\n\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u0c3e\n\u0091\3\u0091"+
		"\5\u0091\u0c41\n\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u0c46\n\u0091\3"+
		"\u0091\5\u0091\u0c49\n\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u0c4e\n\u0091"+
		"\3\u0092\5\u0092\u0c51\n\u0092\3\u0092\5\u0092\u0c54\n\u0092\3\u0092\5"+
		"\u0092\u0c57\n\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\5\u0092\u0c5e"+
		"\n\u0092\6\u0092\u0c60\n\u0092\r\u0092\16\u0092\u0c61\3\u0093\3\u0093"+
		"\3\u0093\3\u0093\3\u0093\5\u0093\u0c69\n\u0093\3\u0094\3\u0094\3\u0094"+
		"\3\u0094\3\u0094\5\u0094\u0c70\n\u0094\3\u0094\3\u0094\3\u0094\3\u0094"+
		"\5\u0094\u0c76\n\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094"+
		"\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0c83\n\u0094\3\u0094"+
		"\3\u0094\5\u0094\u0c87\n\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0c8c\n"+
		"\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094"+
		"\5\u0094\u0c96\n\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094"+
		"\3\u0094\5\u0094\u0c9f\n\u0094\3\u0094\3\u0094\5\u0094\u0ca3\n\u0094\3"+
		"\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095"+
		"\3\u0095\5\u0095\u0caf\n\u0095\3\u0095\3\u0095\3\u0095\3\u0095\5\u0095"+
		"\u0cb5\n\u0095\3\u0095\3\u0095\3\u0095\6\u0095\u0cba\n\u0095\r\u0095\16"+
		"\u0095\u0cbb\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3"+
		"\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095"+
		"\3\u0095\3\u0095\5\u0095\u0cd0\n\u0095\3\u0095\3\u0095\5\u0095\u0cd4\n"+
		"\u0095\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\5\u0096\u0cdc\n"+
		"\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\5\u0096"+
		"\u0ce5\n\u0096\3\u0096\3\u0096\3\u0096\3\u0096\5\u0096\u0ceb\n\u0096\3"+
		"\u0096\3\u0096\3\u0096\3\u0096\5\u0096\u0cf1\n\u0096\3\u0096\3\u0096\3"+
		"\u0096\3\u0096\3\u0096\3\u0096\6\u0096\u0cf9\n\u0096\r\u0096\16\u0096"+
		"\u0cfa\3\u0096\3\u0096\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097"+
		"\5\u0097\u0d05\n\u0097\3\u0097\3\u0097\5\u0097\u0d09\n\u0097\3\u0097\5"+
		"\u0097\u0d0c\n\u0097\3\u0097\3\u0097\5\u0097\u0d10\n\u0097\3\u0097\3\u0097"+
		"\3\u0097\5\u0097\u0d15\n\u0097\3\u0097\3\u0097\3\u0097\3\u0097\5\u0097"+
		"\u0d1b\n\u0097\3\u0097\5\u0097\u0d1e\n\u0097\3\u0097\3\u0097\5\u0097\u0d22"+
		"\n\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\6\u0097\u0d2a"+
		"\n\u0097\r\u0097\16\u0097\u0d2b\3\u0097\5\u0097\u0d2f\n\u0097\3\u0098"+
		"\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\5\u0098\u0d37\n\u0098\3\u0098"+
		"\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\5\u0098\u0d3f\n\u0098\3\u0098"+
		"\3\u0098\3\u0098\3\u0098\3\u0098\5\u0098\u0d46\n\u0098\3\u0098\3\u0098"+
		"\3\u0098\3\u0098\3\u0098\6\u0098\u0d4d\n\u0098\r\u0098\16\u0098\u0d4e"+
		"\5\u0098\u0d51\n\u0098\3\u0098\3\u0098\3\u0098\5\u0098\u0d56\n\u0098\3"+
		"\u0098\3\u0098\3\u0098\3\u0098\5\u0098\u0d5c\n\u0098\3\u0098\6\u0098\u0d5f"+
		"\n\u0098\r\u0098\16\u0098\u0d60\5\u0098\u0d63\n\u0098\3\u0098\5\u0098"+
		"\u0d66\n\u0098\3\u0098\3\u0098\3\u0098\5\u0098\u0d6b\n\u0098\3\u0098\5"+
		"\u0098\u0d6e\n\u0098\3\u0098\3\u0098\3\u0098\5\u0098\u0d73\n\u0098\3\u0098"+
		"\3\u0098\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099"+
		"\3\u0099\3\u0099\3\u0099\5\u0099\u0d82\n\u0099\3\u0099\3\u0099\3\u0099"+
		"\3\u0099\3\u0099\5\u0099\u0d89\n\u0099\3\u0099\3\u0099\3\u0099\3\u0099"+
		"\3\u0099\6\u0099\u0d90\n\u0099\r\u0099\16\u0099\u0d91\5\u0099\u0d94\n"+
		"\u0099\3\u0099\3\u0099\3\u0099\5\u0099\u0d99\n\u0099\3\u0099\3\u0099\3"+
		"\u0099\3\u0099\5\u0099\u0d9f\n\u0099\3\u0099\6\u0099\u0da2\n\u0099\r\u0099"+
		"\16\u0099\u0da3\5\u0099\u0da6\n\u0099\3\u0099\5\u0099\u0da9\n\u0099\3"+
		"\u0099\3\u0099\3\u0099\5\u0099\u0dae\n\u0099\3\u0099\5\u0099\u0db1\n\u0099"+
		"\3\u0099\3\u0099\3\u0099\5\u0099\u0db6\n\u0099\3\u0099\3\u0099\3\u009a"+
		"\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\5\u009a"+
		"\u0dc3\n\u009a\3\u009a\3\u009a\3\u009a\5\u009a\u0dc8\n\u009a\3\u009b\3"+
		"\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\5\u009b\u0dd1\n\u009b\3"+
		"\u009b\3\u009b\3\u009b\5\u009b\u0dd6\n\u009b\3\u009b\3\u009b\3\u009b\3"+
		"\u009b\5\u009b\u0ddc\n\u009b\3\u009b\3\u009b\5\u009b\u0de0\n\u009b\3\u009b"+
		"\3\u009b\5\u009b\u0de4\n\u009b\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c"+
		"\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c"+
		"\3\u009c\5\u009c\u0df5\n\u009c\5\u009c\u0df7\n\u009c\3\u009d\3\u009d\3"+
		"\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\5\u009d\u0e01\n\u009d\3"+
		"\u009d\3\u009d\3\u009d\5\u009d\u0e06\n\u009d\5\u009d\u0e08\n\u009d\3\u009d"+
		"\3\u009d\5\u009d\u0e0c\n\u009d\3\u009e\3\u009e\3\u009e\3\u009e\5\u009e"+
		"\u0e12\n\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\5\u009e"+
		"\u0e1a\n\u009e\3\u009e\7\u009e\u0e1d\n\u009e\f\u009e\16\u009e\u0e20\13"+
		"\u009e\5\u009e\u0e22\n\u009e\3\u009e\3\u009e\3\u009e\3\u009e\7\u009e\u0e28"+
		"\n\u009e\f\u009e\16\u009e\u0e2b\13\u009e\5\u009e\u0e2d\n\u009e\3\u009e"+
		"\3\u009e\3\u009e\5\u009e\u0e32\n\u009e\3\u009e\3\u009e\3\u009e\5\u009e"+
		"\u0e37\n\u009e\3\u009e\3\u009e\3\u009e\5\u009e\u0e3c\n\u009e\3\u009e\3"+
		"\u009e\3\u009e\5\u009e\u0e41\n\u009e\3\u009e\3\u009e\3\u009e\5\u009e\u0e46"+
		"\n\u009e\3\u009e\3\u009e\3\u009e\5\u009e\u0e4b\n\u009e\3\u009e\3\u009e"+
		"\5\u009e\u0e4f\n\u009e\3\u009e\3\u009e\3\u009e\5\u009e\u0e54\n\u009e\3"+
		"\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f"+
		"\5\u009f\u0e5f\n\u009f\3\u009f\7\u009f\u0e62\n\u009f\f\u009f\16\u009f"+
		"\u0e65\13\u009f\5\u009f\u0e67\n\u009f\3\u009f\5\u009f\u0e6a\n\u009f\3"+
		"\u009f\3\u009f\3\u009f\5\u009f\u0e6f\n\u009f\3\u009f\5\u009f\u0e72\n\u009f"+
		"\3\u009f\3\u009f\3\u009f\5\u009f\u0e77\n\u009f\3\u009f\5\u009f\u0e7a\n"+
		"\u009f\3\u009f\3\u009f\3\u009f\5\u009f\u0e7f\n\u009f\3\u009f\5\u009f\u0e82"+
		"\n\u009f\3\u009f\3\u009f\3\u009f\5\u009f\u0e87\n\u009f\3\u009f\5\u009f"+
		"\u0e8a\n\u009f\3\u009f\3\u009f\3\u009f\5\u009f\u0e8f\n\u009f\3\u009f\5"+
		"\u009f\u0e92\n\u009f\3\u009f\3\u009f\3\u009f\5\u009f\u0e97\n\u009f\3\u009f"+
		"\3\u009f\3\u009f\3\u009f\5\u009f\u0e9d\n\u009f\3\u009f\3\u009f\3\u009f"+
		"\5\u009f\u0ea2\n\u009f\3\u009f\5\u009f\u0ea5\n\u009f\3\u009f\3\u009f\3"+
		"\u009f\5\u009f\u0eaa\n\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\5"+
		"\u009f\u0eb1\n\u009f\5\u009f\u0eb3\n\u009f\3\u00a0\3\u00a0\3\u00a0\3\u00a0"+
		"\5\u00a0\u0eb9\n\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0"+
		"\3\u00a0\5\u00a0\u0ec2\n\u00a0\3\u00a0\3\u00a0\3\u00a0\5\u00a0\u0ec7\n"+
		"\u00a0\5\u00a0\u0ec9\n\u00a0\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3"+
		"\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\5\u00a1\u0ed5\n\u00a1\3\u00a2\3"+
		"\u00a2\3\u00a2\3\u00a2\5\u00a2\u0edb\n\u00a2\3\u00a2\3\u00a2\3\u00a2\3"+
		"\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\7\u00a2\u0ee5\n\u00a2\f\u00a2\16"+
		"\u00a2\u0ee8\13\u00a2\5\u00a2\u0eea\n\u00a2\3\u00a2\3\u00a2\3\u00a2\5"+
		"\u00a2\u0eef\n\u00a2\5\u00a2\u0ef1\n\u00a2\3\u00a3\3\u00a3\3\u00a3\3\u00a3"+
		"\3\u00a3\3\u00a3\3\u00a3\3\u00a3\5\u00a3\u0efb\n\u00a3\3\u00a3\3\u00a3"+
		"\3\u00a3\5\u00a3\u0f00\n\u00a3\5\u00a3\u0f02\n\u00a3\3\u00a3\3\u00a3\5"+
		"\u00a3\u0f06\n\u00a3\3\u00a4\3\u00a4\3\u00a4\3\u00a4\5\u00a4\u0f0c\n\u00a4"+
		"\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4"+
		"\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\5\u00a4\u0f1e"+
		"\n\u00a4\5\u00a4\u0f20\n\u00a4\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5"+
		"\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a6\3\u00a6\3\u00a6\3\u00a6\5\u00a6"+
		"\u0f2f\n\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6"+
		"\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6"+
		"\5\u00a6\u0f41\n\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6"+
		"\5\u00a6\u0f49\n\u00a6\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7"+
		"\3\u00a7\3\u00a7\5\u00a7\u0f53\n\u00a7\3\u00a8\3\u00a8\3\u00a8\3\u00a8"+
		"\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8"+
		"\3\u00a8\5\u00a8\u0f63\n\u00a8\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9"+
		"\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00aa\3\u00aa"+
		"\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\5\u00aa\u0f78\n\u00aa\3\u00ab"+
		"\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\5\u00ab"+
		"\u0f83\n\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\5\u00ab\u0f89\n\u00ab\3"+
		"\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\5\u00ac\u0f92\n"+
		"\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\5\u00ac"+
		"\u0f9b\n\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\5\u00ac\u0fa1\n\u00ac\3"+
		"\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u0faa\n"+
		"\u00ad\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u0faf\n\u00ad\3\u00ad\5\u00ad\u0fb2"+
		"\n\u00ad\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u0fb7\n\u00ad\3\u00ad\5\u00ad"+
		"\u0fba\n\u00ad\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u0fbf\n\u00ad\3\u00ad\5"+
		"\u00ad\u0fc2\n\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\5"+
		"\u00ad\u0fca\n\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u0fd0\n\u00ad"+
		"\6\u00ad\u0fd2\n\u00ad\r\u00ad\16\u00ad\u0fd3\3\u00ad\3\u00ad\3\u00ad"+
		"\3\u00ad\3\u00ad\5\u00ad\u0fdb\n\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad"+
		"\5\u00ad\u0fe1\n\u00ad\6\u00ad\u0fe3\n\u00ad\r\u00ad\16\u00ad\u0fe4\3"+
		"\u00ad\5\u00ad\u0fe8\n\u00ad\5\u00ad\u0fea\n\u00ad\3\u00ad\5\u00ad\u0fed"+
		"\n\u00ad\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u0ff2\n\u00ad\3\u00ad\5\u00ad"+
		"\u0ff5\n\u00ad\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u0ffa\n\u00ad\3\u00ad\5"+
		"\u00ad\u0ffd\n\u00ad\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u1002\n\u00ad\3\u00ad"+
		"\5\u00ad\u1005\n\u00ad\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u100a\n\u00ad\3"+
		"\u00ad\5\u00ad\u100d\n\u00ad\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3"+
		"\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\5\u00ae"+
		"\u101c\n\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae"+
		"\3\u00ae\3\u00ae\5\u00ae\u1027\n\u00ae\3\u00af\3\u00af\3\u00af\3\u00af"+
		"\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\5\u00af\u1033\n\u00af"+
		"\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\5\u00b0\u103a\n\u00b0\3\u00b1"+
		"\3\u00b1\3\u00b1\3\u00b1\3\u00b1\5\u00b1\u1041\n\u00b1\3\u00b1\3\u00b1"+
		"\5\u00b1\u1045\n\u00b1\3\u00b1\3\u00b1\3\u00b1\5\u00b1\u104a\n\u00b1\3"+
		"\u00b1\5\u00b1\u104d\n\u00b1\3\u00b1\3\u00b1\3\u00b1\5\u00b1\u1052\n\u00b1"+
		"\3\u00b1\5\u00b1\u1055\n\u00b1\3\u00b1\3\u00b1\3\u00b1\5\u00b1\u105a\n"+
		"\u00b1\3\u00b1\5\u00b1\u105d\n\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3"+
		"\u00b1\3\u00b1\3\u00b1\5\u00b1\u1066\n\u00b1\3\u00b2\3\u00b2\3\u00b2\3"+
		"\u00b2\3\u00b2\5\u00b2\u106d\n\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3"+
		"\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3"+
		"\5\u00b3\u107c\n\u00b3\3\u00b3\3\u00b3\5\u00b3\u1080\n\u00b3\3\u00b3\3"+
		"\u00b3\3\u00b3\5\u00b3\u1085\n\u00b3\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3"+
		"\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u1090\n\u00b4\3\u00b4\3"+
		"\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u109a\n"+
		"\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4"+
		"\3\u00b4\3\u00b4\5\u00b4\u10a6\n\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4"+
		"\7\u00b4\u10ac\n\u00b4\f\u00b4\16\u00b4\u10af\13\u00b4\3\u00b5\3\u00b5"+
		"\3\u00b5\3\u00b5\3\u00b5\5\u00b5\u10b6\n\u00b5\3\u00b6\3\u00b6\3\u00b6"+
		"\3\u00b6\3\u00b6\3\u00b6\3\u00b6\5\u00b6\u10bf\n\u00b6\3\u00b6\3\u00b6"+
		"\3\u00b6\5\u00b6\u10c4\n\u00b6\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7"+
		"\3\u00b7\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u10cf\n\u00b7\3\u00b7\5\u00b7"+
		"\u10d2\n\u00b7\3\u00b7\3\u00b7\5\u00b7\u10d6\n\u00b7\3\u00b8\3\u00b8\3"+
		"\u00b8\3\u00b8\3\u00b8\3\u00b8\5\u00b8\u10de\n\u00b8\3\u00b8\3\u00b8\5"+
		"\u00b8\u10e2\n\u00b8\3\u00b8\3\u00b8\5\u00b8\u10e6\n\u00b8\3\u00b8\3\u00b8"+
		"\3\u00b8\3\u00b8\3\u00b8\3\u00b8\5\u00b8\u10ee\n\u00b8\3\u00b8\6\u00b8"+
		"\u10f1\n\u00b8\r\u00b8\16\u00b8\u10f2\3\u00b8\3\u00b8\3\u00b8\3\u00b8"+
		"\3\u00b8\3\u00b8\5\u00b8\u10fb\n\u00b8\3\u00b8\3\u00b8\3\u00b8\5\u00b8"+
		"\u1100\n\u00b8\3\u00b8\3\u00b8\7\u00b8\u1104\n\u00b8\f\u00b8\16\u00b8"+
		"\u1107\13\u00b8\6\u00b8\u1109\n\u00b8\r\u00b8\16\u00b8\u110a\3\u00b8\3"+
		"\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\5\u00b8\u1114\n\u00b8\3"+
		"\u00b8\5\u00b8\u1117\n\u00b8\3\u00b8\3\u00b8\3\u00b8\5\u00b8\u111c\n\u00b8"+
		"\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\5\u00b9\u1123\n\u00b9\3\u00b9"+
		"\3\u00b9\3\u00b9\3\u00b9\5\u00b9\u1129\n\u00b9\5\u00b9\u112b\n\u00b9\3"+
		"\u00b9\3\u00b9\3\u00b9\5\u00b9\u1130\n\u00b9\3\u00b9\3\u00b9\3\u00b9\3"+
		"\u00b9\5\u00b9\u1136\n\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\5\u00b9\u113c"+
		"\n\u00b9\3\u00b9\3\u00b9\3\u00b9\5\u00b9\u1141\n\u00b9\3\u00b9\3\u00b9"+
		"\3\u00b9\3\u00b9\5\u00b9\u1147\n\u00b9\3\u00ba\3\u00ba\3\u00ba\3\u00ba"+
		"\3\u00ba\5\u00ba\u114e\n\u00ba\3\u00ba\3\u00ba\3\u00ba\5\u00ba\u1153\n"+
		"\u00ba\3\u00ba\3\u00ba\3\u00ba\5\u00ba\u1158\n\u00ba\3\u00ba\3\u00ba\3"+
		"\u00ba\5\u00ba\u115d\n\u00ba\3\u00ba\5\u00ba\u1160\n\u00ba\3\u00ba\3\u00ba"+
		"\5\u00ba\u1164\n\u00ba\3\u00ba\3\u00ba\5\u00ba\u1168\n\u00ba\3\u00ba\3"+
		"\u00ba\5\u00ba\u116c\n\u00ba\3\u00ba\3\u00ba\5\u00ba\u1170\n\u00ba\3\u00ba"+
		"\3\u00ba\3\u00ba\5\u00ba\u1175\n\u00ba\3\u00ba\3\u00ba\5\u00ba\u1179\n"+
		"\u00ba\3\u00ba\3\u00ba\5\u00ba\u117d\n\u00ba\3\u00bb\3\u00bb\3\u00bb\3"+
		"\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u1187\n\u00bb\3\u00bb\3"+
		"\u00bb\3\u00bb\3\u00bb\5\u00bb\u118d\n\u00bb\3\u00bb\3\u00bb\3\u00bb\3"+
		"\u00bb\3\u00bb\5\u00bb\u1194\n\u00bb\3\u00bb\5\u00bb\u1197\n\u00bb\3\u00bb"+
		"\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u119d\n\u00bb\3\u00bb\3\u00bb\3\u00bb"+
		"\3\u00bb\5\u00bb\u11a3\n\u00bb\3\u00bb\3\u00bb\3\u00bb\7\u00bb\u11a8\n"+
		"\u00bb\f\u00bb\16\u00bb\u11ab\13\u00bb\3\u00bb\3\u00bb\3\u00bb\5\u00bb"+
		"\u11b0\n\u00bb\5\u00bb\u11b2\n\u00bb\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u11b7"+
		"\n\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u11bd\n\u00bb\3\u00bb"+
		"\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u11c3\n\u00bb\3\u00bb\3\u00bb\3\u00bb"+
		"\7\u00bb\u11c8\n\u00bb\f\u00bb\16\u00bb\u11cb\13\u00bb\3\u00bb\5\u00bb"+
		"\u11ce\n\u00bb\3\u00bb\3\u00bb\5\u00bb\u11d2\n\u00bb\3\u00bb\5\u00bb\u11d5"+
		"\n\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb"+
		"\3\u00bb\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u11e3\n\u00bb\3\u00bb\3\u00bb"+
		"\3\u00bb\5\u00bb\u11e8\n\u00bb\3\u00bb\3\u00bb\5\u00bb\u11ec\n\u00bb\3"+
		"\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb"+
		"\3\u00bb\3\u00bb\5\u00bb\u11f9\n\u00bb\3\u00bb\5\u00bb\u11fc\n\u00bb\5"+
		"\u00bb\u11fe\n\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\5"+
		"\u00bb\u1206\n\u00bb\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3"+
		"\u00bc\3\u00bc\5\u00bc\u1210\n\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\5"+
		"\u00bc\u1216\n\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u121d"+
		"\n\u00bc\3\u00bc\5\u00bc\u1220\n\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc"+
		"\5\u00bc\u1226\n\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u122c\n"+
		"\u00bc\3\u00bc\3\u00bc\3\u00bc\7\u00bc\u1231\n\u00bc\f\u00bc\16\u00bc"+
		"\u1234\13\u00bc\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u1239\n\u00bc\5\u00bc"+
		"\u123b\n\u00bc\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u1240\n\u00bc\3\u00bc\3"+
		"\u00bc\3\u00bc\3\u00bc\5\u00bc\u1246\n\u00bc\3\u00bc\3\u00bc\3\u00bc\3"+
		"\u00bc\5\u00bc\u124c\n\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u1252"+
		"\n\u00bc\3\u00bc\3\u00bc\3\u00bc\7\u00bc\u1257\n\u00bc\f\u00bc\16\u00bc"+
		"\u125a\13\u00bc\3\u00bc\5\u00bc\u125d\n\u00bc\3\u00bc\3\u00bc\5\u00bc"+
		"\u1261\n\u00bc\3\u00bc\5\u00bc\u1264\n\u00bc\3\u00bc\3\u00bc\3\u00bc\3"+
		"\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc"+
		"\5\u00bc\u1272\n\u00bc\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u1277\n\u00bc\3"+
		"\u00bc\3\u00bc\5\u00bc\u127b\n\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3"+
		"\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u1288\n"+
		"\u00bc\3\u00bc\5\u00bc\u128b\n\u00bc\5\u00bc\u128d\n\u00bc\3\u00bc\3\u00bc"+
		"\3\u00bc\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u1295\n\u00bc\3\u00bd\3\u00bd"+
		"\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\5\u00bd\u12a0"+
		"\n\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\7\u00bd\u12a7\n\u00bd"+
		"\f\u00bd\16\u00bd\u12aa\13\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd"+
		"\3\u00bd\5\u00bd\u12b2\n\u00bd\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be"+
		"\3\u00be\3\u00be\3\u00be\3\u00be\5\u00be\u12bd\n\u00be\3\u00be\3\u00be"+
		"\3\u00be\3\u00be\3\u00be\7\u00be\u12c4\n\u00be\f\u00be\16\u00be\u12c7"+
		"\13\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\5\u00be\u12cf"+
		"\n\u00be\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf"+
		"\3\u00bf\3\u00bf\5\u00bf\u12db\n\u00bf\3\u00bf\3\u00bf\5\u00bf\u12df\n"+
		"\u00bf\3\u00bf\3\u00bf\3\u00bf\6\u00bf\u12e4\n\u00bf\r\u00bf\16\u00bf"+
		"\u12e5\5\u00bf\u12e8\n\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u12ed\n\u00bf"+
		"\3\u00bf\3\u00bf\5\u00bf\u12f1\n\u00bf\3\u00bf\3\u00bf\3\u00bf\6\u00bf"+
		"\u12f6\n\u00bf\r\u00bf\16\u00bf\u12f7\5\u00bf\u12fa\n\u00bf\3\u00bf\3"+
		"\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf"+
		"\3\u00bf\3\u00bf\5\u00bf\u1308\n\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf"+
		"\u130d\n\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf"+
		"\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf"+
		"\3\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u1323\n\u00bf\3\u00bf\3\u00bf"+
		"\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf"+
		"\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf"+
		"\5\u00bf\u1339\n\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u133e\n\u00bf\3"+
		"\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0"+
		"\3\u00c0\3\u00c0\5\u00c0\u134b\n\u00c0\3\u00c1\3\u00c1\3\u00c1\3\u00c1"+
		"\3\u00c1\3\u00c1\5\u00c1\u1353\n\u00c1\3\u00c2\3\u00c2\3\u00c2\3\u00c2"+
		"\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3"+
		"\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\5\u00c3\u1367\n\u00c3\3\u00c3"+
		"\5\u00c3\u136a\n\u00c3\3\u00c3\3\u00c3\7\u00c3\u136e\n\u00c3\f\u00c3\16"+
		"\u00c3\u1371\13\u00c3\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\5\u00c4"+
		"\u1378\n\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\5\u00c4\u137f\n"+
		"\u00c4\3\u00c4\3\u00c4\3\u00c4\5\u00c4\u1384\n\u00c4\3\u00c4\3\u00c4\5"+
		"\u00c4\u1388\n\u00c4\6\u00c4\u138a\n\u00c4\r\u00c4\16\u00c4\u138b\3\u00c4"+
		"\5\u00c4\u138f\n\u00c4\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\5\u00c5"+
		"\u1396\n\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5"+
		"\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5"+
		"\5\u00c5\u13a8\n\u00c5\5\u00c5\u13aa\n\u00c5\3\u00c6\3\u00c6\3\u00c6\3"+
		"\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6"+
		"\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\5\u00c6\u13be\n\u00c6"+
		"\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u13c6\n\u00c7"+
		"\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u13cb\n\u00c7\3\u00c7\3\u00c7\3\u00c7"+
		"\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7"+
		"\3\u00c7\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u13dd\n\u00c7\3\u00c7\3\u00c7"+
		"\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7"+
		"\3\u00c7\3\u00c7\5\u00c7\u13ec\n\u00c7\5\u00c7\u13ee\n\u00c7\3\u00c8\3"+
		"\u00c8\3\u00c8\3\u00c8\3\u00c8\5\u00c8\u13f5\n\u00c8\3\u00c8\3\u00c8\3"+
		"\u00c8\3\u00c8\3\u00c8\5\u00c8\u13fc\n\u00c8\3\u00c8\3\u00c8\3\u00c8\5"+
		"\u00c8\u1401\n\u00c8\3\u00c8\3\u00c8\3\u00c8\5\u00c8\u1406\n\u00c8\3\u00c8"+
		"\3\u00c8\3\u00c8\3\u00c8\5\u00c8\u140c\n\u00c8\3\u00c8\3\u00c8\3\u00c8"+
		"\5\u00c8\u1411\n\u00c8\5\u00c8\u1413\n\u00c8\3\u00c9\3\u00c9\3\u00c9\3"+
		"\u00c9\3\u00c9\5\u00c9\u141a\n\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\5"+
		"\u00c9\u1420\n\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\5\u00c9\u1426\n\u00c9"+
		"\3\u00c9\5\u00c9\u1429\n\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\5\u00c9"+
		"\u142f\n\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\6\u00c9"+
		"\u1437\n\u00c9\r\u00c9\16\u00c9\u1438\3\u00c9\5\u00c9\u143c\n\u00c9\3"+
		"\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\5\u00c9\u1443\n\u00c9\3\u00c9\5"+
		"\u00c9\u1446\n\u00c9\3\u00c9\3\u00c9\3\u00c9\6\u00c9\u144b\n\u00c9\r\u00c9"+
		"\16\u00c9\u144c\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca"+
		"\u1455\n\u00ca\3\u00ca\3\u00ca\5\u00ca\u1459\n\u00ca\3\u00ca\3\u00ca\3"+
		"\u00ca\3\u00ca\5\u00ca\u145f\n\u00ca\3\u00ca\3\u00ca\3\u00ca\7\u00ca\u1464"+
		"\n\u00ca\f\u00ca\16\u00ca\u1467\13\u00ca\5\u00ca\u1469\n\u00ca\3\u00ca"+
		"\3\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u1470\n\u00ca\3\u00ca\3\u00ca"+
		"\3\u00ca\3\u00ca\5\u00ca\u1476\n\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca"+
		"\3\u00ca\5\u00ca\u147d\n\u00ca\3\u00ca\5\u00ca\u1480\n\u00ca\3\u00ca\3"+
		"\u00ca\3\u00ca\3\u00ca\5\u00ca\u1486\n\u00ca\3\u00ca\3\u00ca\3\u00ca\7"+
		"\u00ca\u148b\n\u00ca\f\u00ca\16\u00ca\u148e\13\u00ca\5\u00ca\u1490\n\u00ca"+
		"\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u1498\n\u00ca"+
		"\3\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u149e\n\u00ca\3\u00ca\3\u00ca"+
		"\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u14a5\n\u00ca\3\u00ca\5\u00ca\u14a8\n"+
		"\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u14ae\n\u00ca\3\u00ca\3"+
		"\u00ca\3\u00ca\7\u00ca\u14b3\n\u00ca\f\u00ca\16\u00ca\u14b6\13\u00ca\3"+
		"\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u14bd\n\u00ca\3\u00ca\3"+
		"\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u14c5\n\u00ca\3\u00ca\3"+
		"\u00ca\3\u00ca\3\u00ca\5\u00ca\u14cb\n\u00ca\3\u00ca\3\u00ca\3\u00ca\7"+
		"\u00ca\u14d0\n\u00ca\f\u00ca\16\u00ca\u14d3\13\u00ca\3\u00ca\3\u00ca\3"+
		"\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u14dc\n\u00ca\3\u00ca\3"+
		"\u00ca\3\u00ca\5\u00ca\u14e1\n\u00ca\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3"+
		"\u00cb\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u14eb\n\u00cb\3\u00cb\3\u00cb\3"+
		"\u00cb\3\u00cb\5\u00cb\u14f1\n\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3"+
		"\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u14fd\n\u00cb\5"+
		"\u00cb\u14ff\n\u00cb\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u1506"+
		"\n\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u150c\n\u00cc\3\u00cc"+
		"\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u1512\n\u00cc\3\u00cc\3\u00cc\3\u00cc"+
		"\3\u00cc\5\u00cc\u1518\n\u00cc\3\u00cc\3\u00cc\3\u00cc\6\u00cc\u151d\n"+
		"\u00cc\r\u00cc\16\u00cc\u151e\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd"+
		"\5\u00cd\u1526\n\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd"+
		"\5\u00cd\u152e\n\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\5\u00cd\u1534\n"+
		"\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd"+
		"\3\u00cd\3\u00cd\3\u00cd\3\u00cd\6\u00cd\u1542\n\u00cd\r\u00cd\16\u00cd"+
		"\u1543\3\u00cd\5\u00cd\u1547\n\u00cd\3\u00cd\3\u00cd\3\u00cd\5\u00cd\u154c"+
		"\n\u00cd\5\u00cd\u154e\n\u00cd\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce"+
		"\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u155a\n\u00ce\3\u00ce"+
		"\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u1560\n\u00ce\3\u00ce\3\u00ce\3\u00ce"+
		"\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce"+
		"\6\u00ce\u156e\n\u00ce\r\u00ce\16\u00ce\u156f\3\u00ce\5\u00ce\u1573\n"+
		"\u00ce\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u1578\n\u00ce\3\u00ce\5\u00ce\u157b"+
		"\n\u00ce\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u1580\n\u00ce\5\u00ce\u1582\n"+
		"\u00ce\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\5\u00cf"+
		"\u158b\n\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\5\u00cf\u1592\n"+
		"\u00cf\3\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u1598\n\u00d0\3\u00d0\5"+
		"\u00d0\u159b\n\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u15a0\n\u00d0\3\u00d1"+
		"\3\u00d1\3\u00d1\3\u00d1\3\u00d1\5\u00d1\u15a7\n\u00d1\5\u00d1\u15a9\n"+
		"\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\5\u00d1\u15af\n\u00d1\5\u00d1\u15b1"+
		"\n\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\5\u00d1\u15b9"+
		"\n\u00d1\5\u00d1\u15bb\n\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\5\u00d1"+
		"\u15c1\n\u00d1\5\u00d1\u15c3\n\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\5"+
		"\u00d1\u15c9\n\u00d1\5\u00d1\u15cb\n\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1"+
		"\3\u00d1\5\u00d1\u15d2\n\u00d1\3\u00d1\5\u00d1\u15d5\n\u00d1\5\u00d1\u15d7"+
		"\n\u00d1\3\u00d1\5\u00d1\u15da\n\u00d1\3\u00d1\3\u00d1\5\u00d1\u15de\n"+
		"\u00d1\5\u00d1\u15e0\n\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3"+
		"\u00d1\3\u00d1\5\u00d1\u15e9\n\u00d1\3\u00d2\3\u00d2\3\u00d2\3\u00d2\5"+
		"\u00d2\u15ef\n\u00d2\3\u00d2\3\u00d2\5\u00d2\u15f3\n\u00d2\3\u00d3\3\u00d3"+
		"\3\u00d3\3\u00d3\3\u00d3\3\u00d3\5\u00d3\u15fb\n\u00d3\3\u00d3\3\u00d3"+
		"\3\u00d3\3\u00d3\3\u00d3\5\u00d3\u1602\n\u00d3\3\u00d3\3\u00d3\3\u00d3"+
		"\3\u00d3\5\u00d3\u1608\n\u00d3\5\u00d3\u160a\n\u00d3\3\u00d4\3\u00d4\3"+
		"\u00d4\3\u00d4\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\5\u00d5\u1615\n"+
		"\u00d5\3\u00d5\3\u00d5\3\u00d5\5\u00d5\u161a\n\u00d5\3\u00d5\3\u00d5\3"+
		"\u00d5\3\u00d5\5\u00d5\u1620\n\u00d5\6\u00d5\u1622\n\u00d5\r\u00d5\16"+
		"\u00d5\u1623\3\u00d5\3\u00d5\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3"+
		"\u00d6\5\u00d6\u162e\n\u00d6\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3"+
		"\u00d7\5\u00d7\u1636\n\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3"+
		"\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\5\u00d7\u1642\n\u00d7\3\u00d8\5"+
		"\u00d8\u1645\n\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\5"+
		"\u00d8\u164d\n\u00d8\5\u00d8\u164f\n\u00d8\3\u00d8\5\u00d8\u1652\n\u00d8"+
		"\3\u00d8\3\u00d8\5\u00d8\u1656\n\u00d8\3\u00d8\5\u00d8\u1659\n\u00d8\3"+
		"\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\5\u00d8"+
		"\u1663\n\u00d8\3\u00d8\3\u00d8\7\u00d8\u1667\n\u00d8\f\u00d8\16\u00d8"+
		"\u166a\13\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\5\u00d8\u1671"+
		"\n\u00d8\3\u00d8\3\u00d8\5\u00d8\u1675\n\u00d8\3\u00d8\3\u00d8\5\u00d8"+
		"\u1679\n\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8"+
		"\5\u00d8\u1682\n\u00d8\3\u00d8\3\u00d8\7\u00d8\u1686\n\u00d8\f\u00d8\16"+
		"\u00d8\u1689\13\u00d8\3\u00d8\5\u00d8\u168c\n\u00d8\3\u00d8\5\u00d8\u168f"+
		"\n\u00d8\3\u00d8\3\u00d8\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\7\u00d9"+
		"\u1698\n\u00d9\f\u00d9\16\u00d9\u169b\13\u00d9\3\u00d9\5\u00d9\u169e\n"+
		"\u00d9\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\5\u00da\u16a5\n\u00da\3"+
		"\u00da\3\u00da\3\u00da\5\u00da\u16aa\n\u00da\3\u00db\5\u00db\u16ad\n\u00db"+
		"\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db\5\u00db\u16b5\n\u00db"+
		"\3\u00db\3\u00db\5\u00db\u16b9\n\u00db\3\u00db\5\u00db\u16bc\n\u00db\3"+
		"\u00db\3\u00db\5\u00db\u16c0\n\u00db\3\u00db\5\u00db\u16c3\n\u00db\3\u00db"+
		"\3\u00db\5\u00db\u16c7\n\u00db\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db"+
		"\5\u00db\u16ce\n\u00db\3\u00db\3\u00db\5\u00db\u16d2\n\u00db\5\u00db\u16d4"+
		"\n\u00db\5\u00db\u16d6\n\u00db\3\u00db\5\u00db\u16d9\n\u00db\3\u00db\5"+
		"\u00db\u16dc\n\u00db\3\u00db\5\u00db\u16df\n\u00db\3\u00dc\3\u00dc\3\u00dc"+
		"\3\u00dc\5\u00dc\u16e5\n\u00dc\3\u00dd\5\u00dd\u16e8\n\u00dd\3\u00dd\3"+
		"\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\5\u00dd\u16f0\n\u00dd\5\u00dd\u16f2"+
		"\n\u00dd\3\u00dd\5\u00dd\u16f5\n\u00dd\3\u00dd\3\u00dd\5\u00dd\u16f9\n"+
		"\u00dd\3\u00dd\5\u00dd\u16fc\n\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\5"+
		"\u00dd\u1702\n\u00dd\3\u00dd\5\u00dd\u1705\n\u00dd\3\u00dd\3\u00dd\5\u00dd"+
		"\u1709\n\u00dd\3\u00dd\5\u00dd\u170c\n\u00dd\3\u00dd\5\u00dd\u170f\n\u00dd"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\5\u00de\u1716\n\u00de\3\u00df"+
		"\5\u00df\u1719\n\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\5\u00df"+
		"\u1720\n\u00df\3\u00df\3\u00df\3\u00df\3\u00df\5\u00df\u1726\n\u00df\7"+
		"\u00df\u1728\n\u00df\f\u00df\16\u00df\u172b\13\u00df\3\u00df\3\u00df\3"+
		"\u00df\3\u00df\3\u00df\3\u00df\3\u00df\5\u00df\u1734\n\u00df\3\u00df\5"+
		"\u00df\u1737\n\u00df\3\u00e0\5\u00e0\u173a\n\u00e0\3\u00e0\3\u00e0\5\u00e0"+
		"\u173e\n\u00e0\3\u00e0\5\u00e0\u1741\n\u00e0\3\u00e0\5\u00e0\u1744\n\u00e0"+
		"\3\u00e0\5\u00e0\u1747\n\u00e0\3\u00e1\3\u00e1\5\u00e1\u174b\n\u00e1\3"+
		"\u00e2\5\u00e2\u174e\n\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3"+
		"\u00e2\5\u00e2\u1756\n\u00e2\5\u00e2\u1758\n\u00e2\3\u00e2\3\u00e2\5\u00e2"+
		"\u175c\n\u00e2\3\u00e2\5\u00e2\u175f\n\u00e2\3\u00e2\3\u00e2\3\u00e2\3"+
		"\u00e2\7\u00e2\u1765\n\u00e2\f\u00e2\16\u00e2\u1768\13\u00e2\3\u00e2\5"+
		"\u00e2\u176b\n\u00e2\3\u00e2\3\u00e2\5\u00e2\u176f\n\u00e2\3\u00e2\3\u00e2"+
		"\3\u00e2\3\u00e2\3\u00e2\5\u00e2\u1776\n\u00e2\3\u00e2\3\u00e2\5\u00e2"+
		"\u177a\n\u00e2\5\u00e2\u177c\n\u00e2\5\u00e2\u177e\n\u00e2\3\u00e2\5\u00e2"+
		"\u1781\n\u00e2\3\u00e2\5\u00e2\u1784\n\u00e2\3\u00e2\5\u00e2\u1787\n\u00e2"+
		"\3\u00e3\3\u00e3\3\u00e3\3\u00e3\7\u00e3\u178d\n\u00e3\f\u00e3\16\u00e3"+
		"\u1790\13\u00e3\3\u00e3\3\u00e3\3\u00e3\5\u00e3\u1795\n\u00e3\3\u00e3"+
		"\3\u00e3\3\u00e3\3\u00e3\5\u00e3\u179b\n\u00e3\5\u00e3\u179d\n\u00e3\3"+
		"\u00e4\3\u00e4\5\u00e4\u17a1\n\u00e4\3\u00e4\5\u00e4\u17a4\n\u00e4\3\u00e5"+
		"\3\u00e5\3\u00e5\5\u00e5\u17a9\n\u00e5\3\u00e5\3\u00e5\3\u00e5\5\u00e5"+
		"\u17ae\n\u00e5\3\u00e5\5\u00e5\u17b1\n\u00e5\3\u00e6\3\u00e6\3\u00e6\3"+
		"\u00e6\3\u00e6\3\u00e6\5\u00e6\u17b9\n\u00e6\3\u00e6\3\u00e6\5\u00e6\u17bd"+
		"\n\u00e6\3\u00e6\3\u00e6\3\u00e6\7\u00e6\u17c2\n\u00e6\f\u00e6\16\u00e6"+
		"\u17c5\13\u00e6\5\u00e6\u17c7\n\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6"+
		"\3\u00e6\7\u00e6\u17ce\n\u00e6\f\u00e6\16\u00e6\u17d1\13\u00e6\5\u00e6"+
		"\u17d3\n\u00e6\3\u00e6\3\u00e6\5\u00e6\u17d7\n\u00e6\3\u00e6\3\u00e6\3"+
		"\u00e6\3\u00e6\7\u00e6\u17dd\n\u00e6\f\u00e6\16\u00e6\u17e0\13\u00e6\5"+
		"\u00e6\u17e2\n\u00e6\3\u00e7\3\u00e7\5\u00e7\u17e6\n\u00e7\3\u00e7\5\u00e7"+
		"\u17e9\n\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7"+
		"\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\5\u00e7\u17f7\n\u00e7\3\u00e7"+
		"\3\u00e7\5\u00e7\u17fb\n\u00e7\3\u00e7\5\u00e7\u17fe\n\u00e7\3\u00e7\3"+
		"\u00e7\5\u00e7\u1802\n\u00e7\3\u00e7\5\u00e7\u1805\n\u00e7\3\u00e8\3\u00e8"+
		"\3\u00e8\5\u00e8\u180a\n\u00e8\3\u00e8\5\u00e8\u180d\n\u00e8\3\u00e8\3"+
		"\u00e8\3\u00e8\3\u00e8\5\u00e8\u1813\n\u00e8\3\u00e8\5\u00e8\u1816\n\u00e8"+
		"\3\u00e8\3\u00e8\3\u00e8\7\u00e8\u181b\n\u00e8\f\u00e8\16\u00e8\u181e"+
		"\13\u00e8\3\u00e8\5\u00e8\u1821\n\u00e8\5\u00e8\u1823\n\u00e8\3\u00e8"+
		"\3\u00e8\3\u00e8\3\u00e8\7\u00e8\u1829\n\u00e8\f\u00e8\16\u00e8\u182c"+
		"\13\u00e8\5\u00e8\u182e\n\u00e8\3\u00e8\3\u00e8\5\u00e8\u1832\n\u00e8"+
		"\3\u00e8\3\u00e8\3\u00e8\3\u00e9\3\u00e9\5\u00e9\u1839\n\u00e9\3\u00ea"+
		"\3\u00ea\3\u00ea\5\u00ea\u183e\n\u00ea\3\u00ea\5\u00ea\u1841\n\u00ea\3"+
		"\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\7\u00ea"+
		"\u184b\n\u00ea\f\u00ea\16\u00ea\u184e\13\u00ea\5\u00ea\u1850\n\u00ea\3"+
		"\u00ea\3\u00ea\3\u00ea\3\u00ea\5\u00ea\u1856\n\u00ea\3\u00ea\3\u00ea\3"+
		"\u00ea\7\u00ea\u185b\n\u00ea\f\u00ea\16\u00ea\u185e\13\u00ea\3\u00ea\3"+
		"\u00ea\5\u00ea\u1862\n\u00ea\3\u00ea\3\u00ea\3\u00ea\5\u00ea\u1867\n\u00ea"+
		"\3\u00ea\3\u00ea\3\u00ea\3\u00eb\3\u00eb\5\u00eb\u186e\n\u00eb\3\u00ec"+
		"\3\u00ec\3\u00ed\3\u00ed\3\u00ed\5\u00ed\u1875\n\u00ed\3\u00ed\5\u00ed"+
		"\u1878\n\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\5\u00ed"+
		"\u1880\n\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\7\u00ed\u1886\n\u00ed\f"+
		"\u00ed\16\u00ed\u1889\13\u00ed\5\u00ed\u188b\n\u00ed\3\u00ed\3\u00ed\3"+
		"\u00ed\3\u00ed\7\u00ed\u1891\n\u00ed\f\u00ed\16\u00ed\u1894\13\u00ed\3"+
		"\u00ed\3\u00ed\3\u00ed\3\u00ee\3\u00ee\3\u00ef\3\u00ef\3\u00ef\5\u00ef"+
		"\u189e\n\u00ef\3\u00ef\5\u00ef\u18a1\n\u00ef\3\u00ef\3\u00ef\3\u00ef\3"+
		"\u00ef\3\u00ef\3\u00ef\7\u00ef\u18a9\n\u00ef\f\u00ef\16\u00ef\u18ac\13"+
		"\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef\5\u00ef\u18b2\n\u00ef\3\u00ef\3"+
		"\u00ef\3\u00ef\5\u00ef\u18b7\n\u00ef\3\u00ef\5\u00ef\u18ba\n\u00ef\3\u00f0"+
		"\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\7\u00f0\u18c2\n\u00f0\f\u00f0"+
		"\16\u00f0\u18c5\13\u00f0\5\u00f0\u18c7\n\u00f0\3\u00f0\5\u00f0\u18ca\n"+
		"\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\5\u00f0\u18d2\n"+
		"\u00f0\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\7\u00f1"+
		"\u18db\n\u00f1\f\u00f1\16\u00f1\u18de\13\u00f1\5\u00f1\u18e0\n\u00f1\3"+
		"\u00f1\5\u00f1\u18e3\n\u00f1\3\u00f1\3\u00f1\7\u00f1\u18e7\n\u00f1\f\u00f1"+
		"\16\u00f1\u18ea\13\u00f1\3\u00f1\3\u00f1\5\u00f1\u18ee\n\u00f1\3\u00f1"+
		"\3\u00f1\5\u00f1\u18f2\n\u00f1\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2"+
		"\3\u00f2\7\u00f2\u18fa\n\u00f2\f\u00f2\16\u00f2\u18fd\13\u00f2\5\u00f2"+
		"\u18ff\n\u00f2\3\u00f2\5\u00f2\u1902\n\u00f2\3\u00f2\3\u00f2\7\u00f2\u1906"+
		"\n\u00f2\f\u00f2\16\u00f2\u1909\13\u00f2\3\u00f2\3\u00f2\3\u00f2\5\u00f2"+
		"\u190e\n\u00f2\3\u00f2\3\u00f2\3\u00f3\3\u00f3\3\u00f3\3\u00f3\5\u00f3"+
		"\u1916\n\u00f3\3\u00f3\5\u00f3\u1919\n\u00f3\3\u00f3\3\u00f3\5\u00f3\u191d"+
		"\n\u00f3\3\u00f3\3\u00f3\5\u00f3\u1921\n\u00f3\3\u00f3\5\u00f3\u1924\n"+
		"\u00f3\3\u00f4\3\u00f4\3\u00f4\5\u00f4\u1929\n\u00f4\3\u00f5\3\u00f5\3"+
		"\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5"+
		"\3\u00f5\5\u00f5\u1937\n\u00f5\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6"+
		"\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6"+
		"\5\u00f6\u1947\n\u00f6\3\u00f6\3\u00f6\5\u00f6\u194b\n\u00f6\3\u00f6\3"+
		"\u00f6\3\u00f6\3\u00f6\5\u00f6\u1951\n\u00f6\5\u00f6\u1953\n\u00f6\3\u00f6"+
		"\5\u00f6\u1956\n\u00f6\3\u00f7\3\u00f7\5\u00f7\u195a\n\u00f7\3\u00f7\3"+
		"\u00f7\3\u00f7\5\u00f7\u195f\n\u00f7\3\u00f7\3\u00f7\3\u00f7\5\u00f7\u1964"+
		"\n\u00f7\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\5\u00f8\u196c"+
		"\n\u00f8\3\u00f8\3\u00f8\3\u00f8\5\u00f8\u1971\n\u00f8\3\u00f8\7\u00f8"+
		"\u1974\n\u00f8\f\u00f8\16\u00f8\u1977\13\u00f8\3\u00f8\3\u00f8\3\u00f8"+
		"\5\u00f8\u197c\n\u00f8\3\u00f8\3\u00f8\3\u00f8\5\u00f8\u1981\n\u00f8\3"+
		"\u00f8\5\u00f8\u1984\n\u00f8\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\7"+
		"\u00f9\u198b\n\u00f9\f\u00f9\16\u00f9\u198e\13\u00f9\3\u00f9\3\u00f9\3"+
		"\u00f9\3\u00f9\3\u00f9\7\u00f9\u1995\n\u00f9\f\u00f9\16\u00f9\u1998\13"+
		"\u00f9\5\u00f9\u199a\n\u00f9\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3"+
		"\u00fa\3\u00fa\5\u00fa\u19a3\n\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\7"+
		"\u00fa\u19a9\n\u00fa\f\u00fa\16\u00fa\u19ac\13\u00fa\5\u00fa\u19ae\n\u00fa"+
		"\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\5\u00fa\u19b5\n\u00fa\3\u00fa"+
		"\5\u00fa\u19b8\n\u00fa\3\u00fb\3\u00fb\3\u00fc\3\u00fc\3\u00fc\3\u00fc"+
		"\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc"+
		"\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc"+
		"\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc"+
		"\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc"+
		"\3\u00fc\3\u00fc\5\u00fc\u19e6\n\u00fc\3\u00fc\3\u00fc\5\u00fc\u19ea\n"+
		"\u00fc\3\u00fc\5\u00fc\u19ed\n\u00fc\3\u00fd\3\u00fd\3\u00fd\3\u00fd\5"+
		"\u00fd\u19f3\n\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3"+
		"\u00fd\3\u00fd\3\u00fd\3\u00fd\5\u00fd\u19ff\n\u00fd\5\u00fd\u1a01\n\u00fd"+
		"\3\u00fd\5\u00fd\u1a04\n\u00fd\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe"+
		"\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe"+
		"\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe"+
		"\5\u00fe\u1a1d\n\u00fe\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff"+
		"\3\u00ff\3\u00ff\3\u00ff\5\u00ff\u1a28\n\u00ff\3\u00ff\3\u00ff\3\u00ff"+
		"\3\u00ff\3\u00ff\3\u00ff\5\u00ff\u1a30\n\u00ff\3\u0100\3\u0100\3\u0100"+
		"\3\u0100\3\u0100\3\u0100\3\u0100\7\u0100\u1a39\n\u0100\f\u0100\16\u0100"+
		"\u1a3c\13\u0100\7\u0100\u1a3e\n\u0100\f\u0100\16\u0100\u1a41\13\u0100"+
		"\5\u0100\u1a43\n\u0100\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101"+
		"\5\u0101\u1a4b\n\u0101\3\u0102\3\u0102\3\u0102\3\u0102\3\u0103\3\u0103"+
		"\3\u0103\3\u0103\5\u0103\u1a55\n\u0103\3\u0104\3\u0104\3\u0104\3\u0104"+
		"\3\u0104\5\u0104\u1a5c\n\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104"+
		"\5\u0104\u1a63\n\u0104\5\u0104\u1a65\n\u0104\3\u0104\3\u0104\3\u0104\3"+
		"\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\5\u0104\u1a71\n"+
		"\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104"+
		"\3\u0104\5\u0104\u1a7c\n\u0104\3\u0104\3\u0104\5\u0104\u1a80\n\u0104\3"+
		"\u0104\3\u0104\3\u0104\5\u0104\u1a85\n\u0104\3\u0104\5\u0104\u1a88\n\u0104"+
		"\5\u0104\u1a8a\n\u0104\3\u0104\5\u0104\u1a8d\n\u0104\3\u0104\3\u0104\3"+
		"\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\5\u0104"+
		"\u1a99\n\u0104\5\u0104\u1a9b\n\u0104\5\u0104\u1a9d\n\u0104\3\u0104\5\u0104"+
		"\u1aa0\n\u0104\3\u0104\3\u0104\3\u0104\5\u0104\u1aa5\n\u0104\3\u0104\5"+
		"\u0104\u1aa8\n\u0104\3\u0104\3\u0104\3\u0104\5\u0104\u1aad\n\u0104\3\u0104"+
		"\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\5\u0104\u1ab7"+
		"\n\u0104\3\u0104\3\u0104\5\u0104\u1abb\n\u0104\3\u0104\3\u0104\3\u0104"+
		"\5\u0104\u1ac0\n\u0104\3\u0104\5\u0104\u1ac3\n\u0104\5\u0104\u1ac5\n\u0104"+
		"\3\u0104\5\u0104\u1ac8\n\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104"+
		"\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\5\u0104\u1ad4\n\u0104\5\u0104"+
		"\u1ad6\n\u0104\5\u0104\u1ad8\n\u0104\3\u0104\5\u0104\u1adb\n\u0104\3\u0104"+
		"\3\u0104\3\u0104\3\u0104\5\u0104\u1ae1\n\u0104\3\u0105\3\u0105\3\u0106"+
		"\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106\5\u0106\u1aeb\n\u0106\3\u0107"+
		"\3\u0107\3\u0108\3\u0108\3\u0109\3\u0109\3\u010a\3\u010a\3\u010a\3\u010a"+
		"\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\5\u010a"+
		"\u1aff\n\u010a\3\u010b\3\u010b\3\u010b\3\u010b\5\u010b\u1b05\n\u010b\3"+
		"\u010c\3\u010c\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010e\3\u010e"+
		"\3\u010f\3\u010f\3\u010f\3\u010f\3\u0110\3\u0110\3\u0111\3\u0111\3\u0111"+
		"\3\u0111\3\u0111\3\u0111\3\u0111\3\u0111\5\u0111\u1b1e\n\u0111\5\u0111"+
		"\u1b20\n\u0111\3\u0112\3\u0112\3\u0112\3\u0113\3\u0113\3\u0113\3\u0114"+
		"\3\u0114\3\u0115\3\u0115\3\u0116\3\u0116\3\u0117\3\u0117\3\u0117\3\u0117"+
		"\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\5\u0118"+
		"\u1b3a\n\u0118\3\u0118\3\u0118\3\u0118\3\u0118\5\u0118\u1b40\n\u0118\3"+
		"\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118"+
		"\5\u0118\u1b4b\n\u0118\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119"+
		"\5\u0119\u1b53\n\u0119\3\u0119\5\u0119\u1b56\n\u0119\3\u011a\3\u011a\3"+
		"\u011a\3\u011b\3\u011b\3\u011b\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c"+
		"\3\u011c\5\u011c\u1b64\n\u011c\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d"+
		"\3\u011d\5\u011d\u1b6c\n\u011d\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e"+
		"\5\u011e\u1b73\n\u011e\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f"+
		"\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f"+
		"\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\5\u011f\u1b8a\n\u011f"+
		"\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0121\3\u0121\3\u0121\3\u0121"+
		"\3\u0121\3\u0121\5\u0121\u1b97\n\u0121\3\u0122\3\u0122\3\u0122\3\u0122"+
		"\5\u0122\u1b9d\n\u0122\3\u0122\3\u0122\3\u0122\7\u0122\u1ba2\n\u0122\f"+
		"\u0122\16\u0122\u1ba5\13\u0122\3\u0122\3\u0122\3\u0122\7\u0122\u1baa\n"+
		"\u0122\f\u0122\16\u0122\u1bad\13\u0122\5\u0122\u1baf\n\u0122\3\u0122\5"+
		"\u0122\u1bb2\n\u0122\3\u0123\3\u0123\3\u0123\3\u0123\3\u0124\3\u0124\3"+
		"\u0124\5\u0124\u1bbb\n\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3\u0125\3"+
		"\u0125\3\u0125\3\u0125\5\u0125\u1bc5\n\u0125\3\u0125\3\u0125\3\u0125\7"+
		"\u0125\u1bca\n\u0125\f\u0125\16\u0125\u1bcd\13\u0125\3\u0125\5\u0125\u1bd0"+
		"\n\u0125\3\u0126\3\u0126\5\u0126\u1bd4\n\u0126\3\u0127\3\u0127\3\u0127"+
		"\3\u0127\5\u0127\u1bda\n\u0127\3\u0127\3\u0127\3\u0127\7\u0127\u1bdf\n"+
		"\u0127\f\u0127\16\u0127\u1be2\13\u0127\3\u0127\5\u0127\u1be5\n\u0127\3"+
		"\u0128\3\u0128\3\u0128\3\u0128\5\u0128\u1beb\n\u0128\3\u0128\3\u0128\3"+
		"\u0128\7\u0128\u1bf0\n\u0128\f\u0128\16\u0128\u1bf3\13\u0128\3\u0128\3"+
		"\u0128\3\u0128\3\u0128\5\u0128\u1bf9\n\u0128\3\u0128\5\u0128\u1bfc\n\u0128"+
		"\3\u0129\3\u0129\3\u0129\3\u0129\5\u0129\u1c02\n\u0129\3\u0129\3\u0129"+
		"\3\u0129\7\u0129\u1c07\n\u0129\f\u0129\16\u0129\u1c0a\13\u0129\3\u0129"+
		"\5\u0129\u1c0d\n\u0129\3\u012a\3\u012a\3\u012a\5\u012a\u1c12\n\u012a\3"+
		"\u012a\3\u012a\3\u012a\5\u012a\u1c17\n\u012a\3\u012a\6\u012a\u1c1a\n\u012a"+
		"\r\u012a\16\u012a\u1c1b\3\u012a\3\u012a\3\u012b\3\u012b\3\u012b\3\u012b"+
		"\5\u012b\u1c24\n\u012b\3\u012b\3\u012b\5\u012b\u1c28\n\u012b\3\u012c\3"+
		"\u012c\3\u012c\3\u012c\5\u012c\u1c2e\n\u012c\3\u012c\3\u012c\3\u012c\7"+
		"\u012c\u1c33\n\u012c\f\u012c\16\u012c\u1c36\13\u012c\3\u012c\5\u012c\u1c39"+
		"\n\u012c\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\5\u012d"+
		"\u1c42\n\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\5\u012d"+
		"\u1c4a\n\u012d\3\u012e\3\u012e\3\u012e\3\u012e\5\u012e\u1c50\n\u012e\3"+
		"\u012e\3\u012e\3\u012f\3\u012f\5\u012f\u1c56\n\u012f\3\u0130\3\u0130\3"+
		"\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0131\3\u0131\3\u0131\3\u0131"+
		"\3\u0131\3\u0131\3\u0131\3\u0131\5\u0131\u1c67\n\u0131\3\u0131\3\u0131"+
		"\5\u0131\u1c6b\n\u0131\3\u0131\3\u0131\3\u0131\3\u0132\3\u0132\3\u0132"+
		"\5\u0132\u1c73\n\u0132\3\u0132\3\u0132\5\u0132\u1c77\n\u0132\3\u0132\3"+
		"\u0132\3\u0132\3\u0132\7\u0132\u1c7d\n\u0132\f\u0132\16\u0132\u1c80\13"+
		"\u0132\3\u0132\5\u0132\u1c83\n\u0132\3\u0132\3\u0132\3\u0132\5\u0132\u1c88"+
		"\n\u0132\3\u0132\3\u0132\5\u0132\u1c8c\n\u0132\3\u0132\3\u0132\3\u0132"+
		"\3\u0132\3\u0132\5\u0132\u1c93\n\u0132\3\u0132\3\u0132\3\u0132\3\u0132"+
		"\5\u0132\u1c99\n\u0132\5\u0132\u1c9b\n\u0132\3\u0133\3\u0133\5\u0133\u1c9f"+
		"\n\u0133\3\u0133\3\u0133\5\u0133\u1ca3\n\u0133\3\u0133\3\u0133\5\u0133"+
		"\u1ca7\n\u0133\3\u0133\5\u0133\u1caa\n\u0133\3\u0133\3\u0133\5\u0133\u1cae"+
		"\n\u0133\3\u0133\3\u0133\3\u0133\3\u0133\5\u0133\u1cb4\n\u0133\3\u0133"+
		"\3\u0133\5\u0133\u1cb8\n\u0133\5\u0133\u1cba\n\u0133\3\u0134\3\u0134\3"+
		"\u0134\3\u0134\3\u0134\5\u0134\u1cc1\n\u0134\3\u0134\3\u0134\3\u0134\7"+
		"\u0134\u1cc6\n\u0134\f\u0134\16\u0134\u1cc9\13\u0134\5\u0134\u1ccb\n\u0134"+
		"\3\u0134\5\u0134\u1cce\n\u0134\3\u0134\3\u0134\3\u0134\7\u0134\u1cd3\n"+
		"\u0134\f\u0134\16\u0134\u1cd6\13\u0134\3\u0134\3\u0134\5\u0134\u1cda\n"+
		"\u0134\3\u0134\6\u0134\u1cdd\n\u0134\r\u0134\16\u0134\u1cde\3\u0134\3"+
		"\u0134\5\u0134\u1ce3\n\u0134\3\u0134\3\u0134\3\u0134\3\u0134\5\u0134\u1ce9"+
		"\n\u0134\6\u0134\u1ceb\n\u0134\r\u0134\16\u0134\u1cec\5\u0134\u1cef\n"+
		"\u0134\3\u0134\3\u0134\3\u0134\5\u0134\u1cf4\n\u0134\3\u0134\6\u0134\u1cf7"+
		"\n\u0134\r\u0134\16\u0134\u1cf8\6\u0134\u1cfb\n\u0134\r\u0134\16\u0134"+
		"\u1cfc\3\u0134\3\u0134\3\u0134\5\u0134\u1d02\n\u0134\3\u0134\3\u0134\3"+
		"\u0134\3\u0134\5\u0134\u1d08\n\u0134\6\u0134\u1d0a\n\u0134\r\u0134\16"+
		"\u0134\u1d0b\6\u0134\u1d0e\n\u0134\r\u0134\16\u0134\u1d0f\5\u0134\u1d12"+
		"\n\u0134\3\u0134\3\u0134\5\u0134\u1d16\n\u0134\3\u0134\3\u0134\5\u0134"+
		"\u1d1a\n\u0134\3\u0134\3\u0134\5\u0134\u1d1e\n\u0134\3\u0134\3\u0134\5"+
		"\u0134\u1d22\n\u0134\3\u0134\3\u0134\3\u0134\3\u0134\5\u0134\u1d28\n\u0134"+
		"\3\u0134\5\u0134\u1d2b\n\u0134\3\u0134\3\u0134\3\u0134\3\u0134\5\u0134"+
		"\u1d31\n\u0134\3\u0134\3\u0134\5\u0134\u1d35\n\u0134\3\u0134\3\u0134\5"+
		"\u0134\u1d39\n\u0134\3\u0134\3\u0134\3\u0134\3\u0134\5\u0134\u1d3f\n\u0134"+
		"\3\u0134\3\u0134\3\u0134\3\u0134\5\u0134\u1d45\n\u0134\5\u0134\u1d47\n"+
		"\u0134\3\u0134\5\u0134\u1d4a\n\u0134\3\u0134\3\u0134\5\u0134\u1d4e\n\u0134"+
		"\3\u0134\3\u0134\5\u0134\u1d52\n\u0134\3\u0134\3\u0134\5\u0134\u1d56\n"+
		"\u0134\3\u0134\3\u0134\3\u0134\3\u0134\5\u0134\u1d5c\n\u0134\3\u0134\5"+
		"\u0134\u1d5f\n\u0134\3\u0134\3\u0134\3\u0134\3\u0134\5\u0134\u1d65\n\u0134"+
		"\3\u0134\3\u0134\3\u0134\3\u0134\5\u0134\u1d6b\n\u0134\3\u0134\5\u0134"+
		"\u1d6e\n\u0134\3\u0134\3\u0134\3\u0134\3\u0134\5\u0134\u1d74\n\u0134\3"+
		"\u0134\5\u0134\u1d77\n\u0134\3\u0134\3\u0134\3\u0134\3\u0134\5\u0134\u1d7d"+
		"\n\u0134\3\u0134\5\u0134\u1d80\n\u0134\3\u0134\3\u0134\5\u0134\u1d84\n"+
		"\u0134\3\u0134\3\u0134\5\u0134\u1d88\n\u0134\3\u0134\3\u0134\5\u0134\u1d8c"+
		"\n\u0134\3\u0134\3\u0134\3\u0134\5\u0134\u1d91\n\u0134\3\u0134\5\u0134"+
		"\u1d94\n\u0134\3\u0134\3\u0134\5\u0134\u1d98\n\u0134\3\u0134\3\u0134\5"+
		"\u0134\u1d9c\n\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3"+
		"\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134"+
		"\5\u0134\u1dad\n\u0134\7\u0134\u1daf\n\u0134\f\u0134\16\u0134\u1db2\13"+
		"\u0134\5\u0134\u1db4\n\u0134\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\5"+
		"\u0135\u1dbb\n\u0135\3\u0135\6\u0135\u1dbe\n\u0135\r\u0135\16\u0135\u1dbf"+
		"\3\u0135\3\u0135\5\u0135\u1dc4\n\u0135\3\u0135\3\u0135\3\u0135\3\u0135"+
		"\5\u0135\u1dca\n\u0135\6\u0135\u1dcc\n\u0135\r\u0135\16\u0135\u1dcd\5"+
		"\u0135\u1dd0\n\u0135\3\u0135\3\u0135\3\u0135\5\u0135\u1dd5\n\u0135\3\u0135"+
		"\6\u0135\u1dd8\n\u0135\r\u0135\16\u0135\u1dd9\6\u0135\u1ddc\n\u0135\r"+
		"\u0135\16\u0135\u1ddd\3\u0135\3\u0135\3\u0135\5\u0135\u1de3\n\u0135\3"+
		"\u0135\3\u0135\3\u0135\3\u0135\5\u0135\u1de9\n\u0135\6\u0135\u1deb\n\u0135"+
		"\r\u0135\16\u0135\u1dec\6\u0135\u1def\n\u0135\r\u0135\16\u0135\u1df0\5"+
		"\u0135\u1df3\n\u0135\3\u0135\3\u0135\5\u0135\u1df7\n\u0135\3\u0135\3\u0135"+
		"\5\u0135\u1dfb\n\u0135\3\u0135\3\u0135\5\u0135\u1dff\n\u0135\3\u0135\3"+
		"\u0135\5\u0135\u1e03\n\u0135\3\u0135\3\u0135\3\u0135\3\u0135\5\u0135\u1e09"+
		"\n\u0135\3\u0135\5\u0135\u1e0c\n\u0135\3\u0135\3\u0135\3\u0135\3\u0135"+
		"\5\u0135\u1e12\n\u0135\3\u0135\3\u0135\5\u0135\u1e16\n\u0135\3\u0135\3"+
		"\u0135\5\u0135\u1e1a\n\u0135\3\u0135\3\u0135\3\u0135\3\u0135\5\u0135\u1e20"+
		"\n\u0135\3\u0135\3\u0135\3\u0135\3\u0135\5\u0135\u1e26\n\u0135\5\u0135"+
		"\u1e28\n\u0135\3\u0135\5\u0135\u1e2b\n\u0135\3\u0135\3\u0135\5\u0135\u1e2f"+
		"\n\u0135\3\u0135\3\u0135\5\u0135\u1e33\n\u0135\3\u0135\3\u0135\5\u0135"+
		"\u1e37\n\u0135\3\u0135\3\u0135\3\u0135\3\u0135\5\u0135\u1e3d\n\u0135\3"+
		"\u0135\5\u0135\u1e40\n\u0135\3\u0135\3\u0135\3\u0135\3\u0135\5\u0135\u1e46"+
		"\n\u0135\3\u0135\3\u0135\3\u0135\3\u0135\5\u0135\u1e4c\n\u0135\3\u0135"+
		"\5\u0135\u1e4f\n\u0135\3\u0135\3\u0135\3\u0135\3\u0135\5\u0135\u1e55\n"+
		"\u0135\3\u0135\5\u0135\u1e58\n\u0135\3\u0135\3\u0135\3\u0135\3\u0135\5"+
		"\u0135\u1e5e\n\u0135\3\u0135\5\u0135\u1e61\n\u0135\3\u0135\3\u0135\5\u0135"+
		"\u1e65\n\u0135\3\u0135\3\u0135\5\u0135\u1e69\n\u0135\3\u0135\3\u0135\5"+
		"\u0135\u1e6d\n\u0135\3\u0135\3\u0135\3\u0135\5\u0135\u1e72\n\u0135\3\u0135"+
		"\5\u0135\u1e75\n\u0135\3\u0135\3\u0135\5\u0135\u1e79\n\u0135\3\u0135\3"+
		"\u0135\5\u0135\u1e7d\n\u0135\3\u0135\3\u0135\3\u0135\3\u0135\5\u0135\u1e83"+
		"\n\u0135\3\u0135\5\u0135\u1e86\n\u0135\3\u0135\3\u0135\5\u0135\u1e8a\n"+
		"\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135"+
		"\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\5\u0135\u1e9b"+
		"\n\u0135\7\u0135\u1e9d\n\u0135\f\u0135\16\u0135\u1ea0\13\u0135\5\u0135"+
		"\u1ea2\n\u0135\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136"+
		"\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\5\u0136\u1eb0\n\u0136\3\u0136"+
		"\3\u0136\3\u0136\3\u0136\5\u0136\u1eb6\n\u0136\3\u0136\3\u0136\3\u0136"+
		"\3\u0136\3\u0136\3\u0136\5\u0136\u1ebe\n\u0136\3\u0136\3\u0136\3\u0136"+
		"\3\u0136\3\u0136\6\u0136\u1ec5\n\u0136\r\u0136\16\u0136\u1ec6\3\u0136"+
		"\5\u0136\u1eca\n\u0136\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137"+
		"\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0138\3\u0138"+
		"\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138"+
		"\3\u0138\3\u0138\3\u0138\3\u0139\3\u0139\3\u0139\3\u013a\3\u013a\5\u013a"+
		"\u1eec\n\u013a\3\u013a\3\u013a\5\u013a\u1ef0\n\u013a\3\u013a\3\u013a\3"+
		"\u013a\7\u013a\u1ef5\n\u013a\f\u013a\16\u013a\u1ef8\13\u013a\5\u013a\u1efa"+
		"\n\u013a\3\u013a\5\u013a\u1efd\n\u013a\3\u013a\3\u013a\3\u013a\3\u013a"+
		"\7\u013a\u1f03\n\u013a\f\u013a\16\u013a\u1f06\13\u013a\3\u013a\3\u013a"+
		"\5\u013a\u1f0a\n\u013a\3\u013a\3\u013a\3\u013a\5\u013a\u1f0f\n\u013a\3"+
		"\u013a\5\u013a\u1f12\n\u013a\5\u013a\u1f14\n\u013a\3\u013b\3\u013b\5\u013b"+
		"\u1f18\n\u013b\3\u013b\3\u013b\5\u013b\u1f1c\n\u013b\3\u013b\5\u013b\u1f1f"+
		"\n\u013b\3\u013b\3\u013b\5\u013b\u1f23\n\u013b\3\u013c\3\u013c\3\u013d"+
		"\3\u013d\5\u013d\u1f29\n\u013d\3\u013d\3\u013d\3\u013d\5\u013d\u1f2e\n"+
		"\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\5\u013d\u1f35\n\u013d\5"+
		"\u013d\u1f37\n\u013d\3\u013d\3\u013d\5\u013d\u1f3b\n\u013d\3\u013d\3\u013d"+
		"\3\u013d\3\u013d\7\u013d\u1f41\n\u013d\f\u013d\16\u013d\u1f44\13\u013d"+
		"\3\u013d\3\u013d\3\u013d\5\u013d\u1f49\n\u013d\3\u013d\3\u013d\5\u013d"+
		"\u1f4d\n\u013d\3\u013d\5\u013d\u1f50\n\u013d\3\u013d\3\u013d\3\u013d\3"+
		"\u013d\3\u013d\3\u013d\3\u013d\5\u013d\u1f59\n\u013d\3\u013d\5\u013d\u1f5c"+
		"\n\u013d\3\u013d\3\u013d\3\u013d\3\u013d\5\u013d\u1f62\n\u013d\3\u013e"+
		"\3\u013e\3\u013e\3\u013e\3\u013e\5\u013e\u1f69\n\u013e\3\u013e\3\u013e"+
		"\3\u013e\5\u013e\u1f6e\n\u013e\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e"+
		"\3\u013e\5\u013e\u1f76\n\u013e\3\u013f\3\u013f\3\u013f\5\u013f\u1f7b\n"+
		"\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f"+
		"\3\u013f\3\u013f\5\u013f\u1f87\n\u013f\5\u013f\u1f89\n\u013f\3\u0140\3"+
		"\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\5\u0140"+
		"\u1f94\n\u0140\3\u0141\3\u0141\3\u0141\3\u0141\3\u0141\5\u0141\u1f9b\n"+
		"\u0141\3\u0141\3\u0141\3\u0141\3\u0141\3\u0141\3\u0141\7\u0141\u1fa3\n"+
		"\u0141\f\u0141\16\u0141\u1fa6\13\u0141\3\u0142\3\u0142\3\u0142\3\u0142"+
		"\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143"+
		"\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\5\u0143\u1fbc"+
		"\n\u0143\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144"+
		"\3\u0144\3\u0144\3\u0144\5\u0144\u1fc9\n\u0144\3\u0145\3\u0145\3\u0145"+
		"\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145"+
		"\3\u0145\3\u0145\5\u0145\u1fd9\n\u0145\3\u0145\3\u0145\3\u0145\5\u0145"+
		"\u1fde\n\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\5\u0145\u1fe5\n"+
		"\u0145\3\u0145\5\u0145\u1fe8\n\u0145\6\u0145\u1fea\n\u0145\r\u0145\16"+
		"\u0145\u1feb\5\u0145\u1fee\n\u0145\3\u0146\3\u0146\3\u0146\3\u0146\3\u0146"+
		"\3\u0146\3\u0146\3\u0146\3\u0146\3\u0146\3\u0146\3\u0146\3\u0146\3\u0146"+
		"\3\u0146\5\u0146\u1fff\n\u0146\3\u0147\3\u0147\3\u0148\3\u0148\3\u0148"+
		"\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\5\u0148"+
		"\u200e\n\u0148\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\5\u0149"+
		"\u2016\n\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149"+
		"\5\u0149\u201f\n\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149"+
		"\5\u0149\u2027\n\u0149\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a"+
		"\3\u014a\5\u014a\u2030\n\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a"+
		"\3\u014a\3\u014a\3\u014a\3\u014a\5\u014a\u203b\n\u014a\3\u014a\3\u014a"+
		"\5\u014a\u203f\n\u014a\5\u014a\u2041\n\u014a\5\u014a\u2043\n\u014a\3\u014b"+
		"\3\u014b\3\u014b\3\u014b\5\u014b\u2049\n\u014b\3\u014b\3\u014b\3\u014b"+
		"\5\u014b\u204e\n\u014b\3\u014b\3\u014b\3\u014b\3\u014b\3\u014b\5\u014b"+
		"\u2055\n\u014b\3\u014b\3\u014b\3\u014b\3\u014b\3\u014b\3\u014b\3\u014b"+
		"\3\u014b\3\u014b\3\u014b\3\u014b\5\u014b\u2062\n\u014b\5\u014b\u2064\n"+
		"\u014b\5\u014b\u2066\n\u014b\3\u014b\5\u014b\u2069\n\u014b\3\u014b\5\u014b"+
		"\u206c\n\u014b\3\u014c\3\u014c\3\u014c\3\u014c\3\u014c\5\u014c\u2073\n"+
		"\u014c\3\u014c\5\u014c\u2076\n\u014c\3\u014c\3\u014c\3\u014c\3\u014c\5"+
		"\u014c\u207c\n\u014c\3\u014c\3\u014c\3\u014c\5\u014c\u2081\n\u014c\5\u014c"+
		"\u2083\n\u014c\3\u014c\5\u014c\u2086\n\u014c\3\u014c\3\u014c\3\u014c\3"+
		"\u014c\5\u014c\u208c\n\u014c\3\u014c\3\u014c\3\u014c\3\u014c\3\u014c\3"+
		"\u014c\5\u014c\u2094\n\u014c\5\u014c\u2096\n\u014c\3\u014c\5\u014c\u2099"+
		"\n\u014c\3\u014c\3\u014c\5\u014c\u209d\n\u014c\3\u014c\5\u014c\u20a0\n"+
		"\u014c\3\u014c\3\u014c\3\u014c\3\u014c\3\u014c\3\u014c\3\u014c\3\u014c"+
		"\5\u014c\u20aa\n\u014c\3\u014c\5\u014c\u20ad\n\u014c\3\u014c\3\u014c\5"+
		"\u014c\u20b1\n\u014c\3\u014c\5\u014c\u20b4\n\u014c\3\u014c\3\u014c\3\u014c"+
		"\3\u014c\5\u014c\u20ba\n\u014c\3\u014c\5\u014c\u20bd\n\u014c\5\u014c\u20bf"+
		"\n\u014c\3\u014d\3\u014d\5\u014d\u20c3\n\u014d\3\u014e\3\u014e\3\u014e"+
		"\5\u014e\u20c8\n\u014e\3\u014f\3\u014f\5\u014f\u20cc\n\u014f\3\u0150\3"+
		"\u0150\3\u0150\3\u0150\3\u0150\3\u0150\5\u0150\u20d4\n\u0150\3\u0150\3"+
		"\u0150\5\u0150\u20d8\n\u0150\3\u0150\5\u0150\u20db\n\u0150\3\u0151\3\u0151"+
		"\3\u0151\5\u0151\u20e0\n\u0151\3\u0152\3\u0152\3\u0152\3\u0152\3\u0153"+
		"\3\u0153\5\u0153\u20e8\n\u0153\3\u0153\3\u0153\3\u0153\5\u0153\u20ed\n"+
		"\u0153\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0155\3\u0155\3\u0155"+
		"\5\u0155\u20f7\n\u0155\3\u0155\3\u0155\3\u0155\3\u0156\3\u0156\3\u0156"+
		"\3\u0156\3\u0157\3\u0157\5\u0157\u2102\n\u0157\3\u0157\7\u0157\u2105\n"+
		"\u0157\f\u0157\16\u0157\u2108\13\u0157\3\u0158\3\u0158\3\u0158\5\u0158"+
		"\u210d\n\u0158\3\u0159\3\u0159\3\u0159\3\u0159\5\u0159\u2113\n\u0159\3"+
		"\u0159\3\u0159\5\u0159\u2117\n\u0159\3\u0159\5\u0159\u211a\n\u0159\3\u0159"+
		"\3\u0159\5\u0159\u211e\n\u0159\3\u0159\3\u0159\5\u0159\u2122\n\u0159\3"+
		"\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\5\u0159\u212a\n\u0159\3"+
		"\u0159\3\u0159\3\u0159\5\u0159\u212f\n\u0159\5\u0159\u2131\n\u0159\3\u0159"+
		"\5\u0159\u2134\n\u0159\3\u0159\7\u0159\u2137\n\u0159\f\u0159\16\u0159"+
		"\u213a\13\u0159\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\5\u015a"+
		"\u2142\n\u015a\3\u015b\3\u015b\5\u015b\u2146\n\u015b\3\u015b\3\u015b\3"+
		"\u015b\5\u015b\u214b\n\u015b\3\u015b\5\u015b\u214e\n\u015b\3\u015b\5\u015b"+
		"\u2151\n\u015b\3\u015b\3\u015b\3\u015b\3\u015b\5\u015b\u2157\n\u015b\3"+
		"\u015b\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b\5\u015b\u215f\n\u015b\3"+
		"\u015b\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b\5\u015b\u2167\n\u015b\3"+
		"\u015b\5\u015b\u216a\n\u015b\3\u015b\5\u015b\u216d\n\u015b\3\u015c\3\u015c"+
		"\5\u015c\u2171\n\u015c\3\u015c\3\u015c\3\u015c\5\u015c\u2176\n\u015c\3"+
		"\u015c\5\u015c\u2179\n\u015c\3\u015c\3\u015c\3\u015c\3\u015c\5\u015c\u217f"+
		"\n\u015c\3\u015c\3\u015c\5\u015c\u2183\n\u015c\3\u015c\3\u015c\3\u015c"+
		"\3\u015c\5\u015c\u2189\n\u015c\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c"+
		"\3\u015c\5\u015c\u2191\n\u015c\3\u015c\3\u015c\3\u015c\3\u015c\6\u015c"+
		"\u2197\n\u015c\r\u015c\16\u015c\u2198\3\u015c\5\u015c\u219c\n\u015c\3"+
		"\u015c\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c"+
		"\3\u015c\3\u015c\3\u015c\3\u015c\5\u015c\u21ab\n\u015c\3\u015c\5\u015c"+
		"\u21ae\n\u015c\3\u015c\5\u015c\u21b1\n\u015c\5\u015c\u21b3\n\u015c\3\u015d"+
		"\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d\5\u015d"+
		"\u21be\n\u015d\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e"+
		"\3\u015e\3\u015e\5\u015e\u21c9\n\u015e\3\u015f\3\u015f\3\u015f\3\u015f"+
		"\3\u015f\7\u015f\u21d0\n\u015f\f\u015f\16\u015f\u21d3\13\u015f\3\u015f"+
		"\3\u015f\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160\5\u0160\u21dc\n\u0160"+
		"\3\u0161\3\u0161\3\u0161\3\u0161\3\u0161\3\u0161\3\u0161\3\u0161\5\u0161"+
		"\u21e6\n\u0161\5\u0161\u21e8\n\u0161\5\u0161\u21ea\n\u0161\3\u0161\5\u0161"+
		"\u21ed\n\u0161\3\u0161\5\u0161\u21f0\n\u0161\3\u0161\3\u0161\3\u0161\3"+
		"\u0161\3\u0161\3\u0161\3\u0161\3\u0161\3\u0161\5\u0161\u21fb\n\u0161\5"+
		"\u0161\u21fd\n\u0161\5\u0161\u21ff\n\u0161\3\u0161\5\u0161\u2202\n\u0161"+
		"\3\u0162\7\u0162\u2205\n\u0162\f\u0162\16\u0162\u2208\13\u0162\3\u0162"+
		"\3\u0162\3\u0162\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\5\u0163\u2212"+
		"\n\u0163\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\5\u0164"+
		"\u221b\n\u0164\3\u0164\5\u0164\u221e\n\u0164\3\u0164\5\u0164\u2221\n\u0164"+
		"\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\7\u0164\u2228\n\u0164\f\u0164"+
		"\16\u0164\u222b\13\u0164\5\u0164\u222d\n\u0164\3\u0164\5\u0164\u2230\n"+
		"\u0164\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\5\u0165\u2237\n\u0165\3"+
		"\u0165\5\u0165\u223a\n\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3"+
		"\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\5\u0165"+
		"\u2249\n\u0165\3\u0165\5\u0165\u224c\n\u0165\3\u0165\3\u0165\3\u0165\3"+
		"\u0165\3\u0165\5\u0165\u2253\n\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3"+
		"\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165"+
		"\3\u0165\5\u0165\u2263\n\u0165\3\u0166\3\u0166\5\u0166\u2267\n\u0166\3"+
		"\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\5\u0167"+
		"\u2271\n\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167"+
		"\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167"+
		"\3\u0167\7\u0167\u2284\n\u0167\f\u0167\16\u0167\u2287\13\u0167\3\u0168"+
		"\3\u0168\3\u0168\3\u0168\5\u0168\u228d\n\u0168\3\u0169\3\u0169\3\u0169"+
		"\6\u0169\u2292\n\u0169\r\u0169\16\u0169\u2293\3\u0169\3\u0169\5\u0169"+
		"\u2298\n\u0169\3\u0169\3\u0169\3\u0169\3\u0169\6\u0169\u229e\n\u0169\r"+
		"\u0169\16\u0169\u229f\3\u0169\3\u0169\5\u0169\u22a4\n\u0169\3\u0169\3"+
		"\u0169\5\u0169\u22a8\n\u0169\3\u016a\3\u016a\3\u016a\3\u016a\5\u016a\u22ae"+
		"\n\u016a\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\5\u016b\u22b8\n\u016b\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c"+
		"\3\u016c\3\u016c\5\u016c\u22c2\n\u016c\3\u016d\3\u016d\3\u016e\3\u016e"+
		"\3\u016e\5\u016e\u22c9\n\u016e\3\u016e\3\u016e\3\u016e\7\u016e\u22ce\n"+
		"\u016e\f\u016e\16\u016e\u22d1\13\u016e\3\u016e\3\u016e\3\u016e\3\u016e"+
		"\3\u016e\3\u016e\5\u016e\u22d9\n\u016e\3\u016e\3\u016e\3\u016e\3\u016e"+
		"\3\u016e\5\u016e\u22e0\n\u016e\3\u016f\3\u016f\3\u016f\3\u016f\3\u016f"+
		"\5\u016f\u22e7\n\u016f\3\u016f\3\u016f\3\u016f\3\u016f\3\u016f\3\u0170"+
		"\3\u0170\5\u0170\u22f0\n\u0170\3\u0170\3\u0170\5\u0170\u22f4\n\u0170\3"+
		"\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\5\u0170"+
		"\u22fe\n\u0170\3\u0171\3\u0171\3\u0171\7\u0171\u2303\n\u0171\f\u0171\16"+
		"\u0171\u2306\13\u0171\3\u0172\3\u0172\3\u0172\7\u0172\u230b\n\u0172\f"+
		"\u0172\16\u0172\u230e\13\u0172\3\u0173\3\u0173\3\u0173\7\u0173\u2313\n"+
		"\u0173\f\u0173\16\u0173\u2316\13\u0173\3\u0174\5\u0174\u2319\n\u0174\3"+
		"\u0174\3\u0174\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175"+
		"\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175"+
		"\3\u0175\3\u0175\5\u0175\u232f\n\u0175\3\u0175\3\u0175\3\u0175\3\u0175"+
		"\3\u0175\3\u0175\3\u0175\5\u0175\u2338\n\u0175\3\u0175\3\u0175\3\u0175"+
		"\3\u0175\5\u0175\u233e\n\u0175\3\u0175\3\u0175\3\u0175\3\u0175\5\u0175"+
		"\u2344\n\u0175\3\u0175\3\u0175\3\u0175\3\u0175\5\u0175\u234a\n\u0175\3"+
		"\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\5\u0175"+
		"\u2354\n\u0175\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\5\u0176\u235b\n"+
		"\u0176\3\u0176\7\u0176\u235e\n\u0176\f\u0176\16\u0176\u2361\13\u0176\3"+
		"\u0177\3\u0177\5\u0177\u2365\n\u0177\3\u0177\3\u0177\5\u0177\u2369\n\u0177"+
		"\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\5\u0177\u2370\n\u0177\3\u0178"+
		"\3\u0178\5\u0178\u2374\n\u0178\3\u0178\5\u0178\u2377\n\u0178\3\u0178\3"+
		"\u0178\3\u0178\5\u0178\u237c\n\u0178\3\u0178\3\u0178\5\u0178\u2380\n\u0178"+
		"\3\u0178\3\u0178\5\u0178\u2384\n\u0178\3\u0178\3\u0178\3\u0178\5\u0178"+
		"\u2389\n\u0178\3\u0178\3\u0178\3\u0178\7\u0178\u238e\n\u0178\f\u0178\16"+
		"\u0178\u2391\13\u0178\5\u0178\u2393\n\u0178\3\u0178\3\u0178\5\u0178\u2397"+
		"\n\u0178\3\u0179\3\u0179\3\u0179\5\u0179\u239c\n\u0179\3\u0179\3\u0179"+
		"\5\u0179\u23a0\n\u0179\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a"+
		"\3\u017a\5\u017a\u23a9\n\u017a\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b"+
		"\5\u017b\u23b0\n\u017b\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\7\u017c"+
		"\u23b7\n\u017c\f\u017c\16\u017c\u23ba\13\u017c\3\u017c\3\u017c\3\u017c"+
		"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\5\u017c\u23c5\n\u017c"+
		"\5\u017c\u23c7\n\u017c\3\u017d\3\u017d\3\u017d\3\u017d\3\u017d\3\u017d"+
		"\3\u017d\3\u017d\5\u017d\u23d1\n\u017d\3\u017d\5\u017d\u23d4\n\u017d\3"+
		"\u017d\7\u017d\u23d7\n\u017d\f\u017d\16\u017d\u23da\13\u017d\3\u017d\3"+
		"\u017d\3\u017d\3\u017d\3\u017d\3\u017d\5\u017d\u23e2\n\u017d\5\u017d\u23e4"+
		"\n\u017d\5\u017d\u23e6\n\u017d\3\u017d\3\u017d\3\u017d\5\u017d\u23eb\n"+
		"\u017d\3\u017d\3\u017d\3\u017d\3\u017d\7\u017d\u23f1\n\u017d\f\u017d\16"+
		"\u017d\u23f4\13\u017d\3\u017d\3\u017d\5\u017d\u23f8\n\u017d\3\u017d\3"+
		"\u017d\3\u017d\3\u017d\3\u017d\3\u017d\5\u017d\u2400\n\u017d\3\u017d\7"+
		"\u017d\u2403\n\u017d\f\u017d\16\u017d\u2406\13\u017d\3\u017d\3\u017d\3"+
		"\u017d\5\u017d\u240b\n\u017d\3\u017d\3\u017d\3\u017d\3\u017d\3\u017d\3"+
		"\u017d\3\u017d\3\u017d\5\u017d\u2415\n\u017d\5\u017d\u2417\n\u017d\3\u017d"+
		"\3\u017d\5\u017d\u241b\n\u017d\3\u017d\3\u017d\5\u017d\u241f\n\u017d\5"+
		"\u017d\u2421\n\u017d\3\u017e\3\u017e\3\u017e\3\u017f\3\u017f\5\u017f\u2428"+
		"\n\u017f\3\u0180\3\u0180\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\7\u0181"+
		"\u2431\n\u0181\f\u0181\16\u0181\u2434\13\u0181\3\u0181\3\u0181\3\u0182"+
		"\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182"+
		"\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182"+
		"\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\7\u0182"+
		"\u2453\n\u0182\f\u0182\16\u0182\u2456\13\u0182\3\u0182\3\u0182\3\u0182"+
		"\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182"+
		"\3\u0182\5\u0182\u2465\n\u0182\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\5\u0183\u246c\n\u0183\5\u0183\u246e\n\u0183\3\u0184\3\u0184\3\u0184\7"+
		"\u0184\u2473\n\u0184\f\u0184\16\u0184\u2476\13\u0184\3\u0185\3\u0185\3"+
		"\u0185\3\u0185\7\u0185\u247c\n\u0185\f\u0185\16\u0185\u247f\13\u0185\3"+
		"\u0185\3\u0185\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\5\u0186\u2488\n"+
		"\u0186\3\u0187\3\u0187\3\u0187\5\u0187\u248d\n\u0187\3\u0187\3\u0187\3"+
		"\u0187\3\u0187\3\u0187\5\u0187\u2494\n\u0187\3\u0187\5\u0187\u2497\n\u0187"+
		"\3\u0188\3\u0188\3\u0188\3\u0188\3\u0188\5\u0188\u249e\n\u0188\3\u0188"+
		"\3\u0188\3\u0188\3\u0188\3\u0188\5\u0188\u24a5\n\u0188\3\u0188\5\u0188"+
		"\u24a8\n\u0188\5\u0188\u24aa\n\u0188\3\u0189\3\u0189\3\u0189\3\u0189\3"+
		"\u0189\3\u0189\5\u0189\u24b2\n\u0189\5\u0189\u24b4\n\u0189\3\u018a\3\u018a"+
		"\3\u018a\3\u018a\5\u018a\u24ba\n\u018a\3\u018b\3\u018b\3\u018b\7\u018b"+
		"\u24bf\n\u018b\f\u018b\16\u018b\u24c2\13\u018b\3\u018c\3\u018c\3\u018c"+
		"\3\u018c\3\u018c\5\u018c\u24c9\n\u018c\3\u018d\3\u018d\7\u018d\u24cd\n"+
		"\u018d\f\u018d\16\u018d\u24d0\13\u018d\3\u018e\3\u018e\5\u018e\u24d4\n"+
		"\u018e\3\u018e\3\u018e\5\u018e\u24d8\n\u018e\3\u018e\3\u018e\5\u018e\u24dc"+
		"\n\u018e\3\u018e\3\u018e\3\u018e\5\u018e\u24e1\n\u018e\5\u018e\u24e3\n"+
		"\u018e\3\u018e\3\u018e\3\u018e\3\u018e\3\u018e\5\u018e\u24ea\n\u018e\3"+
		"\u018e\3\u018e\5\u018e\u24ee\n\u018e\3\u018e\3\u018e\3\u018e\3\u018e\3"+
		"\u018e\5\u018e\u24f5\n\u018e\5\u018e\u24f7\n\u018e\3\u018e\3\u018e\3\u018e"+
		"\3\u018e\3\u018e\5\u018e\u24fe\n\u018e\5\u018e\u2500\n\u018e\3\u018f\3"+
		"\u018f\3\u018f\3\u018f\3\u018f\3\u018f\3\u018f\5\u018f\u2509\n\u018f\3"+
		"\u018f\3\u018f\3\u018f\3\u018f\3\u018f\3\u018f\5\u018f\u2511\n\u018f\3"+
		"\u0190\3\u0190\3\u0190\7\u0190\u2516\n\u0190\f\u0190\16\u0190\u2519\13"+
		"\u0190\3\u0191\3\u0191\3\u0191\5\u0191\u251e\n\u0191\3\u0192\3\u0192\3"+
		"\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0193\5\u0193\u2529\n"+
		"\u0193\3\u0193\3\u0193\5\u0193\u252d\n\u0193\5\u0193\u252f\n\u0193\3\u0193"+
		"\5\u0193\u2532\n\u0193\3\u0193\3\u0193\3\u0193\3\u0193\3\u0193\3\u0193"+
		"\3\u0193\3\u0193\3\u0193\3\u0193\3\u0193\3\u0193\3\u0193\3\u0193\3\u0193"+
		"\3\u0193\3\u0193\3\u0193\3\u0193\3\u0193\3\u0193\3\u0193\5\u0193\u254a"+
		"\n\u0193\3\u0194\3\u0194\3\u0194\3\u0194\3\u0194\3\u0194\3\u0194\3\u0194"+
		"\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195"+
		"\3\u0195\3\u0196\3\u0196\3\u0196\7\u0196\u2561\n\u0196\f\u0196\16\u0196"+
		"\u2564\13\u0196\3\u0197\3\u0197\5\u0197\u2568\n\u0197\3\u0198\3\u0198"+
		"\3\u0198\3\u0198\3\u0198\3\u0198\3\u0198\3\u0198\3\u0198\3\u0198\3\u0198"+
		"\3\u0198\3\u0198\3\u0198\3\u0198\3\u0198\7\u0198\u257a\n\u0198\f\u0198"+
		"\16\u0198\u257d\13\u0198\3\u0198\5\u0198\u2580\n\u0198\3\u0198\3\u0198"+
		"\5\u0198\u2584\n\u0198\3\u0199\3\u0199\3\u0199\3\u0199\3\u019a\3\u019a"+
		"\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a\5\u019a"+
		"\u2594\n\u019a\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\5\u019b"+
		"\u259c\n\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b"+
		"\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b"+
		"\3\u019b\3\u019b\3\u019b\3\u019b\5\u019b\u25b2\n\u019b\3\u019b\3\u019b"+
		"\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b"+
		"\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b"+
		"\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b"+
		"\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b"+
		"\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b"+
		"\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b"+
		"\5\u019b\u25ec\n\u019b\3\u019b\3\u019b\5\u019b\u25f0\n\u019b\3\u019b\3"+
		"\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b"+
		"\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b"+
		"\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b"+
		"\3\u019b\3\u019b\3\u019b\5\u019b\u2611\n\u019b\3\u019c\3\u019c\3\u019c"+
		"\3\u019c\3\u019c\5\u019c\u2618\n\u019c\3\u019d\3\u019d\3\u019d\3\u019d"+
		"\5\u019d\u261e\n\u019d\3\u019d\3\u019d\3\u019d\3\u019d\3\u019d\3\u019d"+
		"\3\u019d\3\u019d\3\u019d\3\u019d\3\u019d\5\u019d\u262b\n\u019d\3\u019d"+
		"\3\u019d\3\u019d\3\u019d\3\u019d\3\u019d\3\u019d\3\u019d\3\u019d\3\u019d"+
		"\3\u019d\3\u019d\3\u019d\5\u019d\u263a\n\u019d\3\u019d\3\u019d\3\u019d"+
		"\3\u019d\3\u019d\3\u019d\3\u019d\3\u019d\3\u019d\5\u019d\u2645\n\u019d"+
		"\3\u019e\3\u019e\3\u019e\5\u019e\u264a\n\u019e\3\u019e\3\u019e\3\u019e"+
		"\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\5\u019e\u2654\n\u019e\3\u019e"+
		"\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\5\u019e\u265d\n\u019e"+
		"\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u01a0\3\u01a0"+
		"\3\u01a0\3\u01a0\3\u01a0\3\u01a0\3\u01a0\3\u01a1\3\u01a1\3\u01a1\3\u01a1"+
		"\3\u01a1\3\u01a1\3\u01a1\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a3"+
		"\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a4\5\u01a4\u267f\n\u01a4\3\u01a4"+
		"\3\u01a4\3\u01a5\5\u01a5\u2684\n\u01a5\3\u01a5\3\u01a5\3\u01a6\3\u01a6"+
		"\5\u01a6\u268a\n\u01a6\3\u01a7\5\u01a7\u268d\n\u01a7\3\u01a7\3\u01a7\3"+
		"\u01a7\5\u01a7\u2692\n\u01a7\3\u01a7\7\u01a7\u2695\n\u01a7\f\u01a7\16"+
		"\u01a7\u2698\13\u01a7\3\u01a7\3\u01a7\3\u01a8\3\u01a8\3\u01a8\3\u01a8"+
		"\5\u01a8\u26a0\n\u01a8\3\u01a8\7\u01a8\u26a3\n\u01a8\f\u01a8\16\u01a8"+
		"\u26a6\13\u01a8\3\u01a8\3\u01a8\3\u01a9\5\u01a9\u26ab\n\u01a9\3\u01a9"+
		"\3\u01a9\3\u01a9\3\u01a9\3\u01a9\7\u01a9\u26b2\n\u01a9\f\u01a9\16\u01a9"+
		"\u26b5\13\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\7\u01a9\u26bc"+
		"\n\u01a9\f\u01a9\16\u01a9\u26bf\13\u01a9\5\u01a9\u26c1\n\u01a9\3\u01a9"+
		"\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9"+
		"\7\u01a9\u26cd\n\u01a9\f\u01a9\16\u01a9\u26d0\13\u01a9\3\u01a9\3\u01a9"+
		"\3\u01a9\5\u01a9\u26d5\n\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9\3\u01a9"+
		"\3\u01a9\5\u01a9\u26dd\n\u01a9\3\u01aa\3\u01aa\5\u01aa\u26e1\n\u01aa\3"+
		"\u01ab\3\u01ab\3\u01ab\3\u01ab\7\u01ab\u26e7\n\u01ab\f\u01ab\16\u01ab"+
		"\u26ea\13\u01ab\3\u01ab\3\u01ab\3\u01ac\3\u01ac\5\u01ac\u26f0\n\u01ac"+
		"\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad"+
		"\7\u01ad\u26fb\n\u01ad\f\u01ad\16\u01ad\u26fe\13\u01ad\3\u01ae\3\u01ae"+
		"\3\u01ae\7\u01ae\u2703\n\u01ae\f\u01ae\16\u01ae\u2706\13\u01ae\3\u01af"+
		"\3\u01af\3\u01af\3\u01af\3\u01af\3\u01af\3\u01af\3\u01af\3\u01af\3\u01af"+
		"\5\u01af\u2712\n\u01af\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\5\u01b0"+
		"\u2719\n\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\5\u01b0\u271f\n\u01b0\3"+
		"\u01b0\3\u01b0\5\u01b0\u2723\n\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3"+
		"\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0"+
		"\3\u01b0\3\u01b0\5\u01b0\u2734\n\u01b0\3\u01b1\3\u01b1\3\u01b1\3\u01b1"+
		"\3\u01b1\3\u01b1\3\u01b1\3\u01b1\3\u01b1\3\u01b1\3\u01b1\3\u01b1\3\u01b1"+
		"\5\u01b1\u2743\n\u01b1\5\u01b1\u2745\n\u01b1\3\u01b1\3\u01b1\3\u01b1\5"+
		"\u01b1\u274a\n\u01b1\3\u01b2\5\u01b2\u274d\n\u01b2\3\u01b2\3\u01b2\3\u01b3"+
		"\3\u01b3\3\u01b3\3\u01b3\3\u01b3\5\u01b3\u2756\n\u01b3\3\u01b3\5\u01b3"+
		"\u2759\n\u01b3\3\u01b3\5\u01b3\u275c\n\u01b3\3\u01b3\3\u01b3\3\u01b4\3"+
		"\u01b4\3\u01b4\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\5\u01b5"+
		"\u2769\n\u01b5\3\u01b6\3\u01b6\5\u01b6\u276d\n\u01b6\3\u01b7\3\u01b7\3"+
		"\u01b7\3\u01b7\3\u01b7\3\u01b7\5\u01b7\u2775\n\u01b7\3\u01b8\3\u01b8\3"+
		"\u01b8\3\u01b8\5\u01b8\u277b\n\u01b8\3\u01b9\3\u01b9\3\u01b9\3\u01b9\7"+
		"\u01b9\u2781\n\u01b9\f\u01b9\16\u01b9\u2784\13\u01b9\3\u01b9\3\u01b9\3"+
		"\u01b9\3\u01b9\5\u01b9\u278a\n\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\5"+
		"\u01b9\u2790\n\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3"+
		"\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9";
	private static final String _serializedATNSegment1 =
		"\3\u01b9\3\u01b9\5\u01b9\u279f\n\u01b9\3\u01ba\3\u01ba\3\u01ba\3\u01ba"+
		"\3\u01ba\3\u01ba\3\u01ba\5\u01ba\u27a8\n\u01ba\3\u01ba\3\u01ba\3\u01bb"+
		"\3\u01bb\5\u01bb\u27ae\n\u01bb\3\u01bc\3\u01bc\3\u01bc\3\u01bc\5\u01bc"+
		"\u27b4\n\u01bc\3\u01bc\5\u01bc\u27b7\n\u01bc\3\u01bc\3\u01bc\5\u01bc\u27bb"+
		"\n\u01bc\3\u01bc\3\u01bc\3\u01bc\7\u01bc\u27c0\n\u01bc\f\u01bc\16\u01bc"+
		"\u27c3\13\u01bc\3\u01bd\3\u01bd\3\u01bd\3\u01bd\3\u01bd\5\u01bd\u27ca"+
		"\n\u01bd\3\u01bd\5\u01bd\u27cd\n\u01bd\3\u01bd\3\u01bd\3\u01bd\3\u01bd"+
		"\5\u01bd\u27d3\n\u01bd\3\u01bd\3\u01bd\3\u01bd\3\u01bd\5\u01bd\u27d9\n"+
		"\u01bd\5\u01bd\u27db\n\u01bd\3\u01bd\3\u01bd\3\u01bd\3\u01bd\5\u01bd\u27e1"+
		"\n\u01bd\3\u01bd\5\u01bd\u27e4\n\u01bd\5\u01bd\u27e6\n\u01bd\3\u01bd\3"+
		"\u01bd\3\u01bd\3\u01bd\5\u01bd\u27ec\n\u01bd\5\u01bd\u27ee\n\u01bd\3\u01bd"+
		"\3\u01bd\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be"+
		"\3\u01be\3\u01be\5\u01be\u27fc\n\u01be\3\u01be\3\u01be\3\u01be\3\u01be"+
		"\3\u01be\5\u01be\u2803\n\u01be\3\u01be\3\u01be\3\u01bf\3\u01bf\3\u01bf"+
		"\3\u01bf\3\u01bf\5\u01bf\u280c\n\u01bf\3\u01c0\3\u01c0\3\u01c0\3\u01c0"+
		"\3\u01c0\5\u01c0\u2813\n\u01c0\3\u01c1\3\u01c1\3\u01c1\3\u01c1\3\u01c1"+
		"\3\u01c1\3\u01c1\3\u01c1\3\u01c1\3\u01c1\5\u01c1\u281f\n\u01c1\3\u01c1"+
		"\3\u01c1\3\u01c1\3\u01c1\3\u01c1\5\u01c1\u2826\n\u01c1\3\u01c1\3\u01c1"+
		"\3\u01c2\3\u01c2\3\u01c2\5\u01c2\u282d\n\u01c2\3\u01c2\3\u01c2\3\u01c2"+
		"\3\u01c2\3\u01c2\5\u01c2\u2834\n\u01c2\3\u01c2\3\u01c2\3\u01c2\3\u01c2"+
		"\5\u01c2\u283a\n\u01c2\3\u01c2\3\u01c2\3\u01c2\3\u01c2\3\u01c2\5\u01c2"+
		"\u2841\n\u01c2\3\u01c2\5\u01c2\u2844\n\u01c2\3\u01c3\3\u01c3\3\u01c3\5"+
		"\u01c3\u2849\n\u01c3\3\u01c3\3\u01c3\3\u01c4\3\u01c4\3\u01c4\5\u01c4\u2850"+
		"\n\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\5\u01c4\u2857\n\u01c4"+
		"\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\5\u01c4\u285f\n\u01c4"+
		"\3\u01c4\3\u01c4\3\u01c4\5\u01c4\u2864\n\u01c4\3\u01c5\3\u01c5\5\u01c5"+
		"\u2868\n\u01c5\3\u01c6\3\u01c6\3\u01c6\5\u01c6\u286d\n\u01c6\3\u01c6\3"+
		"\u01c6\3\u01c6\3\u01c6\5\u01c6\u2873\n\u01c6\3\u01c6\3\u01c6\3\u01c6\3"+
		"\u01c6\5\u01c6\u2879\n\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\5\u01c6\u287f"+
		"\n\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\5\u01c6\u2885\n\u01c6\3\u01c6"+
		"\3\u01c6\3\u01c6\3\u01c6\5\u01c6\u288b\n\u01c6\3\u01c6\3\u01c6\3\u01c6"+
		"\3\u01c6\5\u01c6\u2891\n\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\5\u01c6"+
		"\u2897\n\u01c6\3\u01c6\5\u01c6\u289a\n\u01c6\3\u01c7\3\u01c7\5\u01c7\u289e"+
		"\n\u01c7\3\u01c7\3\u01c7\3\u01c7\5\u01c7\u28a3\n\u01c7\7\u01c7\u28a5\n"+
		"\u01c7\f\u01c7\16\u01c7\u28a8\13\u01c7\3\u01c8\3\u01c8\3\u01c8\7\u01c8"+
		"\u28ad\n\u01c8\f\u01c8\16\u01c8\u28b0\13\u01c8\3\u01c9\3\u01c9\5\u01c9"+
		"\u28b4\n\u01c9\3\u01ca\3\u01ca\3\u01cb\3\u01cb\3\u01cc\5\u01cc\u28bb\n"+
		"\u01cc\3\u01cc\3\u01cc\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd\5\u01cd"+
		"\u28c4\n\u01cd\5\u01cd\u28c6\n\u01cd\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3"+
		"\u01ce\5\u01ce\u28cd\n\u01ce\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3"+
		"\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\5\u01cf\u28d9\n\u01cf\3\u01d0\3"+
		"\u01d0\3\u01d0\5\u01d0\u28de\n\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3"+
		"\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0\5\u01d0\u28e9\n\u01d0\3\u01d0\3"+
		"\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0\5\u01d0\u28f3\n"+
		"\u01d0\5\u01d0\u28f5\n\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0\5\u01d0\u28fb"+
		"\n\u01d0\5\u01d0\u28fd\n\u01d0\3\u01d0\3\u01d0\3\u01d0\5\u01d0\u2902\n"+
		"\u01d0\5\u01d0\u2904\n\u01d0\3\u01d0\5\u01d0\u2907\n\u01d0\3\u01d1\3\u01d1"+
		"\5\u01d1\u290b\n\u01d1\3\u01d2\3\u01d2\5\u01d2\u290f\n\u01d2\3\u01d3\3"+
		"\u01d3\3\u01d3\3\u01d3\5\u01d3\u2915\n\u01d3\3\u01d3\3\u01d3\3\u01d3\3"+
		"\u01d3\3\u01d3\3\u01d3\3\u01d3\5\u01d3\u291e\n\u01d3\3\u01d3\5\u01d3\u2921"+
		"\n\u01d3\5\u01d3\u2923\n\u01d3\3\u01d4\5\u01d4\u2926\n\u01d4\3\u01d4\3"+
		"\u01d4\3\u01d4\3\u01d4\5\u01d4\u292c\n\u01d4\3\u01d4\3\u01d4\5\u01d4\u2930"+
		"\n\u01d4\3\u01d4\5\u01d4\u2933\n\u01d4\3\u01d5\3\u01d5\3\u01d5\3\u01d5"+
		"\3\u01d5\3\u01d5\3\u01d5\5\u01d5\u293c\n\u01d5\3\u01d6\3\u01d6\3\u01d6"+
		"\3\u01d6\3\u01d6\3\u01d6\3\u01d6\5\u01d6\u2945\n\u01d6\3\u01d7\3\u01d7"+
		"\3\u01d7\3\u01d7\3\u01d7\3\u01d7\3\u01d7\3\u01d7\3\u01d7\3\u01d7\5\u01d7"+
		"\u2951\n\u01d7\3\u01d7\5\u01d7\u2954\n\u01d7\3\u01d8\3\u01d8\5\u01d8\u2958"+
		"\n\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\5\u01d8\u295e\n\u01d8\3\u01d8"+
		"\5\u01d8\u2961\n\u01d8\3\u01d8\3\u01d8\5\u01d8\u2965\n\u01d8\3\u01d8\3"+
		"\u01d8\3\u01d8\3\u01d8\5\u01d8\u296b\n\u01d8\3\u01d9\3\u01d9\3\u01d9\5"+
		"\u01d9\u2970\n\u01d9\3\u01da\3\u01da\3\u01da\5\u01da\u2975\n\u01da\3\u01da"+
		"\3\u01da\5\u01da\u2979\n\u01da\3\u01da\3\u01da\5\u01da\u297d\n\u01da\3"+
		"\u01da\3\u01da\5\u01da\u2981\n\u01da\3\u01db\3\u01db\3\u01dc\3\u01dc\3"+
		"\u01dc\5\u01dc\u2988\n\u01dc\3\u01dd\3\u01dd\3\u01de\3\u01de\3\u01de\3"+
		"\u01de\3\u01de\3\u01de\3\u01de\3\u01de\3\u01de\3\u01de\3\u01de\3\u01de"+
		"\3\u01de\3\u01de\3\u01de\5\u01de\u299b\n\u01de\3\u01df\3\u01df\3\u01e0"+
		"\3\u01e0\5\u01e0\u29a1\n\u01e0\3\u01e0\2\4^\u02cc\u01e1\2\4\6\b\n\f\16"+
		"\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bd"+
		"fhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092"+
		"\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa"+
		"\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2"+
		"\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da"+
		"\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2"+
		"\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a"+
		"\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122"+
		"\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a"+
		"\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152"+
		"\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a"+
		"\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182"+
		"\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a"+
		"\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2"+
		"\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca"+
		"\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2"+
		"\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa"+
		"\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208\u020a\u020c\u020e\u0210\u0212"+
		"\u0214\u0216\u0218\u021a\u021c\u021e\u0220\u0222\u0224\u0226\u0228\u022a"+
		"\u022c\u022e\u0230\u0232\u0234\u0236\u0238\u023a\u023c\u023e\u0240\u0242"+
		"\u0244\u0246\u0248\u024a\u024c\u024e\u0250\u0252\u0254\u0256\u0258\u025a"+
		"\u025c\u025e\u0260\u0262\u0264\u0266\u0268\u026a\u026c\u026e\u0270\u0272"+
		"\u0274\u0276\u0278\u027a\u027c\u027e\u0280\u0282\u0284\u0286\u0288\u028a"+
		"\u028c\u028e\u0290\u0292\u0294\u0296\u0298\u029a\u029c\u029e\u02a0\u02a2"+
		"\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8\u02ba"+
		"\u02bc\u02be\u02c0\u02c2\u02c4\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2"+
		"\u02d4\u02d6\u02d8\u02da\u02dc\u02de\u02e0\u02e2\u02e4\u02e6\u02e8\u02ea"+
		"\u02ec\u02ee\u02f0\u02f2\u02f4\u02f6\u02f8\u02fa\u02fc\u02fe\u0300\u0302"+
		"\u0304\u0306\u0308\u030a\u030c\u030e\u0310\u0312\u0314\u0316\u0318\u031a"+
		"\u031c\u031e\u0320\u0322\u0324\u0326\u0328\u032a\u032c\u032e\u0330\u0332"+
		"\u0334\u0336\u0338\u033a\u033c\u033e\u0340\u0342\u0344\u0346\u0348\u034a"+
		"\u034c\u034e\u0350\u0352\u0354\u0356\u0358\u035a\u035c\u035e\u0360\u0362"+
		"\u0364\u0366\u0368\u036a\u036c\u036e\u0370\u0372\u0374\u0376\u0378\u037a"+
		"\u037c\u037e\u0380\u0382\u0384\u0386\u0388\u038a\u038c\u038e\u0390\u0392"+
		"\u0394\u0396\u0398\u039a\u039c\u039e\u03a0\u03a2\u03a4\u03a6\u03a8\u03aa"+
		"\u03ac\u03ae\u03b0\u03b2\u03b4\u03b6\u03b8\u03ba\u03bc\u03be\2\u008c\3"+
		"\2\u031a\u031b\4\2\u031a\u031a\u031f\u031f\4\2\u01d7\u01d7\u02ef\u02f0"+
		"\4\2\u031a\u031b\u031f\u031f\4\2\u00bb\u00bb\u02d0\u02d0\5\2\u0317\u0317"+
		"\u031a\u031a\u031f\u031f\5\2}}\u012b\u012b\u016b\u016b\4\2\u00e2\u00e2"+
		"\u00e5\u00e5\3\2\u031f\u0320\3\2\u0124\u0128\4\2\u01c5\u01c5\u0278\u0278"+
		"\4\2\u012e\u012e\u0272\u0272\5\2UU\u012e\u012e\u0272\u0272\5\2\u00d5\u00d5"+
		"\u0100\u0100\u02c3\u02c4\4\2\23\23\u02e7\u02e7\4\2\27\27\u023f\u023f\4"+
		"\2\6\6\u029f\u029f\5\2\6\6\u0264\u0264\u029d\u029d\4\2\n\nII\4\2\4\4h"+
		"h\4\2\u01f1\u01f1\u02d1\u02d1\4\2\u01e2\u01e2\u01eb\u01eb\4\2\u031b\u031b"+
		"\u031f\u031f\4\2\u0229\u0229\u024e\u024e\4\2\b\t\u00db\u00db\5\2\u00d5"+
		"\u00d5\u00f7\u00f7\u00f9\u00f9\4\2\u014d\u014d\u0150\u0150\4\2\13\13\u00ed"+
		"\u00ed\3\2\u031d\u031e\4\2\4\4\u013d\u013d\4\2\u00b6\u00b6\u017b\u017b"+
		"\3\2\u0106\u0107\4\2\u031b\u031b\u031f\u0320\4\2\u00ce\u00ce\u0169\u0169"+
		"\4\2\u00c9\u00c9\u0146\u0146\4\2\u010d\u010d\u01e2\u01e2\4\2\u031d\u031d"+
		"\u031f\u031f\4\2^^\u0092\u0092\6\2]]\u00a2\u00a2\u0132\u0132\u016c\u016c"+
		"\4\2\36\36\u0201\u0201\4\2\u00a2\u00a2\u016c\u016c\4\2]]\u016c\u016c\5"+
		"\2\u020c\u020c\u024e\u024e\u02eb\u02eb\4\2\u0300\u0300\u031b\u031b\5\2"+
		"BB\u013f\u013f\u01f7\u01f7\4\2ZZ\u031f\u031f\4\2ZZ\u031b\u031b\4\2\u0238"+
		"\u0238\u031f\u031f\5\2\u020c\u020c\u0229\u0229\u024e\u024e\7\2\u0187\u0189"+
		"\u01dc\u01dc\u01de\u01de\u0299\u029b\u02f5\u02f6\4\2\u0086\u0086\u008c"+
		"\u008c\5\2\u0217\u0217\u023e\u023e\u024f\u024f\5\2\r\r\u0159\u0159\u0221"+
		"\u0221\4\2\u00d5\u00d5\u00f3\u00f3\3\2\u0102\u0103\5\2]]\u00a2\u00a2\u016c"+
		"\u016c\4\2\u0086\u0086\u018b\u018b\4\2\u027b\u027c\u02a0\u02a0\4\2\u00f5"+
		"\u00f5\u02bc\u02bc\4\2\6\6\u009e\u009e\5\2\u01ee\u01ee\u02be\u02be\u0307"+
		"\u0307\5\2\u0156\u0156\u019b\u019b\u01e2\u01e2\5\2\u01d0\u01d0\u0219\u0219"+
		"\u0257\u0257\4\2\u020f\u020f\u0238\u0238\4\2\6\6\u00a6\u00a7\5\2\u00ab"+
		"\u00ab\u00d0\u00d0\u00de\u00de\5\2\u0113\u0113\u0153\u0153\u01e4\u01e4"+
		"\4\2ll\u01e4\u01e4\5\2\6\6\u017f\u017f\u0282\u0282\4\2\u008d\u008d\u00e2"+
		"\u00e2\5\2\u01e9\u01e9\u0273\u0273\u0276\u0276\4\2\u029d\u029d\u029f\u029f"+
		"\5\2\u025d\u025d\u02b4\u02b4\u02d5\u02d5\5\2\u0190\u0190\u01e4\u01e4\u0207"+
		"\u0207\4\2\u0118\u0118\u02e5\u02e5\4\2\u0207\u0207\u02d4\u02d4\5\2\u008d"+
		"\u008d\u01ad\u01ad\u02d4\u02d4\5\2\u00d5\u00d5\u01b5\u01b5\u02f3\u02f3"+
		"\4\2\u0257\u0257\u02c6\u02c6\4\2\u0082\u0082\u01fd\u01fd\5\2bb\u0158\u0158"+
		"\u016e\u016e\4\299\u00da\u00da\4\2\u00a0\u00a0\u00d3\u00d3\4\2\u00d7\u00d7"+
		"\u0141\u0141\4\2\u00d2\u00d2\u0208\u0208\4\2\u00d9\u00d9\u01b5\u01b5\4"+
		"\2CC\u0152\u0152\4\2\u00d6\u00d6\u011e\u011e\4\2\u00b9\u00b9\u00d8\u00d8"+
		"\4\2\u0187\u0189\u02f6\u02f6\4\2\u0171\u0171\u023c\u023c\3\2\u027b\u027c"+
		"\4\2\u0082\u0082\u0320\u0320\4\2\u01d3\u01d3\u01ee\u01ee\4\2\u01f5\u01f5"+
		"\u02db\u02db\4\2\u0156\u0156\u0175\u0175\3\2\u0160\u0161\6\2\u01ae\u01ae"+
		"\u027d\u027d\u02ca\u02ca\u031f\u031f\4\2\u01be\u01be\u01e6\u01e6\4\2\20"+
		"\20;;\4\2\u0223\u0223\u02cb\u02cb\4\2\u0209\u0209\u02c0\u02c0\6\2\u01e7"+
		"\u01e7\u01fc\u01fc\u022e\u022e\u02dc\u02dc\5\2\u0279\u0279\u029d\u029d"+
		"\u02c1\u02c1\4\2\u0181\u0181\u02a6\u02a6\3\2\u033a\u033c\5\2\u032f\u032f"+
		"\u033d\u033e\u0340\u0342\3\2\u033d\u033e\5\2\6\6\r\r\u0143\u0143\4\2\6"+
		"\6cc\3\2\u0321\u0322\4\2\u02b9\u02b9\u02bc\u02bc\4\2\u0202\u0202\u0263"+
		"\u0263\4\2\3\3\u0312\u0312\4\2\u019b\u019b\u0283\u0283\5\2\u01a7\u01a7"+
		"\u02b7\u02b7\u02fb\u02fb\4\2\21\21__\4\2\u00ee\u00ee\u0215\u0215\5\2\u00c9"+
		"\u00c9\u01bc\u01bc\u0215\u0215\5\2\u00c9\u00c9\u0215\u0215\u023d\u023d"+
		"\4\2\u00df\u00df\u031a\u031b\5\2\u008d\u008d\u00b1\u00b1\u011f\u011f\6"+
		"\2\u00c9\u00c9\u0215\u0215\u023d\u023d\u02a7\u02a7\4\2\u031a\u031a\u031c"+
		"\u031c\5\2\u01da\u01da\u0298\u0298\u02ba\u02ba\b\2\u01a3\u01a3\u0242\u0242"+
		"\u0252\u0252\u02df\u02e0\u02e4\u02e4\u0305\u0306\3\2\u01c1\u01c2\4\2\u0203"+
		"\u0203\u0231\u0231\4\2\u022f\u022f\u0232\u0232\4\2\u0297\u0297\u02bc\u02bc"+
		"\5\2\u008d\u008d\u00e2\u00e2\u029d\u029d\4\2\65\65\u00d4\u00d4\3\2\u0110"+
		"\u0111\4\2\u0242\u0242\u031b\u031b\4\2\u031b\u031b\u0321\u0321\37\2(("+
		"SSss\u0083\u0084\u0087\u0087\u00a0\u00a0\u00ac\u00ac\u00bd\u00be\u00e3"+
		"\u00e3\u00f1\u00f1\u0105\u0105\u0107\u0107\u0109\u0109\u011a\u011b\u0122"+
		"\u0122\u0129\u0129\u0137\u0137\u0140\u0140\u0144\u0144\u014b\u014b\u014d"+
		"\u014d\u0159\u0159\u0181\u01e7\u01e9\u021e\u0220\u0227\u0229\u030a\u030c"+
		"\u030e\u0310\u0310\u031c\u031c\3\2\u0327\u032e\7\2\u020c\u020c\u0229\u0229"+
		"\u024e\u024e\u02eb\u02eb\u033c\u033c\2\u3075\2\u03c3\3\2\2\2\4\u03d9\3"+
		"\2\2\2\6\u03df\3\2\2\2\b\u03ea\3\2\2\2\n\u03f1\3\2\2\2\f\u0492\3\2\2\2"+
		"\16\u0499\3\2\2\2\20\u04a7\3\2\2\2\22\u04a9\3\2\2\2\24\u04b4\3\2\2\2\26"+
		"\u04b8\3\2\2\2\30\u04c6\3\2\2\2\32\u04c8\3\2\2\2\34\u04cf\3\2\2\2\36\u04d9"+
		"\3\2\2\2 \u04e5\3\2\2\2\"\u04e7\3\2\2\2$\u04e9\3\2\2\2&\u04eb\3\2\2\2"+
		"(\u0505\3\2\2\2*\u0516\3\2\2\2,\u0523\3\2\2\2.\u0552\3\2\2\2\60\u0554"+
		"\3\2\2\2\62\u0563\3\2\2\2\64\u0565\3\2\2\2\66\u0582\3\2\2\28\u0597\3\2"+
		"\2\2:\u05a4\3\2\2\2<\u05a9\3\2\2\2>\u05ad\3\2\2\2@\u05b1\3\2\2\2B\u05bc"+
		"\3\2\2\2D\u05c1\3\2\2\2F\u05c3\3\2\2\2H\u05c8\3\2\2\2J\u05ca\3\2\2\2L"+
		"\u05cc\3\2\2\2N\u05cf\3\2\2\2P\u05d3\3\2\2\2R\u05d9\3\2\2\2T\u05db\3\2"+
		"\2\2V\u05de\3\2\2\2X\u05e0\3\2\2\2Z\u05e3\3\2\2\2\\\u05e8\3\2\2\2^\u05f3"+
		"\3\2\2\2`\u05fc\3\2\2\2b\u0600\3\2\2\2d\u0602\3\2\2\2f\u0608\3\2\2\2h"+
		"\u060a\3\2\2\2j\u060c\3\2\2\2l\u060f\3\2\2\2n\u0617\3\2\2\2p\u0619\3\2"+
		"\2\2r\u061b\3\2\2\2t\u0631\3\2\2\2v\u0644\3\2\2\2x\u064c\3\2\2\2z\u0650"+
		"\3\2\2\2|\u0658\3\2\2\2~\u0667\3\2\2\2\u0080\u0669\3\2\2\2\u0082\u0695"+
		"\3\2\2\2\u0084\u069e\3\2\2\2\u0086\u06ab\3\2\2\2\u0088\u06ad\3\2\2\2\u008a"+
		"\u06af\3\2\2\2\u008c\u06b2\3\2\2\2\u008e\u06b6\3\2\2\2\u0090\u06c0\3\2"+
		"\2\2\u0092\u06ca\3\2\2\2\u0094\u06f6\3\2\2\2\u0096\u070d\3\2\2\2\u0098"+
		"\u070f\3\2\2\2\u009a\u0711\3\2\2\2\u009c\u0713\3\2\2\2\u009e\u0718\3\2"+
		"\2\2\u00a0\u071b\3\2\2\2\u00a2\u087e\3\2\2\2\u00a4\u0880\3\2\2\2\u00a6"+
		"\u08b6\3\2\2\2\u00a8\u08bb\3\2\2\2\u00aa\u08e7\3\2\2\2\u00ac\u08fe\3\2"+
		"\2\2\u00ae\u091c\3\2\2\2\u00b0\u0920\3\2\2\2\u00b2\u0926\3\2\2\2\u00b4"+
		"\u092c\3\2\2\2\u00b6\u0930\3\2\2\2\u00b8\u0934\3\2\2\2\u00ba\u0939\3\2"+
		"\2\2\u00bc\u0947\3\2\2\2\u00be\u094d\3\2\2\2\u00c0\u0953\3\2\2\2\u00c2"+
		"\u0963\3\2\2\2\u00c4\u0967\3\2\2\2\u00c6\u096d\3\2\2\2\u00c8\u0973\3\2"+
		"\2\2\u00ca\u097b\3\2\2\2\u00cc\u0981\3\2\2\2\u00ce\u0990\3\2\2\2\u00d0"+
		"\u09a2\3\2\2\2\u00d2\u09a9\3\2\2\2\u00d4\u09ae\3\2\2\2\u00d6\u09b9\3\2"+
		"\2\2\u00d8\u09be\3\2\2\2\u00da\u09c2\3\2\2\2\u00dc\u09c6\3\2\2\2\u00de"+
		"\u09cb\3\2\2\2\u00e0\u09d0\3\2\2\2\u00e2\u09d5\3\2\2\2\u00e4\u09e3\3\2"+
		"\2\2\u00e6\u09e9\3\2\2\2\u00e8\u09ee\3\2\2\2\u00ea\u09f6\3\2\2\2\u00ec"+
		"\u09fa\3\2\2\2\u00ee\u0a0b\3\2\2\2\u00f0\u0a13\3\2\2\2\u00f2\u0a19\3\2"+
		"\2\2\u00f4\u0a27\3\2\2\2\u00f6\u0a3d\3\2\2\2\u00f8\u0a42\3\2\2\2\u00fa"+
		"\u0a48\3\2\2\2\u00fc\u0a4d\3\2\2\2\u00fe\u0a51\3\2\2\2\u0100\u0a6d\3\2"+
		"\2\2\u0102\u0a78\3\2\2\2\u0104\u0a81\3\2\2\2\u0106\u0a8e\3\2\2\2\u0108"+
		"\u0a96\3\2\2\2\u010a\u0a9b\3\2\2\2\u010c\u0aa6\3\2\2\2\u010e\u0ac4\3\2"+
		"\2\2\u0110\u0ae2\3\2\2\2\u0112\u0af0\3\2\2\2\u0114\u0b08\3\2\2\2\u0116"+
		"\u0b18\3\2\2\2\u0118\u0b25\3\2\2\2\u011a\u0b38\3\2\2\2\u011c\u0b45\3\2"+
		"\2\2\u011e\u0b4e\3\2\2\2\u0120\u0b6c\3\2\2\2\u0122\u0c5f\3\2\2\2\u0124"+
		"\u0c68\3\2\2\2\u0126\u0ca2\3\2\2\2\u0128\u0cd3\3\2\2\2\u012a\u0cd5\3\2"+
		"\2\2\u012c\u0cfe\3\2\2\2\u012e\u0d30\3\2\2\2\u0130\u0d76\3\2\2\2\u0132"+
		"\u0db9\3\2\2\2\u0134\u0dc9\3\2\2\2\u0136\u0de5\3\2\2\2\u0138\u0df8\3\2"+
		"\2\2\u013a\u0e0d\3\2\2\2\u013c\u0e55\3\2\2\2\u013e\u0eb4\3\2\2\2\u0140"+
		"\u0eca\3\2\2\2\u0142\u0ed6\3\2\2\2\u0144\u0ef2\3\2\2\2\u0146\u0f07\3\2"+
		"\2\2\u0148\u0f21\3\2\2\2\u014a\u0f2a\3\2\2\2\u014c\u0f4a\3\2\2\2\u014e"+
		"\u0f54\3\2\2\2\u0150\u0f64\3\2\2\2\u0152\u0f70\3\2\2\2\u0154\u0f79\3\2"+
		"\2\2\u0156\u0f8a\3\2\2\2\u0158\u0fa2\3\2\2\2\u015a\u100e\3\2\2\2\u015c"+
		"\u1028\3\2\2\2\u015e\u1034\3\2\2\2\u0160\u103b\3\2\2\2\u0162\u1067\3\2"+
		"\2\2\u0164\u1072\3\2\2\2\u0166\u1086\3\2\2\2\u0168\u10b0\3\2\2\2\u016a"+
		"\u10b7\3\2\2\2\u016c\u10c5\3\2\2\2\u016e\u10d7\3\2\2\2\u0170\u111d\3\2"+
		"\2\2\u0172\u1148\3\2\2\2\u0174\u117e\3\2\2\2\u0176\u1207\3\2\2\2\u0178"+
		"\u1296\3\2\2\2\u017a\u12b3\3\2\2\2\u017c\u12d0\3\2\2\2\u017e\u133f\3\2"+
		"\2\2\u0180\u134c\3\2\2\2\u0182\u1354\3\2\2\2\u0184\u135c\3\2\2\2\u0186"+
		"\u1372\3\2\2\2\u0188\u1390\3\2\2\2\u018a\u13ab\3\2\2\2\u018c\u13bf\3\2"+
		"\2\2\u018e\u13ef\3\2\2\2\u0190\u1414\3\2\2\2\u0192\u14e0\3\2\2\2\u0194"+
		"\u14fe\3\2\2\2\u0196\u1500\3\2\2\2\u0198\u1520\3\2\2\2\u019a\u154f\3\2"+
		"\2\2\u019c\u1583\3\2\2\2\u019e\u1593\3\2\2\2\u01a0\u15a1\3\2\2\2\u01a2"+
		"\u15ea\3\2\2\2\u01a4\u1609\3\2\2\2\u01a6\u160b\3\2\2\2\u01a8\u160f\3\2"+
		"\2\2\u01aa\u162d\3\2\2\2\u01ac\u162f\3\2\2\2\u01ae\u1644\3\2\2\2\u01b0"+
		"\u169d\3\2\2\2\u01b2\u169f\3\2\2\2\u01b4\u16ac\3\2\2\2\u01b6\u16e4\3\2"+
		"\2\2\u01b8\u16e7\3\2\2\2\u01ba\u1715\3\2\2\2\u01bc\u1718\3\2\2\2\u01be"+
		"\u1739\3\2\2\2\u01c0\u174a\3\2\2\2\u01c2\u174d\3\2\2\2\u01c4\u1788\3\2"+
		"\2\2\u01c6\u17a0\3\2\2\2\u01c8\u17b0\3\2\2\2\u01ca\u17b2\3\2\2\2\u01cc"+
		"\u17e3\3\2\2\2\u01ce\u180c\3\2\2\2\u01d0\u1838\3\2\2\2\u01d2\u1840\3\2"+
		"\2\2\u01d4\u186d\3\2\2\2\u01d6\u186f\3\2\2\2\u01d8\u1877\3\2\2\2\u01da"+
		"\u1898\3\2\2\2\u01dc\u18a0\3\2\2\2\u01de\u18bb\3\2\2\2\u01e0\u18d3\3\2"+
		"\2\2\u01e2\u18f3\3\2\2\2\u01e4\u1911\3\2\2\2\u01e6\u1928\3\2\2\2\u01e8"+
		"\u1936\3\2\2\2\u01ea\u1938\3\2\2\2\u01ec\u1957\3\2\2\2\u01ee\u1965\3\2"+
		"\2\2\u01f0\u1985\3\2\2\2\u01f2\u199b\3\2\2\2\u01f4\u19b9\3\2\2\2\u01f6"+
		"\u19bb\3\2\2\2\u01f8\u19ee\3\2\2\2\u01fa\u1a1c\3\2\2\2\u01fc\u1a2f\3\2"+
		"\2\2\u01fe\u1a31\3\2\2\2\u0200\u1a4a\3\2\2\2\u0202\u1a4c\3\2\2\2\u0204"+
		"\u1a54\3\2\2\2\u0206\u1a56\3\2\2\2\u0208\u1ae2\3\2\2\2\u020a\u1aea\3\2"+
		"\2\2\u020c\u1aec\3\2\2\2\u020e\u1aee\3\2\2\2\u0210\u1af0\3\2\2\2\u0212"+
		"\u1afe\3\2\2\2\u0214\u1b04\3\2\2\2\u0216\u1b06\3\2\2\2\u0218\u1b08\3\2"+
		"\2\2\u021a\u1b0d\3\2\2\2\u021c\u1b0f\3\2\2\2\u021e\u1b13\3\2\2\2\u0220"+
		"\u1b1f\3\2\2\2\u0222\u1b21\3\2\2\2\u0224\u1b24\3\2\2\2\u0226\u1b27\3\2"+
		"\2\2\u0228\u1b29\3\2\2\2\u022a\u1b2b\3\2\2\2\u022c\u1b2d\3\2\2\2\u022e"+
		"\u1b4a\3\2\2\2\u0230\u1b4c\3\2\2\2\u0232\u1b57\3\2\2\2\u0234\u1b5a\3\2"+
		"\2\2\u0236\u1b63\3\2\2\2\u0238\u1b6b\3\2\2\2\u023a\u1b72\3\2\2\2\u023c"+
		"\u1b89\3\2\2\2\u023e\u1b8b\3\2\2\2\u0240\u1b96\3\2\2\2\u0242\u1b98\3\2"+
		"\2\2\u0244\u1bb3\3\2\2\2\u0246\u1bba\3\2\2\2\u0248\u1bc0\3\2\2\2\u024a"+
		"\u1bd3\3\2\2\2\u024c\u1bd5\3\2\2\2\u024e\u1be6\3\2\2\2\u0250\u1bfd\3\2"+
		"\2\2\u0252\u1c0e\3\2\2\2\u0254\u1c1f\3\2\2\2\u0256\u1c29\3\2\2\2\u0258"+
		"\u1c3a\3\2\2\2\u025a\u1c4b\3\2\2\2\u025c\u1c55\3\2\2\2\u025e\u1c57\3\2"+
		"\2\2\u0260\u1c5e\3\2\2\2\u0262\u1c9a\3\2\2\2\u0264\u1cb9\3\2\2\2\u0266"+
		"\u1cbb\3\2\2\2\u0268\u1db5\3\2\2\2\u026a\u1ea3\3\2\2\2\u026c\u1ecb\3\2"+
		"\2\2\u026e\u1ed8\3\2\2\2\u0270\u1ee6\3\2\2\2\u0272\u1f13\3\2\2\2\u0274"+
		"\u1f17\3\2\2\2\u0276\u1f24\3\2\2\2\u0278\u1f61\3\2\2\2\u027a\u1f63\3\2"+
		"\2\2\u027c\u1f88\3\2\2\2\u027e\u1f8a\3\2\2\2\u0280\u1f9a\3\2\2\2\u0282"+
		"\u1fa7\3\2\2\2\u0284\u1fbb\3\2\2\2\u0286\u1fc8\3\2\2\2\u0288\u1fed\3\2"+
		"\2\2\u028a\u1ffe\3\2\2\2\u028c\u2000\3\2\2\2\u028e\u200d\3\2\2\2\u0290"+
		"\u2026\3\2\2\2\u0292\u2042\3\2\2\2\u0294\u206b\3\2\2\2\u0296\u20be\3\2"+
		"\2\2\u0298\u20c0\3\2\2\2\u029a\u20c4\3\2\2\2\u029c\u20c9\3\2\2\2\u029e"+
		"\u20cd\3\2\2\2\u02a0\u20dc\3\2\2\2\u02a2\u20e1\3\2\2\2\u02a4\u20e5\3\2"+
		"\2\2\u02a6\u20ee\3\2\2\2\u02a8\u20f3\3\2\2\2\u02aa\u20fb\3\2\2\2\u02ac"+
		"\u20ff\3\2\2\2\u02ae\u210c\3\2\2\2\u02b0\u210e\3\2\2\2\u02b2\u213b\3\2"+
		"\2\2\u02b4\u2145\3\2\2\2\u02b6\u2170\3\2\2\2\u02b8\u21b4\3\2\2\2\u02ba"+
		"\u21bf\3\2\2\2\u02bc\u21ca\3\2\2\2\u02be\u21d6\3\2\2\2\u02c0\u21dd\3\2"+
		"\2\2\u02c2\u2206\3\2\2\2\u02c4\u2211\3\2\2\2\u02c6\u2213\3\2\2\2\u02c8"+
		"\u2262\3\2\2\2\u02ca\u2266\3\2\2\2\u02cc\u2270\3\2\2\2\u02ce\u228c\3\2"+
		"\2\2\u02d0\u22a7\3\2\2\2\u02d2\u22ad\3\2\2\2\u02d4\u22b7\3\2\2\2\u02d6"+
		"\u22c1\3\2\2\2\u02d8\u22c3\3\2\2\2\u02da\u22df\3\2\2\2\u02dc\u22e1\3\2"+
		"\2\2\u02de\u22fd\3\2\2\2\u02e0\u22ff\3\2\2\2\u02e2\u2307\3\2\2\2\u02e4"+
		"\u230f\3\2\2\2\u02e6\u2318\3\2\2\2\u02e8\u2353\3\2\2\2\u02ea\u235a\3\2"+
		"\2\2\u02ec\u2368\3\2\2\2\u02ee\u2371\3\2\2\2\u02f0\u2398\3\2\2\2\u02f2"+
		"\u23a8\3\2\2\2\u02f4\u23af\3\2\2\2\u02f6\u23b1\3\2\2\2\u02f8\u2420\3\2"+
		"\2\2\u02fa\u2422\3\2\2\2\u02fc\u2425\3\2\2\2\u02fe\u2429\3\2\2\2\u0300"+
		"\u242b\3\2\2\2\u0302\u2464\3\2\2\2\u0304\u2466\3\2\2\2\u0306\u246f\3\2"+
		"\2\2\u0308\u2477\3\2\2\2\u030a\u2487\3\2\2\2\u030c\u248c\3\2\2\2\u030e"+
		"\u24a9\3\2\2\2\u0310\u24b3\3\2\2\2\u0312\u24b9\3\2\2\2\u0314\u24bb\3\2"+
		"\2\2\u0316\u24c8\3\2\2\2\u0318\u24ca\3\2\2\2\u031a\u24ff\3\2\2\2\u031c"+
		"\u2501\3\2\2\2\u031e\u2512\3\2\2\2\u0320\u251a\3\2\2\2\u0322\u251f\3\2"+
		"\2\2\u0324\u2549\3\2\2\2\u0326\u254b\3\2\2\2\u0328\u2553\3\2\2\2\u032a"+
		"\u255d\3\2\2\2\u032c\u2565\3\2\2\2\u032e\u2583\3\2\2\2\u0330\u2585\3\2"+
		"\2\2\u0332\u2593\3\2\2\2\u0334\u2610\3\2\2\2\u0336\u2617\3\2\2\2\u0338"+
		"\u2644\3\2\2\2\u033a\u265c\3\2\2\2\u033c\u265e\3\2\2\2\u033e\u2665\3\2"+
		"\2\2\u0340\u266c\3\2\2\2\u0342\u2673\3\2\2\2\u0344\u2678\3\2\2\2\u0346"+
		"\u267e\3\2\2\2\u0348\u2683\3\2\2\2\u034a\u2687\3\2\2\2\u034c\u268c\3\2"+
		"\2\2\u034e\u269b\3\2\2\2\u0350\u26aa\3\2\2\2\u0352\u26e0\3\2\2\2\u0354"+
		"\u26e2\3\2\2\2\u0356\u26ef\3\2\2\2\u0358\u26f1\3\2\2\2\u035a\u26ff\3\2"+
		"\2\2\u035c\u2711\3\2\2\2\u035e\u2733\3\2\2\2\u0360\u2749\3\2\2\2\u0362"+
		"\u274c\3\2\2\2\u0364\u2750\3\2\2\2\u0366\u275f\3\2\2\2\u0368\u2768\3\2"+
		"\2\2\u036a\u276c\3\2\2\2\u036c\u2774\3\2\2\2\u036e\u277a\3\2\2\2\u0370"+
		"\u279e\3\2\2\2\u0372\u27a0\3\2\2\2\u0374\u27ad\3\2\2\2\u0376\u27af\3\2"+
		"\2\2\u0378\u27c4\3\2\2\2\u037a\u2802\3\2\2\2\u037c\u280b\3\2\2\2\u037e"+
		"\u2812\3\2\2\2\u0380\u2825\3\2\2\2\u0382\u2843\3\2\2\2\u0384\u2848\3\2"+
		"\2\2\u0386\u2863\3\2\2\2\u0388\u2867\3\2\2\2\u038a\u2899\3\2\2\2\u038c"+
		"\u289b\3\2\2\2\u038e\u28a9\3\2\2\2\u0390\u28b3\3\2\2\2\u0392\u28b5\3\2"+
		"\2\2\u0394\u28b7\3\2\2\2\u0396\u28ba\3\2\2\2\u0398\u28c5\3\2\2\2\u039a"+
		"\u28cc\3\2\2\2\u039c\u28ce\3\2\2\2\u039e\u28da\3\2\2\2\u03a0\u290a\3\2"+
		"\2\2\u03a2\u290e\3\2\2\2\u03a4\u2910\3\2\2\2\u03a6\u2925\3\2\2\2\u03a8"+
		"\u2934\3\2\2\2\u03aa\u2944\3\2\2\2\u03ac\u2946\3\2\2\2\u03ae\u296a\3\2"+
		"\2\2\u03b0\u296f\3\2\2\2\u03b2\u2980\3\2\2\2\u03b4\u2982\3\2\2\2\u03b6"+
		"\u2987\3\2\2\2\u03b8\u2989\3\2\2\2\u03ba\u299a\3\2\2\2\u03bc\u299c\3\2"+
		"\2\2\u03be\u299e\3\2\2\2\u03c0\u03c2\5\4\3\2\u03c1\u03c0\3\2\2\2\u03c2"+
		"\u03c5\3\2\2\2\u03c3\u03c1\3\2\2\2\u03c3\u03c4\3\2\2\2\u03c4\u03c6\3\2"+
		"\2\2\u03c5\u03c3\3\2\2\2\u03c6\u03c7\7\2\2\3\u03c7\3\3\2\2\2\u03c8\u03cc"+
		"\5\u0272\u013a\2\u03c9\u03cb\5\u0298\u014d\2\u03ca\u03c9\3\2\2\2\u03cb"+
		"\u03ce\3\2\2\2\u03cc\u03ca\3\2\2\2\u03cc\u03cd\3\2\2\2\u03cd\u03da\3\2"+
		"\2\2\u03ce\u03cc\3\2\2\2\u03cf\u03d1\5\u0272\u013a\2\u03d0\u03cf\3\2\2"+
		"\2\u03d0\u03d1\3\2\2\2\u03d1\u03d2\3\2\2\2\u03d2\u03d6\5\6\4\2\u03d3\u03d5"+
		"\5\u0298\u014d\2\u03d4\u03d3\3\2\2\2\u03d5\u03d8\3\2\2\2\u03d6\u03d4\3"+
		"\2\2\2\u03d6\u03d7\3\2\2\2\u03d7\u03da\3\2\2\2\u03d8\u03d6\3\2\2\2\u03d9"+
		"\u03c8\3\2\2\2\u03d9\u03d0\3\2\2\2\u03da\5\3\2\2\2\u03db\u03dd\5\b\5\2"+
		"\u03dc\u03de\7\u0338\2\2\u03dd\u03dc\3\2\2\2\u03dd\u03de\3\2\2\2\u03de"+
		"\u03e0\3\2\2\2\u03df\u03db\3\2\2\2\u03e0\u03e1\3\2\2\2\u03e1\u03df\3\2"+
		"\2\2\u03e1\u03e2\3\2\2\2\u03e2\7\3\2\2\2\u03e3\u03eb\5\n\6\2\u03e4\u03eb"+
		"\5\f\7\2\u03e5\u03eb\5\20\t\2\u03e6\u03eb\5\u029e\u0150\2\u03e7\u03eb"+
		"\5\60\31\2\u03e8\u03eb\5\62\32\2\u03e9\u03eb\5\16\b\2\u03ea\u03e3\3\2"+
		"\2\2\u03ea\u03e4\3\2\2\2\u03ea\u03e5\3\2\2\2\u03ea\u03e6\3\2\2\2\u03ea"+
		"\u03e7\3\2\2\2\u03ea\u03e8\3\2\2\2\u03ea\u03e9\3\2\2\2\u03eb\t\3\2\2\2"+
		"\u03ec\u03f2\5\u01ae\u00d8\2\u03ed\u03f2\5\u01b4\u00db\2\u03ee\u03f2\5"+
		"\u01b8\u00dd\2\u03ef\u03f2\5\u01be\u00e0\2\u03f0\u03f2\5\u01c2\u00e2\2"+
		"\u03f1\u03ec\3\2\2\2\u03f1\u03ed\3\2\2\2\u03f1\u03ee\3\2\2\2\u03f1\u03ef"+
		"\3\2\2\2\u03f1\u03f0\3\2\2\2\u03f2\13\3\2\2\2\u03f3\u0493\5\64\33\2\u03f4"+
		"\u0493\5<\37\2\u03f5\u0493\5v<\2\u03f6\u0493\5\u0084C\2\u03f7\u0493\5"+
		"\u0090I\2\u03f8\u0493\5\u0092J\2\u03f9\u0493\5\u008eH\2\u03fa\u0493\5"+
		"\u009eP\2\u03fb\u0493\5\u00a8U\2\u03fc\u0493\5\u00aaV\2\u03fd\u0493\5"+
		"\u0116\u008c\2\u03fe\u0493\5\u011a\u008e\2\u03ff\u0493\5\u01f8\u00fd\2"+
		"\u0400\u0493\5\u015c\u00af\2\u0401\u0493\5\u0206\u0104\2\u0402\u0493\5"+
		"\u0120\u0091\2\u0403\u0493\5\u0128\u0095\2\u0404\u0493\5\u012a\u0096\2"+
		"\u0405\u0493\5\u012e\u0098\2\u0406\u0493\5\u0132\u009a\2\u0407\u0493\5"+
		"\u0136\u009c\2\u0408\u0493\5\u013e\u00a0\2\u0409\u0493\5\u0142\u00a2\2"+
		"\u040a\u0493\5\u013a\u009e\2\u040b\u0493\5\u014a\u00a6\2\u040c\u0493\5"+
		"\u0146\u00a4\2\u040d\u0493\5\u014e\u00a8\2\u040e\u0493\5\u0150\u00a9\2"+
		"\u040f\u0493\5\u0152\u00aa\2\u0410\u0493\5\u0154\u00ab\2\u0411\u0493\5"+
		"\u015a\u00ae\2\u0412\u0493\5\u016a\u00b6\2\u0413\u0493\5\u0164\u00b3\2"+
		"\u0414\u0493\5\u0170\u00b9\2\u0415\u0493\5\u0174\u00bb\2\u0416\u0493\5"+
		"\u0178\u00bd\2\u0417\u0493\5\u017c\u00bf\2\u0418\u0493\5\u017e\u00c0\2"+
		"\u0419\u0493\5\u0182\u00c2\2\u041a\u0493\5\u0184\u00c3\2\u041b\u0493\5"+
		"\u0188\u00c5\2\u041c\u0493\5\u018a\u00c6\2\u041d\u0493\5\u01f6\u00fc\2"+
		"\u041e\u0493\5\u0190\u00c9\2\u041f\u0493\5\u0196\u00cc\2\u0420\u0493\5"+
		"\u0198\u00cd\2\u0421\u0493\5\66\34\2\u0422\u0493\5r:\2\u0423\u0493\5\u0080"+
		"A\2\u0424\u0493\5\u00acW\2\u0425\u0493\5\u0114\u008b\2\u0426\u0493\5\u0118"+
		"\u008d\2\u0427\u0493\5\u011c\u008f\2\u0428\u0493\5\u01ca\u00e6\2\u0429"+
		"\u0493\5\u015e\u00b0\2\u042a\u0493\5\u011e\u0090\2\u042b\u0493\5\u012c"+
		"\u0097\2\u042c\u0493\5\u0130\u0099\2\u042d\u0493\5\u0134\u009b\2\u042e"+
		"\u0493\5\u0138\u009d\2\u042f\u0493\5\u01cc\u00e7\2\u0430\u0493\5\u0140"+
		"\u00a1\2\u0431\u0493\5\u0144\u00a3\2\u0432\u0493\5\u013c\u009f\2\u0433"+
		"\u0493\5\u014c\u00a7\2\u0434\u0493\5\u0148\u00a5\2\u0435\u0493\5\u00a4"+
		"S\2\u0436\u0493\5\u01dc\u00ef\2\u0437\u0493\5\u01ce\u00e8\2\u0438\u0493"+
		"\5\u01d0\u00e9\2\u0439\u0493\5\u0156\u00ac\2\u043a\u0493\5\u0158\u00ad"+
		"\2\u043b\u0493\5\u0160\u00b1\2\u043c\u0493\5\u0162\u00b2\2\u043d\u0493"+
		"\5\u0166\u00b4\2\u043e\u0493\5\u0168\u00b5\2\u043f\u0493\5\u016c\u00b7"+
		"\2\u0440\u0493\5\u016e\u00b8\2\u0441\u0493\5\u0172\u00ba\2\u0442\u0493"+
		"\5\u0176\u00bc\2\u0443\u0493\5\u017a\u00be\2\u0444\u0493\5\u0180\u00c1"+
		"\2\u0445\u0493\5\u0186\u00c4\2\u0446\u0493\5\u01ea\u00f6\2\u0447\u0493"+
		"\5\u018c\u00c7\2\u0448\u0493\5\u018e\u00c8\2\u0449\u0493\5\u01ee\u00f8"+
		"\2\u044a\u0493\5\u0258\u012d\2\u044b\u0493\5\u0192\u00ca\2\u044c\u0493"+
		"\5\u0194\u00cb\2\u044d\u0493\5\u01f2\u00fa\2\u044e\u0493\5\u019a\u00ce"+
		"\2\u044f\u0493\5\u019c\u00cf\2\u0450\u0493\58\35\2\u0451\u0493\5:\36\2"+
		"\u0452\u0493\5t;\2\u0453\u0493\5\u0082B\2\u0454\u0493\5\u009cO\2\u0455"+
		"\u0493\5\u00a6T\2\u0456\u0493\5\u00aeX\2\u0457\u0493\5\u00b0Y\2\u0458"+
		"\u0493\5\u00b2Z\2\u0459\u0493\5\u00b4[\2\u045a\u0493\5\u00b6\\\2\u045b"+
		"\u0493\5\u00b8]\2\u045c\u0493\5\u00ba^\2\u045d\u0493\5\u00bc_\2\u045e"+
		"\u0493\5\u00be`\2\u045f\u0493\5\u00e8u\2\u0460\u0493\5\u00c0a\2\u0461"+
		"\u0493\5\u00c2b\2\u0462\u0493\5\u00ceh\2\u0463\u0493\5\u00d0i\2\u0464"+
		"\u0493\5\u00c4c\2\u0465\u0493\5\u00c6d\2\u0466\u0493\5\u00c8e\2\u0467"+
		"\u0493\5\u00caf\2\u0468\u0493\5\u00ccg\2\u0469\u0493\5\u00d2j\2\u046a"+
		"\u0493\5\u00d4k\2\u046b\u0493\5\u00d6l\2\u046c\u0493\5\u0250\u0129\2\u046d"+
		"\u0493\5\u0242\u0122\2\u046e\u0493\5\u00d8m\2\u046f\u0493\5\u00dan\2\u0470"+
		"\u0493\5\u00dco\2\u0471\u0493\5\u00dep\2\u0472\u0493\5\u00e0q\2\u0473"+
		"\u0493\5\u0248\u0125\2\u0474\u0493\5\u00e2r\2\u0475\u0493\5\u00e4s\2\u0476"+
		"\u0493\5\u00e6t\2\u0477\u0493\5\u00eav\2\u0478\u0493\5\u00ecw\2\u0479"+
		"\u0493\5\u00eex\2\u047a\u0493\5\u00f0y\2\u047b\u0493\5\u00f2z\2\u047c"+
		"\u0493\5\u00f4{\2\u047d\u0493\5\u00f6|\2\u047e\u0493\5\u00f8}\2\u047f"+
		"\u0493\5\u00fa~\2\u0480\u0493\5\u00fc\177\2\u0481\u0493\5\u00fe\u0080"+
		"\2\u0482\u0493\5\u0252\u012a\2\u0483\u0493\5\u0100\u0081\2\u0484\u0493"+
		"\5\u0102\u0082\2\u0485\u0493\5\u0104\u0083\2\u0486\u0493\5\u0254\u012b"+
		"\2\u0487\u0493\5\u024a\u0126\2\u0488\u0493\5\u025a\u012e\2\u0489\u0493"+
		"\5\u0106\u0084\2\u048a\u0493\5\u0256\u012c\2\u048b\u0493\5\u0108\u0085"+
		"\2\u048c\u0493\5\u010a\u0086\2\u048d\u0493\5\u010c\u0087\2\u048e\u0493"+
		"\5\u010e\u0088\2\u048f\u0493\5\u0110\u0089\2\u0490\u0493\5\u0112\u008a"+
		"\2\u0491\u0493\5\u01ec\u00f7\2\u0492\u03f3\3\2\2\2\u0492\u03f4\3\2\2\2"+
		"\u0492\u03f5\3\2\2\2\u0492\u03f6\3\2\2\2\u0492\u03f7\3\2\2\2\u0492\u03f8"+
		"\3\2\2\2\u0492\u03f9\3\2\2\2\u0492\u03fa\3\2\2\2\u0492\u03fb\3\2\2\2\u0492"+
		"\u03fc\3\2\2\2\u0492\u03fd\3\2\2\2\u0492\u03fe\3\2\2\2\u0492\u03ff\3\2"+
		"\2\2\u0492\u0400\3\2\2\2\u0492\u0401\3\2\2\2\u0492\u0402\3\2\2\2\u0492"+
		"\u0403\3\2\2\2\u0492\u0404\3\2\2\2\u0492\u0405\3\2\2\2\u0492\u0406\3\2"+
		"\2\2\u0492\u0407\3\2\2\2\u0492\u0408\3\2\2\2\u0492\u0409\3\2\2\2\u0492"+
		"\u040a\3\2\2\2\u0492\u040b\3\2\2\2\u0492\u040c\3\2\2\2\u0492\u040d\3\2"+
		"\2\2\u0492\u040e\3\2\2\2\u0492\u040f\3\2\2\2\u0492\u0410\3\2\2\2\u0492"+
		"\u0411\3\2\2\2\u0492\u0412\3\2\2\2\u0492\u0413\3\2\2\2\u0492\u0414\3\2"+
		"\2\2\u0492\u0415\3\2\2\2\u0492\u0416\3\2\2\2\u0492\u0417\3\2\2\2\u0492"+
		"\u0418\3\2\2\2\u0492\u0419\3\2\2\2\u0492\u041a\3\2\2\2\u0492\u041b\3\2"+
		"\2\2\u0492\u041c\3\2\2\2\u0492\u041d\3\2\2\2\u0492\u041e\3\2\2\2\u0492"+
		"\u041f\3\2\2\2\u0492\u0420\3\2\2\2\u0492\u0421\3\2\2\2\u0492\u0422\3\2"+
		"\2\2\u0492\u0423\3\2\2\2\u0492\u0424\3\2\2\2\u0492\u0425\3\2\2\2\u0492"+
		"\u0426\3\2\2\2\u0492\u0427\3\2\2\2\u0492\u0428\3\2\2\2\u0492\u0429\3\2"+
		"\2\2\u0492\u042a\3\2\2\2\u0492\u042b\3\2\2\2\u0492\u042c\3\2\2\2\u0492"+
		"\u042d\3\2\2\2\u0492\u042e\3\2\2\2\u0492\u042f\3\2\2\2\u0492\u0430\3\2"+
		"\2\2\u0492\u0431\3\2\2\2\u0492\u0432\3\2\2\2\u0492\u0433\3\2\2\2\u0492"+
		"\u0434\3\2\2\2\u0492\u0435\3\2\2\2\u0492\u0436\3\2\2\2\u0492\u0437\3\2"+
		"\2\2\u0492\u0438\3\2\2\2\u0492\u0439\3\2\2\2\u0492\u043a\3\2\2\2\u0492"+
		"\u043b\3\2\2\2\u0492\u043c\3\2\2\2\u0492\u043d\3\2\2\2\u0492\u043e\3\2"+
		"\2\2\u0492\u043f\3\2\2\2\u0492\u0440\3\2\2\2\u0492\u0441\3\2\2\2\u0492"+
		"\u0442\3\2\2\2\u0492\u0443\3\2\2\2\u0492\u0444\3\2\2\2\u0492\u0445\3\2"+
		"\2\2\u0492\u0446\3\2\2\2\u0492\u0447\3\2\2\2\u0492\u0448\3\2\2\2\u0492"+
		"\u0449\3\2\2\2\u0492\u044a\3\2\2\2\u0492\u044b\3\2\2\2\u0492\u044c\3\2"+
		"\2\2\u0492\u044d\3\2\2\2\u0492\u044e\3\2\2\2\u0492\u044f\3\2\2\2\u0492"+
		"\u0450\3\2\2\2\u0492\u0451\3\2\2\2\u0492\u0452\3\2\2\2\u0492\u0453\3\2"+
		"\2\2\u0492\u0454\3\2\2\2\u0492\u0455\3\2\2\2\u0492\u0456\3\2\2\2\u0492"+
		"\u0457\3\2\2\2\u0492\u0458\3\2\2\2\u0492\u0459\3\2\2\2\u0492\u045a\3\2"+
		"\2\2\u0492\u045b\3\2\2\2\u0492\u045c\3\2\2\2\u0492\u045d\3\2\2\2\u0492"+
		"\u045e\3\2\2\2\u0492\u045f\3\2\2\2\u0492\u0460\3\2\2\2\u0492\u0461\3\2"+
		"\2\2\u0492\u0462\3\2\2\2\u0492\u0463\3\2\2\2\u0492\u0464\3\2\2\2\u0492"+
		"\u0465\3\2\2\2\u0492\u0466\3\2\2\2\u0492\u0467\3\2\2\2\u0492\u0468\3\2"+
		"\2\2\u0492\u0469\3\2\2\2\u0492\u046a\3\2\2\2\u0492\u046b\3\2\2\2\u0492"+
		"\u046c\3\2\2\2\u0492\u046d\3\2\2\2\u0492\u046e\3\2\2\2\u0492\u046f\3\2"+
		"\2\2\u0492\u0470\3\2\2\2\u0492\u0471\3\2\2\2\u0492\u0472\3\2\2\2\u0492"+
		"\u0473\3\2\2\2\u0492\u0474\3\2\2\2\u0492\u0475\3\2\2\2\u0492\u0476\3\2"+
		"\2\2\u0492\u0477\3\2\2\2\u0492\u0478\3\2\2\2\u0492\u0479\3\2\2\2\u0492"+
		"\u047a\3\2\2\2\u0492\u047b\3\2\2\2\u0492\u047c\3\2\2\2\u0492\u047d\3\2"+
		"\2\2\u0492\u047e\3\2\2\2\u0492\u047f\3\2\2\2\u0492\u0480\3\2\2\2\u0492"+
		"\u0481\3\2\2\2\u0492\u0482\3\2\2\2\u0492\u0483\3\2\2\2\u0492\u0484\3\2"+
		"\2\2\u0492\u0485\3\2\2\2\u0492\u0486\3\2\2\2\u0492\u0487\3\2\2\2\u0492"+
		"\u0488\3\2\2\2\u0492\u0489\3\2\2\2\u0492\u048a\3\2\2\2\u0492\u048b\3\2"+
		"\2\2\u0492\u048c\3\2\2\2\u0492\u048d\3\2\2\2\u0492\u048e\3\2\2\2\u0492"+
		"\u048f\3\2\2\2\u0492\u0490\3\2\2\2\u0492\u0491\3\2\2\2\u0493\r\3\2\2\2"+
		"\u0494\u049a\5\u0266\u0134\2\u0495\u049a\5\u0268\u0135\2\u0496\u049a\5"+
		"\u026a\u0136\2\u0497\u049a\5\u026c\u0137\2\u0498\u049a\5\u026e\u0138\2"+
		"\u0499\u0494\3\2\2\2\u0499\u0495\3\2\2\2\u0499\u0496\3\2\2\2\u0499\u0497"+
		"\3\2\2\2\u0499\u0498\3\2\2\2\u049a\17\3\2\2\2\u049b\u04a8\5\22\n\2\u049c"+
		"\u04a8\5\24\13\2\u049d\u04a8\5\26\f\2\u049e\u04a8\5\30\r\2\u049f\u04a8"+
		"\5\34\17\2\u04a0\u04a8\5\32\16\2\u04a1\u04a8\5\36\20\2\u04a2\u04a8\5&"+
		"\24\2\u04a3\u04a8\5(\25\2\u04a4\u04a8\5*\26\2\u04a5\u04a8\5,\27\2\u04a6"+
		"\u04a8\5.\30\2\u04a7\u049b\3\2\2\2\u04a7\u049c\3\2\2\2\u04a7\u049d\3\2"+
		"\2\2\u04a7\u049e\3\2\2\2\u04a7\u049f\3\2\2\2\u04a7\u04a0\3\2\2\2\u04a7"+
		"\u04a1\3\2\2\2\u04a7\u04a2\3\2\2\2\u04a7\u04a3\3\2\2\2\u04a7\u04a4\3\2"+
		"\2\2\u04a7\u04a5\3\2\2\2\u04a7\u04a6\3\2\2\2\u04a8\21\3\2\2\2\u04a9\u04ab"+
		"\7\34\2\2\u04aa\u04ac\7\u0338\2\2\u04ab\u04aa\3\2\2\2\u04ab\u04ac\3\2"+
		"\2\2\u04ac\u04ae\3\2\2\2\u04ad\u04af\5\6\4\2\u04ae\u04ad\3\2\2\2\u04ae"+
		"\u04af\3\2\2\2\u04af\u04b0\3\2\2\2\u04b0\u04b2\7m\2\2\u04b1\u04b3\7\u0338"+
		"\2\2\u04b2\u04b1\3\2\2\2\u04b2\u04b3\3\2\2\2\u04b3\23\3\2\2\2\u04b4\u04b6"+
		"\7!\2\2\u04b5\u04b7\7\u0338\2\2\u04b6\u04b5\3\2\2\2\u04b6\u04b7\3\2\2"+
		"\2\u04b7\25\3\2\2\2\u04b8\u04ba\7B\2\2\u04b9\u04bb\7\u0338\2\2\u04ba\u04b9"+
		"\3\2\2\2\u04ba\u04bb\3\2\2\2\u04bb\27\3\2\2\2\u04bc\u04bd\7\u0090\2\2"+
		"\u04bd\u04bf\5\u03b6\u01dc\2\u04be\u04c0\7\u0338\2\2\u04bf\u04be\3\2\2"+
		"\2\u04bf\u04c0\3\2\2\2\u04c0\u04c7\3\2\2\2\u04c1\u04c2\5\u03b6\u01dc\2"+
		"\u04c2\u04c4\7\u0339\2\2\u04c3\u04c5\7\u0338\2\2\u04c4\u04c3\3\2\2\2\u04c4"+
		"\u04c5\3\2\2\2\u04c5\u04c7\3\2\2\2\u04c6\u04bc\3\2\2\2\u04c6\u04c1\3\2"+
		"\2\2\u04c7\31\3\2\2\2\u04c8\u04ca\7\u011a\2\2\u04c9\u04cb\5\u02cc\u0167"+
		"\2\u04ca\u04c9\3\2\2\2\u04ca\u04cb\3\2\2\2\u04cb\u04cd\3\2\2\2\u04cc\u04ce"+
		"\7\u0338\2\2\u04cd\u04cc\3\2\2\2\u04cd\u04ce\3\2\2\2\u04ce\33\3\2\2\2"+
		"\u04cf\u04d0\7\u009a\2\2\u04d0\u04d1\5\u02e2\u0172\2\u04d1\u04d4\5\b\5"+
		"\2\u04d2\u04d3\7k\2\2\u04d3\u04d5\5\b\5\2\u04d4\u04d2\3\2\2\2\u04d4\u04d5"+
		"\3\2\2\2\u04d5\u04d7\3\2\2\2\u04d6\u04d8\7\u0338\2\2\u04d7\u04d6\3\2\2"+
		"\2\u04d7\u04d8\3\2\2\2\u04d8\35\3\2\2\2\u04d9\u04e0\7\u02ed\2\2\u04da"+
		"\u04db\5 \21\2\u04db\u04dc\7\u0337\2\2\u04dc\u04dd\5\"\22\2\u04dd\u04de"+
		"\7\u0337\2\2\u04de\u04df\5$\23\2\u04df\u04e1\3\2\2\2\u04e0\u04da\3\2\2"+
		"\2\u04e0\u04e1\3\2\2\2\u04e1\u04e3\3\2\2\2\u04e2\u04e4\7\u0338\2\2\u04e3"+
		"\u04e2\3\2\2\2\u04e3\u04e4\3\2\2\2\u04e4\37\3\2\2\2\u04e5\u04e6\t\2\2"+
		"\2\u04e6!\3\2\2\2\u04e7\u04e8\t\3\2\2\u04e8#\3\2\2\2\u04e9\u04ea\t\2\2"+
		"\2\u04ea%\3\2\2\2\u04eb\u04ec\7\34\2\2\u04ec\u04ee\7\u02f8\2\2\u04ed\u04ef"+
		"\7\u0338\2\2\u04ee\u04ed\3\2\2\2\u04ee\u04ef\3\2\2\2\u04ef\u04f1\3\2\2"+
		"\2\u04f0\u04f2\5\6\4\2\u04f1\u04f0\3\2\2\2\u04f1\u04f2\3\2\2\2\u04f2\u04f3"+
		"\3\2\2\2\u04f3\u04f4\7m\2\2\u04f4\u04f6\7\u02f8\2\2\u04f5\u04f7\7\u0338"+
		"\2\2\u04f6\u04f5\3\2\2\2\u04f6\u04f7\3\2\2\2\u04f7\u04f8\3\2\2\2\u04f8"+
		"\u04f9\7\34\2\2\u04f9\u04fb\7\u01b2\2\2\u04fa\u04fc\7\u0338\2\2\u04fb"+
		"\u04fa\3\2\2\2\u04fb\u04fc\3\2\2\2\u04fc\u04fe\3\2\2\2\u04fd\u04ff\5\6"+
		"\4\2\u04fe\u04fd\3\2\2\2\u04fe\u04ff\3\2\2\2\u04ff\u0500\3\2\2\2\u0500"+
		"\u0501\7m\2\2\u0501\u0503\7\u01b2\2\2\u0502\u0504\7\u0338\2\2\u0503\u0502"+
		"\3\2\2\2\u0503\u0504\3\2\2\2\u0504\'\3\2\2\2\u0505\u0507\7\u0177\2\2\u0506"+
		"\u0508\5\u01bc\u00df\2\u0507\u0506\3\2\2\2\u0507\u0508\3\2\2\2\u0508\u050a"+
		"\3\2\2\2\u0509\u050b\7\u0337\2\2\u050a\u0509\3\2\2\2\u050a\u050b\3\2\2"+
		"\2\u050b\u050e\3\2\2\2\u050c\u050d\t\4\2\2\u050d\u050f\5\u01c0\u00e1\2"+
		"\u050e\u050c\3\2\2\2\u050e\u050f\3\2\2\2\u050f\u0511\3\2\2\2\u0510\u0512"+
		"\5\u02cc\u0167\2\u0511\u0510\3\2\2\2\u0511\u0512\3\2\2\2\u0512\u0514\3"+
		"\2\2\2\u0513\u0515\7\u0338\2\2\u0514\u0513\3\2\2\2\u0514\u0515\3\2\2\2"+
		"\u0515)\3\2\2\2\u0516\u0517\7\u017a\2\2\u0517\u0521\5\u02e2\u0172\2\u0518"+
		"\u0522\5\b\5\2\u0519\u051b\7!\2\2\u051a\u051c\7\u0338\2\2\u051b\u051a"+
		"\3\2\2\2\u051b\u051c\3\2\2\2\u051c\u0522\3\2\2\2\u051d\u051f\7B\2\2\u051e"+
		"\u0520\7\u0338\2\2\u051f\u051e\3\2\2\2\u051f\u0520\3\2\2\2\u0520\u0522"+
		"\3\2\2\2\u0521\u0518\3\2\2\2\u0521\u0519\3\2\2\2\u0521\u051d\3\2\2\2\u0522"+
		"+\3\2\2\2\u0523\u0526\7\u0101\2\2\u0524\u0527\5\u02cc\u0167\2\u0525\u0527"+
		"\7\u0317\2\2\u0526\u0524\3\2\2\2\u0526\u0525\3\2\2\2\u0527\u052c\3\2\2"+
		"\2\u0528\u0529\7\u0337\2\2\u0529\u052b\7\u031a\2\2\u052a\u0528\3\2\2\2"+
		"\u052b\u052e\3\2\2\2\u052c\u052a\3\2\2\2\u052c\u052d\3\2\2\2\u052d\u0530"+
		"\3\2\2\2\u052e\u052c\3\2\2\2\u052f\u0531\7\u0338\2\2\u0530\u052f\3\2\2"+
		"\2\u0530\u0531\3\2\2\2\u0531-\3\2\2\2\u0532\u0533\7\u0108\2\2\u0533\u0534"+
		"\7\u0335\2\2\u0534\u0535\t\5\2\2\u0535\u0536\7\u0337\2\2\u0536\u0537\5"+
		"\u02ca\u0166\2\u0537\u0538\7\u0337\2\2\u0538\u053d\5\u02ca\u0166\2\u0539"+
		"\u053a\7\u0337\2\2\u053a\u053c\5\u02ca\u0166\2\u053b\u0539\3\2\2\2\u053c"+
		"\u053f\3\2\2\2\u053d\u053b\3\2\2\2\u053d\u053e\3\2\2\2\u053e\u0540\3\2"+
		"\2\2\u053f\u053d\3\2\2\2\u0540\u0543\7\u0336\2\2\u0541\u0542\7\u017c\2"+
		"\2\u0542\u0544\t\6\2\2\u0543\u0541\3\2\2\2\u0543\u0544\3\2\2\2\u0544\u0546"+
		"\3\2\2\2\u0545\u0547\7\u0338\2\2\u0546\u0545\3\2\2\2\u0546\u0547\3\2\2"+
		"\2\u0547\u0553\3\2\2\2\u0548\u0549\7\u0108\2\2\u0549\u054a\7\u031b\2\2"+
		"\u054a\u054f\t\7\2\2\u054b\u054c\7\u0337\2\2\u054c\u054e\t\5\2\2\u054d"+
		"\u054b\3\2\2\2\u054e\u0551\3\2\2\2\u054f\u054d\3\2\2\2\u054f\u0550\3\2"+
		"\2\2\u0550\u0553\3\2\2\2\u0551\u054f\3\2\2\2\u0552\u0532\3\2\2\2\u0552"+
		"\u0548\3\2\2\2\u0553/\3\2\2\2\u0554\u0555\7\u0338\2\2\u0555\61\3\2\2\2"+
		"\u0556\u0564\5\u0262\u0132\2\u0557\u0564\5\u0264\u0133\2\u0558\u0564\5"+
		"\u01aa\u00d6\2\u0559\u0564\5\u01a8\u00d5\2\u055a\u0564\5\u019e\u00d0\2"+
		"\u055b\u0564\5\u01a2\u00d2\2\u055c\u0564\5\u0270\u0139\2\u055d\u0564\5"+
		"\u01ac\u00d7\2\u055e\u0564\5\u0278\u013d\2\u055f\u0564\5\u0294\u014b\2"+
		"\u0560\u0564\5\u0296\u014c\2\u0561\u0564\5\u029a\u014e\2\u0562\u0564\5"+
		"\u029c\u014f\2\u0563\u0556\3\2\2\2\u0563\u0557\3\2\2\2\u0563\u0558\3\2"+
		"\2\2\u0563\u0559\3\2\2\2\u0563\u055a\3\2\2\2\u0563\u055b\3\2\2\2\u0563"+
		"\u055c\3\2\2\2\u0563\u055d\3\2\2\2\u0563\u055e\3\2\2\2\u0563\u055f\3\2"+
		"\2\2\u0563\u0560\3\2\2\2\u0563\u0561\3\2\2\2\u0563\u0562\3\2\2\2\u0564"+
		"\63\3\2\2\2\u0565\u0566\7\n\2\2\u0566\u0567\7\17\2\2\u0567\u0568\7\u0121"+
		"\2\2\u0568\u0569\5\u03b6\u01dc\2\u0569\u0570\7\u017c\2\2\u056a\u056c\7"+
		"\u0337\2\2\u056b\u056a\3\2\2\2\u056b\u056c\3\2\2\2\u056c\u056d\3\2\2\2"+
		"\u056d\u056e\7\u025e\2\2\u056e\u056f\7\u0323\2\2\u056f\u0571\5\u03b6\u01dc"+
		"\2\u0570\u056b\3\2\2\2\u0570\u0571\3\2\2\2\u0571\u0578\3\2\2\2\u0572\u0574"+
		"\7\u0337\2\2\u0573\u0572\3\2\2\2\u0573\u0574\3\2\2\2\u0574\u0575\3\2\2"+
		"\2\u0575\u0576\7\u00f4\2\2\u0576\u0577\7\u0323\2\2\u0577\u0579\7\u031f"+
		"\2\2\u0578\u0573\3\2\2\2\u0578\u0579\3\2\2\2\u0579\u0580\3\2\2\2\u057a"+
		"\u057c\7\u0337\2\2\u057b\u057a\3\2\2\2\u057b\u057c\3\2\2\2\u057c\u057d"+
		"\3\2\2\2\u057d\u057e\7\\\2\2\u057e\u057f\7\u0323\2\2\u057f\u0581\5\u03b6"+
		"\u01dc\2\u0580\u057b\3\2\2\2\u0580\u0581\3\2\2\2\u0581\65\3\2\2\2\u0582"+
		"\u0583\7I\2\2\u0583\u0584\7\17\2\2\u0584\u0585\7\u0121\2\2\u0585\u0586"+
		"\5\u03b6\u01dc\2\u0586\u058d\7\u017c\2\2\u0587\u0589\7\u0337\2\2\u0588"+
		"\u0587\3\2\2\2\u0588\u0589\3\2\2\2\u0589\u058a\3\2\2\2\u058a\u058b\7\u00f4"+
		"\2\2\u058b\u058c\7\u0323\2\2\u058c\u058e\7\u031f\2\2\u058d\u0588\3\2\2"+
		"\2\u058d\u058e\3\2\2\2\u058e\u0595\3\2\2\2\u058f\u0591\7\u0337\2\2\u0590"+
		"\u058f\3\2\2\2\u0590\u0591\3\2\2\2\u0591\u0592\3\2\2\2\u0592\u0593\7\\"+
		"\2\2\u0593\u0594\7\u0323\2\2\u0594\u0596\5\u03b6\u01dc\2\u0595\u0590\3"+
		"\2\2\2\u0595\u0596\3\2\2\2\u0596\67\3\2\2\2\u0597\u0598\7h\2\2\u0598\u059b"+
		"\7\u018c\2\2\u0599\u059a\7\u009a\2\2\u059a\u059c\7x\2\2\u059b\u0599\3"+
		"\2\2\2\u059b\u059c\3\2\2\2\u059c\u05a0\3\2\2\2\u059d\u059e\5\u03b6\u01dc"+
		"\2\u059e\u059f\7\u0330\2\2\u059f\u05a1\3\2\2\2\u05a0\u059d\3\2\2\2\u05a0"+
		"\u05a1\3\2\2\2\u05a1\u05a2\3\2\2\2\u05a2\u05a3\5\u03b6\u01dc\2\u05a39"+
		"\3\2\2\2\u05a4\u05a5\7h\2\2\u05a5\u05a6\7\17\2\2\u05a6\u05a7\7\u0121\2"+
		"\2\u05a7\u05a8\5\u03b6\u01dc\2\u05a8;\3\2\2\2\u05a9\u05aa\5> \2\u05aa"+
		"\u05ab\5\u03b6\u01dc\2\u05ab\u05ac\5@!\2\u05ac=\3\2\2\2\u05ad\u05ae\7"+
		"\n\2\2\u05ae\u05af\7\u0198\2\2\u05af?\3\2\2\2\u05b0\u05b2\5B\"\2\u05b1"+
		"\u05b0\3\2\2\2\u05b1\u05b2\3\2\2\2\u05b2\u05b4\3\2\2\2\u05b3\u05b5\5X"+
		"-\2\u05b4\u05b3\3\2\2\2\u05b4\u05b5\3\2\2\2\u05b5\u05b7\3\2\2\2\u05b6"+
		"\u05b8\5F$\2\u05b7\u05b6\3\2\2\2\u05b7\u05b8\3\2\2\2\u05b8\u05ba\3\2\2"+
		"\2\u05b9\u05bb\5L\'\2\u05ba\u05b9\3\2\2\2\u05ba\u05bb\3\2\2\2\u05bbA\3"+
		"\2\2\2\u05bc\u05bf\5D#\2\u05bd\u05c0\5\\/\2\u05be\u05c0\5T+\2\u05bf\u05bd"+
		"\3\2\2\2\u05bf\u05be\3\2\2\2\u05c0C\3\2\2\2\u05c1\u05c2\7\u008c\2\2\u05c2"+
		"E\3\2\2\2\u05c3\u05c4\5J&\2\u05c4\u05c5\5H%\2\u05c5G\3\2\2\2\u05c6\u05c9"+
		"\7\6\2\2\u05c7\u05c9\5n8\2\u05c8\u05c6\3\2\2\2\u05c8\u05c7\3\2\2\2\u05c9"+
		"I\3\2\2\2\u05ca\u05cb\7h\2\2\u05cbK\3\2\2\2\u05cc\u05cd\5N(\2\u05cd\u05ce"+
		"\5P)\2\u05ceM\3\2\2\2\u05cf\u05d0\7\4\2\2\u05d0\u05d1\7\u0082\2\2\u05d1"+
		"\u05d2\7\u008c\2\2\u05d2O\3\2\2\2\u05d3\u05d7\5R*\2\u05d4\u05d5\5V,\2"+
		"\u05d5\u05d6\5\u03b6\u01dc\2\u05d6\u05d8\3\2\2\2\u05d7\u05d4\3\2\2\2\u05d7"+
		"\u05d8\3\2\2\2\u05d8Q\3\2\2\2\u05d9\u05da\7\u031f\2\2\u05daS\3\2\2\2\u05db"+
		"\u05dc\5V,\2\u05dc\u05dd\5\u03b6\u01dc\2\u05ddU\3\2\2\2\u05de\u05df\7"+
		"\20\2\2\u05dfW\3\2\2\2\u05e0\u05e1\5Z.\2\u05e1\u05e2\5^\60\2\u05e2Y\3"+
		"\2\2\2\u05e3\u05e4\7\u017c\2\2\u05e4[\3\2\2\2\u05e5\u05e9\5`\61\2\u05e6"+
		"\u05e9\5j\66\2\u05e7\u05e9\7\u031f\2\2\u05e8\u05e5\3\2\2\2\u05e8\u05e6"+
		"\3\2\2\2\u05e8\u05e7\3\2\2\2\u05e9]\3\2\2\2\u05ea\u05eb\b\60\1\2\u05eb"+
		"\u05ec\7\u00f6\2\2\u05ec\u05ed\7\u0323\2\2\u05ed\u05f4\t\b\2\2\u05ee\u05ef"+
		"\7\u0176\2\2\u05ef\u05f0\7\u0323\2\2\u05f0\u05f4\t\t\2\2\u05f1\u05f2\7"+
		"\u0166\2\2\u05f2\u05f4\7R\2\2\u05f3\u05ea\3\2\2\2\u05f3\u05ee\3\2\2\2"+
		"\u05f3\u05f1\3\2\2\2\u05f4\u05f9\3\2\2\2\u05f5\u05f6\f\3\2\2\u05f6\u05f8"+
		"\7\u0337\2\2\u05f7\u05f5\3\2\2\2\u05f8\u05fb\3\2\2\2\u05f9\u05f7\3\2\2"+
		"\2\u05f9\u05fa\3\2\2\2\u05fa_\3\2\2\2\u05fb\u05f9\3\2\2\2\u05fc\u05fd"+
		"\5d\63\2\u05fd\u05fe\5b\62\2\u05fe\u05ff\5f\64\2\u05ffa\3\2\2\2\u0600"+
		"\u0601\5\u03b6\u01dc\2\u0601c\3\2\2\2\u0602\u0603\7f\2\2\u0603e\3\2\2"+
		"\2\u0604\u0605\5h\65\2\u0605\u0606\5f\64\2\u0606\u0609\3\2\2\2\u0607\u0609"+
		"\5\u03b6\u01dc\2\u0608\u0604\3\2\2\2\u0608\u0607\3\2\2\2\u0609g\3\2\2"+
		"\2\u060a\u060b\7\31\2\2\u060bi\3\2\2\2\u060c\u060d\5l\67\2\u060d\u060e"+
		"\5f\64\2\u060ek\3\2\2\2\u060f\u0610\7\u01e5\2\2\u0610m\3\2\2\2\u0611\u0612"+
		"\5p9\2\u0612\u0613\5j\66\2\u0613\u0614\7\u0318\2\2\u0614\u0615\7\u0337"+
		"\2\2\u0615\u0618\3\2\2\2\u0616\u0618\5j\66\2\u0617\u0611\3\2\2\2\u0617"+
		"\u0616\3\2\2\2\u0618o\3\2\2\2\u0619\u061a\7\u0318\2\2\u061aq\3\2\2\2\u061b"+
		"\u061c\7I\2\2\u061c\u061d\7\u0198\2\2\u061d\u0620\5\u03b6\u01dc\2\u061e"+
		"\u061f\7\24\2\2\u061f\u0621\5\u03b6\u01dc\2\u0620\u061e\3\2\2\2\u0620"+
		"\u0621\3\2\2\2\u0621\u0622\3\2\2\2\u0622\u0627\7\u008c\2\2\u0623\u0625"+
		"\7\u0337\2\2\u0624\u0623\3\2\2\2\u0624\u0625\3\2\2\2\u0625\u0626\3\2\2"+
		"\2\u0626\u0628\t\n\2\2\u0627\u0624\3\2\2\2\u0628\u0629\3\2\2\2\u0629\u0627"+
		"\3\2\2\2\u0629\u062a\3\2\2\2\u062a\u062f\3\2\2\2\u062b\u062c\7\u017c\2"+
		"\2\u062c\u062d\7\u00f6\2\2\u062d\u062e\7\u0323\2\2\u062e\u0630\t\b\2\2"+
		"\u062f\u062b\3\2\2\2\u062f\u0630\3\2\2\2\u0630s\3\2\2\2\u0631\u0632\7"+
		"h\2\2\u0632\u0635\7\u0198\2\2\u0633\u0634\7\u009a\2\2\u0634\u0636\7x\2"+
		"\2\u0635\u0633\3\2\2\2\u0635\u0636\3\2\2\2\u0636\u063b\3\2\2\2\u0637\u0639"+
		"\7\u0337\2\2\u0638\u0637\3\2\2\2\u0638\u0639\3\2\2\2\u0639\u063a\3\2\2"+
		"\2\u063a\u063c\5\u03b6\u01dc\2\u063b\u0638\3\2\2\2\u063c\u063d\3\2\2\2"+
		"\u063d\u063b\3\2\2\2\u063d\u063e\3\2\2\2\u063e\u0642\3\2\2\2\u063f\u0640"+
		"\7\u017c\2\2\u0640\u0641\7\u0264\2\2\u0641\u0643\7\u01db\2\2\u0642\u063f"+
		"\3\2\2\2\u0642\u0643\3\2\2\2\u0643u\3\2\2\2\u0644\u0645\5x=\2\u0645\u064a"+
		"\5\u03b6\u01dc\2\u0646\u064b\5z>\2\u0647\u0648\7\u02a9\2\2\u0648\u0649"+
		"\7\u028c\2\2\u0649\u064b\7\u00ac\2\2\u064a\u0646\3\2\2\2\u064a\u0647\3"+
		"\2\2\2\u064bw\3\2\2\2\u064c\u064d\7\n\2\2\u064d\u064e\7\22\2\2\u064e\u064f"+
		"\7\u00ac\2\2\u064fy\3\2\2\2\u0650\u0651\5|?\2\u0651\u0654\5~@\2\u0652"+
		"\u0653\7\u0337\2\2\u0653\u0655\5~@\2\u0654\u0652\3\2\2\2\u0654\u0655\3"+
		"\2\2\2\u0655\u0656\3\2\2\2\u0656\u0657\7\u0336\2\2\u0657{\3\2\2\2\u0658"+
		"\u0659\7\u017c\2\2\u0659\u065a\7\u028c\2\2\u065a\u065b\7\u00ac\2\2\u065b"+
		"\u065c\7\u0335\2\2\u065c}\3\2\2\2\u065d\u065e\7\u01d3\2\2\u065e\u065f"+
		"\7&\2\2\u065f\u0660\7\u00f4\2\2\u0660\u0661\7\u0323\2\2\u0661\u0668\7"+
		"\u031f\2\2\u0662\u0663\7\u01ee\2\2\u0663\u0664\7&\2\2\u0664\u0665\7\u00f4"+
		"\2\2\u0665\u0666\7\u0323\2\2\u0666\u0668\7\u031f\2\2\u0667\u065d\3\2\2"+
		"\2\u0667\u0662\3\2\2\2\u0668\177\3\2\2\2\u0669\u066a\7I\2\2\u066a\u066b"+
		"\7\22\2\2\u066b\u066c\7\u00ac\2\2\u066c\u066f\5\u03b6\u01dc\2\u066d\u066e"+
		"\7\24\2\2\u066e\u0670\5\u03b6\u01dc\2\u066f\u066d\3\2\2\2\u066f\u0670"+
		"\3\2\2\2\u0670\u067e\3\2\2\2\u0671\u067c\7\u008c\2\2\u0672\u0673\7\u0082"+
		"\2\2\u0673\u0674\7\u0323\2\2\u0674\u067d\7\u031f\2\2\u0675\u0676\7v\2"+
		"\2\u0676\u0677\7\u0323\2\2\u0677\u067d\7\u031f\2\2\u0678\u0679\7\u0198"+
		"\2\2\u0679\u067d\5\u03b6\u01dc\2\u067a\u067b\7\u0291\2\2\u067b\u067d\5"+
		"\u03b6\u01dc\2\u067c\u0672\3\2\2\2\u067c\u0675\3\2\2\2\u067c\u0678\3\2"+
		"\2\2\u067c\u067a\3\2\2\2\u067d\u067f\3\2\2\2\u067e\u0671\3\2\2\2\u067e"+
		"\u067f\3\2\2\2\u067f\u068c\3\2\2\2\u0680\u068a\7\u017c\2\2\u0681\u0682"+
		"\7\u018d\2\2\u0682\u0683\7\u0323\2\2\u0683\u068b\t\13\2\2\u0684\u0685"+
		"\7\u0292\2\2\u0685\u0686\7\u0323\2\2\u0686\u068b\7\u031f\2\2\u0687\u0688"+
		"\7\u01c6\2\2\u0688\u0689\7\u0323\2\2\u0689\u068b\t\f\2\2\u068a\u0681\3"+
		"\2\2\2\u068a\u0684\3\2\2\2\u068a\u0687\3\2\2\2\u068b\u068d\3\2\2\2\u068c"+
		"\u0680\3\2\2\2\u068c\u068d\3\2\2\2\u068d\u0693\3\2\2\2\u068e\u068f\7\u01ee"+
		"\2\2\u068f\u0690\7&\2\2\u0690\u0691\7\u00f4\2\2\u0691\u0692\7\u0323\2"+
		"\2\u0692\u0694\7\u031f\2\2\u0693\u068e\3\2\2\2\u0693\u0694\3\2\2\2\u0694"+
		"\u0081\3\2\2\2\u0695\u0696\7h\2\2\u0696\u0697\7\22\2\2\u0697\u0698\7\u00ac"+
		"\2\2\u0698\u069c\5\u03b6\u01dc\2\u0699\u069a\7\u02a9\2\2\u069a\u069b\7"+
		"\u0291\2\2\u069b\u069d\7\u00ac\2\2\u069c\u0699\3\2\2\2\u069c\u069d\3\2"+
		"\2\2\u069d\u0083\3\2\2\2\u069e\u06a2\5\u008cG\2\u069f\u06a0\5\u0094K\2"+
		"\u06a0\u06a1\5\u008aF\2\u06a1\u06a3\3\2\2\2\u06a2\u069f\3\2\2\2\u06a2"+
		"\u06a3\3\2\2\2\u06a3\u06a4\3\2\2\2\u06a4\u06a5\5\u037a\u01be\2\u06a5\u06a6"+
		"\5\u0088E\2\u06a6\u06a7\5\u0086D\2\u06a7\u0085\3\2\2\2\u06a8\u06ac\5\u03b6"+
		"\u01dc\2\u06a9\u06aa\7\u012e\2\2\u06aa\u06ac\7\u027d\2\2\u06ab\u06a8\3"+
		"\2\2\2\u06ab\u06a9\3\2\2\2\u06ac\u0087\3\2\2\2\u06ad\u06ae\7\u015d\2\2"+
		"\u06ae\u0089\3\2\2\2\u06af\u06b0\7\u0339\2\2\u06b0\u06b1\7\u0339\2\2\u06b1"+
		"\u008b\3\2\2\2\u06b2\u06b3\7\n\2\2\u06b3\u06b4\7\24\2\2\u06b4\u06b5\7"+
		"\u00e5\2\2\u06b5\u008d\3\2\2\2\u06b6\u06ba\5\u008cG\2\u06b7\u06b8\5\u0096"+
		"L\2\u06b8\u06b9\5\u008aF\2\u06b9\u06bb\3\2\2\2\u06ba\u06b7\3\2\2\2\u06ba"+
		"\u06bb\3\2\2\2\u06bb\u06bc\3\2\2\2\u06bc\u06bd\5\u037a\u01be\2\u06bd\u06be"+
		"\5\u0088E\2\u06be\u06bf\5\u0086D\2\u06bf\u008f\3\2\2\2\u06c0\u06c4\5\u008c"+
		"G\2\u06c1\u06c2\5\u0098M\2\u06c2\u06c3\5\u008aF\2\u06c3\u06c5\3\2\2\2"+
		"\u06c4\u06c1\3\2\2\2\u06c4\u06c5\3\2\2\2\u06c5\u06c6\3\2\2\2\u06c6\u06c7"+
		"\5\u037c\u01bf\2\u06c7\u06c8\5\u0088E\2\u06c8\u06c9\5\u0086D\2\u06c9\u0091"+
		"\3\2\2\2\u06ca\u06ce\5\u008cG\2\u06cb\u06cc\5\u009aN\2\u06cc\u06cd\5\u008a"+
		"F\2\u06cd\u06cf\3\2\2\2\u06ce\u06cb\3\2\2\2\u06ce\u06cf\3\2\2\2\u06cf"+
		"\u06d0\3\2\2\2\u06d0\u06d1\5\u037e\u01c0\2\u06d1\u06d2\5\u0088E\2\u06d2"+
		"\u06d3\5\u0086D\2\u06d3\u0093\3\2\2\2\u06d4\u06f7\7\u0272\2\2\u06d5\u06f7"+
		"\7\u0198\2\2\u06d6\u06d7\7\22\2\2\u06d7\u06f7\7\u00ac\2\2\u06d8\u06d9"+
		"\7\u01a2\2\2\u06d9\u06f7\7\u0093\2\2\u06da\u06f7\7+\2\2\u06db\u06f7\7"+
		"D\2\2\u06dc\u06f7\7\u02fb\2\2\u06dd\u06f7\7U\2\2\u06de\u06f7\7n\2\2\u06df"+
		"\u06e0\7\u020b\2\2\u06e0\u06f7\7\u01b1\2\2\u06e1\u06e2\7\u020b\2\2\u06e2"+
		"\u06f7\7\u02e1\2\2\u06e3\u06e4\7\u0251\2\2\u06e4\u06f7\7\u02fb\2\2\u06e5"+
		"\u06e6\7\u02a7\2\2\u06e6\u06e7\7\u0138\2\2\u06e7\u06f7\7\u01a9\2\2\u06e8"+
		"\u06f7\7\u0121\2\2\u06e9\u06f7\7\u02b8\2\2\u06ea\u06f7\7\u012e\2\2\u06eb"+
		"\u06ec\7\u02c2\2\2\u06ec\u06ed\7\u0290\2\2\u06ed\u06f7\7\u0234\2\2\u06ee"+
		"\u06ef\7\u0137\2\2\u06ef\u06f7\7\u0121\2\2\u06f0\u06f7\7\u0138\2\2\u06f1"+
		"\u06f2\7\u02e6\2\2\u06f2\u06f7\7\u00ac\2\2\u06f3\u06f4\7\u030e\2\2\u06f4"+
		"\u06f5\7\u012e\2\2\u06f5\u06f7\7\u01b8\2\2\u06f6\u06d4\3\2\2\2\u06f6\u06d5"+
		"\3\2\2\2\u06f6\u06d6\3\2\2\2\u06f6\u06d8\3\2\2\2\u06f6\u06da\3\2\2\2\u06f6"+
		"\u06db\3\2\2\2\u06f6\u06dc\3\2\2\2\u06f6\u06dd\3\2\2\2\u06f6\u06de\3\2"+
		"\2\2\u06f6\u06df\3\2\2\2\u06f6\u06e1\3\2\2\2\u06f6\u06e3\3\2\2\2\u06f6"+
		"\u06e5\3\2\2\2\u06f6\u06e8\3\2\2\2\u06f6\u06e9\3\2\2\2\u06f6\u06ea\3\2"+
		"\2\2\u06f6\u06eb\3\2\2\2\u06f6\u06ee\3\2\2\2\u06f6\u06f0\3\2\2\2\u06f6"+
		"\u06f1\3\2\2\2\u06f6\u06f3\3\2\2\2\u06f7\u0095\3\2\2\2\u06f8\u070e\7\u0272"+
		"\2\2\u06f9\u070e\7\u0198\2\2\u06fa\u06fb\7\22\2\2\u06fb\u070e\7\u00ac"+
		"\2\2\u06fc\u070e\7+\2\2\u06fd\u070e\7\u02fb\2\2\u06fe\u070e\7U\2\2\u06ff"+
		"\u0700\7\u020b\2\2\u0700\u070e\7\u01b1\2\2\u0701\u0702\7\u020b\2\2\u0702"+
		"\u070e\7\u02e1\2\2\u0703\u070e\7\u0121\2\2\u0704\u070e\7\u012e\2\2\u0705"+
		"\u0706\7\u02c2\2\2\u0706\u0707\7\u0290\2\2\u0707\u070e\7\u0234\2\2\u0708"+
		"\u0709\7\u02e6\2\2\u0709\u070e\7\u00ac\2\2\u070a\u070b\7\u030e\2\2\u070b"+
		"\u070c\7\u012e\2\2\u070c\u070e\7\u01b8\2\2\u070d\u06f8\3\2\2\2\u070d\u06f9"+
		"\3\2\2\2\u070d\u06fa\3\2\2\2\u070d\u06fc\3\2\2\2\u070d\u06fd\3\2\2\2\u070d"+
		"\u06fe\3\2\2\2\u070d\u06ff\3\2\2\2\u070d\u0701\3\2\2\2\u070d\u0703\3\2"+
		"\2\2\u070d\u0704\3\2\2\2\u070d\u0705\3\2\2\2\u070d\u0708\3\2\2\2\u070d"+
		"\u070a\3\2\2\2\u070e\u0097\3\2\2\2\u070f\u0710\t\r\2\2\u0710\u0099\3\2"+
		"\2\2\u0711\u0712\t\16\2\2\u0712\u009b\3\2\2\2\u0713\u0714\7h\2\2\u0714"+
		"\u0715\7\u01a2\2\2\u0715\u0716\7\u0093\2\2\u0716\u0717\5\u03b6\u01dc\2"+
		"\u0717\u009d\3\2\2\2\u0718\u0719\5\u00a0Q\2\u0719\u071a\5\u00a2R\2\u071a"+
		"\u009f\3\2\2\2\u071b\u071c\7\n\2\2\u071c\u071d\7\u01a2\2\2\u071d\u071e"+
		"\7\u0093\2\2\u071e\u071f\5\u03b6\u01dc\2\u071f\u00a1\3\2\2\2\u0720\u0721"+
		"\7\u013d\2\2\u0721\u0731\7\u0335\2\2\u0722\u0723\7\26\2\2\u0723\u0724"+
		"\7\u0323\2\2\u0724\u0732\t\17\2\2\u0725\u0726\7\u01fa\2\2\u0726\u0727"+
		"\7\u0323\2\2\u0727\u0732\7\u031b\2\2\u0728\u0729\7\u0216\2\2\u0729\u072a"+
		"\7\u0323\2\2\u072a\u0732\7\u031b\2\2\u072b\u072c\7\u01d2\2\2\u072c\u072d"+
		"\7\u0323\2\2\u072d\u0732\t\t\2\2\u072e\u072f\7\u02b0\2\2\u072f\u0730\7"+
		"\u0323\2\2\u0730\u0732\7\u031b\2\2\u0731\u0722\3\2\2\2\u0731\u0725\3\2"+
		"\2\2\u0731\u0728\3\2\2\2\u0731\u072b\3\2\2\2\u0731\u072e\3\2\2\2\u0732"+
		"\u0733\3\2\2\2\u0733\u087f\7\u0336\2\2\u0734\u0735\7\4\2\2\u0735\u0736"+
		"\7U\2\2\u0736\u087f\5\u03b6\u01dc\2\u0737\u0738\7\u02a9\2\2\u0738\u0739"+
		"\7U\2\2\u0739\u087f\5\u03b6\u01dc\2\u073a\u073b\7\4\2\2\u073b\u073c\7"+
		"\u02ac\2\2\u073c\u073d\7\u00e5\2\2\u073d\u073e\7\u031f\2\2\u073e\u073f"+
		"\7\u017c\2\2\u073f\u0743\7\u0335\2\2\u0740\u0741\7\u01ef\2\2\u0741\u0742"+
		"\7\u0323\2\2\u0742\u0744\7\u031f\2\2\u0743\u0740\3\2\2\2\u0743\u0744\3"+
		"\2\2\2\u0744\u074b\3\2\2\2\u0745\u0747\7\u0337\2\2\u0746\u0745\3\2\2\2"+
		"\u0746\u0747\3\2\2\2\u0747\u0748\3\2\2\2\u0748\u0749\7\30\2\2\u0749\u074a"+
		"\7\u0323\2\2\u074a\u074c\t\20\2\2\u074b\u0746\3\2\2\2\u074b\u074c\3\2"+
		"\2\2\u074c\u0753\3\2\2\2\u074d\u074f\7\u0337\2\2\u074e\u074d\3\2\2\2\u074e"+
		"\u074f\3\2\2\2\u074f\u0750\3\2\2\2\u0750\u0751\7\u01f8\2\2\u0751\u0752"+
		"\7\u0323\2\2\u0752\u0754\t\21\2\2\u0753\u074e\3\2\2\2\u0753\u0754\3\2"+
		"\2\2\u0754\u075b\3\2\2\2\u0755\u0757\7\u0337\2\2\u0756\u0755\3\2\2\2\u0756"+
		"\u0757\3\2\2\2\u0757\u0758\3\2\2\2\u0758\u0759\7\u02c9\2\2\u0759\u075a"+
		"\7\u0323\2\2\u075a\u075c\t\21\2\2\u075b\u0756\3\2\2\2\u075b\u075c\3\2"+
		"\2\2\u075c\u0763\3\2\2\2\u075d\u075f\7\u0337\2\2\u075e\u075d\3\2\2\2\u075e"+
		"\u075f\3\2\2\2\u075f\u0760\3\2\2\2\u0760\u0761\7\u01a4\2\2\u0761\u0762"+
		"\7\u0323\2\2\u0762\u0764\7\u031b\2\2\u0763\u075e\3\2\2\2\u0763\u0764\3"+
		"\2\2\2\u0764\u076e\3\2\2\2\u0765\u0767\7\u0337\2\2\u0766\u0765\3\2\2\2"+
		"\u0766\u0767\3\2\2\2\u0767\u0768\3\2\2\2\u0768\u0769\7\u0288\2\2\u0769"+
		"\u076a\7\u0335\2\2\u076a\u076b\7\7\2\2\u076b\u076c\7\u0323\2\2\u076c\u076d"+
		"\t\22\2\2\u076d\u076f\7\u0336\2\2\u076e\u0766\3\2\2\2\u076e\u076f\3\2"+
		"\2\2\u076f\u0779\3\2\2\2\u0770\u0772\7\u0337\2\2\u0771\u0770\3\2\2\2\u0771"+
		"\u0772\3\2\2\2\u0772\u0773\3\2\2\2\u0773\u0774\7\u02c5\2\2\u0774\u0775"+
		"\7\u0335\2\2\u0775\u0776\7\7\2\2\u0776\u0777\7\u0323\2\2\u0777\u0778\7"+
		"\u029d\2\2\u0778\u077a\7\u0336\2\2\u0779\u0771\3\2\2\2\u0779\u077a\3\2"+
		"\2\2\u077a\u077b\3\2\2\2\u077b\u087f\7\u0336\2\2\u077c\u077d\7\u02c5\2"+
		"\2\u077d\u0786\7\u0335\2\2\u077e\u077f\7\7\2\2\u077f\u0780\7\u0323\2\2"+
		"\u0780\u0787\t\23\2\2\u0781\u0782\7\u029e\2\2\u0782\u0783\7\u0323\2\2"+
		"\u0783\u0784\7\u0335\2\2\u0784\u0785\7\u031f\2\2\u0785\u0787\7\u0336\2"+
		"\2\u0786\u077e\3\2\2\2\u0786\u0781\3\2\2\2\u0787\u087f\3\2\2\2\u0788\u0789"+
		"\7\u0288\2\2\u0789\u07a0\7\u0335\2\2\u078a\u078b\7\7\2\2\u078b\u078c\7"+
		"\u0323\2\2\u078c\u07a1\t\23\2\2\u078d\u078e\7\u029e\2\2\u078e\u078f\7"+
		"\u0323\2\2\u078f\u079a\7\u0335\2\2\u0790\u0792\7\u0337\2\2\u0791\u0790"+
		"\3\2\2\2\u0791\u0792\3\2\2\2\u0792\u0793\3\2\2\2\u0793\u0795\7\u031f\2"+
		"\2\u0794\u0791\3\2\2\2\u0795\u0798\3\2\2\2\u0796\u0794\3\2\2\2\u0796\u0797"+
		"\3\2\2\2\u0797\u079b\3\2\2\2\u0798\u0796\3\2\2\2\u0799\u079b\7\u00d5\2"+
		"\2\u079a\u0796\3\2\2\2\u079a\u0799\3\2\2\2\u079b\u079c\3\2\2\2\u079c\u07a1"+
		"\7\u0336\2\2\u079d\u079e\7\u02cf\2\2\u079e\u079f\7\u0323\2\2\u079f\u07a1"+
		"\7\u031b\2\2\u07a0\u078a\3\2\2\2\u07a0\u078d\3\2\2\2\u07a0\u079d\3\2\2"+
		"\2\u07a1\u087f\3\2\2\2\u07a2\u07a3\7\u025b\2\2\u07a3\u07a4\7\u02ac\2\2"+
		"\u07a4\u07a5\7\u00e5\2\2\u07a5\u07df\7\u031f\2\2\u07a6\u07a7\7\u017c\2"+
		"\2\u07a7\u07b7\7\u0335\2\2\u07a8\u07a9\7\u01ef\2\2\u07a9\u07aa\7\u0323"+
		"\2\2\u07aa\u07b8\7\u031f\2\2\u07ab\u07ac\7\30\2\2\u07ac\u07ad\7\u0323"+
		"\2\2\u07ad\u07b8\t\20\2\2\u07ae\u07af\7\u01f8\2\2\u07af\u07b0\7\u0323"+
		"\2\2\u07b0\u07b8\t\21\2\2\u07b1\u07b2\7\u02c9\2\2\u07b2\u07b3\7\u0323"+
		"\2\2\u07b3\u07b8\t\21\2\2\u07b4\u07b5\7\u01a4\2\2\u07b5\u07b6\7\u0323"+
		"\2\2\u07b6\u07b8\7\u031b\2\2\u07b7\u07a8\3\2\2\2\u07b7\u07ab\3\2\2\2\u07b7"+
		"\u07ae\3\2\2\2\u07b7\u07b1\3\2\2\2\u07b7\u07b4\3\2\2\2\u07b8\u07e0\3\2"+
		"\2\2\u07b9\u07ba\7\u02c5\2\2\u07ba\u07c3\7\u0335\2\2\u07bb\u07bc\7\7\2"+
		"\2\u07bc\u07bd\7\u0323\2\2\u07bd\u07c4\t\23\2\2\u07be\u07bf\7\u029e\2"+
		"\2\u07bf\u07c0\7\u0323\2\2\u07c0\u07c1\7\u0335\2\2\u07c1\u07c2\7\u031f"+
		"\2\2\u07c2\u07c4\7\u0336\2\2\u07c3\u07bb\3\2\2\2\u07c3\u07be\3\2\2\2\u07c4"+
		"\u07e0\3\2\2\2\u07c5\u07c6\7\u0288\2\2\u07c6\u07dd\7\u0335\2\2\u07c7\u07c8"+
		"\7\7\2\2\u07c8\u07c9\7\u0323\2\2\u07c9\u07de\t\23\2\2\u07ca\u07cb\7\u029e"+
		"\2\2\u07cb\u07cc\7\u0323\2\2\u07cc\u07d7\7\u0335\2\2\u07cd\u07cf\7\u0337"+
		"\2\2\u07ce\u07cd\3\2\2\2\u07ce\u07cf\3\2\2\2\u07cf\u07d0\3\2\2\2\u07d0"+
		"\u07d2\7\u031f\2\2\u07d1\u07ce\3\2\2\2\u07d2\u07d5\3\2\2\2\u07d3\u07d1"+
		"\3\2\2\2\u07d3\u07d4\3\2\2\2\u07d4\u07d8\3\2\2\2\u07d5\u07d3\3\2\2\2\u07d6"+
		"\u07d8\7\u00d5\2\2\u07d7\u07d3\3\2\2\2\u07d7\u07d6\3\2\2\2\u07d8\u07d9"+
		"\3\2\2\2\u07d9\u07de\7\u0336\2\2\u07da\u07db\7\u02cf\2\2\u07db\u07dc\7"+
		"\u0323\2\2\u07dc\u07de\7\u031b\2\2\u07dd\u07c7\3\2\2\2\u07dd\u07ca\3\2"+
		"\2\2\u07dd\u07da\3\2\2\2\u07de\u07e0\3\2\2\2\u07df\u07a6\3\2\2\2\u07df"+
		"\u07b9\3\2\2\2\u07df\u07c5\3\2\2\2\u07e0\u07e1\3\2\2\2\u07e1\u087f\7\u0336"+
		"\2\2\u07e2\u07e3\7\u02a9\2\2\u07e3\u07e4\7\u02ac\2\2\u07e4\u07e5\7\u00e5"+
		"\2\2\u07e5\u087f\7\u031f\2\2\u07e6\u087f\7\u00aa\2\2\u07e7\u07e8\7\u00aa"+
		"\2\2\u07e8\u07e9\7\u01a2\2\2\u07e9\u07ea\7\u0093\2\2\u07ea\u0801\7\u00e5"+
		"\2\2\u07eb\u07ed\7\u0337\2\2\u07ec\u07eb\3\2\2\2\u07ec\u07ed\3\2\2\2\u07ed"+
		"\u07ee\3\2\2\2\u07ee\u07ef\7\u031f\2\2\u07ef\u07f0\7\u017c\2\2\u07f0\u07f1"+
		"\7\u0335\2\2\u07f1\u07f2\7\u0236\2\2\u07f2\u07f3\7\u0323\2\2\u07f3\u07f4"+
		"\7\u031f\2\2\u07f4\u07f5\7\u0337\2\2\u07f5\u07f6\7\30\2\2\u07f6\u07f7"+
		"\7\u0323\2\2\u07f7\u07f8\t\20\2\2\u07f8\u07f9\7\u0337\2\2\u07f9\u07fa"+
		"\7\u01f8\2\2\u07fa\u07fb\7\u0323\2\2\u07fb\u07fc\7\u023f\2\2\u07fc\u07fd"+
		"\7\u0337\2\2\u07fd\u07fe\7\u02c9\2\2\u07fe\u07ff\7\u0323\2\2\u07ff\u0800"+
		"\t\21\2\2\u0800\u0802\7\u0336\2\2\u0801\u07ec\3\2\2\2\u0802\u0803\3\2"+
		"\2\2\u0803\u0801\3\2\2\2\u0803\u0804\3\2\2\2\u0804\u087f\3\2\2\2\u0805"+
		"\u0806\7\u025b\2\2\u0806\u0807\7\u01a2\2\2\u0807\u0808\7\u0093\2\2\u0808"+
		"\u082b\7\u00e5\2\2\u0809\u080b\7\u0337\2\2\u080a\u0809\3\2\2\2\u080a\u080b"+
		"\3\2\2\2\u080b\u080c\3\2\2\2\u080c\u080d\7\u031f\2\2\u080d\u080e\7\u017c"+
		"\2\2\u080e\u080f\7\u0335\2\2\u080f\u0810\7\u0236\2\2\u0810\u0811\7\u0323"+
		"\2\2\u0811\u0818\7\u031f\2\2\u0812\u0814\7\u0337\2\2\u0813\u0812\3\2\2"+
		"\2\u0813\u0814\3\2\2\2\u0814\u0815\3\2\2\2\u0815\u0816\7\30\2\2\u0816"+
		"\u0817\7\u0323\2\2\u0817\u0819\t\20\2\2\u0818\u0813\3\2\2\2\u0818\u0819"+
		"\3\2\2\2\u0819\u0820\3\2\2\2\u081a\u081c\7\u0337\2\2\u081b\u081a\3\2\2"+
		"\2\u081b\u081c\3\2\2\2\u081c\u081d\3\2\2\2\u081d\u081e\7\u01f8\2\2\u081e"+
		"\u081f\7\u0323\2\2\u081f\u0821\7\u023f\2\2\u0820\u081b\3\2\2\2\u0820\u0821"+
		"\3\2\2\2\u0821\u0828\3\2\2\2\u0822\u0824\7\u0337\2\2\u0823\u0822\3\2\2"+
		"\2\u0823\u0824\3\2\2\2\u0824\u0825\3\2\2\2\u0825\u0826\7\u02c9\2\2\u0826"+
		"\u0827\7\u0323\2\2\u0827\u0829\t\21\2\2\u0828\u0823\3\2\2\2\u0828\u0829"+
		"\3\2\2\2\u0829\u082a\3\2\2\2\u082a\u082c\7\u0336\2\2\u082b\u080a\3\2\2"+
		"\2\u082c\u082d\3\2\2\2\u082d\u082b\3\2\2\2\u082d\u082e\3\2\2\2\u082e\u087f"+
		"\3\2\2\2\u082f\u0830\7\u0092\2\2\u0830\u0831\7I\2\2\u0831\u0832\7\r\2"+
		"\2\u0832\u087f\7U\2\2\u0833\u0834\7^\2\2\u0834\u0835\7I\2\2\u0835\u0836"+
		"\7\r\2\2\u0836\u087f\7U\2\2\u0837\u087f\7~\2\2\u0838\u087f\7\u0206\2\2"+
		"\u0839\u083a\7\4\2\2\u083a\u083b\7\u0235\2\2\u083b\u083c\7\u031f\2\2\u083c"+
		"\u085e\7\u0335\2\2\u083d\u083e\7\u017c\2\2\u083e\u083f\7\u01df\2\2\u083f"+
		"\u0840\7\u00e5\2\2\u0840\u0841\7\u0335\2\2\u0841\u0842\7\u00a6\2\2\u0842"+
		"\u0843\7\u00a6\2\2\u0843\u0844\3\2\2\2\u0844\u085f\7\u0336\2\2\u0845\u0846"+
		"\7\u017c\2\2\u0846\u0847\7\u0226\2\2\u0847\u0853\7\u0335\2\2\u0848\u084a"+
		"\7\u0337\2\2\u0849\u0848\3\2\2\2\u0849\u084a\3\2\2\2\u084a\u084b\3\2\2"+
		"\2\u084b\u0850\7\u0335\2\2\u084c\u084d\7\u00a6\2\2\u084d\u084e\7\u0337"+
		"\2\2\u084e\u0851\7\u00a6\2\2\u084f\u0851\7\u00a7\2\2\u0850\u084c\3\2\2"+
		"\2\u0850\u084f\3\2\2\2\u0851\u0852\3\2\2\2\u0852\u0854\7\u0336\2\2\u0853"+
		"\u0849\3\2\2\2\u0854\u0855\3\2\2\2\u0855\u0853\3\2\2\2\u0855\u0856\3\2"+
		"\2\2\u0856\u0857\3\2\2\2\u0857\u085c\7\u0336\2\2\u0858\u0859\7\u0337\2"+
		"\2\u0859\u085a\7\u0286\2\2\u085a\u085b\7\u0323\2\2\u085b\u085d\7\u031b"+
		"\2\2\u085c\u0858\3\2\2\2\u085c\u085d\3\2\2\2\u085d\u085f\3\2\2\2\u085e"+
		"\u083d\3\2\2\2\u085e\u0845\3\2\2\2\u085f\u0860\3\2\2\2\u0860\u087f\7\u0336"+
		"\2\2\u0861\u0862\7\u025b\2\2\u0862\u086f\7\u0235\2\2\u0863\u0864\7\4\2"+
		"\2\u0864\u0865\7\u0226\2\2\u0865\u0869\7\u0335\2\2\u0866\u0867\7\u00a6"+
		"\2\2\u0867\u086a\7\u00a6\2\2\u0868\u086a\7\u00a7\2\2\u0869\u0866\3\2\2"+
		"\2\u0869\u0868\3\2\2\2\u086a\u086b\3\2\2\2\u086b\u0870\7\u0336\2\2\u086c"+
		"\u086d\7\u0286\2\2\u086d\u086e\7\u0323\2\2\u086e\u0870\7\u031b\2\2\u086f"+
		"\u0863\3\2\2\2\u086f\u086c\3\2\2\2\u0870\u087f\3\2\2\2\u0871\u0872\7\u0115"+
		"\2\2\u0872\u0873\7\u0235\2\2\u0873\u087f\7\u031f\2\2\u0874\u0875\7\u02a9"+
		"\2\2\u0875\u0876\7\u0235\2\2\u0876\u087f\7\u031f\2\2\u0877\u087f\7\u0273"+
		"\2\2\u0878\u0879\7\u017c\2\2\u0879\u087a\7\u0335\2\2\u087a\u087b\7i\2"+
		"\2\u087b\u087c\7\u0323\2\2\u087c\u087d\7\u00f8\2\2\u087d\u087f\7\u0336"+
		"\2\2\u087e\u0720\3\2\2\2\u087e\u0734\3\2\2\2\u087e\u0737\3\2\2\2\u087e"+
		"\u073a\3\2\2\2\u087e\u077c\3\2\2\2\u087e\u0788\3\2\2\2\u087e\u07a2\3\2"+
		"\2\2\u087e\u07e2\3\2\2\2\u087e\u07e6\3\2\2\2\u087e\u07e7\3\2\2\2\u087e"+
		"\u0805\3\2\2\2\u087e\u082f\3\2\2\2\u087e\u0833\3\2\2\2\u087e\u0837\3\2"+
		"\2\2\u087e\u0838\3\2\2\2\u087e\u0839\3\2\2\2\u087e\u0861\3\2\2\2\u087e"+
		"\u0871\3\2\2\2\u087e\u0874\3\2\2\2\u087e\u0877\3\2\2\2\u087e\u0878\3\2"+
		"\2\2\u087f\u00a3\3\2\2\2\u0880\u0881\t\24\2\2\u0881\u0882\7\u01ab\2\2"+
		"\u0882\u0883\7\u028a\2\2\u0883\u0884\5\u03b6\u01dc\2\u0884\u0885\7\u0086"+
		"\2\2\u0885\u0886\7F\2\2\u0886\u0887\7\u013d\2\2\u0887\u0891\7\u0335\2"+
		"\2\u0888\u0889\7E\2\2\u0889\u088c\7\u0323\2\2\u088a\u088d\5\u03b6\u01dc"+
		"\2\u088b\u088d\7\r\2\2\u088c\u088a\3\2\2\2\u088c\u088b\3\2\2\2\u088d\u088f"+
		"\3\2\2\2\u088e\u0890\7\u0337\2\2\u088f\u088e\3\2\2\2\u088f\u0890\3\2\2"+
		"\2\u0890\u0892\3\2\2\2\u0891\u0888\3\2\2\2\u0891\u0892\3\2\2\2\u0892\u089f"+
		"\3\2\2\2\u0893\u0894\7\u00ba\2\2\u0894\u089a\7\u0323\2\2\u0895\u0897\7"+
		"g\2\2\u0896\u0895\3\2\2\2\u0896\u0897\3\2\2\2\u0897\u0898\3\2\2\2\u0898"+
		"\u089b\5\u03b6\u01dc\2\u0899\u089b\7\r\2\2\u089a\u0896\3\2\2\2\u089a\u0899"+
		"\3\2\2\2\u089b\u089d\3\2\2\2\u089c\u089e\7\u0337\2\2\u089d\u089c\3\2\2"+
		"\2\u089d\u089e\3\2\2\2\u089e\u08a0\3\2\2\2\u089f\u0893\3\2\2\2\u089f\u08a0"+
		"\3\2\2\2\u08a0\u08aa\3\2\2\2\u08a1\u08a2\7\u02a8\2\2\u08a2\u08a5\7\u0323"+
		"\2\2\u08a3\u08a6\7\u031f\2\2\u08a4\u08a6\7\r\2\2\u08a5\u08a3\3\2\2\2\u08a5"+
		"\u08a4\3\2\2\2\u08a6\u08a8\3\2\2\2\u08a7\u08a9\7\u0337\2\2\u08a8\u08a7"+
		"\3\2\2\2\u08a8\u08a9\3\2\2\2\u08a9\u08ab\3\2\2\2\u08aa\u08a1\3\2\2\2\u08aa"+
		"\u08ab\3\2\2\2\u08ab\u08b2\3\2\2\2\u08ac\u08ad\7\u028b\2\2\u08ad\u08b0"+
		"\7\u0323\2\2\u08ae\u08b1\7\u031b\2\2\u08af\u08b1\7Z\2\2\u08b0\u08ae\3"+
		"\2\2\2\u08b0\u08af\3\2\2\2\u08b1\u08b3\3\2\2\2\u08b2\u08ac\3\2\2\2\u08b2"+
		"\u08b3\3\2\2\2\u08b3\u08b4\3\2\2\2\u08b4\u08b5\7\u0336\2\2\u08b5\u00a5"+
		"\3\2\2\2\u08b6\u08b7\7h\2\2\u08b7\u08b8\7\u01ab\2\2\u08b8\u08b9\7\u028a"+
		"\2\2\u08b9\u08ba\5\u03b6\u01dc\2\u08ba\u00a7\3\2\2\2\u08bb\u08bc\7\n\2"+
		"\2\u08bc\u08bd\7+\2\2\u08bd\u08e5\5\u03b6\u01dc\2\u08be\u08bf\7\u02a9"+
		"\2\2\u08bf\u08e6\7\u028d\2\2\u08c0\u08c1\7\u017c\2\2\u08c1\u08c2\7\u028c"+
		"\2\2\u08c2\u08c3\7\u00ac\2\2\u08c3\u08da\7\u0335\2\2\u08c4\u08c5\7\u0082"+
		"\2\2\u08c5\u08c6\7\u0323\2\2\u08c6\u08c8\7\u031f\2\2\u08c7\u08c9\7\u0337"+
		"\2\2\u08c8\u08c7\3\2\2\2\u08c8\u08c9\3\2\2\2\u08c9\u08db\3\2\2\2\u08ca"+
		"\u08cb\7\u01d3\2\2\u08cb\u08cc\7&\2\2\u08cc\u08cd\7\u00f4\2\2\u08cd\u08ce"+
		"\7\u0323\2\2\u08ce\u08d0\7\u031f\2\2\u08cf\u08d1\7\u0337\2\2\u08d0\u08cf"+
		"\3\2\2\2\u08d0\u08d1\3\2\2\2\u08d1\u08db\3\2\2\2\u08d2\u08d3\7\u01ee\2"+
		"\2\u08d3\u08d4\7&\2\2\u08d4\u08d5\7\u00f4\2\2\u08d5\u08d6\7\u0323\2\2"+
		"\u08d6\u08d8\7\u031f\2\2\u08d7\u08d9\7\u0337\2\2\u08d8\u08d7\3\2\2\2\u08d8"+
		"\u08d9\3\2\2\2\u08d9\u08db\3\2\2\2\u08da\u08c4\3\2\2\2\u08da\u08ca\3\2"+
		"\2\2\u08da\u08d2\3\2\2\2\u08db\u08dc\3\2\2\2\u08dc\u08da\3\2\2\2\u08dc"+
		"\u08dd\3\2\2\2\u08dd\u08de\3\2\2\2\u08de\u08e6\7\u0336\2\2\u08df\u08e0"+
		"\7\u017c\2\2\u08e0\u08e1\7\u0185\2\2\u08e1\u08e2\7\u0086\2\2\u08e2\u08e3"+
		"\7\u01a5\2\2\u08e3\u08e4\7\u0323\2\2\u08e4\u08e6\t\t\2\2\u08e5\u08be\3"+
		"\2\2\2\u08e5\u08c0\3\2\2\2\u08e5\u08df\3\2\2\2\u08e6\u00a9\3\2\2\2\u08e7"+
		"\u08e8\7\n\2\2\u08e8\u08e9\78\2\2\u08e9\u08ea\7\u01ee\2\2\u08ea\u08eb"+
		"\7\u00ac\2\2\u08eb\u08ec\5\u03b6\u01dc\2\u08ec\u08ed\t\25\2\2\u08ed\u08ee"+
		"\7\u0304\2\2\u08ee\u08ef\7\u0335\2\2\u08ef\u08f0\7\u01b9\2\2\u08f0\u08f1"+
		"\7\u0323\2\2\u08f1\u08fa\5\u03b6\u01dc\2\u08f2\u08f3\7\u0337\2\2\u08f3"+
		"\u08f4\7\u018d\2\2\u08f4\u08f5\7\u0323\2\2\u08f5\u08f6\7\u031f\2\2\u08f6"+
		"\u08f7\7\u0337\2\2\u08f7\u08f8\7\u01ed\2\2\u08f8\u08f9\7\u0323\2\2\u08f9"+
		"\u08fb\7\u0320\2\2\u08fa\u08f2\3\2\2\2\u08fa\u08fb\3\2\2\2\u08fb\u08fc"+
		"\3\2\2\2\u08fc\u08fd\7\u0336\2\2\u08fd\u00ab\3\2\2\2\u08fe\u08ff\7I\2"+
		"\2\u08ff\u0900\78\2\2\u0900\u0901\7\u01ee\2\2\u0901\u0902\7\u00ac\2\2"+
		"\u0902\u0903\5\u03b6\u01dc\2\u0903\u0904\7\u017c\2\2\u0904\u0918\7\u0172"+
		"\2\2\u0905\u0907\7\u0335\2\2\u0906\u0908\7\u0337\2\2\u0907\u0906\3\2\2"+
		"\2\u0907\u0908\3\2\2\2\u0908\u0909\3\2\2\2\u0909\u090a\7\u01b9\2\2\u090a"+
		"\u090b\7\u0323\2\2\u090b\u090c\5\u03b6\u01dc\2\u090c\u090d\7\u0337\2\2"+
		"\u090d\u090e\7\u018d\2\2\u090e\u090f\7\u0323\2\2\u090f\u0910\7\u031f\2"+
		"\2\u0910\u0911\7\u0337\2\2\u0911\u0912\7\u01ed\2\2\u0912\u0913\7\u0323"+
		"\2\2\u0913\u0914\7\u0320\2\2\u0914\u0916\7\u0336\2\2\u0915\u0917\7\u0337"+
		"\2\2\u0916\u0915\3\2\2\2\u0916\u0917\3\2\2\2\u0917\u0919\3\2\2\2\u0918"+
		"\u0905\3\2\2\2\u0919\u091a\3\2\2\2\u091a\u0918\3\2\2\2\u091a\u091b\3\2"+
		"\2\2\u091b\u00ad\3\2\2\2\u091c\u091d\7h\2\2\u091d\u091e\7+\2\2\u091e\u091f"+
		"\5\u03b6\u01dc\2\u091f\u00af\3\2\2\2\u0920\u0921\7h\2\2\u0921\u0922\7"+
		"8\2\2\u0922\u0923\7\u01ee\2\2\u0923\u0924\7\u00ac\2\2\u0924\u0925\5\u03b6"+
		"\u01dc\2\u0925\u00b1\3\2\2\2\u0926\u0927\7h\2\2\u0927\u0928\78\2\2\u0928"+
		"\u0929\7\u00bd\2\2\u0929\u092a\7\u00ac\2\2\u092a\u092b\5\u03b6\u01dc\2"+
		"\u092b\u00b3\3\2\2\2\u092c\u092d\7h\2\2\u092d\u092e\7D\2\2\u092e\u092f"+
		"\5\u03b6\u01dc\2\u092f\u00b5\3\2\2\2\u0930\u0931\7h\2\2\u0931\u0932\7"+
		"\u01c7\2\2\u0932\u0933\5\u03b6\u01dc\2\u0933\u00b7\3\2\2\2\u0934\u0935"+
		"\7h\2\2\u0935\u0936\7\u01c8\2\2\u0936\u0937\7\u0291\2\2\u0937\u0938\5"+
		"\u03b6\u01dc\2\u0938\u00b9\3\2\2\2\u0939\u093a\7h\2\2\u093a\u093d\7U\2"+
		"\2\u093b\u093c\7\u009a\2\2\u093c\u093e\7x\2\2\u093d\u093b\3\2\2\2\u093d"+
		"\u093e\3\2\2\2\u093e\u0943\3\2\2\2\u093f\u0941\7\u0337\2\2\u0940\u093f"+
		"\3\2\2\2\u0940\u0941\3\2\2\2\u0941\u0942\3\2\2\2\u0942\u0944\5\u03b6\u01dc"+
		"\2\u0943\u0940\3\2\2\2\u0944\u0945\3\2\2\2\u0945\u0943\3\2\2\2\u0945\u0946"+
		"\3\2\2\2\u0946\u00bb\3\2\2\2\u0947\u0948\7h\2\2\u0948\u0949\7U\2\2\u0949"+
		"\u094a\7\u0199\2\2\u094a\u094b\7\u0145\2\2\u094b\u094c\5\u03b6\u01dc\2"+
		"\u094c\u00bd\3\2\2\2\u094d\u094e\7h\2\2\u094e\u094f\7U\2\2\u094f\u0950"+
		"\7\u02bf\2\2\u0950\u0951\7\u01c7\2\2\u0951\u0952\5\u03b6\u01dc\2\u0952"+
		"\u00bf\3\2\2\2\u0953\u0954\7h\2\2\u0954\u0957\7Z\2\2\u0955\u0956\7\u009a"+
		"\2\2\u0956\u0958\7x\2\2\u0957\u0955\3\2\2\2\u0957\u0958\3\2\2\2\u0958"+
		"\u095a\3\2\2\2\u0959\u095b\7\u0337\2\2\u095a\u0959\3\2\2\2\u095a\u095b"+
		"\3\2\2\2\u095b\u095f\3\2\2\2\u095c\u095d\5\u03b6\u01dc\2\u095d\u095e\7"+
		"\u0330\2\2\u095e\u0960\3\2\2\2\u095f\u095c\3\2\2\2\u095f\u0960\3\2\2\2"+
		"\u0960\u0961\3\2\2\2\u0961\u0962\5\u03b6\u01dc\2\u0962\u00c1\3\2\2\2\u0963"+
		"\u0964\7h\2\2\u0964\u0965\7n\2\2\u0965\u0966\5\u03b6\u01dc\2\u0966\u00c3"+
		"\3\2\2\2\u0967\u0968\7h\2\2\u0968\u0969\7|\2\2\u0969\u096a\7R\2\2\u096a"+
		"\u096b\7\u0144\2\2\u096b\u096c\5\u03b6\u01dc\2\u096c\u00c5\3\2\2\2\u096d"+
		"\u096e\7h\2\2\u096e\u096f\7|\2\2\u096f\u0970\7\u0082\2\2\u0970\u0971\7"+
		"\u0208\2\2\u0971\u0972\5\u03b6\u01dc\2\u0972\u00c7\3\2\2\2\u0973\u0974"+
		"\7h\2\2\u0974\u0975\7|\2\2\u0975\u0976\7\u00b2\2\2\u0976\u0979\5\u03b6"+
		"\u01dc\2\u0977\u0978\7\24\2\2\u0978\u097a\5\u03b6\u01dc\2\u0979\u0977"+
		"\3\2\2\2\u0979\u097a\3\2\2\2\u097a\u00c9\3\2\2\2\u097b\u097c\7h\2\2\u097c"+
		"\u097d\7|\2\2\u097d\u097e\7\u02b2\2\2\u097e\u097f\7\u0285\2\2\u097f\u0980"+
		"\5\u03b6\u01dc\2\u0980\u00cb\3\2\2\2\u0981\u0982\7h\2\2\u0982\u0983\7"+
		"|\2\2\u0983\u0987\7\u0156\2\2\u0984\u0985\5\u03b6\u01dc\2\u0985\u0986"+
		"\7\u0330\2\2\u0986\u0988\3\2\2\2\u0987\u0984\3\2\2\2\u0987\u0988\3\2\2"+
		"\2\u0988\u098c\3\2\2\2\u0989\u098a\5\u03b6\u01dc\2\u098a\u098b\7\u0330"+
		"\2\2\u098b\u098d\3\2\2\2\u098c\u0989\3\2\2\2\u098c\u098d\3\2\2\2\u098d"+
		"\u098e\3\2\2\2\u098e\u098f\5\u03b6\u01dc\2\u098f\u00cd\3\2\2\2\u0990\u0991"+
		"\7h\2\2\u0991\u0992\7r\2\2\u0992\u0997\7\u00dd\2\2\u0993\u0995\7\u0337"+
		"\2\2\u0994\u0993\3\2\2\2\u0994\u0995\3\2\2\2\u0995\u0996\3\2\2\2\u0996"+
		"\u0998\5\u03b6\u01dc\2\u0997\u0994\3\2\2\2\u0998\u0999\3\2\2\2\u0999\u0997"+
		"\3\2\2\2\u0999\u099a\3\2\2\2\u099a\u099b\3\2\2\2\u099b\u09a0\7\u00e5\2"+
		"\2\u099c\u09a1\7\u0137\2\2\u099d\u09a1\7U\2\2\u099e\u099f\7\u0294\2\2"+
		"\u099f\u09a1\5\u03b6\u01dc\2\u09a0\u099c\3\2\2\2\u09a0\u099d\3\2\2\2\u09a0"+
		"\u099e\3\2\2\2\u09a1\u00cf\3\2\2\2\u09a2\u09a3\7h\2\2\u09a3\u09a4\7r\2"+
		"\2\u09a4\u09a5\7\u013b\2\2\u09a5\u09a6\5\u03b6\u01dc\2\u09a6\u09a7\7\u00e5"+
		"\2\2\u09a7\u09a8\7\u0137\2\2\u09a8\u00d1\3\2\2\2\u09a9\u09aa\7h\2\2\u09aa"+
		"\u09ab\7\u020b\2\2\u09ab\u09ac\7\u01b1\2\2\u09ac\u09ad\5\u03b6\u01dc\2"+
		"\u09ad\u00d3\3\2\2\2\u09ae\u09af\7h\2\2\u09af\u09b0\7\u020b\2\2\u09b0"+
		"\u09b1\7\u009e\2\2\u09b1\u09b5\7\u00e5\2\2\u09b2\u09b3\5\u03b6\u01dc\2"+
		"\u09b3\u09b4\7\u0330\2\2\u09b4\u09b6\3\2\2\2\u09b5\u09b2\3\2\2\2\u09b5"+
		"\u09b6\3\2\2\2\u09b6\u09b7\3\2\2\2\u09b7\u09b8\5\u03b6\u01dc\2\u09b8\u00d5"+
		"\3\2\2\2\u09b9\u09ba\7h\2\2\u09ba\u09bb\7\u020b\2\2\u09bb\u09bc\7\u02e1"+
		"\2\2\u09bc\u09bd\5\u03b6\u01dc\2\u09bd\u00d7\3\2\2\2\u09be\u09bf\7h\2"+
		"\2\u09bf\u09c0\7\u023c\2\2\u09c0\u09c1\5\u03b6\u01dc\2\u09c1\u00d9\3\2"+
		"\2\2\u09c2\u09c3\7h\2\2\u09c3\u09c4\7\u00bd\2\2\u09c4\u09c5\7\u00ac\2"+
		"\2\u09c5\u00db\3\2\2\2\u09c6\u09c7\7h\2\2\u09c7\u09c8\7\u0251\2\2\u09c8"+
		"\u09c9\7\u02fb\2\2\u09c9\u09ca\5\u03b6\u01dc\2\u09ca\u00dd\3\2\2\2\u09cb"+
		"\u09cc\7h\2\2\u09cc\u09cd\7\u0280\2\2\u09cd\u09ce\7\u008e\2\2\u09ce\u09cf"+
		"\5\u03b6\u01dc\2\u09cf\u00df\3\2\2\2\u09d0\u09d1\7h\2\2\u09d1\u09d2\7"+
		"\u0280\2\2\u09d2\u09d3\7\u012f\2\2\u09d3\u09d4\5\u03b6\u01dc\2\u09d4\u00e1"+
		"\3\2\2\2\u09d5\u09d6\7h\2\2\u09d6\u09da\7\u0294\2\2\u09d7\u09d8\5\u03b6"+
		"\u01dc\2\u09d8\u09d9\7\u0330\2\2\u09d9\u09db\3\2\2\2\u09da\u09d7\3\2\2"+
		"\2\u09da\u09db\3\2\2\2\u09db\u09df\3\2\2\2\u09dc\u09dd\5\u03b6\u01dc\2"+
		"\u09dd\u09de\7\u0330\2\2\u09de\u09e0\3\2\2\2\u09df\u09dc\3\2\2\2\u09df"+
		"\u09e0\3\2\2\2\u09e0\u09e1\3\2\2\2\u09e1\u09e2\5\u03b6\u01dc\2\u09e2\u00e3"+
		"\3\2\2\2\u09e3\u09e4\7h\2\2\u09e4\u09e5\7\u02a7\2\2\u09e5\u09e6\7\u0138"+
		"\2\2\u09e6\u09e7\7\u01a9\2\2\u09e7\u09e8\5\u03b6\u01dc\2\u09e8\u00e5\3"+
		"\2\2\2\u09e9\u09ea\7h\2\2\u09ea\u09eb\7\u02b2\2\2\u09eb\u09ec\7\u0285"+
		"\2\2\u09ec\u09ed\5\u03b6\u01dc\2\u09ed\u00e7\3\2\2\2\u09ee\u09ef\7h\2"+
		"\2\u09ef\u09f2\7\u0121\2\2\u09f0\u09f1\7\u009a\2\2\u09f1\u09f3\7x\2\2"+
		"\u09f2\u09f0\3\2\2\2\u09f2\u09f3\3\2\2\2\u09f3\u09f4\3\2\2\2\u09f4\u09f5"+
		"\5\u03b6\u01dc\2\u09f5\u00e9\3\2\2\2\u09f6\u09f7\7h\2\2\u09f7\u09f8\7"+
		"\u02b8\2\2\u09f8\u09f9\5\u03b6\u01dc\2\u09f9\u00eb\3\2\2\2\u09fa\u09fb"+
		"\7h\2\2\u09fb\u09fe\7\u012a\2\2\u09fc\u09fd\7\u009a\2\2\u09fd\u09ff\7"+
		"x\2\2\u09fe\u09fc\3\2\2\2\u09fe\u09ff\3\2\2\2\u09ff\u0a09\3\2\2\2\u0a00"+
		"\u0a02\7\u0337\2\2\u0a01\u0a00\3\2\2\2\u0a01\u0a02\3\2\2\2\u0a02\u0a06"+
		"\3\2\2\2\u0a03\u0a04\5\u03b6\u01dc\2\u0a04\u0a05\7\u0330\2\2\u0a05\u0a07"+
		"\3\2\2\2\u0a06\u0a03\3\2\2\2\u0a06\u0a07\3\2\2\2\u0a07\u0a08\3\2\2\2\u0a08"+
		"\u0a0a\5\u03b6\u01dc\2\u0a09\u0a01\3\2\2\2\u0a09\u0a0a\3\2\2\2\u0a0a\u00ed"+
		"\3\2\2\2\u0a0b\u0a0c\7h\2\2\u0a0c\u0a0f\7\u012e\2\2\u0a0d\u0a0e\7\u009a"+
		"\2\2\u0a0e\u0a10\7x\2\2\u0a0f\u0a0d\3\2\2\2\u0a0f\u0a10\3\2\2\2\u0a10"+
		"\u0a11\3\2\2\2\u0a11\u0a12\5\u03b6\u01dc\2\u0a12\u00ef\3\2\2\2\u0a13\u0a14"+
		"\7h\2\2\u0a14\u0a15\7\u02c2\2\2\u0a15\u0a16\7\u0290\2\2\u0a16\u0a17\7"+
		"\u0234\2\2\u0a17\u0a18\5\u03b6\u01dc\2\u0a18\u00f1\3\2\2\2\u0a19\u0a1a"+
		"\7h\2\2\u0a1a\u0a1b\7\u0130\2\2\u0a1b\u0a1e\7\u00fd\2\2\u0a1c\u0a1d\7"+
		"\u009a\2\2\u0a1d\u0a1f\7x\2\2\u0a1e\u0a1c\3\2\2\2\u0a1e\u0a1f\3\2\2\2"+
		"\u0a1f\u0a23\3\2\2\2\u0a20\u0a21\5\u03b6\u01dc\2\u0a21\u0a22\7\u0330\2"+
		"\2\u0a22\u0a24\3\2\2\2\u0a23\u0a20\3\2\2\2\u0a23\u0a24\3\2\2\2\u0a24\u0a25"+
		"\3\2\2\2\u0a25\u0a26\5\u03b6\u01dc\2\u0a26\u00f3\3\2\2\2\u0a27\u0a28\7"+
		"h\2\2\u0a28\u0a2b\7\u0136\2\2\u0a29\u0a2a\7\u009a\2\2\u0a2a\u0a2c\7x\2"+
		"\2\u0a2b\u0a29\3\2\2\2\u0a2b\u0a2c\3\2\2\2\u0a2c\u0a3b\3\2\2\2\u0a2d\u0a2f"+
		"\7\u0337\2\2\u0a2e\u0a2d\3\2\2\2\u0a2e\u0a2f\3\2\2\2\u0a2f\u0a33\3\2\2"+
		"\2\u0a30\u0a31\5\u03b6\u01dc\2\u0a31\u0a32\7\u0330\2\2\u0a32\u0a34\3\2"+
		"\2\2\u0a33\u0a30\3\2\2\2\u0a33\u0a34\3\2\2\2\u0a34\u0a38\3\2\2\2\u0a35"+
		"\u0a36\5\u03b6\u01dc\2\u0a36\u0a37\7\u0330\2\2\u0a37\u0a39\3\2\2\2\u0a38"+
		"\u0a35\3\2\2\2\u0a38\u0a39\3\2\2\2\u0a39\u0a3a\3\2\2\2\u0a3a\u0a3c\5\u03b6"+
		"\u01dc\2\u0a3b\u0a2e\3\2\2\2\u0a3b\u0a3c\3\2\2\2\u0a3c\u00f5\3\2\2\2\u0a3d"+
		"\u0a3e\7h\2\2\u0a3e\u0a3f\7\u0137\2\2\u0a3f\u0a40\7\u0199\2\2\u0a40\u0a41"+
		"\5\u03b6\u01dc\2\u0a41\u00f7\3\2\2\2\u0a42\u0a43\7h\2\2\u0a43\u0a44\7"+
		"\u0137\2\2\u0a44\u0a45\7\u0199\2\2\u0a45\u0a46\7\u0145\2\2\u0a46\u0a47"+
		"\5\u03b6\u01dc\2\u0a47\u00f9\3\2\2\2\u0a48\u0a49\7h\2\2\u0a49\u0a4a\7"+
		"\u0137\2\2\u0a4a\u0a4b\7\u0121\2\2\u0a4b\u0a4c\5\u03b6\u01dc\2\u0a4c\u00fb"+
		"\3\2\2\2\u0a4d\u0a4e\7h\2\2\u0a4e\u0a4f\7\u0138\2\2\u0a4f\u0a50\5\u03b6"+
		"\u01dc\2\u0a50\u00fd\3\2\2\2\u0a51\u0a53\7h\2\2\u0a52\u0a54\7\u01c3\2"+
		"\2\u0a53\u0a52\3\2\2\2\u0a53\u0a54\3\2\2\2\u0a54\u0a55\3\2\2\2\u0a55\u0a56"+
		"\7\u02d3\2\2\u0a56\u0a5a\7\u008c\2\2\u0a57\u0a58\5\u03b6\u01dc\2\u0a58"+
		"\u0a59\7\u0330\2\2\u0a59\u0a5b\3\2\2\2\u0a5a\u0a57\3\2\2\2\u0a5a\u0a5b"+
		"\3\2\2\2\u0a5b\u0a5c\3\2\2\2\u0a5c\u0a5d\5\u03b6\u01dc\2\u0a5d\u0a69\7"+
		"&\2\2\u0a5e\u0a60\7\u0337\2\2\u0a5f\u0a5e\3\2\2\2\u0a5f\u0a60\3\2\2\2"+
		"\u0a60\u0a61\3\2\2\2\u0a61\u0a62\7+\2\2\u0a62\u0a6a\5\u03b6\u01dc\2\u0a63"+
		"\u0a65\7\u0337\2\2\u0a64\u0a63\3\2\2\2\u0a64\u0a65\3\2\2\2\u0a65\u0a66"+
		"\3\2\2\2\u0a66\u0a67\7\22\2\2\u0a67\u0a68\7\u00ac\2\2\u0a68\u0a6a\5\u03b6"+
		"\u01dc\2\u0a69\u0a5f\3\2\2\2\u0a69\u0a64\3\2\2\2\u0a6a\u0a6b\3\2\2\2\u0a6b"+
		"\u0a69\3\2\2\2\u0a6b\u0a6c\3\2\2\2\u0a6c\u00ff\3\2\2\2\u0a6d\u0a6e\7h"+
		"\2\2\u0a6e\u0a72\7\u014a\2\2\u0a6f\u0a70\5\u03b6\u01dc\2\u0a70\u0a71\7"+
		"\u0330\2\2\u0a71\u0a73\3\2\2\2\u0a72\u0a6f\3\2\2\2\u0a72\u0a73\3\2\2\2"+
		"\u0a73\u0a74\3\2\2\2\u0a74\u0a75\5\u03b6\u01dc\2\u0a75\u0a76\7\u0330\2"+
		"\2\u0a76\u0a77\5\u03b6\u01dc\2\u0a77\u0101\3\2\2\2\u0a78\u0a79\7h\2\2"+
		"\u0a79\u0a7a\7\u02e6\2\2\u0a7a\u0a7b\7\u00ac\2\2\u0a7b\u0a7f\5\u03b6\u01dc"+
		"\2\u0a7c\u0a7d\7\u02a9\2\2\u0a7d\u0a7e\7\u0291\2\2\u0a7e\u0a80\7\u00ac"+
		"\2\2\u0a7f\u0a7c\3\2\2\2\u0a7f\u0a80\3\2\2\2\u0a80\u0103\3\2\2\2\u0a81"+
		"\u0a82\7h\2\2\u0a82\u0a85\7\u02e8\2\2\u0a83\u0a84\7\u009a\2\2\u0a84\u0a86"+
		"\7x\2\2\u0a85\u0a83\3\2\2\2\u0a85\u0a86\3\2\2\2\u0a86\u0a8a\3\2\2\2\u0a87"+
		"\u0a88\5\u03b6\u01dc\2\u0a88\u0a89\7\u0330\2\2\u0a89\u0a8b\3\2\2\2\u0a8a"+
		"\u0a87\3\2\2\2\u0a8a\u0a8b\3\2\2\2\u0a8b\u0a8c\3\2\2\2\u0a8c\u0a8d\5\u03b6"+
		"\u01dc\2\u0a8d\u0105\3\2\2\2\u0a8e\u0a8f\7h\2\2\u0a8f\u0a92\7\u0171\2"+
		"\2\u0a90\u0a91\7\u009a\2\2\u0a91\u0a93\7x\2\2\u0a92\u0a90\3\2\2\2\u0a92"+
		"\u0a93\3\2\2\2\u0a93\u0a94\3\2\2\2\u0a94\u0a95\5\u03b6\u01dc\2\u0a95\u0107"+
		"\3\2\2\2\u0a96\u0a97\7h\2\2\u0a97\u0a98\7\u030d\2\2\u0a98\u0a99\7\u0093"+
		"\2\2\u0a99\u0a9a\5\u03b6\u01dc\2\u0a9a\u0109\3\2\2\2\u0a9b\u0a9c\7h\2"+
		"\2\u0a9c\u0a9d\7\u030e\2\2\u0a9d\u0a9e\7\u012e\2\2\u0a9e\u0aa2\7\u01b8"+
		"\2\2\u0a9f\u0aa0\5\u03b6\u01dc\2\u0aa0\u0aa1\7\u0330\2\2\u0aa1\u0aa3\3"+
		"\2\2\2\u0aa2\u0a9f\3\2\2\2\u0aa2\u0aa3\3\2\2\2\u0aa3\u0aa4\3\2\2\2\u0aa4"+
		"\u0aa5\5\u03b6\u01dc\2\u0aa5\u010b\3\2\2\2\u0aa6\u0aa7\7\u01e2\2\2\u0aa7"+
		"\u0ab6\7\u0163\2\2\u0aa8\u0aaa\7\u0337\2\2\u0aa9\u0aa8\3\2\2\2\u0aa9\u0aaa"+
		"\3\2\2\2\u0aaa\u0aae\3\2\2\2\u0aab\u0aac\5\u03b6\u01dc\2\u0aac\u0aad\7"+
		"\u0330\2\2\u0aad\u0aaf\3\2\2\2\u0aae\u0aab\3\2\2\2\u0aae\u0aaf\3\2\2\2"+
		"\u0aaf\u0ab0\3\2\2\2\u0ab0\u0ab2\5\u03b6\u01dc\2\u0ab1\u0aa9\3\2\2\2\u0ab2"+
		"\u0ab3\3\2\2\2\u0ab3\u0ab1\3\2\2\2\u0ab3\u0ab4\3\2\2\2\u0ab4\u0ab7\3\2"+
		"\2\2\u0ab5\u0ab7\7\6\2\2\u0ab6\u0ab1\3\2\2\2\u0ab6\u0ab5\3\2\2\2\u0ab7"+
		"\u0ab8\3\2\2\2\u0ab8\u0ac2\7\u00e5\2\2\u0ab9\u0aba\5\u03b6\u01dc\2\u0aba"+
		"\u0abb\7\u0330\2\2\u0abb\u0abd\3\2\2\2\u0abc\u0ab9\3\2\2\2\u0abc\u0abd"+
		"\3\2\2\2\u0abd\u0abe\3\2\2\2\u0abe\u0ac3\5\u03b6\u01dc\2\u0abf\u0ac3\7"+
		"U\2\2\u0ac0\u0ac1\7\6\2\2\u0ac1\u0ac3\7\u0137\2\2\u0ac2\u0abc\3\2\2\2"+
		"\u0ac2\u0abf\3\2\2\2\u0ac2\u0ac0\3\2\2\2\u0ac3\u010d\3\2\2\2\u0ac4\u0ac5"+
		"\7\u01eb\2\2\u0ac5\u0ad4\7\u0163\2\2\u0ac6\u0ac8\7\u0337\2\2\u0ac7\u0ac6"+
		"\3\2\2\2\u0ac7\u0ac8\3\2\2\2\u0ac8\u0acc\3\2\2\2\u0ac9\u0aca\5\u03b6\u01dc"+
		"\2\u0aca\u0acb\7\u0330\2\2\u0acb\u0acd\3\2\2\2\u0acc\u0ac9\3\2\2\2\u0acc"+
		"\u0acd\3\2\2\2\u0acd\u0ace\3\2\2\2\u0ace\u0ad0\5\u03b6\u01dc\2\u0acf\u0ac7"+
		"\3\2\2\2\u0ad0\u0ad1\3\2\2\2\u0ad1\u0acf\3\2\2\2\u0ad1\u0ad2\3\2\2\2\u0ad2"+
		"\u0ad5\3\2\2\2\u0ad3\u0ad5\7\6\2\2\u0ad4\u0acf\3\2\2\2\u0ad4\u0ad3\3\2"+
		"\2\2\u0ad5\u0ad6\3\2\2\2\u0ad6\u0ae0\7\u00e5\2\2\u0ad7\u0ad8\5\u03b6\u01dc"+
		"\2\u0ad8\u0ad9\7\u0330\2\2\u0ad9\u0adb\3\2\2\2\u0ada\u0ad7\3\2\2\2\u0ada"+
		"\u0adb\3\2\2\2\u0adb\u0adc\3\2\2\2\u0adc\u0ae1\5\u03b6\u01dc\2\u0add\u0ae1"+
		"\7U\2\2\u0ade\u0adf\7\6\2\2\u0adf\u0ae1\7\u0137\2\2\u0ae0\u0ada\3\2\2"+
		"\2\u0ae0\u0add\3\2\2\2\u0ae0\u0ade\3\2\2\2\u0ae1\u010f\3\2\2\2\u0ae2\u0ae3"+
		"\7\u023a\2\2\u0ae3\u0ae4\7\u0156\2\2\u0ae4\u0ae5\5\u0382\u01c2\2\u0ae5"+
		"\u0ae6\7\u009b\2\2\u0ae6\u0ae7\t\26\2\2\u0ae7\u0aeb\7\u025a\2\2\u0ae8"+
		"\u0ae9\7\u0309\2\2\u0ae9\u0aec\7\u031b\2\2\u0aea\u0aec\7\u026d\2\2\u0aeb"+
		"\u0ae8\3\2\2\2\u0aeb\u0aea\3\2\2\2\u0aeb\u0aec\3\2\2\2\u0aec\u0aee\3\2"+
		"\2\2\u0aed\u0aef\7\u0338\2\2\u0aee\u0aed\3\2\2\2\u0aee\u0aef\3\2\2\2\u0aef"+
		"\u0111\3\2\2\2\u0af0\u0af1\7\u0164\2\2\u0af1\u0af2\7\u0156\2\2\u0af2\u0b06"+
		"\5\u0382\u01c2\2\u0af3\u0af4\7\u017c\2\2\u0af4\u0af5\7\u0335\2\2\u0af5"+
		"\u0af6\7\u0281\2\2\u0af6\u0b00\7\u0335\2\2\u0af7\u0af9\7\u0337\2\2\u0af8"+
		"\u0af7\3\2\2\2\u0af8\u0af9\3\2\2\2\u0af9\u0afe\3\2\2\2\u0afa\u0aff\7\u031b"+
		"\2\2\u0afb\u0afc\7\u031b\2\2\u0afc\u0afd\7\u015d\2\2\u0afd\u0aff\7\u031b"+
		"\2\2\u0afe\u0afa\3\2\2\2\u0afe\u0afb\3\2\2\2\u0aff\u0b01\3\2\2\2\u0b00"+
		"\u0af8\3\2\2\2\u0b01\u0b02\3\2\2\2\u0b02\u0b00\3\2\2\2\u0b02\u0b03\3\2"+
		"\2\2\u0b03\u0b04\3\2\2\2\u0b04\u0b05\7\u0336\2\2\u0b05\u0b07\7\u0336\2"+
		"\2\u0b06\u0af3\3\2\2\2\u0b06\u0b07\3\2\2\2\u0b07\u0113\3\2\2\2\u0b08\u0b09"+
		"\7I\2\2\u0b09\u0b0a\78\2\2\u0b0a\u0b0b\7\u00bd\2\2\u0b0b\u0b0c\7\u00ac"+
		"\2\2\u0b0c\u0b0d\5\u03b6\u01dc\2\u0b0d\u0b0e\7\u017c\2\2\u0b0e\u0b0f\7"+
		"\u0335\2\2\u0b0f\u0b10\7\u00ae\2\2\u0b10\u0b11\7\u0323\2\2\u0b11\u0b12"+
		"\7\u031f\2\2\u0b12\u0b13\7\u0337\2\2\u0b13\u0b14\7\u00ad\2\2\u0b14\u0b15"+
		"\7\u0323\2\2\u0b15\u0b16\7\u031f\2\2\u0b16\u0b17\7\u0336\2\2\u0b17\u0115"+
		"\3\2\2\2\u0b18\u0b19\7\n\2\2\u0b19\u0b1a\7\u01c7\2\2\u0b1a\u0b1b\5\u03b6"+
		"\u01dc\2\u0b1b\u0b1c\7\u017c\2\2\u0b1c\u0b1d\7\u0097\2\2\u0b1d\u0b1e\7"+
		"\u0323\2\2\u0b1e\u0b23\7\u031f\2\2\u0b1f\u0b20\7\u0337\2\2\u0b20\u0b21"+
		"\7\u02c7\2\2\u0b21\u0b22\7\u0323\2\2\u0b22\u0b24\7\u031f\2\2\u0b23\u0b1f"+
		"\3\2\2\2\u0b23\u0b24\3\2\2\2\u0b24\u0117\3\2\2\2\u0b25\u0b26\7I\2\2\u0b26"+
		"\u0b27\7\u01c7\2\2\u0b27\u0b28\5\u03b6\u01dc\2\u0b28\u0b29\7\u017c\2\2"+
		"\u0b29\u0b2a\7\u0097\2\2\u0b2a\u0b2b\7\u0323\2\2\u0b2b\u0b30\7\u031f\2"+
		"\2\u0b2c\u0b2d\7\u0337\2\2\u0b2d\u0b2e\7\u02c7\2\2\u0b2e\u0b2f\7\u0323"+
		"\2\2\u0b2f\u0b31\7\u031f\2\2\u0b30\u0b2c\3\2\2\2\u0b30\u0b31\3\2\2\2\u0b31"+
		"\u0b36\3\2\2\2\u0b32\u0b33\7\u0086\2\2\u0b33\u0b34\7\u01c8\2\2\u0b34\u0b35"+
		"\7\u0291\2\2\u0b35\u0b37\5\u03b6\u01dc\2\u0b36\u0b32\3\2\2\2\u0b36\u0b37"+
		"\3\2\2\2\u0b37\u0119\3\2\2\2\u0b38\u0b39\7\n\2\2\u0b39\u0b3a\7\u01c8\2"+
		"\2\u0b3a\u0b3b\7\u0291\2\2\u0b3b\u0b40\5\u03b6\u01dc\2\u0b3c\u0b3d\7\u008c"+
		"\2\2\u0b3d\u0b3e\7\u0082\2\2\u0b3e\u0b3f\7\u0323\2\2\u0b3f\u0b41\7\u031f"+
		"\2\2\u0b40\u0b3c\3\2\2\2\u0b40\u0b41\3\2\2\2\u0b41\u0b43\3\2\2\2\u0b42"+
		"\u0b44\t\27\2\2\u0b43\u0b42\3\2\2\2\u0b43\u0b44\3\2\2\2\u0b44\u011b\3"+
		"\2\2\2\u0b45\u0b46\7I\2\2\u0b46\u0b47\7\u01c8\2\2\u0b47\u0b48\7\u0291"+
		"\2\2\u0b48\u0b49\5\u03b6\u01dc\2\u0b49\u0b4a\7\u008c\2\2\u0b4a\u0b4b\7"+
		"\u0082\2\2\u0b4b\u0b4c\7\u0323\2\2\u0b4c\u0b4d\7\u031f\2\2\u0b4d\u011d"+
		"\3\2\2\2\u0b4e\u0b4f\7I\2\2\u0b4f\u0b50\7r\2\2\u0b50\u0b51\7\u00dd\2\2"+
		"\u0b51\u0b52\5\u03b6\u01dc\2\u0b52\u0b57\7\u00e5\2\2\u0b53\u0b58\7\u0137"+
		"\2\2\u0b54\u0b58\7U\2\2\u0b55\u0b56\7\u0294\2\2\u0b56\u0b58\5\u03b6\u01dc"+
		"\2\u0b57\u0b53\3\2\2\2\u0b57\u0b54\3\2\2\2\u0b57\u0b55\3\2\2\2\u0b58\u0b5b"+
		"\3\2\2\2\u0b59\u0b5a\7\u017c\2\2\u0b5a\u0b5c\7\u0080\2\2\u0b5b\u0b59\3"+
		"\2\2\2\u0b5b\u0b5c\3\2\2\2\u0b5c\u0b5d\3\2\2\2\u0b5d\u0b62\7\u0086\2\2"+
		"\u0b5e\u0b60\7\u0337\2\2\u0b5f\u0b5e\3\2\2\2\u0b5f\u0b60\3\2\2\2\u0b60"+
		"\u0b61\3\2\2\2\u0b61\u0b63\5\u03b6\u01dc\2\u0b62\u0b5f\3\2\2\2\u0b63\u0b64"+
		"\3\2\2\2\u0b64\u0b62\3\2\2\2\u0b64\u0b65\3\2\2\2\u0b65\u0b66\3\2\2\2\u0b66"+
		"\u0b67\7\u015d\2\2\u0b67\u0b68\7\u0138\2\2\u0b68\u0b69\7\u031f\2\2\u0b69"+
		"\u0b6a\7\u0337\2\2\u0b6a\u0b6b\7\u031f\2\2\u0b6b\u011f\3\2\2\2\u0b6c\u0b6d"+
		"\t\24\2\2\u0b6d\u0b6e\7r\2\2\u0b6e\u0b6f\7\u013b\2\2\u0b6f\u0b70\5\u03b6"+
		"\u01dc\2\u0b70\u0b71\7\u00e5\2\2\u0b71\u0bb5\7\u0137\2\2\u0b72\u0b74\7"+
		"\u0337\2\2\u0b73\u0b72\3\2\2\2\u0b73\u0b74\3\2\2\2\u0b74\u0b75\3\2\2\2"+
		"\u0b75\u0b76\7\4\2\2\u0b76\u0b7a\7r\2\2\u0b77\u0b78\5\u03b6\u01dc\2\u0b78"+
		"\u0b79\7\u0330\2\2\u0b79\u0b7b\3\2\2\2\u0b7a\u0b77\3\2\2\2\u0b7a\u0b7b"+
		"\3\2\2\2\u0b7b\u0b7c\3\2\2\2\u0b7c\u0b7d\5\u03b6\u01dc\2\u0b7d\u0b7e\7"+
		"\u0330\2\2\u0b7e\u0b7f\5\u03b6\u01dc\2\u0b7f\u0bb0\3\2\2\2\u0b80\u0b8e"+
		"\7\u0335\2\2\u0b81\u0b8b\7\u013d\2\2\u0b82\u0b84\7\u0337\2\2\u0b83\u0b82"+
		"\3\2\2\2\u0b83\u0b84\3\2\2\2\u0b84\u0b85\3\2\2\2\u0b85\u0b86\5\u03b6\u01dc"+
		"\2\u0b86\u0b87\7\u0323\2\2\u0b87\u0b88\t\30\2\2\u0b88\u0b8a\3\2\2\2\u0b89"+
		"\u0b83\3\2\2\2\u0b8a\u0b8d\3\2\2\2\u0b8b\u0b89\3\2\2\2\u0b8b\u0b8c\3\2"+
		"\2\2\u0b8c\u0b8f\3\2\2\2\u0b8d\u0b8b\3\2\2\2\u0b8e\u0b81\3\2\2\2\u0b8e"+
		"\u0b8f\3\2\2\2\u0b8f\u0ba4\3\2\2\2\u0b90\u0b91\7\u0183\2\2\u0b91\u0b9e"+
		"\7\u0335\2\2\u0b92\u0b94\7\u0337\2\2\u0b93\u0b92\3\2\2\2\u0b93\u0b94\3"+
		"\2\2\2\u0b94\u0b98\3\2\2\2\u0b95\u0b96\5\u03b6\u01dc\2\u0b96\u0b97\7\u0330"+
		"\2\2\u0b97\u0b99\3\2\2\2\u0b98\u0b95\3\2\2\2\u0b98\u0b99\3\2\2\2\u0b99"+
		"\u0b9a\3\2\2\2\u0b9a\u0b9b\5\u03b6\u01dc\2\u0b9b\u0b9c\7\u0330\2\2\u0b9c"+
		"\u0b9d\5\u03b6\u01dc\2\u0b9d\u0b9f\3\2\2\2\u0b9e\u0b93\3\2\2\2\u0b9f\u0ba0"+
		"\3\2\2\2\u0ba0\u0b9e\3\2\2\2\u0ba0\u0ba1\3\2\2\2\u0ba1\u0ba2\3\2\2\2\u0ba2"+
		"\u0ba3\7\u0336\2\2\u0ba3\u0ba5\3\2\2\2\u0ba4\u0b90\3\2\2\2\u0ba5\u0ba6"+
		"\3\2\2\2\u0ba6\u0ba4\3\2\2\2\u0ba6\u0ba7\3\2\2\2\u0ba7\u0baa\3\2\2\2\u0ba8"+
		"\u0ba9\7\u0179\2\2\u0ba9\u0bab\5\u0122\u0092\2\u0baa\u0ba8\3\2\2\2\u0baa"+
		"\u0bab\3\2\2\2\u0bab\u0bac\3\2\2\2\u0bac\u0bad\7\u0336\2\2\u0bad\u0baf"+
		"\3\2\2\2\u0bae\u0b80\3\2\2\2\u0baf\u0bb2\3\2\2\2\u0bb0\u0bae\3\2\2\2\u0bb0"+
		"\u0bb1\3\2\2\2\u0bb1\u0bb4\3\2\2\2\u0bb2\u0bb0\3\2\2\2\u0bb3\u0b73\3\2"+
		"\2\2\u0bb4\u0bb7\3\2\2\2\u0bb5\u0bb3\3\2\2\2\u0bb5\u0bb6\3\2\2\2\u0bb6"+
		"\u0bc8\3\2\2\2\u0bb7\u0bb5\3\2\2\2\u0bb8\u0bba\7\u0337\2\2\u0bb9\u0bb8"+
		"\3\2\2\2\u0bb9\u0bba\3\2\2\2\u0bba\u0bbb\3\2\2\2\u0bbb\u0bbc\7h\2\2\u0bbc"+
		"\u0bc0\7r\2\2\u0bbd\u0bbe\5\u03b6\u01dc\2\u0bbe\u0bbf\7\u0330\2\2\u0bbf"+
		"\u0bc1\3\2\2\2\u0bc0\u0bbd\3\2\2\2\u0bc0\u0bc1\3\2\2\2\u0bc1\u0bc2\3\2"+
		"\2\2\u0bc2\u0bc3\5\u03b6\u01dc\2\u0bc3\u0bc4\7\u0330\2\2\u0bc4\u0bc5\5"+
		"\u03b6\u01dc\2\u0bc5\u0bc7\3\2\2\2\u0bc6\u0bb9\3\2\2\2\u0bc7\u0bca\3\2"+
		"\2\2\u0bc8\u0bc6\3\2\2\2\u0bc8\u0bc9\3\2\2\2\u0bc9\u0bf4\3\2\2\2\u0bca"+
		"\u0bc8\3\2\2\2\u0bcb\u0bcc\7\4\2\2\u0bcc\u0bd0\7\u0159\2\2\u0bcd\u0bce"+
		"\5\u03b6\u01dc\2\u0bce\u0bcf\7\u0330\2\2\u0bcf\u0bd1\3\2\2\2\u0bd0\u0bcd"+
		"\3\2\2\2\u0bd0\u0bd1\3\2\2\2\u0bd1\u0bd2\3\2\2\2\u0bd2\u0bd3\5\u03b6\u01dc"+
		"\2\u0bd3\u0bd4\7\u0330\2\2\u0bd4\u0bd5\5\u03b6\u01dc\2\u0bd5\u0bef\3\2"+
		"\2\2\u0bd6\u0bd7\7\u0335\2\2\u0bd7\u0be7\7\u013d\2\2\u0bd8\u0bda\7\u0337"+
		"\2\2\u0bd9\u0bd8\3\2\2\2\u0bd9\u0bda\3\2\2\2\u0bda\u0bdb\3\2\2\2\u0bdb"+
		"\u0bdc\5\u03b6\u01dc\2\u0bdc\u0be5\7\u0323\2\2\u0bdd\u0bdf\7\u0335\2\2"+
		"\u0bde\u0bdd\3\2\2\2\u0bde\u0bdf\3\2\2\2\u0bdf\u0be0\3\2\2\2\u0be0\u0be2"+
		"\7\u031b\2\2\u0be1\u0be3\7\u0336\2\2\u0be2\u0be1\3\2\2\2\u0be2\u0be3\3"+
		"\2\2\2\u0be3\u0be6\3\2\2\2\u0be4\u0be6\7\u031f\2\2\u0be5\u0bde\3\2\2\2"+
		"\u0be5\u0be4\3\2\2\2\u0be6\u0be8\3\2\2\2\u0be7\u0bd9\3\2\2\2\u0be8\u0be9"+
		"\3\2\2\2\u0be9\u0be7\3\2\2\2\u0be9\u0bea\3\2\2\2\u0bea\u0beb\3\2\2\2\u0beb"+
		"\u0bec\7\u0336\2\2\u0bec\u0bee\3\2\2\2\u0bed\u0bd6\3\2\2\2\u0bee\u0bf1"+
		"\3\2\2\2\u0bef\u0bed\3\2\2\2\u0bef\u0bf0\3\2\2\2\u0bf0\u0bf3\3\2\2\2\u0bf1"+
		"\u0bef\3\2\2\2\u0bf2\u0bcb\3\2\2\2\u0bf3\u0bf6\3\2\2\2\u0bf4\u0bf2\3\2"+
		"\2\2\u0bf4\u0bf5\3\2\2\2\u0bf5\u0c04\3\2\2\2\u0bf6\u0bf4\3\2\2\2\u0bf7"+
		"\u0bf8\7h\2\2\u0bf8\u0bfc\7\u0159\2\2\u0bf9\u0bfa\5\u03b6\u01dc\2\u0bfa"+
		"\u0bfb\7\u0330\2\2\u0bfb\u0bfd\3\2\2\2\u0bfc\u0bf9\3\2\2\2\u0bfc\u0bfd"+
		"\3\2\2\2\u0bfd\u0bfe\3\2\2\2\u0bfe\u0bff\5\u03b6\u01dc\2\u0bff\u0c00\7"+
		"\u0330\2\2\u0c00\u0c01\5\u03b6\u01dc\2\u0c01\u0c03\3\2\2\2\u0c02\u0bf7"+
		"\3\2\2\2\u0c03\u0c06\3\2\2\2\u0c04\u0c02\3\2\2\2\u0c04\u0c05\3\2\2\2\u0c05"+
		"\u0c48\3\2\2\2\u0c06\u0c04\3\2\2\2\u0c07\u0c08\7\u017c\2\2\u0c08\u0c10"+
		"\7\u0335\2\2\u0c09\u0c0b\7\u0337\2\2\u0c0a\u0c09\3\2\2\2\u0c0a\u0c0b\3"+
		"\2\2\2\u0c0b\u0c0c\3\2\2\2\u0c0c\u0c0d\7\u00be\2\2\u0c0d\u0c0e\7\u0323"+
		"\2\2\u0c0e\u0c0f\7\u031b\2\2\u0c0f\u0c11\t\31\2\2\u0c10\u0c0a\3\2\2\2"+
		"\u0c10\u0c11\3\2\2\2\u0c11\u0c18\3\2\2\2\u0c12\u0c14\7\u0337\2\2\u0c13"+
		"\u0c12\3\2\2\2\u0c13\u0c14\3\2\2\2\u0c14\u0c15\3\2\2\2\u0c15\u0c16\7t"+
		"\2\2\u0c16\u0c17\7\u0323\2\2\u0c17\u0c19\t\32\2\2\u0c18\u0c13\3\2\2\2"+
		"\u0c18\u0c19\3\2\2\2\u0c19\u0c24\3\2\2\2\u0c1a\u0c1c\7\u0337\2\2\u0c1b"+
		"\u0c1a\3\2\2\2\u0c1b\u0c1c\3\2\2\2\u0c1c\u0c1d\3\2\2\2\u0c1d\u0c1e\7\u00c1"+
		"\2\2\u0c1e\u0c22\7\u0323\2\2\u0c1f\u0c20\7\u031b\2\2\u0c20\u0c23\7\u02c6"+
		"\2\2\u0c21\u0c23\7\u009f\2\2\u0c22\u0c1f\3\2\2\2\u0c22\u0c21\3\2\2\2\u0c23"+
		"\u0c25\3\2\2\2\u0c24\u0c1b\3\2\2\2\u0c24\u0c25\3\2\2\2\u0c25\u0c2d\3\2"+
		"\2\2\u0c26\u0c28\7\u0337\2\2\u0c27\u0c26\3\2\2\2\u0c27\u0c28\3\2\2\2\u0c28"+
		"\u0c29\3\2\2\2\u0c29\u0c2a\7\u00c2\2\2\u0c2a\u0c2b\7\u0323\2\2\u0c2b\u0c2c"+
		"\7\u031b\2\2\u0c2c\u0c2e\t\31\2\2\u0c2d\u0c27\3\2\2\2\u0c2d\u0c2e\3\2"+
		"\2\2\u0c2e\u0c35\3\2\2\2\u0c2f\u0c31\7\u0337\2\2\u0c30\u0c2f\3\2\2\2\u0c30"+
		"\u0c31\3\2\2\2\u0c31\u0c32\3\2\2\2\u0c32\u0c33\7\u00c8\2\2\u0c33\u0c34"+
		"\7\u0323\2\2\u0c34\u0c36\t\33\2\2\u0c35\u0c30\3\2\2\2\u0c35\u0c36\3\2"+
		"\2\2\u0c36\u0c3d\3\2\2\2\u0c37\u0c39\7\u0337\2\2\u0c38\u0c37\3\2\2\2\u0c38"+
		"\u0c39\3\2\2\2\u0c39\u0c3a\3\2\2\2\u0c3a\u0c3b\7\u015f\2\2\u0c3b\u0c3c"+
		"\7\u0323\2\2\u0c3c\u0c3e\t\t\2\2\u0c3d\u0c38\3\2\2\2\u0c3d\u0c3e\3\2\2"+
		"\2\u0c3e\u0c45\3\2\2\2\u0c3f\u0c41\7\u0337\2\2\u0c40\u0c3f\3\2\2\2\u0c40"+
		"\u0c41\3\2\2\2\u0c41\u0c42\3\2\2\2\u0c42\u0c43\7\u014f\2\2\u0c43\u0c44"+
		"\7\u0323\2\2\u0c44\u0c46\t\t\2\2\u0c45\u0c40\3\2\2\2\u0c45\u0c46\3\2\2"+
		"\2\u0c46\u0c47\3\2\2\2\u0c47\u0c49\7\u0336\2\2\u0c48\u0c07\3\2\2\2\u0c48"+
		"\u0c49\3\2\2\2\u0c49\u0c4d\3\2\2\2\u0c4a\u0c4b\7\u014b\2\2\u0c4b\u0c4c"+
		"\7\u0323\2\2\u0c4c\u0c4e\t\34\2\2\u0c4d\u0c4a\3\2\2\2\u0c4d\u0c4e\3\2"+
		"\2\2\u0c4e\u0121\3\2\2\2\u0c4f\u0c51\7\u0337\2\2\u0c50\u0c4f\3\2\2\2\u0c50"+
		"\u0c51\3\2\2\2\u0c51\u0c53\3\2\2\2\u0c52\u0c54\t\35\2\2\u0c53\u0c52\3"+
		"\2\2\2\u0c53\u0c54\3\2\2\2\u0c54\u0c56\3\2\2\2\u0c55\u0c57\7\u00dc\2";
	private static final String _serializedATNSegment2 =
		"\2\u0c56\u0c55\3\2\2\2\u0c56\u0c57\3\2\2\2\u0c57\u0c5d\3\2\2\2\u0c58\u0c5e"+
		"\5\u0124\u0093\2\u0c59\u0c5a\7\u0335\2\2\u0c5a\u0c5b\5\u0122\u0092\2\u0c5b"+
		"\u0c5c\7\u0336\2\2\u0c5c\u0c5e\3\2\2\2\u0c5d\u0c58\3\2\2\2\u0c5d\u0c59"+
		"\3\2\2\2\u0c5e\u0c60\3\2\2\2\u0c5f\u0c50\3\2\2\2\u0c60\u0c61\3\2\2\2\u0c61"+
		"\u0c5f\3\2\2\2\u0c61\u0c62\3\2\2\2\u0c62\u0123\3\2\2\2\u0c63\u0c69\5\u0126"+
		"\u0094\2\u0c64\u0c65\7\u0335\2\2\u0c65\u0c66\5\u0122\u0092\2\u0c66\u0c67"+
		"\7\u0336\2\2\u0c67\u0c69\3\2\2\2\u0c68\u0c63\3\2\2\2\u0c68\u0c64\3\2\2"+
		"\2\u0c69\u0125\3\2\2\2\u0c6a\u0c87\5\u03b6\u01dc\2\u0c6b\u0c76\5\u03b6"+
		"\u01dc\2\u0c6c\u0c6d\5\u03b6\u01dc\2\u0c6d\u0c6e\7\u0330\2\2\u0c6e\u0c70"+
		"\3\2\2\2\u0c6f\u0c6c\3\2\2\2\u0c6f\u0c70\3\2\2\2\u0c70\u0c71\3\2\2\2\u0c71"+
		"\u0c72\5\u03b6\u01dc\2\u0c72\u0c73\7\u0330\2\2\u0c73\u0c74\5\u03b6\u01dc"+
		"\2\u0c74\u0c76\3\2\2\2\u0c75\u0c6b\3\2\2\2\u0c75\u0c6f\3\2\2\2\u0c76\u0c82"+
		"\3\2\2\2\u0c77\u0c83\7\u0323\2\2\u0c78\u0c79\7\u0325\2\2\u0c79\u0c83\7"+
		"\u0324\2\2\u0c7a\u0c7b\7\u0326\2\2\u0c7b\u0c83\7\u0323\2\2\u0c7c\u0c83"+
		"\7\u0324\2\2\u0c7d\u0c7e\7\u0324\2\2\u0c7e\u0c83\7\u0323\2\2\u0c7f\u0c83"+
		"\7\u0325\2\2\u0c80\u0c81\7\u0325\2\2\u0c81\u0c83\7\u0323\2\2\u0c82\u0c77"+
		"\3\2\2\2\u0c82\u0c78\3\2\2\2\u0c82\u0c7a\3\2\2\2\u0c82\u0c7c\3\2\2\2\u0c82"+
		"\u0c7d\3\2\2\2\u0c82\u0c7f\3\2\2\2\u0c82\u0c80\3\2\2\2\u0c83\u0c84\3\2"+
		"\2\2\u0c84\u0c85\t\30\2\2\u0c85\u0c87\3\2\2\2\u0c86\u0c6a\3\2\2\2\u0c86"+
		"\u0c75\3\2\2\2\u0c87\u0ca3\3\2\2\2\u0c88\u0c89\5\u03b6\u01dc\2\u0c89\u0c8a"+
		"\7\u0330\2\2\u0c8a\u0c8c\3\2\2\2\u0c8b\u0c88\3\2\2\2\u0c8b\u0c8c\3\2\2"+
		"\2\u0c8c\u0c8d\3\2\2\2\u0c8d\u0c8e\5\u03b6\u01dc\2\u0c8e\u0c8f\7\u0330"+
		"\2\2\u0c8f\u0c90\5\u03b6\u01dc\2\u0c90\u0c9e\7\u0335\2\2\u0c91\u0c9f\5"+
		"\u03b6\u01dc\2\u0c92\u0c93\5\u03b6\u01dc\2\u0c93\u0c94\7\u0330\2\2\u0c94"+
		"\u0c96\3\2\2\2\u0c95\u0c92\3\2\2\2\u0c95\u0c96\3\2\2\2\u0c96\u0c97\3\2"+
		"\2\2\u0c97\u0c98\5\u03b6\u01dc\2\u0c98\u0c99\7\u0330\2\2\u0c99\u0c9a\5"+
		"\u03b6\u01dc\2\u0c9a\u0c9b\3\2\2\2\u0c9b\u0c9c\7\u0337\2\2\u0c9c\u0c9d"+
		"\t\30\2\2\u0c9d\u0c9f\3\2\2\2\u0c9e\u0c91\3\2\2\2\u0c9e\u0c95\3\2\2\2"+
		"\u0c9f\u0ca0\3\2\2\2\u0ca0\u0ca1\7\u0336\2\2\u0ca1\u0ca3\3\2\2\2\u0ca2"+
		"\u0c86\3\2\2\2\u0ca2\u0c8b\3\2\2\2\u0ca3\u0127\3\2\2\2\u0ca4\u0ca5\7\n"+
		"\2\2\u0ca5\u0ca6\7|\2\2\u0ca6\u0ca7\7R\2\2\u0ca7\u0ca8\7\u0144\2\2\u0ca8"+
		"\u0ca9\5\u03b6\u01dc\2\u0ca9\u0cb9\7\u013d\2\2\u0caa\u0cab\7\u0239\2\2"+
		"\u0cab\u0cac\7\u0323\2\2\u0cac\u0cae\t\36\2\2\u0cad\u0caf\7\u0337\2\2"+
		"\u0cae\u0cad\3\2\2\2\u0cae\u0caf\3\2\2\2\u0caf\u0cba\3\2\2\2\u0cb0\u0cb1"+
		"\7\u02b3\2\2\u0cb1\u0cb2\7\u0323\2\2\u0cb2\u0cb4\t\36\2\2\u0cb3\u0cb5"+
		"\7\u0337\2\2\u0cb4\u0cb3\3\2\2\2\u0cb4\u0cb5\3\2\2\2\u0cb5\u0cba\3\2\2"+
		"\2\u0cb6\u0cb7\7\u01c7\2\2\u0cb7\u0cb8\7\u0323\2\2\u0cb8\u0cba\5\u03b6"+
		"\u01dc\2\u0cb9\u0caa\3\2\2\2\u0cb9\u0cb0\3\2\2\2\u0cb9\u0cb6\3\2\2\2\u0cba"+
		"\u0cbb\3\2\2\2\u0cbb\u0cb9\3\2\2\2\u0cbb\u0cbc\3\2\2\2\u0cbc\u0cd4\3\2"+
		"\2\2\u0cbd\u0cbe\7\n\2\2\u0cbe\u0cbf\7|\2\2\u0cbf\u0cc0\7R\2\2\u0cc0\u0cc1"+
		"\7\u0144\2\2\u0cc1\u0cc2\5\u03b6\u01dc\2\u0cc2\u0cc3\7\u017c\2\2\u0cc3"+
		"\u0cc4\7\u0335\2\2\u0cc4\u0cc5\7\u02fb\2\2\u0cc5\u0cc6\7\u0323\2\2\u0cc6"+
		"\u0cc7\7\u01aa\2\2\u0cc7\u0cc8\7\u0337\2\2\u0cc8\u0cc9\7\u0239\2\2\u0cc9"+
		"\u0cca\7\u0323\2\2\u0cca\u0ccf\7\u031f\2\2\u0ccb\u0ccc\7\u0337\2\2\u0ccc"+
		"\u0ccd\7\u01c7\2\2\u0ccd\u0cce\7\u0323\2\2\u0cce\u0cd0\5\u03b6\u01dc\2"+
		"\u0ccf\u0ccb\3\2\2\2\u0ccf\u0cd0\3\2\2\2\u0cd0\u0cd1\3\2\2\2\u0cd1\u0cd2"+
		"\7\u0336\2\2\u0cd2\u0cd4\3\2\2\2\u0cd3\u0ca4\3\2\2\2\u0cd3\u0cbd\3\2\2"+
		"\2\u0cd4\u0129\3\2\2\2\u0cd5\u0cd6\7\n\2\2\u0cd6\u0cd7\7|\2\2\u0cd7\u0cd8"+
		"\7\u00b2\2\2\u0cd8\u0cdb\5\u03b6\u01dc\2\u0cd9\u0cda\7\24\2\2\u0cda\u0cdc"+
		"\5\u03b6\u01dc\2\u0cdb\u0cd9\3\2\2\2\u0cdb\u0cdc\3\2\2\2\u0cdc\u0cdd\3"+
		"\2\2\2\u0cdd\u0cde\t\37\2\2\u0cde\u0cdf\7\u0335\2\2\u0cdf\u0ce0\7\u01be"+
		"\2\2\u0ce0\u0ce4\7\u0323\2\2\u0ce1\u0ce5\7\u031f\2\2\u0ce2\u0ce5\7\u0320"+
		"\2\2\u0ce3\u0ce5\7\u00d5\2\2\u0ce4\u0ce1\3\2\2\2\u0ce4\u0ce2\3\2\2\2\u0ce4"+
		"\u0ce3\3\2\2\2\u0ce5\u0ce6\3\2\2\2\u0ce6\u0ce7\7\u0337\2\2\u0ce7\u0ce8"+
		"\7\u00fc\2\2\u0ce8\u0cea\7\u0323\2\2\u0ce9\u0ceb\t \2\2\u0cea\u0ce9\3"+
		"\2\2\2\u0cea\u0ceb\3\2\2\2\u0ceb\u0cec\3\2\2\2\u0cec\u0ced\7\u0336\2\2"+
		"\u0ced\u0cee\3\2\2\2\u0cee\u0cf8\7\u017c\2\2\u0cef\u0cf1\7\u0337\2\2\u0cf0"+
		"\u0cef\3\2\2\2\u0cf0\u0cf1\3\2\2\2\u0cf1\u0cf2\3\2\2\2\u0cf2\u0cf3\7\u00b0"+
		"\2\2\u0cf3\u0cf4\7\u0323\2\2\u0cf4\u0cf9\t!\2\2\u0cf5\u0cf6\7T\2\2\u0cf6"+
		"\u0cf7\7\u0323\2\2\u0cf7\u0cf9\5\u03b6\u01dc\2\u0cf8\u0cf0\3\2\2\2\u0cf8"+
		"\u0cf5\3\2\2\2\u0cf9\u0cfa\3\2\2\2\u0cfa\u0cf8\3\2\2\2\u0cfa\u0cfb\3\2"+
		"\2\2\u0cfb\u0cfc\3\2\2\2\u0cfc\u0cfd\7\u0336\2\2\u0cfd\u012b\3\2\2\2\u0cfe"+
		"\u0cff\7I\2\2\u0cff\u0d00\7|\2\2\u0d00\u0d01\7\u00b2\2\2\u0d01\u0d04\5"+
		"\u03b6\u01dc\2\u0d02\u0d03\7\24\2\2\u0d03\u0d05\5\u03b6\u01dc\2\u0d04"+
		"\u0d02\3\2\2\2\u0d04\u0d05\3\2\2\2\u0d05\u0d06\3\2\2\2\u0d06\u0d08\7\u008c"+
		"\2\2\u0d07\u0d09\7\u0337\2\2\u0d08\u0d07\3\2\2\2\u0d08\u0d09\3\2\2\2\u0d09"+
		"\u0d0b\3\2\2\2\u0d0a\u0d0c\7\u0335\2\2\u0d0b\u0d0a\3\2\2\2\u0d0b\u0d0c"+
		"\3\2\2\2\u0d0c\u0d0f\3\2\2\2\u0d0d\u0d0e\7\u01be\2\2\u0d0e\u0d10\7\u0323"+
		"\2\2\u0d0f\u0d0d\3\2\2\2\u0d0f\u0d10\3\2\2\2\u0d10\u0d14\3\2\2\2\u0d11"+
		"\u0d15\7\u031f\2\2\u0d12\u0d15\7\u0320\2\2\u0d13\u0d15\7\u00d5\2\2\u0d14"+
		"\u0d11\3\2\2\2\u0d14\u0d12\3\2\2\2\u0d14\u0d13\3\2\2\2\u0d15\u0d1d\3\2"+
		"\2\2\u0d16\u0d17\7\u0337\2\2\u0d17\u0d18\7\u00fc\2\2\u0d18\u0d1a\7\u0323"+
		"\2\2\u0d19\u0d1b\t \2\2\u0d1a\u0d19\3\2\2\2\u0d1a\u0d1b\3\2\2\2\u0d1b"+
		"\u0d1c\3\2\2\2\u0d1c\u0d1e\7\u0336\2\2\u0d1d\u0d16\3\2\2\2\u0d1d\u0d1e"+
		"\3\2\2\2\u0d1e\u0d2e\3\2\2\2\u0d1f\u0d29\7\u017c\2\2\u0d20\u0d22\7\u0337"+
		"\2\2\u0d21\u0d20\3\2\2\2\u0d21\u0d22\3\2\2\2\u0d22\u0d23\3\2\2\2\u0d23"+
		"\u0d24\7\u00b0\2\2\u0d24\u0d25\7\u0323\2\2\u0d25\u0d2a\t!\2\2\u0d26\u0d27"+
		"\7T\2\2\u0d27\u0d28\7\u0323\2\2\u0d28\u0d2a\5\u03b6\u01dc\2\u0d29\u0d21"+
		"\3\2\2\2\u0d29\u0d26\3\2\2\2\u0d2a\u0d2b\3\2\2\2\u0d2b\u0d29\3\2\2\2\u0d2b"+
		"\u0d2c\3\2\2\2\u0d2c\u0d2d\3\2\2\2\u0d2d\u0d2f\7\u0336\2\2\u0d2e\u0d1f"+
		"\3\2\2\2\u0d2e\u0d2f\3\2\2\2\u0d2f\u012d\3\2\2\2\u0d30\u0d31\7\n\2\2\u0d31"+
		"\u0d32\7|\2\2\u0d32\u0d33\7\u02b2\2\2\u0d33\u0d36\7\u0285\2\2\u0d34\u0d37"+
		"\5\u03b6\u01dc\2\u0d35\u0d37\7\u01d4\2\2\u0d36\u0d34\3\2\2\2\u0d36\u0d35"+
		"\3\2\2\2\u0d37\u0d38\3\2\2\2\u0d38\u0d39\7\u017c\2\2\u0d39\u0d3a\7\u0335"+
		"\2\2\u0d3a\u0d3b\7\u0243\2\2\u0d3b\u0d3c\7\u0323\2\2\u0d3c\u0d62\7\u031b"+
		"\2\2\u0d3d\u0d3f\7\u0337\2\2\u0d3e\u0d3d\3\2\2\2\u0d3e\u0d3f\3\2\2\2\u0d3f"+
		"\u0d40\3\2\2\2\u0d40\u0d41\7\u018a\2\2\u0d41\u0d42\7\u01c4\2\2\u0d42\u0d50"+
		"\7\u0323\2\2\u0d43\u0d51\7\u019b\2\2\u0d44\u0d46\7\u0337\2\2\u0d45\u0d44"+
		"\3\2\2\2\u0d45\u0d46\3\2\2\2\u0d46\u0d47\3\2\2\2\u0d47\u0d48\7\u031b\2"+
		"\2\u0d48\u0d49\7\u015d\2\2\u0d49\u0d4d\7\u031b\2\2\u0d4a\u0d4b\7\u0337"+
		"\2\2\u0d4b\u0d4d\7\u031b\2\2\u0d4c\u0d45\3\2\2\2\u0d4c\u0d4a\3\2\2\2\u0d4d"+
		"\u0d4e\3\2\2\2\u0d4e\u0d4c\3\2\2\2\u0d4e\u0d4f\3\2\2\2\u0d4f\u0d51\3\2"+
		"\2\2\u0d50\u0d43\3\2\2\2\u0d50\u0d4c\3\2\2\2\u0d51\u0d63\3\2\2\2\u0d52"+
		"\u0d53\7\u026f\2\2\u0d53\u0d5e\7\u0323\2\2\u0d54\u0d56\7\u0337\2\2\u0d55"+
		"\u0d54\3\2\2\2\u0d55\u0d56\3\2\2\2\u0d56\u0d57\3\2\2\2\u0d57\u0d58\7\u031b"+
		"\2\2\u0d58\u0d59\7\u015d\2\2\u0d59\u0d5f\7\u031b\2\2\u0d5a\u0d5c\7\u0337"+
		"\2\2\u0d5b\u0d5a\3\2\2\2\u0d5b\u0d5c\3\2\2\2\u0d5c\u0d5d\3\2\2\2\u0d5d"+
		"\u0d5f\7\u031b\2\2\u0d5e\u0d55\3\2\2\2\u0d5e\u0d5b\3\2\2\2\u0d5f\u0d60"+
		"\3\2\2\2\u0d60\u0d5e\3\2\2\2\u0d60\u0d61\3\2\2\2\u0d61\u0d63\3\2\2\2\u0d62"+
		"\u0d3e\3\2\2\2\u0d62\u0d52\3\2\2\2\u0d63\u0d6a\3\2\2\2\u0d64\u0d66\7\u0337"+
		"\2\2\u0d65\u0d64\3\2\2\2\u0d65\u0d66\3\2\2\2\u0d66\u0d67\3\2\2\2\u0d67"+
		"\u0d68\7\u0247\2\2\u0d68\u0d69\7\u0323\2\2\u0d69\u0d6b\7\u031b\2\2\u0d6a"+
		"\u0d65\3\2\2\2\u0d6a\u0d6b\3\2\2\2\u0d6b\u0d72\3\2\2\2\u0d6c\u0d6e\7\u0337"+
		"\2\2\u0d6d\u0d6c\3\2\2\2\u0d6d\u0d6e\3\2\2\2\u0d6e\u0d6f\3\2\2\2\u0d6f"+
		"\u0d70\7\u0248\2\2\u0d70\u0d71\7\u0323\2\2\u0d71\u0d73\7\u031b\2\2\u0d72"+
		"\u0d6d\3\2\2\2\u0d72\u0d73\3\2\2\2\u0d73\u0d74\3\2\2\2\u0d74\u0d75\7\u0336"+
		"\2\2\u0d75\u012f\3\2\2\2\u0d76\u0d77\7I\2\2\u0d77\u0d78\7|\2\2\u0d78\u0d79"+
		"\7\u02b2\2\2\u0d79\u0d7a\7\u0285\2\2\u0d7a\u0d7b\5\u03b6\u01dc\2\u0d7b"+
		"\u0d7c\7\u017c\2\2\u0d7c\u0d7d\7\u0335\2\2\u0d7d\u0d7e\7\u0243\2\2\u0d7e"+
		"\u0d7f\7\u0323\2\2\u0d7f\u0da5\7\u031b\2\2\u0d80\u0d82\7\u0337\2\2\u0d81"+
		"\u0d80\3\2\2\2\u0d81\u0d82\3\2\2\2\u0d82\u0d83\3\2\2\2\u0d83\u0d84\7\u018a"+
		"\2\2\u0d84\u0d85\7\u01c4\2\2\u0d85\u0d93\7\u0323\2\2\u0d86\u0d94\7\u019b"+
		"\2\2\u0d87\u0d89\7\u0337\2\2\u0d88\u0d87\3\2\2\2\u0d88\u0d89\3\2\2\2\u0d89"+
		"\u0d8a\3\2\2\2\u0d8a\u0d8b\7\u031b\2\2\u0d8b\u0d8c\7\u015d\2\2\u0d8c\u0d90"+
		"\7\u031b\2\2\u0d8d\u0d8e\7\u0337\2\2\u0d8e\u0d90\7\u031b\2\2\u0d8f\u0d88"+
		"\3\2\2\2\u0d8f\u0d8d\3\2\2\2\u0d90\u0d91\3\2\2\2\u0d91\u0d8f\3\2\2\2\u0d91"+
		"\u0d92\3\2\2\2\u0d92\u0d94\3\2\2\2\u0d93\u0d86\3\2\2\2\u0d93\u0d8f\3\2"+
		"\2\2\u0d94\u0da6\3\2\2\2\u0d95\u0d96\7\u026f\2\2\u0d96\u0da1\7\u0323\2"+
		"\2\u0d97\u0d99\7\u0337\2\2\u0d98\u0d97\3\2\2\2\u0d98\u0d99\3\2\2\2\u0d99"+
		"\u0d9a\3\2\2\2\u0d9a\u0d9b\7\u031b\2\2\u0d9b\u0d9c\7\u015d\2\2\u0d9c\u0da2"+
		"\7\u031b\2\2\u0d9d\u0d9f\7\u0337\2\2\u0d9e\u0d9d\3\2\2\2\u0d9e\u0d9f\3"+
		"\2\2\2\u0d9f\u0da0\3\2\2\2\u0da0\u0da2\7\u031b\2\2\u0da1\u0d98\3\2\2\2"+
		"\u0da1\u0d9e\3\2\2\2\u0da2\u0da3\3\2\2\2\u0da3\u0da1\3\2\2\2\u0da3\u0da4"+
		"\3\2\2\2\u0da4\u0da6\3\2\2\2\u0da5\u0d81\3\2\2\2\u0da5\u0d95\3\2\2\2\u0da6"+
		"\u0dad\3\2\2\2\u0da7\u0da9\7\u0337\2\2\u0da8\u0da7\3\2\2\2\u0da8\u0da9"+
		"\3\2\2\2\u0da9\u0daa\3\2\2\2\u0daa\u0dab\7\u0247\2\2\u0dab\u0dac\7\u0323"+
		"\2\2\u0dac\u0dae\7\u031b\2\2\u0dad\u0da8\3\2\2\2\u0dad\u0dae\3\2\2\2\u0dae"+
		"\u0db5\3\2\2\2\u0daf\u0db1\7\u0337\2\2\u0db0\u0daf\3\2\2\2\u0db0\u0db1"+
		"\3\2\2\2\u0db1\u0db2\3\2\2\2\u0db2\u0db3\7\u0248\2\2\u0db3\u0db4\7\u0323"+
		"\2\2\u0db4\u0db6\7\u031b\2\2\u0db5\u0db0\3\2\2\2\u0db5\u0db6\3\2\2\2\u0db6"+
		"\u0db7\3\2\2\2\u0db7\u0db8\7\u0336\2\2\u0db8\u0131\3\2\2\2\u0db9\u0dba"+
		"\7\n\2\2\u0dba\u0dbb\7\u020b\2\2\u0dbb\u0dbc\7\u01b1\2\2\u0dbc\u0dc7\5"+
		"\u03b6\u01dc\2\u0dbd\u0dc2\7\u02a1\2\2\u0dbe\u0dbf\7\u017c\2\2\u0dbf\u0dc0"+
		"\7\u0182\2\2\u0dc0\u0dc1\7\u0323\2\2\u0dc1\u0dc3\t\t\2\2\u0dc2\u0dbe\3"+
		"\2\2\2\u0dc2\u0dc3\3\2\2\2\u0dc3\u0dc8\3\2\2\2\u0dc4\u0dc8\7\u02aa\2\2"+
		"\u0dc5\u0dc6\7\20\2\2\u0dc6\u0dc8\7Z\2\2\u0dc7\u0dbd\3\2\2\2\u0dc7\u0dc4"+
		"\3\2\2\2\u0dc7\u0dc5\3\2\2\2\u0dc8\u0133\3\2\2\2\u0dc9\u0dca\7I\2\2\u0dca"+
		"\u0dcb\7\u020b\2\2\u0dcb\u0dcc\7\u01b1\2\2\u0dcc\u0dd0\5\u03b6\u01dc\2"+
		"\u0dcd\u0dce\7\u00e5\2\2\u0dce\u0dcf\7\u01fd\2\2\u0dcf\u0dd1\5\u03b6\u01dc"+
		"\2\u0dd0\u0dcd\3\2\2\2\u0dd0\u0dd1\3\2\2\2\u0dd1\u0dd5\3\2\2\2\u0dd2\u0dd3"+
		"\7\u009b\2\2\u0dd3\u0dd4\7\u0283\2\2\u0dd4\u0dd6\7\u031f\2\2\u0dd5\u0dd2"+
		"\3\2\2\2\u0dd5\u0dd6\3\2\2\2\u0dd6\u0ddb\3\2\2\2\u0dd7\u0dd8\7\u017c\2"+
		"\2\u0dd8\u0dd9\7\u0182\2\2\u0dd9\u0dda\7\u0323\2\2\u0dda\u0ddc\t\t\2\2"+
		"\u0ddb\u0dd7\3\2\2\2\u0ddb\u0ddc\3\2\2\2\u0ddc\u0ddf\3\2\2\2\u0ddd\u0dde"+
		"\7\20\2\2\u0dde\u0de0\7Z\2\2\u0ddf\u0ddd\3\2\2\2\u0ddf\u0de0\3\2\2\2\u0de0"+
		"\u0de3\3\2\2\2\u0de1\u0de2\7\24\2\2\u0de2\u0de4\5\u03b6\u01dc\2\u0de3"+
		"\u0de1\3\2\2\2\u0de3\u0de4\3\2\2\2\u0de4\u0135\3\2\2\2\u0de5\u0de6\7\n"+
		"\2\2\u0de6\u0de7\7\u020b\2\2\u0de7\u0de8\7\u02e1\2\2\u0de8\u0df6\5\u03b6"+
		"\u01dc\2\u0de9\u0dea\7\4\2\2\u0dea\u0deb\7\u031f\2\2\u0deb\u0dec\7\u00b0"+
		"\2\2\u0dec\u0df7\t\"\2\2\u0ded\u0df4\7h\2\2\u0dee\u0def\7\u031f\2\2\u0def"+
		"\u0df0\7\u00b0\2\2\u0df0\u0df5\t\"\2\2\u0df1\u0df2\7\6\2\2\u0df2\u0df5"+
		"\t\"\2\2\u0df3\u0df5\7\6\2\2\u0df4\u0dee\3\2\2\2\u0df4\u0df1\3\2\2\2\u0df4"+
		"\u0df3\3\2\2\2\u0df5\u0df7\3\2\2\2\u0df6\u0de9\3\2\2\2\u0df6\u0ded\3\2"+
		"\2\2\u0df7\u0137\3\2\2\2\u0df8\u0df9\7I\2\2\u0df9\u0dfa\7\u020b\2\2\u0dfa"+
		"\u0dfb\7\u02e1\2\2\u0dfb\u0e07\5\u03b6\u01dc\2\u0dfc\u0e05\7\u008c\2\2"+
		"\u0dfd\u0dfe\5\u03b6\u01dc\2\u0dfe\u0dff\7\u0330\2\2\u0dff\u0e01\3\2\2"+
		"\2\u0e00\u0dfd\3\2\2\2\u0e00\u0e01\3\2\2\2\u0e01\u0e02\3\2\2\2\u0e02\u0e06"+
		"\5\u03b6\u01dc\2\u0e03\u0e04\7\u0154\2\2\u0e04\u0e06\7\u02e1\2\2\u0e05"+
		"\u0e00\3\2\2\2\u0e05\u0e03\3\2\2\2\u0e06\u0e08\3\2\2\2\u0e07\u0dfc\3\2"+
		"\2\2\u0e07\u0e08\3\2\2\2\u0e08\u0e0b\3\2\2\2\u0e09\u0e0a\7\24\2\2\u0e0a"+
		"\u0e0c\5\u03b6\u01dc\2\u0e0b\u0e09\3\2\2\2\u0e0b\u0e0c\3\2\2\2\u0e0c\u0139"+
		"\3\2\2\2\u0e0d\u0e0e\7\n\2\2\u0e0e\u0e0f\7\u023c\2\2\u0e0f\u0e53\5\u03b6"+
		"\u01dc\2\u0e10\u0e12\t\27\2\2\u0e11\u0e10\3\2\2\2\u0e11\u0e12\3\2\2\2"+
		"\u0e12\u0e54\3\2\2\2\u0e13\u0e21\7\u017c\2\2\u0e14\u0e15\7\u00f4\2\2\u0e15"+
		"\u0e19\7\u0323\2\2\u0e16\u0e1a\7\u031f\2\2\u0e17\u0e18\7\u0320\2\2\u0e18"+
		"\u0e1a\7\u0095\2\2\u0e19\u0e16\3\2\2\2\u0e19\u0e17\3\2\2\2\u0e1a\u0e1e"+
		"\3\2\2\2\u0e1b\u0e1d\t#\2\2\u0e1c\u0e1b\3\2\2\2\u0e1d\u0e20\3\2\2\2\u0e1e"+
		"\u0e1c\3\2\2\2\u0e1e\u0e1f\3\2\2\2\u0e1f\u0e22\3\2\2\2\u0e20\u0e1e\3\2"+
		"\2\2\u0e21\u0e14\3\2\2\2\u0e21\u0e22\3\2\2\2\u0e22\u0e2c\3\2\2\2\u0e23"+
		"\u0e24\7\u00e4\2\2\u0e24\u0e25\7\u0323\2\2\u0e25\u0e29\7\u031f\2\2\u0e26"+
		"\u0e28\t#\2\2\u0e27\u0e26\3\2\2\2\u0e28\u0e2b\3\2\2\2\u0e29\u0e27\3\2"+
		"\2\2\u0e29\u0e2a\3\2\2\2\u0e2a\u0e2d\3\2\2\2\u0e2b\u0e29\3\2\2\2\u0e2c"+
		"\u0e23\3\2\2\2\u0e2c\u0e2d\3\2\2\2\u0e2d\u0e31\3\2\2\2\u0e2e\u0e2f\7["+
		"\2\2\u0e2f\u0e30\7\u0323\2\2\u0e30\u0e32\5\u03b6\u01dc\2\u0e31\u0e2e\3"+
		"\2\2\2\u0e31\u0e32\3\2\2\2\u0e32\u0e36\3\2\2\2\u0e33\u0e34\7\u01d6\2\2"+
		"\u0e34\u0e35\7\u0323\2\2\u0e35\u0e37\5\u03b6\u01dc\2\u0e36\u0e33\3\2\2"+
		"\2\u0e36\u0e37\3\2\2\2\u0e37\u0e3b\3\2\2\2\u0e38\u0e39\7\u025e\2\2\u0e39"+
		"\u0e3a\7\u0323\2\2\u0e3a\u0e3c\5\u03b6\u01dc\2\u0e3b\u0e38\3\2\2\2\u0e3b"+
		"\u0e3c\3\2\2\2\u0e3c\u0e40\3\2\2\2\u0e3d\u0e3e\7\60\2\2\u0e3e\u0e3f\7"+
		"\u0323\2\2\u0e3f\u0e41\t\t\2\2\u0e40\u0e3d\3\2\2\2\u0e40\u0e41\3\2\2\2"+
		"\u0e41\u0e45\3\2\2\2\u0e42\u0e43\7\61\2\2\u0e43\u0e44\7\u0323\2\2\u0e44"+
		"\u0e46\t\t\2\2\u0e45\u0e42\3\2\2\2\u0e45\u0e46\3\2\2\2\u0e46\u0e4a\3\2"+
		"\2\2\u0e47\u0e48\7\u01c7\2\2\u0e48\u0e49\7\u0323\2\2\u0e49\u0e4b\5\u03b6"+
		"\u01dc\2\u0e4a\u0e47\3\2\2\2\u0e4a\u0e4b\3\2\2\2\u0e4b\u0e4e\3\2\2\2\u0e4c"+
		"\u0e4d\7\u0264\2\2\u0e4d\u0e4f\7\u01c7\2\2\u0e4e\u0e4c\3\2\2\2\u0e4e\u0e4f"+
		"\3\2\2\2\u0e4f\u0e54\3\2\2\2\u0e50\u0e51\t\25\2\2\u0e51\u0e52\7\u01c7"+
		"\2\2\u0e52\u0e54\5\u03b6\u01dc\2\u0e53\u0e11\3\2\2\2\u0e53\u0e13\3\2\2"+
		"\2\u0e53\u0e50\3\2\2\2\u0e54\u013b\3\2\2\2\u0e55\u0e56\7I\2\2\u0e56\u0e57"+
		"\7\u023c\2\2\u0e57\u0eb2\5\u03b6\u01dc\2\u0e58\u0e66\7\u017c\2\2\u0e59"+
		"\u0e5a\7\u00f4\2\2\u0e5a\u0e5e\7\u0323\2\2\u0e5b\u0e5f\7\u031f\2\2\u0e5c"+
		"\u0e5d\7\u0320\2\2\u0e5d\u0e5f\7\u0095\2\2\u0e5e\u0e5b\3\2\2\2\u0e5e\u0e5c"+
		"\3\2\2\2\u0e5f\u0e63\3\2\2\2\u0e60\u0e62\t#\2\2\u0e61\u0e60\3\2\2\2\u0e62"+
		"\u0e65\3\2\2\2\u0e63\u0e61\3\2\2\2\u0e63\u0e64\3\2\2\2\u0e64\u0e67\3\2"+
		"\2\2\u0e65\u0e63\3\2\2\2\u0e66\u0e59\3\2\2\2\u0e66\u0e67\3\2\2\2\u0e67"+
		"\u0e6e\3\2\2\2\u0e68\u0e6a\7\u0337\2\2\u0e69\u0e68\3\2\2\2\u0e69\u0e6a"+
		"\3\2\2\2\u0e6a\u0e6b\3\2\2\2\u0e6b\u0e6c\7\u0140\2\2\u0e6c\u0e6d\7\u0323"+
		"\2\2\u0e6d\u0e6f\7\u0320\2\2\u0e6e\u0e69\3\2\2\2\u0e6e\u0e6f\3\2\2\2\u0e6f"+
		"\u0e76\3\2\2\2\u0e70\u0e72\7\u0337\2\2\u0e71\u0e70\3\2\2\2\u0e71\u0e72"+
		"\3\2\2\2\u0e72\u0e73\3\2\2\2\u0e73\u0e74\7[\2\2\u0e74\u0e75\7\u0323\2"+
		"\2\u0e75\u0e77\5\u03b6\u01dc\2\u0e76\u0e71\3\2\2\2\u0e76\u0e77\3\2\2\2"+
		"\u0e77\u0e7e\3\2\2\2\u0e78\u0e7a\7\u0337\2\2\u0e79\u0e78\3\2\2\2\u0e79"+
		"\u0e7a\3\2\2\2\u0e7a\u0e7b\3\2\2\2\u0e7b\u0e7c\7\u01d6\2\2\u0e7c\u0e7d"+
		"\7\u0323\2\2\u0e7d\u0e7f\5\u03b6\u01dc\2\u0e7e\u0e79\3\2\2\2\u0e7e\u0e7f"+
		"\3\2\2\2\u0e7f\u0e86\3\2\2\2\u0e80\u0e82\7\u0337\2\2\u0e81\u0e80\3\2\2"+
		"\2\u0e81\u0e82\3\2\2\2\u0e82\u0e83\3\2\2\2\u0e83\u0e84\7\61\2\2\u0e84"+
		"\u0e85\7\u0323\2\2\u0e85\u0e87\t\t\2\2\u0e86\u0e81\3\2\2\2\u0e86\u0e87"+
		"\3\2\2\2\u0e87\u0e8e\3\2\2\2\u0e88\u0e8a\7\u0337\2\2\u0e89\u0e88\3\2\2"+
		"\2\u0e89\u0e8a\3\2\2\2\u0e8a\u0e8b\3\2\2\2\u0e8b\u0e8c\7\60\2\2\u0e8c"+
		"\u0e8d\7\u0323\2\2\u0e8d\u0e8f\t\t\2\2\u0e8e\u0e89\3\2\2\2\u0e8e\u0e8f"+
		"\3\2\2\2\u0e8f\u0e96\3\2\2\2\u0e90\u0e92\7\u0337\2\2\u0e91\u0e90\3\2\2"+
		"\2\u0e91\u0e92\3\2\2\2\u0e92\u0e93\3\2\2\2\u0e93\u0e94\7\u01c7\2\2\u0e94"+
		"\u0e95\7\u0323\2\2\u0e95\u0e97\5\u03b6\u01dc\2\u0e96\u0e91\3\2\2\2\u0e96"+
		"\u0e97\3\2\2\2\u0e97\u0eb3\3\2\2\2\u0e98\u0eb0\7\u008c\2\2\u0e99\u0e9a"+
		"\7\u017b\2\2\u0e9a\u0ea1\7\u017c\2\2\u0e9b\u0e9d\7\u0337\2\2\u0e9c\u0e9b"+
		"\3\2\2\2\u0e9c\u0e9d\3\2\2\2\u0e9d\u0e9e\3\2\2\2\u0e9e\u0e9f\7[\2\2\u0e9f"+
		"\u0ea0\7\u0323\2\2\u0ea0\u0ea2\5\u03b6\u01dc\2\u0ea1\u0e9c\3\2\2\2\u0ea1"+
		"\u0ea2\3\2\2\2\u0ea2\u0ea9\3\2\2\2\u0ea3\u0ea5\7\u0337\2\2\u0ea4\u0ea3"+
		"\3\2\2\2\u0ea4\u0ea5\3\2\2\2\u0ea5\u0ea6\3\2\2\2\u0ea6\u0ea7\7\u01d6\2"+
		"\2\u0ea7\u0ea8\7\u0323\2\2\u0ea8\u0eaa\7\u031f\2\2\u0ea9\u0ea4\3\2\2\2"+
		"\u0ea9\u0eaa\3\2\2\2\u0eaa\u0eb1\3\2\2\2\u0eab\u0eac\7+\2\2\u0eac\u0eb1"+
		"\5\u03b6\u01dc\2\u0ead\u0eae\7\22\2\2\u0eae\u0eaf\7\u00ac\2\2\u0eaf\u0eb1"+
		"\5\u03b6\u01dc\2\u0eb0\u0e99\3\2\2\2\u0eb0\u0eab\3\2\2\2\u0eb0\u0ead\3"+
		"\2\2\2\u0eb1\u0eb3\3\2\2\2\u0eb2\u0e58\3\2\2\2\u0eb2\u0e98\3\2\2\2\u0eb3"+
		"\u013d\3\2\2\2\u0eb4\u0eb5\7\n\2\2\u0eb5\u0eb6\7\u023c\2\2\u0eb6\u0ec8"+
		"\5\u03b6\u01dc\2\u0eb7\u0eb9\t\27\2\2\u0eb8\u0eb7\3\2\2\2\u0eb8\u0eb9"+
		"\3\2\2\2\u0eb9\u0ec9\3\2\2\2\u0eba\u0ec6\7\u017c\2\2\u0ebb\u0ebc\7\u00f4"+
		"\2\2\u0ebc\u0ebd\7\u0323\2\2\u0ebd\u0ec1\7\u031f\2\2\u0ebe\u0ebf\7\u00e4"+
		"\2\2\u0ebf\u0ec0\7\u0323\2\2\u0ec0\u0ec2\7\u031f\2\2\u0ec1\u0ebe\3\2\2"+
		"\2\u0ec1\u0ec2\3\2\2\2\u0ec2\u0ec7\3\2\2\2\u0ec3\u0ec4\7\u025e\2\2\u0ec4"+
		"\u0ec5\7\u0323\2\2\u0ec5\u0ec7\5\u03b6\u01dc\2\u0ec6\u0ebb\3\2\2\2\u0ec6"+
		"\u0ec3\3\2\2\2\u0ec7\u0ec9\3\2\2\2\u0ec8\u0eb8\3\2\2\2\u0ec8\u0eba\3\2"+
		"\2\2\u0ec9\u013f\3\2\2\2\u0eca\u0ecb\7I\2\2\u0ecb\u0ecc\7\u023c\2\2\u0ecc"+
		"\u0ecd\5\u03b6\u01dc\2\u0ecd\u0ece\7\u017c\2\2\u0ece\u0ecf\7\u00f4\2\2"+
		"\u0ecf\u0ed0\7\u0323\2\2\u0ed0\u0ed4\7\u031f\2\2\u0ed1\u0ed2\7\u0140\2"+
		"\2\u0ed2\u0ed3\7\u0323\2\2\u0ed3\u0ed5\7\u0320\2\2\u0ed4\u0ed1\3\2\2\2"+
		"\u0ed4\u0ed5\3\2\2\2\u0ed5\u0141\3\2\2\2\u0ed6\u0ed7\7\n\2\2\u0ed7\u0ed8"+
		"\7\u023c\2\2\u0ed8\u0ef0\5\u03b6\u01dc\2\u0ed9\u0edb\t\27\2\2\u0eda\u0ed9"+
		"\3\2\2\2\u0eda\u0edb\3\2\2\2\u0edb\u0ef1\3\2\2\2\u0edc\u0eee\7\u017c\2"+
		"\2\u0edd\u0ede\7\u00f4\2\2\u0ede\u0edf\7\u0323\2\2\u0edf\u0ee9\7\u031f"+
		"\2\2\u0ee0\u0ee1\7\u00e4\2\2\u0ee1\u0ee2\7\u0323\2\2\u0ee2\u0ee6\7\u031f"+
		"\2\2\u0ee3\u0ee5\t#\2\2\u0ee4\u0ee3\3\2\2\2\u0ee5\u0ee8\3\2\2\2\u0ee6"+
		"\u0ee4\3\2\2\2\u0ee6\u0ee7\3\2\2\2\u0ee7\u0eea\3\2\2\2\u0ee8\u0ee6\3\2"+
		"\2\2\u0ee9\u0ee0\3\2\2\2\u0ee9\u0eea\3\2\2\2\u0eea\u0eef\3\2\2\2\u0eeb"+
		"\u0eec\7\u025e\2\2\u0eec\u0eed\7\u0323\2\2\u0eed\u0eef\5\u03b6\u01dc\2"+
		"\u0eee\u0edd\3\2\2\2\u0eee\u0eeb\3\2\2\2\u0eef\u0ef1\3\2\2\2\u0ef0\u0eda"+
		"\3\2\2\2\u0ef0\u0edc\3\2\2\2\u0ef1\u0143\3\2\2\2\u0ef2\u0ef3\7I\2\2\u0ef3"+
		"\u0ef4\7\u023c\2\2\u0ef4\u0f05\5\u03b6\u01dc\2\u0ef5\u0ef6\7\u017c\2\2"+
		"\u0ef6\u0ef7\7\u00f4\2\2\u0ef7\u0ef8\7\u0323\2\2\u0ef8\u0efa\7\u031f\2"+
		"\2\u0ef9\u0efb\7\u00ce\2\2\u0efa\u0ef9\3\2\2\2\u0efa\u0efb\3\2\2\2\u0efb"+
		"\u0f01\3\2\2\2\u0efc\u0efd\7\60\2\2\u0efd\u0eff\7\u0323\2\2\u0efe\u0f00"+
		"\t\t\2\2\u0eff\u0efe\3\2\2\2\u0eff\u0f00\3\2\2\2\u0f00\u0f02\3\2\2\2\u0f01"+
		"\u0efc\3\2\2\2\u0f01\u0f02\3\2\2\2\u0f02\u0f06\3\2\2\2\u0f03\u0f04\7\u008c"+
		"\2\2\u0f04\u0f06\7\u017b\2\2\u0f05\u0ef5\3\2\2\2\u0f05\u0f03\3\2\2\2\u0f06"+
		"\u0145\3\2\2\2\u0f07\u0f08\7\n\2\2\u0f08\u0f09\7\u00bd\2\2\u0f09\u0f1f"+
		"\7\u00ac\2\2\u0f0a\u0f0c\7\u0205\2\2\u0f0b\u0f0a\3\2\2\2\u0f0b\u0f0c\3"+
		"\2\2\2\u0f0c\u0f0d\3\2\2\2\u0f0d\u0f0e\7\u010f\2\2\u0f0e\u0f0f\7\u017c"+
		"\2\2\u0f0f\u0f10\7\u01ee\2\2\u0f10\u0f11\7&\2\2\u0f11\u0f12\7\u00f4\2"+
		"\2\u0f12\u0f13\7\u0323\2\2\u0f13\u0f20\7\u031f\2\2\u0f14\u0f15\t\25\2"+
		"\2\u0f15\u0f16\7\u01ee\2\2\u0f16\u0f1d\7&\2\2\u0f17\u0f18\7\u0138\2\2"+
		"\u0f18\u0f19\7\u00bd\2\2\u0f19\u0f1e\7\u00ac\2\2\u0f1a\u0f1b\7\u00f4\2"+
		"\2\u0f1b\u0f1c\7\u0323\2\2\u0f1c\u0f1e\7\u031f\2\2\u0f1d\u0f17\3\2\2\2"+
		"\u0f1d\u0f1a\3\2\2\2\u0f1e\u0f20\3\2\2\2\u0f1f\u0f0b\3\2\2\2\u0f1f\u0f14"+
		"\3\2\2\2\u0f20\u0147\3\2\2\2\u0f21\u0f22\7I\2\2\u0f22\u0f23\7\u00bd\2"+
		"\2\u0f23\u0f24\7\u00ac\2\2\u0f24\u0f25\7\u01ee\2\2\u0f25\u0f26\7&\2\2"+
		"\u0f26\u0f27\7\u00f4\2\2\u0f27\u0f28\7\u0323\2\2\u0f28\u0f29\7\u031f\2"+
		"\2\u0f29\u0149\3\2\2\2\u0f2a\u0f2b\7\n\2\2\u0f2b\u0f2c\7\u00bd\2\2\u0f2c"+
		"\u0f48\7\u00ac\2\2\u0f2d\u0f2f\7\u0205\2\2\u0f2e\u0f2d\3\2\2\2\u0f2e\u0f2f"+
		"\3\2\2\2\u0f2f\u0f30\3\2\2\2\u0f30\u0f31\7\u010f\2\2\u0f31\u0f32\7\u017c"+
		"\2\2\u0f32\u0f33\7\u01ee\2\2\u0f33\u0f34\7&\2\2\u0f34\u0f35\7\u00f4\2"+
		"\2\u0f35\u0f36\7\u0323\2\2\u0f36\u0f49\7\u031f\2\2\u0f37\u0f38\7\4\2\2"+
		"\u0f38\u0f39\7\u01ee\2\2\u0f39\u0f40\7&\2\2\u0f3a\u0f3b\7\u0138\2\2\u0f3b"+
		"\u0f3c\7\u00bd\2\2\u0f3c\u0f41\7\u00ac\2\2\u0f3d\u0f3e\7\u00f4\2\2\u0f3e"+
		"\u0f3f\7\u0323\2\2\u0f3f\u0f41\7\u031f\2\2\u0f40\u0f3a\3\2\2\2\u0f40\u0f3d"+
		"\3\2\2\2\u0f41\u0f49\3\2\2\2\u0f42\u0f43\7h\2\2\u0f43\u0f44\7\u01ee\2"+
		"\2\u0f44\u0f45\7&\2\2\u0f45\u0f46\7\u00f4\2\2\u0f46\u0f47\7\u0323\2\2"+
		"\u0f47\u0f49\7\u031f\2\2\u0f48\u0f2e\3\2\2\2\u0f48\u0f37\3\2\2\2\u0f48"+
		"\u0f42\3\2\2\2\u0f49\u014b\3\2\2\2\u0f4a\u0f4b\7I\2\2\u0f4b\u0f4c\7\u00bd"+
		"\2\2\u0f4c\u0f52\7\u00ac\2\2\u0f4d\u0f4e\7\u01ee\2\2\u0f4e\u0f4f\7&\2"+
		"\2\u0f4f\u0f50\7\u00f4\2\2\u0f50\u0f51\7\u0323\2\2\u0f51\u0f53\7\u031f"+
		"\2\2\u0f52\u0f4d\3\2\2\2\u0f52\u0f53\3\2\2\2\u0f53\u014d\3\2\2\2\u0f54"+
		"\u0f55\7\n\2\2\u0f55\u0f56\7\u0251\2\2\u0f56\u0f57\7\u02fb\2\2\u0f57\u0f58"+
		"\5\u03b6\u01dc\2\u0f58\u0f59\7\u0303\2\2\u0f59\u0f62\7\u0323\2\2\u0f5a"+
		"\u0f63\7\u00d5\2\2\u0f5b\u0f63\7\u01ea\2\2\u0f5c\u0f63\7\u030a\2\2\u0f5d"+
		"\u0f5e\7\u0302\2\2\u0f5e\u0f5f\7\u017c\2\2\u0f5f\u0f60\7\u012e\2\2\u0f60"+
		"\u0f61\7\u01b8\2\2\u0f61\u0f63\5\u03b6\u01dc\2\u0f62\u0f5a\3\2\2\2\u0f62"+
		"\u0f5b\3\2\2\2\u0f62\u0f5c\3\2\2\2\u0f62\u0f5d\3\2\2\2\u0f63\u014f\3\2"+
		"\2\2\u0f64\u0f65\7\n\2\2\u0f65\u0f66\7\u0280\2\2\u0f66\u0f67\7\u008e\2"+
		"\2\u0f67\u0f68\5\u03b6\u01dc\2\u0f68\u0f69\7\u0335\2\2\u0f69\u0f6a\7\u0336"+
		"\2\2\u0f6a\u0f6b\t$\2\2\u0f6b\u0f6c\7\u0297\2\2\u0f6c\u0f6d\7\u0335\2"+
		"\2\u0f6d\u0f6e\7\u031b\2\2\u0f6e\u0f6f\7\u0336\2\2\u0f6f\u0151\3\2\2\2"+
		"\u0f70\u0f71\7\n\2\2\u0f71\u0f72\7\u0280\2\2\u0f72\u0f73\7\u012f\2\2\u0f73"+
		"\u0f74\5\u03b6\u01dc\2\u0f74\u0f75\7\u0263\2\2\u0f75\u0f77\7\u0170\2\2"+
		"\u0f76\u0f78\5\u03b6\u01dc\2\u0f77\u0f76\3\2\2\2\u0f77\u0f78\3\2\2\2\u0f78"+
		"\u0153\3\2\2\2\u0f79\u0f7a\7\n\2\2\u0f7a\u0f7b\7\u02a7\2\2\u0f7b\u0f7c"+
		"\7\u0138\2\2\u0f7c\u0f7d\7\u01a9\2\2\u0f7d\u0f7e\5\u03b6\u01dc\2\u0f7e"+
		"\u0f82\7\u017c\2\2\u0f7f\u0f80\7\u0171\2\2\u0f80\u0f81\7\u0323\2\2\u0f81"+
		"\u0f83\5\u03b6\u01dc\2\u0f82\u0f7f\3\2\2\2\u0f82\u0f83\3\2\2\2\u0f83\u0f88"+
		"\3\2\2\2\u0f84\u0f85\7\u0337\2\2\u0f85\u0f86\7\f\2\2\u0f86\u0f87\7\u0323"+
		"\2\2\u0f87\u0f89\t\t\2\2\u0f88\u0f84\3\2\2\2\u0f88\u0f89\3\2\2\2\u0f89"+
		"\u0155\3\2\2\2\u0f8a\u0f8b\7I\2\2\u0f8b\u0f8c\7\u02a7\2\2\u0f8c\u0f8d"+
		"\7\u0138\2\2\u0f8d\u0f8e\7\u01a9\2\2\u0f8e\u0f91\5\u03b6\u01dc\2\u0f8f"+
		"\u0f90\7\24\2\2\u0f90\u0f92\5\u03b6\u01dc\2\u0f91\u0f8f\3\2\2\2\u0f91"+
		"\u0f92\3\2\2\2\u0f92\u0f93\3\2\2\2\u0f93\u0f94\7\u015d\2\2\u0f94\u0f95"+
		"\7\u0138\2\2\u0f95\u0f96\7\u031f\2\2\u0f96\u0f9a\7\u017c\2\2\u0f97\u0f98"+
		"\7\u0171\2\2\u0f98\u0f99\7\u0323\2\2\u0f99\u0f9b\5\u03b6\u01dc\2\u0f9a"+
		"\u0f97\3\2\2\2\u0f9a\u0f9b\3\2\2\2\u0f9b\u0fa0\3\2\2\2\u0f9c\u0f9d\7\u0337"+
		"\2\2\u0f9d\u0f9e\7\f\2\2\u0f9e\u0f9f\7\u0323\2\2\u0f9f\u0fa1\t\t\2\2\u0fa0"+
		"\u0f9c\3\2\2\2\u0fa0\u0fa1\3\2\2\2\u0fa1\u0157\3\2\2\2\u0fa2\u0fa3\7I"+
		"\2\2\u0fa3\u0fa4\7\u02b2\2\2\u0fa4\u0fa5\7\u0285\2\2\u0fa5\u100c\5\u03b6"+
		"\u01dc\2\u0fa6\u0fa7\7\u017c\2\2\u0fa7\u0fae\7\u0335\2\2\u0fa8\u0faa\7"+
		"\u0337\2\2\u0fa9\u0fa8\3\2\2\2\u0fa9\u0faa\3\2\2\2\u0faa\u0fab\3\2\2\2"+
		"\u0fab\u0fac\7\u0254\2\2\u0fac\u0fad\7\u0323\2\2\u0fad\u0faf\7\u031b\2"+
		"\2\u0fae\u0fa9\3\2\2\2\u0fae\u0faf\3\2\2\2\u0faf\u0fb6\3\2\2\2\u0fb0\u0fb2"+
		"\7\u0337\2\2\u0fb1\u0fb0\3\2\2\2\u0fb1\u0fb2\3\2\2\2\u0fb2\u0fb3\3\2\2"+
		"\2\u0fb3\u0fb4\7\u0243\2\2\u0fb4\u0fb5\7\u0323\2\2\u0fb5\u0fb7\7\u031b"+
		"\2\2\u0fb6\u0fb1\3\2\2\2\u0fb6\u0fb7\3\2\2\2\u0fb7\u0fbe\3\2\2\2\u0fb8"+
		"\u0fba\7\u0337\2\2\u0fb9\u0fb8\3\2\2\2\u0fb9\u0fba\3\2\2\2\u0fba\u0fbb"+
		"\3\2\2\2\u0fbb\u0fbc\7\u01af\2\2\u0fbc\u0fbd\7\u0323\2\2\u0fbd\u0fbf\7"+
		"\u031b\2\2\u0fbe\u0fb9\3\2\2\2\u0fbe\u0fbf\3\2\2\2\u0fbf\u0fe9\3\2\2\2"+
		"\u0fc0\u0fc2\7\u0337\2\2\u0fc1\u0fc0\3\2\2\2\u0fc1\u0fc2\3\2\2\2\u0fc2"+
		"\u0fc3\3\2\2\2\u0fc3\u0fc4\7\u018a\2\2\u0fc4\u0fc5\7\u012d\2\2\u0fc5\u0fe7"+
		"\7\u0323\2\2\u0fc6\u0fe8\7\u019b\2\2\u0fc7\u0fd1\7\u0335\2\2\u0fc8\u0fca"+
		"\7\u0337\2\2\u0fc9\u0fc8\3\2\2\2\u0fc9\u0fca\3\2\2\2\u0fca\u0fcf\3\2\2"+
		"\2\u0fcb\u0fd0\7\u031b\2\2\u0fcc\u0fcd\7\u031b\2\2\u0fcd\u0fce\7\u015d"+
		"\2\2\u0fce\u0fd0\7\u031b\2\2\u0fcf\u0fcb\3\2\2\2\u0fcf\u0fcc\3\2\2\2\u0fd0"+
		"\u0fd2\3\2\2\2\u0fd1\u0fc9\3\2\2\2\u0fd2\u0fd3\3\2\2\2\u0fd3\u0fd1\3\2"+
		"\2\2\u0fd3\u0fd4\3\2\2\2\u0fd4\u0fd5\3\2\2\2\u0fd5\u0fe8\7\u0336\2\2\u0fd6"+
		"\u0fd7\7\u026f\2\2\u0fd7\u0fd8\7\u0323\2\2\u0fd8\u0fe2\7\u0335\2\2\u0fd9"+
		"\u0fdb\7\u0337\2\2\u0fda\u0fd9\3\2\2\2\u0fda\u0fdb\3\2\2\2\u0fdb\u0fe0"+
		"\3\2\2\2\u0fdc\u0fe1\7\u031b\2\2\u0fdd\u0fde\7\u031b\2\2\u0fde\u0fdf\7"+
		"\u015d\2\2\u0fdf\u0fe1\7\u031b\2\2\u0fe0\u0fdc\3\2\2\2\u0fe0\u0fdd\3\2"+
		"\2\2\u0fe1\u0fe3\3\2\2\2\u0fe2\u0fda\3\2\2\2\u0fe3\u0fe4\3\2\2\2\u0fe4"+
		"\u0fe2\3\2\2\2\u0fe4\u0fe5\3\2\2\2\u0fe5\u0fe6\3\2\2\2\u0fe6\u0fe8\7\u0336"+
		"\2\2\u0fe7\u0fc6\3\2\2\2\u0fe7\u0fc7\3\2\2\2\u0fe7\u0fd6\3\2\2\2\u0fe8"+
		"\u0fea\3\2\2\2\u0fe9\u0fc1\3\2\2\2\u0fe9\u0fea\3\2\2\2\u0fea\u0ff1\3\2"+
		"\2\2\u0feb\u0fed\7\u0337\2\2\u0fec\u0feb\3\2\2\2\u0fec\u0fed\3\2\2\2\u0fed"+
		"\u0fee\3\2\2\2\u0fee\u0fef\7\u0256\2\2\u0fef\u0ff0\7\u0323\2\2\u0ff0\u0ff2"+
		"\7\u031b\2\2\u0ff1\u0fec\3\2\2\2\u0ff1\u0ff2\3\2\2\2\u0ff2\u0ff9\3\2\2"+
		"\2\u0ff3\u0ff5\7\u0337\2\2\u0ff4\u0ff3\3\2\2\2\u0ff4\u0ff5\3\2\2\2\u0ff5"+
		"\u0ff6\3\2\2\2\u0ff6\u0ff7\7\u0247\2\2\u0ff7\u0ff8\7\u0323\2\2\u0ff8\u0ffa"+
		"\7\u031b\2\2\u0ff9\u0ff4\3\2\2\2\u0ff9\u0ffa\3\2\2\2\u0ffa\u1001\3\2\2"+
		"\2\u0ffb\u0ffd\7\u0337\2\2\u0ffc\u0ffb\3\2\2\2\u0ffc\u0ffd\3\2\2\2\u0ffd"+
		"\u0ffe\3\2\2\2\u0ffe\u0fff\7\u0255\2\2\u0fff\u1000\7\u0323\2\2\u1000\u1002"+
		"\7\u031b\2\2\u1001\u0ffc\3\2\2\2\u1001\u1002\3\2\2\2\u1002\u1009\3\2\2"+
		"\2\u1003\u1005\7\u0337\2\2\u1004\u1003\3\2\2\2\u1004\u1005\3\2\2\2\u1005"+
		"\u1006\3\2\2\2\u1006\u1007\7\u0246\2\2\u1007\u1008\7\u0323\2\2\u1008\u100a"+
		"\7\u031b\2\2\u1009\u1004\3\2\2\2\u1009\u100a\3\2\2\2\u100a\u100b\3\2\2"+
		"\2\u100b\u100d\7\u0336\2\2\u100c\u0fa6\3\2\2\2\u100c\u100d\3\2\2\2\u100d"+
		"\u0159\3\2\2\2\u100e\u100f\7\n\2\2\u100f\u1010\7\u02b2\2\2\u1010\u1026"+
		"\7\u0091\2\2\u1011\u1027\t%\2\2\u1012\u1013\7\u017c\2\2\u1013\u1014\7"+
		"\u0335\2\2\u1014\u1015\7\62\2\2\u1015\u101b\7\u0323\2\2\u1016\u1017\5"+
		"\u03b6\u01dc\2\u1017\u1018\7\u0330\2\2\u1018\u1019\5\u03b6\u01dc\2\u1019"+
		"\u101c\3\2\2\2\u101a\u101c\7\u00df\2\2\u101b\u1016\3\2\2\2\u101b\u101a"+
		"\3\2\2\2\u101c\u101d\3\2\2\2\u101d\u1027\7\u0336\2\2\u101e\u101f\7\u0114"+
		"\2\2\u101f\u1027\7\u014a\2\2\u1020\u1021\7\u017c\2\2\u1021\u1022\7\u0335"+
		"\2\2\u1022\u1023\7\u00c4\2\2\u1023\u1024\7\u0323\2\2\u1024\u1025\7\u031b"+
		"\2\2\u1025\u1027\7\u0336\2\2\u1026\u1011\3\2\2\2\u1026\u1012\3\2\2\2\u1026"+
		"\u101e\3\2\2\2\u1026\u1020\3\2\2\2\u1027\u015b\3\2\2\2\u1028\u1029\7\n"+
		"\2\2\u1029\u102a\7\u0121\2\2\u102a\u1032\5\u03b6\u01dc\2\u102b\u102c\t"+
		"\25\2\2\u102c\u102d\7\u00c7\2\2\u102d\u1033\5\u03b6\u01dc\2\u102e\u102f"+
		"\7\u017c\2\2\u102f\u1030\7\u025e\2\2\u1030\u1031\7\u0323\2\2\u1031\u1033"+
		"\5\u03b6\u01dc\2\u1032\u102b\3\2\2\2\u1032\u102e\3\2\2\2\u1033\u015d\3"+
		"\2\2\2\u1034\u1035\7I\2\2\u1035\u1036\7\u0121\2\2\u1036\u1039\5\u03b6"+
		"\u01dc\2\u1037\u1038\7\24\2\2\u1038\u103a\5\u03b6\u01dc\2\u1039\u1037"+
		"\3\2\2\2\u1039\u103a\3\2\2\2\u103a\u015f\3\2\2\2\u103b\u103c\7I\2\2\u103c"+
		"\u103d\7\u02b8\2\2\u103d\u1040\5\u03b6\u01dc\2\u103e\u103f\7\24\2\2\u103f"+
		"\u1041\5\u03b6\u01dc\2\u1040\u103e\3\2\2\2\u1040\u1041\3\2\2\2\u1041\u1042"+
		"\3\2\2\2\u1042\u1049\7\u017c\2\2\u1043\u1045\7\u0337\2\2\u1044\u1043\3"+
		"\2\2\2\u1044\u1045\3\2\2\2\u1045\u1046\3\2\2\2\u1046\u1047\7\u013a\2\2"+
		"\u1047\u1048\7\u0323\2\2\u1048\u104a\7\u031f\2\2\u1049\u1044\3\2\2\2\u1049"+
		"\u104a\3\2\2\2\u104a\u1051\3\2\2\2\u104b\u104d\7\u0337\2\2\u104c\u104b"+
		"\3\2\2\2\u104c\u104d\3\2\2\2\u104d\u104e\3\2\2\2\u104e\u104f\7\u01ac\2"+
		"\2\u104f\u1050\7\u0323\2\2\u1050\u1052\7\u031f\2\2\u1051\u104c\3\2\2\2"+
		"\u1051\u1052\3\2\2\2\u1052\u1059\3\2\2\2\u1053\u1055\7\u0337\2\2\u1054"+
		"\u1053\3\2\2\2\u1054\u1055\3\2\2\2\u1055\u1056\3\2\2\2\u1056\u1057\7\u00b3"+
		"\2\2\u1057\u1058\7\u0323\2\2\u1058\u105a\7\u031b\2\2\u1059\u1054\3\2\2"+
		"\2\u1059\u105a\3\2\2\2\u105a\u105c\3\2\2\2\u105b\u105d\7\u0337\2\2\u105c"+
		"\u105b\3\2\2\2\u105c\u105d\3\2\2\2\u105d\u105e\3\2\2\2\u105e\u105f\7\u0186"+
		"\2\2\u105f\u1060\7\u0323\2\2\u1060\u1065\t&\2\2\u1061\u1062\7\u0337\2"+
		"\2\u1062\u1063\7\u0258\2\2\u1063\u1064\7\u0323\2\2\u1064\u1066\t&\2\2"+
		"\u1065\u1061\3\2\2\2\u1065\u1066\3\2\2\2\u1066\u0161\3\2\2\2\u1067\u1068"+
		"\7I\2\2\u1068\u106c\7\u012a\2\2\u1069\u106a\5\u03b6\u01dc\2\u106a\u106b"+
		"\7\u0330\2\2\u106b\u106d\3\2\2\2\u106c\u1069\3\2\2\2\u106c\u106d\3\2\2"+
		"\2\u106d\u106e\3\2\2\2\u106e\u106f\5\u03b6\u01dc\2\u106f\u1070\7\20\2"+
		"\2\u1070\u1071\5\u02e2\u0172\2\u1071\u0163\3\2\2\2\u1072\u1073\7\n\2\2"+
		"\u1073\u1074\7\u012e\2\2\u1074\u1075\5\u03b6\u01dc\2\u1075\u107f\7\u0162"+
		"\2\2\u1076\u107c\7\u0272\2\2\u1077\u107c\7\u02fb\2\2\u1078\u1079\7\u030e"+
		"\2\2\u1079\u107a\7\u012e\2\2\u107a\u107c\7\u01b8\2\2\u107b\u1076\3\2\2"+
		"\2\u107b\u1077\3\2\2\2\u107b\u1078\3\2\2\2\u107c\u107d\3\2\2\2\u107d\u107e"+
		"\7\u0339\2\2\u107e\u1080\7\u0339\2\2\u107f\u107b\3\2\2\2\u107f\u1080\3"+
		"\2\2\2\u1080\u1081\3\2\2\2\u1081\u1084\5\u03b6\u01dc\2\u1082\u1083\7\u0330"+
		"\2\2\u1083\u1085\5\u03b6\u01dc\2\u1084\u1082\3\2\2\2\u1084\u1085\3\2\2"+
		"\2\u1085\u0165\3\2\2\2\u1086\u1087\7I\2\2\u1087\u108f\7\u012e\2\2\u1088"+
		"\u1090\5\u03b6\u01dc\2\u1089\u108a\7\24\2\2\u108a\u1090\5\u03b6\u01dc"+
		"\2\u108b\u108c\5\u03b6\u01dc\2\u108c\u108d\7\24\2\2\u108d\u108e\5\u03b6"+
		"\u01dc\2\u108e\u1090\3\2\2\2\u108f\u1088\3\2\2\2\u108f\u1089\3\2\2\2\u108f"+
		"\u108b\3\2\2\2\u1090\u10ad\3\2\2\2\u1091\u10ac\5\u01ee\u00f8\2\u1092\u10ac"+
		"\5\u01f2\u00fa\2\u1093\u1094\t\'\2\2\u1094\u1095\t(\2\2\u1095\u1099\7"+
		"\u00e5\2\2\u1096\u1097\7\u012e\2\2\u1097\u1098\7\u0339\2\2\u1098\u109a"+
		"\7\u0339\2\2\u1099\u1096\3\2\2\2\u1099\u109a\3\2\2\2\u109a\u109b\3\2\2"+
		"\2\u109b\u109c\5\u03b6\u01dc\2\u109c\u109d\7\u015d\2\2\u109d\u109e\5\u03b6"+
		"\u01dc\2\u109e\u10ac\3\2\2\2\u109f\u10a0\7\u011d\2\2\u10a0\u10a1\t(\2"+
		"\2\u10a1\u10a5\7\u00e5\2\2\u10a2\u10a3\7\u012e\2\2\u10a3\u10a4\7\u0339"+
		"\2\2\u10a4\u10a6\7\u0339\2\2\u10a5\u10a2\3\2\2\2\u10a5\u10a6\3\2\2\2\u10a6"+
		"\u10a7\3\2\2\2\u10a7\u10a8\5\u03b6\u01dc\2\u10a8\u10a9\7\u008c\2\2\u10a9"+
		"\u10aa\5\u03b6\u01dc\2\u10aa\u10ac\3\2\2\2\u10ab\u1091\3\2\2\2\u10ab\u1092"+
		"\3\2\2\2\u10ab\u1093\3\2\2\2\u10ab\u109f\3\2\2\2\u10ac\u10af\3\2\2\2\u10ad"+
		"\u10ab\3\2\2\2\u10ad\u10ae\3\2\2\2\u10ae\u0167\3\2\2\2\u10af\u10ad\3\2"+
		"\2\2\u10b0\u10b1\7I\2\2\u10b1\u10b2\7\u012e\2\2\u10b2\u10b5\5\u03b6\u01dc"+
		"\2\u10b3\u10b4\7\24\2\2\u10b4\u10b6\5\u03b6\u01dc\2\u10b5\u10b3\3\2\2"+
		"\2\u10b5\u10b6\3\2\2\2\u10b6\u0169\3\2\2\2\u10b7\u10b8\7\n\2\2\u10b8\u10b9"+
		"\7\u012e\2\2\u10b9\u10ba\5\u03b6\u01dc\2\u10ba\u10be\7\u0162\2\2\u10bb"+
		"\u10bc\7\u0272\2\2\u10bc\u10bd\7\u0339\2\2\u10bd\u10bf\7\u0339\2\2\u10be"+
		"\u10bb\3\2\2\2\u10be\u10bf\3\2\2\2\u10bf\u10c0\3\2\2\2\u10c0\u10c3\5\u03b6"+
		"\u01dc\2\u10c1\u10c2\7\u0330\2\2\u10c2\u10c4\7\u031c\2\2\u10c3\u10c1\3"+
		"\2\2\2\u10c3\u10c4\3\2\2\2\u10c4\u016b\3\2\2\2\u10c5\u10c6\7I\2\2\u10c6"+
		"\u10c7\7\u02c2\2\2\u10c7\u10c8\7\u0290\2\2\u10c8\u10c9\7\u0234\2\2\u10c9"+
		"\u10d1\5\u03b6\u01dc\2\u10ca\u10ce\7\u008c\2\2\u10cb\u10cc\5\u03b6\u01dc"+
		"\2\u10cc\u10cd\7\u0330\2\2\u10cd\u10cf\3\2\2\2\u10ce\u10cb\3\2\2\2\u10ce"+
		"\u10cf\3\2\2\2\u10cf\u10d0\3\2\2\2\u10d0\u10d2\5\u03b6\u01dc\2\u10d1\u10ca"+
		"\3\2\2\2\u10d1\u10d2\3\2\2\2\u10d2\u10d5\3\2\2\2\u10d3\u10d4\7\24\2\2"+
		"\u10d4\u10d6\5\u03b6\u01dc\2\u10d5\u10d3\3\2\2\2\u10d5\u10d6\3\2\2\2\u10d6"+
		"\u016d\3\2\2\2\u10d7\u10d8\7I\2\2\u10d8\u10d9\7\u0130\2\2\u10d9\u10dd"+
		"\7\u00fd\2\2\u10da\u10db\5\u03b6\u01dc\2\u10db\u10dc\7\u0330\2\2\u10dc"+
		"\u10de\3\2\2\2\u10dd\u10da\3\2\2\2\u10dd\u10de\3\2\2\2\u10de\u10df\3\2"+
		"\2\2\u10df\u1108\5\u03b6\u01dc\2\u10e0\u10e2\7\u0337\2\2\u10e1\u10e0\3"+
		"\2\2\2\u10e1\u10e2\3\2\2\2\u10e2\u10e3\3\2\2\2\u10e3\u10e5\7\4\2\2\u10e4"+
		"\u10e6\t)\2\2\u10e5\u10e4\3\2\2\2\u10e5\u10e6\3\2\2\2\u10e6\u10e7\3\2"+
		"\2\2\u10e7\u10e8\7\u00ff\2\2\u10e8\u10e9\5\u03b6\u01dc\2\u10e9\u10ea\7"+
		"\u0330\2\2\u10ea\u10eb\5\u03b6\u01dc\2\u10eb\u10f0\7\u0335\2\2\u10ec\u10ee"+
		"\7\u0337\2\2\u10ed\u10ec\3\2\2\2\u10ed\u10ee\3\2\2\2\u10ee\u10ef\3\2\2"+
		"\2\u10ef\u10f1\5\u03b6\u01dc\2\u10f0\u10ed\3\2\2\2\u10f1\u10f2\3\2\2\2"+
		"\u10f2\u10f0\3\2\2\2\u10f2\u10f3\3\2\2\2\u10f3\u10f4\3\2\2\2\u10f4\u10f5"+
		"\7\u0336\2\2\u10f5\u10f6\7\u00e5\2\2\u10f6\u10f7\5\u03b6\u01dc\2\u10f7"+
		"\u10f8\7\u0330\2\2\u10f8\u1105\5\u03b6\u01dc\2\u10f9\u10fb\7\u0337\2\2"+
		"\u10fa\u10f9\3\2\2\2\u10fa\u10fb\3\2\2\2\u10fb\u10fc\3\2\2\2\u10fc\u10fd"+
		"\7\u018b\2\2\u10fd\u1104\t*\2\2\u10fe\u1100\7\u0337\2\2\u10ff\u10fe\3"+
		"\2\2\2\u10ff\u1100\3\2\2\2\u1100\u1101\3\2\2\2\u1101\u1102\7\33\2\2\u1102"+
		"\u1104\t+\2\2\u1103\u10fa\3\2\2\2\u1103\u10ff\3\2\2\2\u1104\u1107\3\2"+
		"\2\2\u1105\u1103\3\2\2\2\u1105\u1106\3\2\2\2\u1106\u1109\3\2\2\2\u1107"+
		"\u1105\3\2\2\2\u1108\u10e1\3\2\2\2\u1109\u110a\3\2\2\2\u110a\u1108\3\2"+
		"\2\2\u110a\u110b\3\2\2\2\u110b\u1116\3\2\2\2\u110c\u110d\7\u017c\2\2\u110d"+
		"\u110e\7\u0335\2\2\u110e\u110f\7\u014b\2\2\u110f\u1110\7\u0323\2\2\u1110"+
		"\u1113\t\t\2\2\u1111\u1112\7\u02be\2\2\u1112\u1114\t\t\2\2\u1113\u1111"+
		"\3\2\2\2\u1113\u1114\3\2\2\2\u1114\u1115\3\2\2\2\u1115\u1117\7\u0336\2"+
		"\2\u1116\u110c\3\2\2\2\u1116\u1117\3\2\2\2\u1117\u111b\3\2\2\2\u1118\u1119"+
		"\7\u00dc\2\2\u1119\u111a\7\u0086\2\2\u111a\u111c\7\u0112\2\2\u111b\u1118"+
		"\3\2\2\2\u111b\u111c\3\2\2\2\u111c\u016f\3\2\2\2\u111d\u111e\7\n\2\2\u111e"+
		"\u1122\7\u0136\2\2\u111f\u1120\5\u03b6\u01dc\2\u1120\u1121\7\u0330\2\2"+
		"\u1121\u1123\3\2\2\2\u1122\u111f\3\2\2\2\u1122\u1123\3\2\2\2\u1123\u1124"+
		"\3\2\2\2\u1124\u112a\5\u03b6\u01dc\2\u1125\u1128\7\u0115\2\2\u1126\u1127"+
		"\7\u017c\2\2\u1127\u1129\7\u031b\2\2\u1128\u1126\3\2\2\2\u1128\u1129\3"+
		"\2\2\2\u1129\u112b\3\2\2\2\u112a\u1125\3\2\2\2\u112a\u112b\3\2\2\2\u112b"+
		"\u112f\3\2\2\2\u112c\u112d\7\u009d\2\2\u112d\u112e\7&\2\2\u112e\u1130"+
		"\7\u031b\2\2\u112f\u112c\3\2\2\2\u112f\u1130\3\2\2\2\u1130\u1135\3\2\2"+
		"\2\u1131\u1132\7\u00cc\2\2\u1132\u1136\7\u031b\2\2\u1133\u1134\7\u0264"+
		"\2\2\u1134\u1136\7\u00cc\2\2\u1135\u1131\3\2\2\2\u1135\u1133\3\2\2\2\u1135"+
		"\u1136\3\2\2\2\u1136\u113b\3\2\2\2\u1137\u1138\7\u00c0\2\2\u1138\u113c"+
		"\7\u031b\2\2\u1139\u113a\7\u0264\2\2\u113a\u113c\7\u00c0\2\2\u113b\u1137"+
		"\3\2\2\2\u113b\u1139\3\2\2\2\u113b\u113c\3\2\2\2\u113c\u1140\3\2\2\2\u113d"+
		"\u1141\7Q\2\2\u113e\u113f\7\u0264\2\2\u113f\u1141\7Q\2\2\u1140\u113d\3"+
		"\2\2\2\u1140\u113e\3\2\2\2\u1140\u1141\3\2\2\2\u1141\u1146\3\2\2\2\u1142"+
		"\u1143\7\'\2\2\u1143\u1147\7\u031b\2\2\u1144\u1145\7\u0264\2\2\u1145\u1147"+
		"\7\'\2\2\u1146\u1142\3\2\2\2\u1146\u1144\3\2\2\2\u1146\u1147\3\2\2\2\u1147"+
		"\u0171\3\2\2\2\u1148\u1149\7I\2\2\u1149\u114d\7\u0136\2\2\u114a\u114b"+
		"\5\u03b6\u01dc\2\u114b\u114c\7\u0330\2\2\u114c\u114e\3\2\2\2\u114d\u114a"+
		"\3\2\2\2\u114d\u114e\3\2\2\2\u114e\u114f\3\2\2\2\u114f\u1152\5\u03b6\u01dc"+
		"\2\u1150\u1151\7\20\2\2\u1151\u1153\5\u03ae\u01d8\2\u1152\u1150\3\2\2"+
		"\2\u1152\u1153\3\2\2\2\u1153\u1157\3\2\2\2\u1154\u1155\7\u014d\2\2\u1155"+
		"\u1156\7\u017c\2\2\u1156\u1158\7\u031b\2\2\u1157\u1154\3\2\2\2\u1157\u1158"+
		"\3\2\2\2\u1158\u115f\3\2\2\2\u1159\u115a\7\u009d\2\2\u115a\u115c\7&\2"+
		"\2\u115b\u115d\7\u033e\2\2\u115c\u115b\3\2\2\2\u115c\u115d\3\2\2\2\u115d"+
		"\u115e\3\2\2\2\u115e\u1160\7\u031b\2\2\u115f\u1159\3\2\2\2\u115f\u1160"+
		"\3\2\2\2\u1160\u1167\3\2\2\2\u1161\u1163\7\u00cc\2\2\u1162\u1164\7\u031b"+
		"\2\2\u1163\u1162\3\2\2\2\u1163\u1164\3\2\2\2\u1164\u1168\3\2\2\2\u1165"+
		"\u1166\7\u0264\2\2\u1166\u1168\7\u00cc\2\2\u1167\u1161\3\2\2\2\u1167\u1165"+
		"\3\2\2\2\u1167\u1168\3\2\2\2\u1168\u116f\3\2\2\2\u1169\u116b\7\u00c0\2"+
		"\2\u116a\u116c\7\u031b\2\2\u116b\u116a\3\2\2\2\u116b\u116c\3\2\2\2\u116c"+
		"\u1170\3\2\2\2\u116d\u116e\7\u0264\2\2\u116e\u1170\7\u00c0\2\2\u116f\u1169"+
		"\3\2\2\2\u116f\u116d\3\2\2\2\u116f\u1170\3\2\2\2\u1170\u1174\3\2\2\2\u1171"+
		"\u1175\7Q\2\2\u1172\u1173\7\u0264\2\2\u1173\u1175\7Q\2\2\u1174\u1171\3"+
		"\2\2\2\u1174\u1172\3\2\2\2\u1174\u1175\3\2\2\2\u1175\u117c\3\2\2\2\u1176"+
		"\u1178\7\'\2\2\u1177\u1179\7\u031b\2\2\u1178\u1177\3\2\2\2\u1178\u1179"+
		"\3\2\2\2\u1179\u117d\3\2\2\2\u117a\u117b\7\u0264\2\2\u117b\u117d\7\'\2"+
		"\2\u117c\u1176\3\2\2\2\u117c\u117a\3\2\2\2\u117c\u117d\3\2\2\2\u117d\u0173"+
		"\3\2\2\2\u117e\u117f\7\n\2\2\u117f\u1180\7\u0137\2\2\u1180\u1181\7\u0199"+
		"\2\2\u1181\u1205\5\u03b6\u01dc\2\u1182\u11af\7\u015d\2\2\u1183\u1184\7"+
		"\u0082\2\2\u1184\u11a9\7\u0335\2\2\u1185\u1187\7\u0337\2\2\u1186\u1185"+
		"\3\2\2\2\u1186\u1187\3\2\2\2\u1187\u1188\3\2\2\2\u1188\u1189\7\u01ff\2"+
		"\2\u1189\u118a\7\u0323\2\2\u118a\u11a8\7\u031f\2\2\u118b\u118d\7\u0337"+
		"\2\2\u118c\u118b\3\2\2\2\u118c\u118d\3\2\2\2\u118d\u118e\3\2\2\2\u118e"+
		"\u118f\7\u024d\2\2\u118f\u1193\7\u0323\2\2\u1190\u1191\7\u031b\2\2\u1191"+
		"\u1194\t,\2\2\u1192\u1194\7\u0300\2\2\u1193\u1190\3\2\2\2\u1193\u1192"+
		"\3\2\2\2\u1194\u11a8\3\2\2\2\u1195\u1197\7\u0337\2\2\u1196\u1195\3\2\2"+
		"\2\u1196\u1197\3\2\2\2\u1197\u1198\3\2\2\2\u1198\u1199\7\u024a\2\2\u1199"+
		"\u119a\7\u0323\2\2\u119a\u11a8\t-\2\2\u119b\u119d\7\u0337\2\2\u119c\u119b"+
		"\3\2\2\2\u119c\u119d\3\2\2\2\u119d\u119e\3\2\2\2\u119e\u119f\7\u0245\2"+
		"\2\u119f\u11a0\7\u0323\2\2\u11a0\u11a8\7\u031b\2\2\u11a1\u11a3\7\u0337"+
		"\2\2\u11a2\u11a1\3\2\2\2\u11a2\u11a3\3\2\2\2\u11a3\u11a4\3\2\2\2\u11a4"+
		"\u11a5\7\u02b1\2\2\u11a5\u11a6\7\u0323\2\2\u11a6\u11a8\t\t\2\2\u11a7\u1186"+
		"\3\2\2\2\u11a7\u118c\3\2\2\2\u11a7\u1196\3\2\2\2\u11a7\u119c\3\2\2\2\u11a7"+
		"\u11a2\3\2\2\2\u11a8\u11ab\3\2\2\2\u11a9\u11a7\3\2\2\2\u11a9\u11aa\3\2"+
		"\2\2\u11aa\u11ac\3\2\2\2\u11ab\u11a9\3\2\2\2\u11ac\u11b0\7\u0336\2\2\u11ad"+
		"\u11b0\7\u0195\2\2\u11ae\u11b0\7\u02c8\2\2\u11af\u1183\3\2\2\2\u11af\u11ad"+
		"\3\2\2\2\u11af\u11ae\3\2\2\2\u11b0\u11b2\3\2\2\2\u11b1\u1182\3\2\2\2\u11b1"+
		"\u11b2\3\2\2\2\u11b2\u11cd\3\2\2\2\u11b3\u11b4\7\u017c\2\2\u11b4\u11c9"+
		"\7\u0335\2\2\u11b5\u11b7\7\u0337\2\2\u11b6\u11b5\3\2\2\2\u11b6\u11b7\3"+
		"\2\2\2\u11b7\u11b8\3\2\2\2\u11b8\u11b9\7\u0295\2\2\u11b9\u11ba\7\u0323"+
		"\2\2\u11ba\u11c8\7\u031b\2\2\u11bb\u11bd\7\u0337\2\2\u11bc\u11bb\3\2\2"+
		"\2\u11bc\u11bd\3\2\2\2\u11bd\u11be\3\2\2\2\u11be\u11bf\7\u00e6\2\2\u11bf"+
		"\u11c0\7\u0323\2\2\u11c0\u11c8\t.\2\2\u11c1\u11c3\7\u0337\2\2\u11c2\u11c1"+
		"\3\2\2\2\u11c2\u11c3\3\2\2\2\u11c3\u11c4\3\2\2\2\u11c4\u11c5\7\u014b\2"+
		"\2\u11c5\u11c6\7\u0323\2\2\u11c6\u11c8\t\t\2\2\u11c7\u11b6\3\2\2\2\u11c7"+
		"\u11bc\3\2\2\2\u11c7\u11c2\3\2\2\2\u11c8\u11cb\3\2\2\2\u11c9\u11c7\3\2"+
		"\2\2\u11c9\u11ca\3\2\2\2\u11ca\u11cc\3\2\2\2\u11cb\u11c9\3\2\2\2\u11cc"+
		"\u11ce\7\u0336\2\2\u11cd\u11b3\3\2\2\2\u11cd\u11ce\3\2\2\2\u11ce\u11fd"+
		"\3\2\2\2\u11cf\u11fb\7\u0179\2\2\u11d0\u11d2\7\u0337\2\2\u11d1\u11d0\3"+
		"\2\2\2\u11d1\u11d2\3\2\2\2\u11d2\u11d4\3\2\2\2\u11d3\u11d5\7\u00dc\2\2"+
		"\u11d4\u11d3\3\2\2\2\u11d4\u11d5\3\2\2\2\u11d5\u11d6\3\2\2\2\u11d6\u11e2"+
		"\5\u03b6\u01dc\2\u11d7\u11e3\7\u0323\2\2\u11d8\u11d9\7\u0325\2\2\u11d9"+
		"\u11e3\7\u0324\2\2\u11da\u11db\7\u0326\2\2\u11db\u11e3\7\u0323\2\2\u11dc"+
		"\u11e3\7\u0324\2\2\u11dd\u11de\7\u0324\2\2\u11de\u11e3\7\u0323\2\2\u11df"+
		"\u11e3\7\u0325\2\2\u11e0\u11e1\7\u0325\2\2\u11e1\u11e3\7\u0323\2\2\u11e2"+
		"\u11d7\3\2\2\2\u11e2\u11d8\3\2\2\2\u11e2\u11da\3\2\2\2\u11e2\u11dc\3\2"+
		"\2\2\u11e2\u11dd\3\2\2\2\u11e2\u11df\3\2\2\2\u11e2\u11e0\3\2\2\2\u11e3"+
		"\u11e4\3\2\2\2\u11e4\u11e5\t\30\2\2\u11e5\u11fc\3\2\2\2\u11e6\u11e8\7"+
		"\u0337\2\2\u11e7\u11e6\3\2\2\2\u11e7\u11e8\3\2\2\2\u11e8\u11e9\3\2\2\2"+
		"\u11e9\u11eb\t\35\2\2\u11ea\u11ec\7\u00dc\2\2\u11eb\u11ea\3\2\2\2\u11eb"+
		"\u11ec\3\2\2\2\u11ec\u11f8\3\2\2\2\u11ed\u11f9\7\u0323\2\2\u11ee\u11ef"+
		"\7\u0325\2\2\u11ef\u11f9\7\u0324\2\2\u11f0\u11f1\7\u0326\2\2\u11f1\u11f9"+
		"\7\u0323\2\2\u11f2\u11f9\7\u0324\2\2\u11f3\u11f4\7\u0324\2\2\u11f4\u11f9"+
		"\7\u0323\2\2\u11f5\u11f9\7\u0325\2\2\u11f6\u11f7\7\u0325\2\2\u11f7\u11f9"+
		"\7\u0323\2\2\u11f8\u11ed\3\2\2\2\u11f8\u11ee\3\2\2\2\u11f8\u11f0\3\2\2"+
		"\2\u11f8\u11f2\3\2\2\2\u11f8\u11f3\3\2\2\2\u11f8\u11f5\3\2\2\2\u11f8\u11f6"+
		"\3\2\2\2\u11f9\u11fa\3\2\2\2\u11fa\u11fc\t\30\2\2\u11fb\u11d1\3\2\2\2"+
		"\u11fb\u11e7\3\2\2\2\u11fc\u11fe\3\2\2\2\u11fd\u11cf\3\2\2\2\u11fd\u11fe"+
		"\3\2\2\2\u11fe\u1206\3\2\2\2\u11ff\u1200\7\u02a9\2\2\u1200\u1206\7\u0179"+
		"\2\2\u1201\u1202\7\u025b\2\2\u1202\u1203\7\u025e\2\2\u1203\u1204\7\u0323"+
		"\2\2\u1204\u1206\5\u03b6\u01dc\2\u1205\u11b1\3\2\2\2\u1205\u11ff\3\2\2"+
		"\2\u1205\u1201\3\2\2\2\u1206\u0175\3\2\2\2\u1207\u1208\7I\2\2\u1208\u1209"+
		"\7\u0137\2\2\u1209\u120a\7\u0199\2\2\u120a\u1294\5\u03b6\u01dc\2\u120b"+
		"\u1238\7\u015d\2\2\u120c\u120d\7\u0082\2\2\u120d\u1232\7\u0335\2\2\u120e"+
		"\u1210\7\u0337\2\2\u120f\u120e\3\2\2\2\u120f\u1210\3\2\2\2\u1210\u1211"+
		"\3\2\2\2\u1211\u1212\7\u01ff\2\2\u1212\u1213\7\u0323\2\2\u1213\u1231\7"+
		"\u031f\2\2\u1214\u1216\7\u0337\2\2\u1215\u1214\3\2\2\2\u1215\u1216\3\2"+
		"\2\2\u1216\u1217\3\2\2\2\u1217\u1218\7\u024d\2\2\u1218\u121c\7\u0323\2"+
		"\2\u1219\u121a\7\u031b\2\2\u121a\u121d\t,\2\2\u121b\u121d\7\u0300\2\2"+
		"\u121c\u1219\3\2\2\2\u121c\u121b\3\2\2\2\u121d\u1231\3\2\2\2\u121e\u1220"+
		"\7\u0337\2\2\u121f\u121e\3\2\2\2\u121f\u1220\3\2\2\2\u1220\u1221\3\2\2"+
		"\2\u1221\u1222\7\u024a\2\2\u1222\u1223\7\u0323\2\2\u1223\u1231\t-\2\2"+
		"\u1224\u1226\7\u0337\2\2\u1225\u1224\3\2\2\2\u1225\u1226\3\2\2\2\u1226"+
		"\u1227\3\2\2\2\u1227\u1228\7\u0245\2\2\u1228\u1229\7\u0323\2\2\u1229\u1231"+
		"\7\u031b\2\2\u122a\u122c\7\u0337\2\2\u122b\u122a\3\2\2\2\u122b\u122c\3"+
		"\2\2\2\u122c\u122d\3\2\2\2\u122d\u122e\7\u02b1\2\2\u122e\u122f\7\u0323"+
		"\2\2\u122f\u1231\t\t\2\2\u1230\u120f\3\2\2\2\u1230\u1215\3\2\2\2\u1230"+
		"\u121f\3\2\2\2\u1230\u1225\3\2\2\2\u1230\u122b\3\2\2\2\u1231\u1234\3\2"+
		"\2\2\u1232\u1230\3\2\2\2\u1232\u1233\3\2\2\2\u1233\u1235\3\2\2\2\u1234"+
		"\u1232\3\2\2\2\u1235\u1239\7\u0336\2\2\u1236\u1239\7\u0195\2\2\u1237\u1239"+
		"\7\u02c8\2\2\u1238\u120c\3\2\2\2\u1238\u1236\3\2\2\2\u1238\u1237\3\2\2"+
		"\2\u1239\u123b\3\2\2\2\u123a\u120b\3\2\2\2\u123a\u123b\3\2\2\2\u123b\u125c"+
		"\3\2\2\2\u123c\u123d\7\u017c\2\2\u123d\u1258\7\u0335\2\2\u123e\u1240\7"+
		"\u0337\2\2\u123f\u123e\3\2\2\2\u123f\u1240\3\2\2\2\u1240\u1241\3\2\2\2"+
		"\u1241\u1242\7\u0295\2\2\u1242\u1243\7\u0323\2\2\u1243\u1257\7\u031b\2"+
		"\2\u1244\u1246\7\u0337\2\2\u1245\u1244\3\2\2\2\u1245\u1246\3\2\2\2\u1246"+
		"\u1247\3\2\2\2\u1247\u1248\7\u00e6\2\2\u1248\u1249\7\u0323\2\2\u1249\u1257"+
		"\t.\2\2\u124a\u124c\7\u0337\2\2\u124b\u124a\3\2\2\2\u124b\u124c\3\2\2"+
		"\2\u124c\u124d\3\2\2\2\u124d\u124e\7\u014b\2\2\u124e\u124f\7\u0323\2\2"+
		"\u124f\u1257\t\t\2\2\u1250\u1252\7\u0337\2\2\u1251\u1250\3\2\2\2\u1251"+
		"\u1252\3\2\2\2\u1252\u1253\3\2\2\2\u1253\u1254\7\u019a\2\2\u1254\u1255"+
		"\7\u0323\2\2\u1255\u1257\5\u03b6\u01dc\2\u1256\u123f\3\2\2\2\u1256\u1245"+
		"\3\2\2\2\u1256\u124b\3\2\2\2\u1256\u1251\3\2\2\2\u1257\u125a\3\2\2\2\u1258"+
		"\u1256\3\2\2\2\u1258\u1259\3\2\2\2\u1259\u125b\3\2\2\2\u125a\u1258\3\2"+
		"\2\2\u125b\u125d\7\u0336\2\2\u125c\u123c\3\2\2\2\u125c\u125d\3\2\2\2\u125d"+
		"\u128c\3\2\2\2\u125e\u128a\7\u0179\2\2\u125f\u1261\7\u0337\2\2\u1260\u125f"+
		"\3\2\2\2\u1260\u1261\3\2\2\2\u1261\u1263\3\2\2\2\u1262\u1264\7\u00dc\2"+
		"\2\u1263\u1262\3\2\2\2\u1263\u1264\3\2\2\2\u1264\u1265\3\2\2\2\u1265\u1271"+
		"\5\u03b6\u01dc\2\u1266\u1272\7\u0323\2\2\u1267\u1268\7\u0325\2\2\u1268"+
		"\u1272\7\u0324\2\2\u1269\u126a\7\u0326\2\2\u126a\u1272\7\u0323\2\2\u126b"+
		"\u1272\7\u0324\2\2\u126c\u126d\7\u0324\2\2\u126d\u1272\7\u0323\2\2\u126e"+
		"\u1272\7\u0325\2\2\u126f\u1270\7\u0325\2\2\u1270\u1272\7\u0323\2\2\u1271"+
		"\u1266\3\2\2\2\u1271\u1267\3\2\2\2\u1271\u1269\3\2\2\2\u1271\u126b\3\2"+
		"\2\2\u1271\u126c\3\2\2\2\u1271\u126e\3\2\2\2\u1271\u126f\3\2\2\2\u1272"+
		"\u1273\3\2\2\2\u1273\u1274\t\30\2\2\u1274\u128b\3\2\2\2\u1275\u1277\7"+
		"\u0337\2\2\u1276\u1275\3\2\2\2\u1276\u1277\3\2\2\2\u1277\u1278\3\2\2\2"+
		"\u1278\u127a\t\35\2\2\u1279\u127b\7\u00dc\2\2\u127a\u1279\3\2\2\2\u127a"+
		"\u127b\3\2\2\2\u127b\u1287\3\2\2\2\u127c\u1288\7\u0323\2\2\u127d\u127e"+
		"\7\u0325\2\2\u127e\u1288\7\u0324\2\2\u127f\u1280\7\u0326\2\2\u1280\u1288"+
		"\7\u0323\2\2\u1281\u1288\7\u0324\2\2\u1282\u1283\7\u0324\2\2\u1283\u1288"+
		"\7\u0323\2\2\u1284\u1288\7\u0325\2\2\u1285\u1286\7\u0325\2\2\u1286\u1288"+
		"\7\u0323\2\2\u1287\u127c\3\2\2\2\u1287\u127d\3\2\2\2\u1287\u127f\3\2\2"+
		"\2\u1287\u1281\3\2\2\2\u1287\u1282\3\2\2\2\u1287\u1284\3\2\2\2\u1287\u1285"+
		"\3\2\2\2\u1288\u1289\3\2\2\2\u1289\u128b\t\30\2\2\u128a\u1260\3\2\2\2"+
		"\u128a\u1276\3\2\2\2\u128b\u128d\3\2\2\2\u128c\u125e\3\2\2\2\u128c\u128d"+
		"\3\2\2\2\u128d\u1295\3\2\2\2\u128e\u128f\7\u02a9\2\2\u128f\u1295\7\u0179"+
		"\2\2\u1290\u1291\7\u025b\2\2\u1291\u1292\7\u025e\2\2\u1292\u1293\7\u0323"+
		"\2\2\u1293\u1295\5\u03b6\u01dc\2\u1294\u123a\3\2\2\2\u1294\u128e\3\2\2"+
		"\2\u1294\u1290\3\2\2\2\u1295\u0177\3\2\2\2\u1296\u1297\7\n\2\2\u1297\u1298"+
		"\7\u0137\2\2\u1298\u1299\7\u0199\2\2\u1299\u129a\7\u0145\2\2\u129a\u129f"+
		"\5\u03b6\u01dc\2\u129b\u129c\7\u0086\2\2\u129c\u129d\7\u0137\2\2\u129d"+
		"\u129e\7\u0199\2\2\u129e\u12a0\5\u03b6\u01dc\2\u129f\u129b\3\2\2\2\u129f"+
		"\u12a0\3\2\2\2\u12a0\u12a8\3\2\2\2\u12a1\u12a2\t\25\2\2\u12a2\u12a3\7"+
		"\u0335\2\2\u12a3\u12a4\5\u03b6\u01dc\2\u12a4\u12a5\7\u0336\2\2\u12a5\u12a7"+
		"\3\2\2\2\u12a6\u12a1\3\2\2\2\u12a7\u12aa\3\2\2\2\u12a8\u12a6\3\2\2\2\u12a8"+
		"\u12a9\3\2\2\2\u12a9\u12b1\3\2\2\2\u12aa\u12a8\3\2\2\2\u12ab\u12ac\7\u017c"+
		"\2\2\u12ac\u12ad\7\u0335\2\2\u12ad\u12ae\7\u014b\2\2\u12ae\u12af\7\u0323"+
		"\2\2\u12af\u12b0\t\t\2\2\u12b0\u12b2\7\u0336\2\2\u12b1\u12ab\3\2\2\2\u12b1"+
		"\u12b2\3\2\2\2\u12b2\u0179\3\2\2\2\u12b3\u12b4\7I\2\2\u12b4\u12b5\7\u0137"+
		"\2\2\u12b5\u12b6\7\u0199\2\2\u12b6\u12b7\7\u0145\2\2\u12b7\u12bc\5\u03b6"+
		"\u01dc\2\u12b8\u12b9\7\u0086\2\2\u12b9\u12ba\7\u0137\2\2\u12ba\u12bb\7"+
		"\u0199\2\2\u12bb\u12bd\5\u03b6\u01dc\2\u12bc\u12b8\3\2\2\2\u12bc\u12bd"+
		"\3\2\2\2\u12bd\u12c5\3\2\2\2\u12be\u12bf\7\4\2\2\u12bf\u12c0\7\u0335\2"+
		"\2\u12c0\u12c1\5\u03b6\u01dc\2\u12c1\u12c2\7\u0336\2\2\u12c2\u12c4\3\2"+
		"\2\2\u12c3\u12be\3\2\2\2\u12c4\u12c7\3\2\2\2\u12c5\u12c3\3\2\2\2\u12c5"+
		"\u12c6\3\2\2\2\u12c6\u12ce\3\2\2\2\u12c7\u12c5\3\2\2\2\u12c8\u12c9\7\u017c"+
		"\2\2\u12c9\u12ca\7\u0335\2\2\u12ca\u12cb\7\u014b\2\2\u12cb\u12cc\7\u0323"+
		"\2\2\u12cc\u12cd\t\t\2\2\u12cd\u12cf\7\u0336\2\2\u12ce\u12c8\3\2\2\2\u12ce"+
		"\u12cf\3\2\2\2\u12cf\u017b\3\2\2\2\u12d0\u12d1\7\n\2\2\u12d1\u12d2\7\u0137"+
		"\2\2\u12d2\u12d3\7<\2\2\u12d3\u133d\7\u013d\2\2\u12d4\u12d5\7\u0104\2"+
		"\2\u12d5\u12f9\7\u018a\2\2\u12d6\u12d7\7\u01c4\2\2\u12d7\u12e7\7\u0323"+
		"\2\2\u12d8\u12e8\7\u019b\2\2\u12d9\u12db\7\u0337\2\2\u12da\u12d9\3\2\2"+
		"\2\u12da\u12db\3\2\2\2\u12db\u12dc\3\2\2\2\u12dc\u12e4\7\u031b\2\2\u12dd"+
		"\u12df\7\u0337\2\2\u12de\u12dd\3\2\2\2\u12de\u12df\3\2\2\2\u12df\u12e0"+
		"\3\2\2\2\u12e0\u12e1\7\u031b\2\2\u12e1\u12e2\7\u015d\2\2\u12e2\u12e4\7"+
		"\u031b\2\2\u12e3\u12da\3\2\2\2\u12e3\u12de\3\2\2\2\u12e4\u12e5\3\2\2\2"+
		"\u12e5\u12e3\3\2\2\2\u12e5\u12e6\3\2\2\2\u12e6\u12e8\3\2\2\2\u12e7\u12d8"+
		"\3\2\2\2\u12e7\u12e3\3\2\2\2\u12e8\u12fa\3\2\2\2\u12e9\u12ea\7\u026f\2"+
		"\2\u12ea\u12f5\7\u0323\2\2\u12eb\u12ed\7\u0337\2\2\u12ec\u12eb\3\2\2\2"+
		"\u12ec\u12ed\3\2\2\2\u12ed\u12ee\3\2\2\2\u12ee\u12f6\7\u031b\2\2\u12ef"+
		"\u12f1\7\u0337\2\2\u12f0\u12ef\3\2\2\2\u12f0\u12f1\3\2\2\2\u12f1\u12f2"+
		"\3\2\2\2\u12f2\u12f3\7\u031b\2\2\u12f3\u12f4\7\u015d\2\2\u12f4\u12f6\7"+
		"\u031b\2\2\u12f5\u12ec\3\2\2\2\u12f5\u12f0\3\2\2\2\u12f6\u12f7\3\2\2\2"+
		"\u12f7\u12f5\3\2\2\2\u12f7\u12f8\3\2\2\2\u12f8\u12fa\3\2\2\2\u12f9\u12d6"+
		"\3\2\2\2\u12f9\u12e9\3\2\2\2\u12fa\u133e\3\2\2\2\u12fb\u12fc\7`\2\2\u12fc"+
		"\u130c\7\u00bb\2\2\u12fd\u130d\7\u00e5\2\2\u12fe\u130d\7\u00e2\2\2\u12ff"+
		"\u1300\7\u0283\2\2\u1300\u1301\7\u0323\2\2\u1301\u130d\t/\2\2\u1302\u1303"+
		"\7\u00c3\2\2\u1303\u1307\7\u0323\2\2\u1304\u1305\7\u031b\2\2\u1305\u1308"+
		"\7\u024e\2\2\u1306\u1308\7Z\2\2\u1307\u1304\3\2\2\2\u1307\u1306\3\2\2"+
		"\2\u1308\u130d\3\2\2\2\u1309\u130a\7\u0245\2\2\u130a\u130b\7\u0323\2\2"+
		"\u130b\u130d\t\60\2\2\u130c\u12fd\3\2\2\2\u130c\u12fe\3\2\2\2\u130c\u12ff"+
		"\3\2\2\2\u130c\u1302\3\2\2\2\u130c\u1309\3\2\2\2\u130d\u133e\3\2\2\2\u130e"+
		"\u130f\7~\2\2\u130f\u1310\7\64\2\2\u1310\u1322\7\u0290\2\2\u1311\u1312"+
		"\7\u0174\2\2\u1312\u1313\7\u0323\2\2\u1313\u1323\t/\2\2\u1314\u1315\7"+
		"\u0147\2\2\u1315\u1316\7\u0323\2\2\u1316\u1323\t/\2\2\u1317\u1318\7\u0148"+
		"\2\2\u1318\u1319\7\u0323\2\2\u1319\u1323\t/\2\2\u131a\u131b\7\u0149\2"+
		"\2\u131b\u1323\t/\2\2\u131c\u131d\7\177\2\2\u131d\u131e\7\u0323\2\2\u131e"+
		"\u1323\t/\2\2\u131f\u1320\7\u0096\2\2\u1320\u1321\7\u0323\2\2\u1321\u1323"+
		"\t\60\2\2\u1322\u1311\3\2\2\2\u1322\u1314\3\2\2\2\u1322\u1317\3\2\2\2"+
		"\u1322\u131a\3\2\2\2\u1322\u131c\3\2\2\2\u1322\u131f\3\2\2\2\u1323\u133e"+
		"\3\2\2\2\u1324\u1325\7\u0214\2\2\u1325\u1326\7\64\2\2\u1326\u1327\7A\2"+
		"\2\u1327\u1328\7\u0323\2\2\u1328\u133e\t\61\2\2\u1329\u132a\7#\2\2\u132a"+
		"\u132b\7\u0285\2\2\u132b\u1338\7{\2\2\u132c\u132d\7\u00e5\2\2\u132d\u132e"+
		"\7\u0335\2\2\u132e\u132f\7\u0083\2\2\u132f\u1330\7\u0323\2\2\u1330\u1331"+
		"\7\u031f\2\2\u1331\u1332\7\u0337\2\2\u1332\u1333\7\u02d6\2\2\u1333\u1334"+
		"\7\u0323\2\2\u1334\u1335\7\u031b\2\2\u1335\u1336\t\62\2\2\u1336\u1339"+
		"\7\u0336\2\2\u1337\u1339\7\u00e2\2\2\u1338\u132c\3\2\2\2\u1338\u1337\3"+
		"\2\2\2\u1339\u133e\3\2\2\2\u133a\u133b\7\u013d\2\2\u133b\u133c\7\u0142"+
		"\2\2\u133c\u133e\t\t\2\2\u133d\u12d4\3\2\2\2\u133d\u12fb\3\2\2\2\u133d"+
		"\u130e\3\2\2\2\u133d\u1324\3\2\2\2\u133d\u1329\3\2\2\2\u133d\u133a\3\2"+
		"\2\2\u133e\u017d\3\2\2\2\u133f\u1340\7\n\2\2\u1340\u1341\7\u0137\2\2\u1341"+
		"\u1342\7\u0121\2\2\u1342\u134a\5\u03b6\u01dc\2\u1343\u1344\t\25\2\2\u1344"+
		"\u1345\7\u00c7\2\2\u1345\u134b\5\u03b6\u01dc\2\u1346\u1347\7\u017c\2\2"+
		"\u1347\u1348\7\u025e\2\2\u1348\u1349\7\u0323\2\2\u1349\u134b\5\u03b6\u01dc"+
		"\2\u134a\u1343\3\2\2\2\u134a\u1346\3\2\2\2\u134b\u017f\3\2\2\2\u134c\u134d"+
		"\7I\2\2\u134d\u134e\7\u0137\2\2\u134e\u134f\7\u0121\2\2\u134f\u1352\5"+
		"\u03b6\u01dc\2\u1350\u1351\7\24\2\2\u1351\u1353\5\u03b6\u01dc\2\u1352"+
		"\u1350\3\2\2\2\u1352\u1353\3\2\2\2\u1353\u0181\3\2\2\2\u1354\u1355\7\n"+
		"\2\2\u1355\u1356\7\u0137\2\2\u1356\u1357\7\u0121\2\2\u1357\u1358\5\u03b6"+
		"\u01dc\2\u1358\u1359\t\25\2\2\u1359\u135a\7\u00c7\2\2\u135a\u135b\5\u03b6"+
		"\u01dc\2\u135b\u0183\3\2\2\2\u135c\u135d\7\n\2\2\u135d\u135e\7\u0138\2"+
		"\2\u135e\u1366\5\u03b6\u01dc\2\u135f\u1360\7\u00e5\2\2\u1360\u1361\7\u0294"+
		"\2\2\u1361\u1362\5\u03b6\u01dc\2\u1362\u1363\7\u0330\2\2\u1363\u1364\3"+
		"\2\2\2\u1364\u1365\5\u03b6\u01dc\2\u1365\u1367\3\2\2\2\u1366\u135f\3\2"+
		"\2\2\u1366\u1367\3\2\2\2\u1367\u136f\3\2\2\2\u1368\u136a\7\u0337\2\2\u1369"+
		"\u1368\3\2\2\2\u1369\u136a\3\2\2\2\u136a\u136b\3\2\2\2\u136b\u136c\t\25"+
		"\2\2\u136c\u136e\5\u03b6\u01dc\2\u136d\u1369\3\2\2\2\u136e\u1371\3\2\2"+
		"\2\u136f\u136d\3\2\2\2\u136f\u1370\3\2\2\2\u1370\u0185\3\2\2\2\u1371\u136f"+
		"\3\2\2\2\u1372\u1373\7I\2\2\u1373\u1374\7\u0138\2\2\u1374\u1377\5\u03b6"+
		"\u01dc\2\u1375\u1376\7\24\2\2\u1376\u1378\5\u03b6\u01dc\2\u1377\u1375"+
		"\3\2\2\2\u1377\u1378\3\2\2\2\u1378\u1379\3\2\2\2\u1379\u137a\7\u00e5\2"+
		"\2\u137a\u137e\7\u0294\2\2\u137b\u137c\5\u03b6\u01dc\2\u137c\u137d\7\u0330"+
		"\2\2\u137d\u137f\3\2\2\2\u137e\u137b\3\2\2\2\u137e\u137f\3\2\2\2\u137f"+
		"\u1380\3\2\2\2\u1380\u138e\5\u03b6\u01dc\2\u1381\u1389\7\u0335\2\2\u1382"+
		"\u1384\7\u0337\2\2\u1383\u1382\3\2\2\2\u1383\u1384\3\2\2\2\u1384\u1387"+
		"\3\2\2\2\u1385\u1388\5\u03b6\u01dc\2\u1386\u1388\7Z\2\2\u1387\u1385\3"+
		"\2\2\2\u1387\u1386\3\2\2\2\u1388\u138a\3\2\2\2\u1389\u1383\3\2\2\2\u138a"+
		"\u138b\3\2\2\2\u138b\u1389\3\2\2\2\u138b\u138c\3\2\2\2\u138c\u138d\3\2"+
		"\2\2\u138d\u138f\7\u0336\2\2\u138e\u1381\3\2\2\2\u138e\u138f\3\2\2\2\u138f"+
		"\u0187\3\2\2\2\u1390\u1391\7\n\2\2\u1391\u1392\7\u0138\2\2\u1392\u1393"+
		"\7\u00bd\2\2\u1393\u13a9\7\u00ac\2\2\u1394\u1396\7\u0205\2\2\u1395\u1394"+
		"\3\2\2\2\u1395\u1396\3\2\2\2\u1396\u1397\3\2\2\2\u1397\u13aa\7\u010f\2"+
		"\2\u1398\u13a7\7\u017c\2\2\u1399\u139a\7\u0275\2\2\u139a\u139b\7\u0323"+
		"\2\2\u139b\u139c\7\u031f\2\2\u139c\u139d\7\u0337\2\2\u139d\u139e\7\u00e4"+
		"\2\2\u139e\u139f\7\u0323\2\2\u139f\u13a8\7\u031f\2\2\u13a0\u13a1\7\u0260"+
		"\2\2\u13a1\u13a2\7\u0323\2\2\u13a2\u13a3\7\u031f\2\2\u13a3\u13a4\7\u0337"+
		"\2\2\u13a4\u13a5\7\u0262\2\2\u13a5\u13a6\7\u0323\2\2\u13a6\u13a8\7\u031f"+
		"\2\2\u13a7\u1399\3\2\2\2\u13a7\u13a0\3\2\2\2\u13a7\u13a8\3\2\2\2\u13a8"+
		"\u13aa\3\2\2\2\u13a9\u1395\3\2\2\2\u13a9\u1398\3\2\2\2\u13aa\u0189\3\2"+
		"\2\2\u13ab\u13ac\7\n\2\2\u13ac\u13ad\7\u02e6\2\2\u13ad\u13ae\7\u00ac\2"+
		"\2\u13ae\u13af\5\u03b6\u01dc\2\u13af\u13b0\t\25\2\2\u13b0\u13b1\7\u01ee"+
		"\2\2\u13b1\u13bd\7&\2\2\u13b2\u13b3\7+\2\2\u13b3\u13be\5\u03b6\u01dc\2"+
		"\u13b4\u13b5\7\u00f4\2\2\u13b5\u13b6\7\u0323\2\2\u13b6\u13be\7\u031f\2"+
		"\2\u13b7\u13b8\7\u02e6\2\2\u13b8\u13b9\7\u00ac\2\2\u13b9\u13be\5\u03b6"+
		"\u01dc\2\u13ba\u13bb\7\22\2\2\u13bb\u13bc\7\u00ac\2\2\u13bc\u13be\5\u03b6"+
		"\u01dc\2\u13bd\u13b2\3\2\2\2\u13bd\u13b4\3\2\2\2\u13bd\u13b7\3\2\2\2\u13bd"+
		"\u13ba\3\2\2\2\u13be\u018b\3\2\2\2\u13bf\u13c0\7\n\2\2\u13c0\u13c1\7\u02e6"+
		"\2\2\u13c1\u13c2\7\u00ac\2\2\u13c2\u13c5\5\u03b6\u01dc\2\u13c3\u13c4\7"+
		"\24\2\2\u13c4\u13c6\5\u03b6\u01dc\2\u13c5\u13c3\3\2\2\2\u13c5\u13c6\3"+
		"\2\2\2\u13c6\u13ca\3\2\2\2\u13c7\u13c8\7\u008c\2\2\u13c8\u13c9\7\u0291"+
		"\2\2\u13c9\u13cb\5\u03b6\u01dc\2\u13ca\u13c7\3\2\2\2\u13ca\u13cb\3\2\2"+
		"\2\u13cb\u13cc\3\2\2\2\u13cc\u13ed\7\u017c\2\2\u13cd\u13ce\7\u022c\2\2"+
		"\u13ce\u13cf\7\u0323\2\2\u13cf\u13dd\7\u031f\2\2\u13d0\u13d1\7\u018d\2"+
		"\2\u13d1\u13d2\7\u0323\2\2\u13d2\u13dd\t\63\2\2\u13d3\u13d4\7\u021a\2"+
		"\2\u13d4\u13d5\7\u0323\2\2\u13d5\u13dd\7\u031f\2\2\u13d6\u13d7\7\u0292"+
		"\2\2\u13d7\u13d8\7\u0323\2\2\u13d8\u13dd\7\u031f\2\2\u13d9\u13da\7\u01c6"+
		"\2\2\u13da\u13db\7\u0323\2\2\u13db\u13dd\t\f\2\2\u13dc\u13cd\3\2\2\2\u13dc"+
		"\u13d0\3\2\2\2\u13dc\u13d3\3\2\2\2\u13dc\u13d6\3\2\2\2\u13dc\u13d9\3\2"+
		"\2\2\u13dd\u13ee\3\2\2\2\u13de\u13df\7\u01ee\2\2\u13df\u13eb\7&\2\2\u13e0"+
		"\u13e1\7+\2\2\u13e1\u13ec\5\u03b6\u01dc\2\u13e2\u13e3\7\u00f4\2\2\u13e3"+
		"\u13e4\7\u0323\2\2\u13e4\u13ec\7\u031f\2\2\u13e5\u13e6\7\u02e6\2\2\u13e6"+
		"\u13e7\7\u00ac\2\2\u13e7\u13ec\5\u03b6\u01dc\2\u13e8\u13e9\7\22\2\2\u13e9"+
		"\u13ea\7\u00ac\2\2\u13ea\u13ec\5\u03b6\u01dc\2\u13eb\u13e0\3\2\2\2\u13eb"+
		"\u13e2\3\2\2\2\u13eb\u13e5\3\2\2\2\u13eb\u13e8\3\2\2\2\u13ec\u13ee\3\2"+
		"\2\2\u13ed\u13dc\3\2\2\2\u13ed\u13de\3\2\2\2\u13ee\u018d\3\2\2\2\u13ef"+
		"\u13f0\7I\2\2\u13f0\u13f4\7\u02e8\2\2\u13f1\u13f2\5\u03b6\u01dc\2\u13f2"+
		"\u13f3\7\u0330\2\2\u13f3\u13f5\3\2\2\2\u13f4\u13f1\3\2\2\2\u13f4\u13f5"+
		"\3\2\2\2\u13f5\u13f6\3\2\2\2\u13f6\u13f7\5\u03b6\u01dc\2\u13f7\u1412\7"+
		"\u0086\2\2\u13f8\u13f9\5\u03b6\u01dc\2\u13f9\u13fa\7\u0330\2\2\u13fa\u13fc"+
		"\3\2\2\2\u13fb\u13f8\3\2\2\2\u13fb\u13fc\3\2\2\2\u13fc\u1400\3\2\2\2\u13fd"+
		"\u13fe\5\u03b6\u01dc\2\u13fe\u13ff\7\u0330\2\2\u13ff\u1401\3\2\2\2\u1400"+
		"\u13fd\3\2\2\2\u1400\u1401\3\2\2\2\u1401\u1405\3\2\2\2\u1402\u1403\5\u03b6"+
		"\u01dc\2\u1403\u1404\7\u0330\2\2\u1404\u1406\3\2\2\2\u1405\u1402\3\2\2"+
		"\2\u1405\u1406\3\2\2\2\u1406\u1407\3\2\2\2\u1407\u1413\5\u03b6\u01dc\2"+
		"\u1408\u1409\5\u03b6\u01dc\2\u1409\u140a\7\u0330\2\2\u140a\u140c\3\2\2"+
		"\2\u140b\u1408\3\2\2\2\u140b\u140c\3\2\2\2\u140c\u1410\3\2\2\2\u140d\u140e"+
		"\5\u03b6\u01dc\2\u140e\u140f\7\u0330\2\2\u140f\u1411\3\2\2\2\u1410\u140d"+
		"\3\2\2\2\u1410\u1411\3\2\2\2\u1411\u1413\3\2\2\2\u1412\u13fb\3\2\2\2\u1412"+
		"\u140b\3\2\2\2\u1413\u018f\3\2\2\2\u1414\u1415\7\n\2\2\u1415\u1416\7\u0171"+
		"\2\2\u1416\u1417\5\u03b6\u01dc\2\u1417\u144a\7\u017c\2\2\u1418\u141a\7"+
		"\u0337\2\2\u1419\u1418\3\2\2\2\u1419\u141a\3\2\2\2\u141a\u141b\3\2\2\2"+
		"\u141b\u141c\7\u025e\2\2\u141c\u141d\7\u0323\2\2\u141d\u144b\5\u03b6\u01dc"+
		"\2\u141e\u1420\7\u0337\2\2\u141f\u141e\3\2\2\2\u141f\u1420\3\2\2\2\u1420"+
		"\u1421\3\2\2\2\u1421\u1422\7\\\2\2\u1422\u1425\7\u0323\2\2\u1423\u1426"+
		"\5\u03b6\u01dc\2\u1424\u1426\7\u00df\2\2\u1425\u1423\3\2\2\2\u1425\u1424"+
		"\3\2\2\2\u1426\u144b\3\2\2\2\u1427\u1429\7\u0337\2\2\u1428\u1427\3\2\2"+
		"\2\u1428\u1429\3\2\2\2\u1429\u142a\3\2\2\2\u142a\u142b\7\u023c\2\2\u142b"+
		"\u142c\7\u0323\2\2\u142c\u144b\5\u03b6\u01dc\2\u142d\u142f\7\u0337\2\2"+
		"\u142e\u142d\3\2\2\2\u142e\u142f\3\2\2\2\u142f\u1430\3\2\2\2\u1430\u1431"+
		"\7\u00f4\2\2\u1431\u1432\7\u0323\2\2\u1432\u1436\7\u031f\2\2\u1433\u1434"+
		"\7\u00e4\2\2\u1434\u1435\7\u0323\2\2\u1435\u1437\7\u031f\2\2\u1436\u1433"+
		"\3\2\2\2\u1437\u1438\3\2\2\2\u1438\u1436\3\2\2\2\u1438\u1439\3\2\2\2\u1439"+
		"\u144b\3\2\2\2\u143a\u143c\7\u0337\2\2\u143b\u143a\3\2\2\2\u143b\u143c"+
		"\3\2\2\2\u143c\u143d\3\2\2\2\u143d\u143e\7\u01d6\2\2\u143e\u1442\7\u0323"+
		"\2\2\u143f\u1443\7\u00d5\2\2\u1440\u1443\7\u031b\2\2\u1441\u1443\5\u03b6"+
		"\u01dc\2\u1442\u143f\3\2\2\2\u1442\u1440\3\2\2\2\u1442\u1441\3\2\2\2\u1443"+
		"\u144b\3\2\2\2\u1444\u1446\7\u0337\2\2\u1445\u1444\3\2\2\2\u1445\u1446"+
		"\3\2\2\2\u1446\u1447\3\2\2\2\u1447\u1448\7\u018e\2\2\u1448\u1449\7\u0323"+
		"\2\2\u1449\u144b\t\t\2\2\u144a\u1419\3\2\2\2\u144a\u141f\3\2\2\2\u144a"+
		"\u1428\3\2\2\2\u144a\u142e\3\2\2\2\u144a\u143b\3\2\2\2\u144a\u1445\3\2"+
		"\2\2\u144b\u144c\3\2\2\2\u144c\u144a\3\2\2\2\u144c\u144d\3\2\2\2\u144d"+
		"\u0191\3\2\2\2\u144e\u144f\7I\2\2\u144f\u1450\7\u0171\2\2\u1450\u1454"+
		"\5\u03b6\u01dc\2\u1451\u1452\t\64\2\2\u1452\u1453\7\u023c\2\2\u1453\u1455"+
		"\5\u03b6\u01dc\2\u1454\u1451\3\2\2\2\u1454\u1455\3\2\2\2\u1455\u1468\3"+
		"\2\2\2\u1456\u1465\7\u017c\2\2\u1457\u1459\7\u0337\2\2\u1458\u1457\3\2"+
		"\2\2\u1458\u1459\3\2\2\2\u1459\u145a\3\2\2\2\u145a\u145b\7\\\2\2\u145b"+
		"\u145c\7\u0323\2\2\u145c\u1464\5\u03b6\u01dc\2\u145d\u145f\7\u0337\2\2"+
		"\u145e\u145d\3\2\2\2\u145e\u145f\3\2\2\2\u145f\u1460\3\2\2\2\u1460\u1461"+
		"\7\u018e\2\2\u1461\u1462\7\u0323\2\2\u1462\u1464\t\t\2\2\u1463\u1458\3"+
		"\2\2\2\u1463\u145e\3\2\2\2\u1464\u1467\3\2\2\2\u1465\u1463\3\2\2\2\u1465"+
		"\u1466\3\2\2\2\u1466\u1469\3\2\2\2\u1467\u1465\3\2\2\2\u1468\u1456\3\2"+
		"\2\2\u1468\u1469\3\2\2\2\u1469\u14e1\3\2\2\2\u146a\u146b\7I\2\2\u146b"+
		"\u14bc\7\u0171\2\2\u146c\u148f\5\u03b6\u01dc\2\u146d\u148c\7\u017c\2\2"+
		"\u146e\u1470\7\u0337\2\2\u146f\u146e\3\2\2\2\u146f\u1470\3\2\2\2\u1470"+
		"\u1471\3\2\2\2\u1471\u1472\7\\\2\2\u1472\u1473\7\u0323\2\2\u1473\u148b"+
		"\5\u03b6\u01dc\2\u1474\u1476\7\u0337\2\2\u1475\u1474\3\2\2\2\u1475\u1476"+
		"\3\2\2\2\u1476\u1477\3\2\2\2\u1477\u1478\7\u01d6\2\2\u1478\u147c\7\u0323"+
		"\2\2\u1479\u147d\7\u00d5\2\2\u147a\u147d\7\u031b\2\2\u147b\u147d\5\u03b6"+
		"\u01dc\2\u147c\u1479\3\2\2\2\u147c\u147a\3\2\2\2\u147c\u147b\3\2\2\2\u147d"+
		"\u148b\3\2\2\2\u147e\u1480\7\u0337\2\2\u147f\u147e\3\2\2\2\u147f\u1480"+
		"\3\2\2\2\u1480\u1481\3\2\2\2\u1481\u1482\7\u0140\2\2\u1482\u1483\7\u0323"+
		"\2\2\u1483\u148b\7\u0320\2\2\u1484\u1486\7\u0337\2\2\u1485\u1484\3\2\2"+
		"\2\u1485\u1486\3\2\2\2\u1486\u1487\3\2\2\2\u1487\u1488\7\u018e\2\2\u1488"+
		"\u1489\7\u0323\2\2\u1489\u148b\t\t\2\2\u148a\u146f\3\2\2\2\u148a\u1475"+
		"\3\2\2\2\u148a\u147f\3\2\2\2\u148a\u1485\3\2\2\2\u148b\u148e\3\2\2\2\u148c"+
		"\u148a\3\2\2\2\u148c\u148d\3\2\2\2\u148d\u1490\3\2\2\2\u148e\u148c\3\2"+
		"\2\2\u148f\u146d\3\2\2\2\u148f\u1490\3\2\2\2\u1490\u14bd\3\2\2\2\u1491"+
		"\u1492\5\u03b6\u01dc\2\u1492\u1493\7\u017c\2\2\u1493\u1494\7\u00f4\2\2"+
		"\u1494\u1495\7\u0323\2\2\u1495\u14b4\7\u031f\2\2\u1496\u1498\7\u0337\2"+
		"\2\u1497\u1496\3\2\2\2\u1497\u1498\3\2\2\2\u1498\u1499\3\2\2\2\u1499\u149a"+
		"\7\\\2\2\u149a\u149b\7\u0323\2\2\u149b\u14b3\5\u03b6\u01dc\2\u149c\u149e"+
		"\7\u0337\2\2\u149d\u149c\3\2\2\2\u149d\u149e\3\2\2\2\u149e\u149f\3\2\2"+
		"\2\u149f\u14a0\7\u01d6\2\2\u14a0\u14a4\7\u0323\2\2\u14a1\u14a5\7\u00d5"+
		"\2\2\u14a2\u14a5\7\u031b\2\2\u14a3\u14a5\5\u03b6\u01dc\2\u14a4\u14a1\3"+
		"\2\2\2\u14a4\u14a2\3\2\2\2\u14a4\u14a3\3\2\2\2\u14a5\u14b3\3\2\2\2\u14a6"+
		"\u14a8\7\u0337\2\2\u14a7\u14a6\3\2\2\2\u14a7\u14a8\3\2\2\2\u14a8\u14a9"+
		"\3\2\2\2\u14a9\u14aa\7\u0140\2\2\u14aa\u14ab\7\u0323\2\2\u14ab\u14b3\7"+
		"\u0320\2\2\u14ac\u14ae\7\u0337\2\2\u14ad\u14ac\3\2\2\2\u14ad\u14ae\3\2"+
		"\2\2\u14ae\u14af\3\2\2\2\u14af\u14b0\7\u018e\2\2\u14b0\u14b1\7\u0323\2"+
		"\2\u14b1\u14b3\t\t\2\2\u14b2\u1497\3\2\2\2\u14b2\u149d\3\2\2\2\u14b2\u14a7"+
		"\3\2\2\2\u14b2\u14ad\3\2\2\2\u14b3\u14b6\3\2\2\2\u14b4\u14b2\3\2\2\2\u14b4"+
		"\u14b5\3\2\2\2\u14b5\u14bd\3\2\2\2\u14b6\u14b4\3\2\2\2\u14b7\u14b8\5\u03b6"+
		"\u01dc\2\u14b8\u14b9\7\u008c\2\2\u14b9\u14ba\7|\2\2\u14ba\u14bb\7\u0291"+
		"\2\2\u14bb\u14bd\3\2\2\2\u14bc\u146c\3\2\2\2\u14bc\u1491\3\2\2\2\u14bc"+
		"\u14b7\3\2\2\2\u14bd\u14e1\3\2\2\2\u14be\u14bf\7I\2\2\u14bf\u14c0\7\u0171"+
		"\2\2\u14c0\u14db\5\u03b6\u01dc\2\u14c1\u14c2\7\u017e\2\2\u14c2\u14d1\7"+
		"\u023c\2\2\u14c3\u14c5\7\u0337\2\2\u14c4\u14c3\3\2\2\2\u14c4\u14c5\3\2"+
		"\2\2\u14c5\u14c6\3\2\2\2\u14c6\u14c7\7\\\2\2\u14c7\u14c8\7\u0323\2\2\u14c8"+
		"\u14d0\5\u03b6\u01dc\2\u14c9\u14cb\7\u0337\2\2\u14ca\u14c9\3\2\2\2\u14ca"+
		"\u14cb\3\2\2\2\u14cb\u14cc\3\2\2\2\u14cc\u14cd\7\u018e\2\2\u14cd\u14ce"+
		"\7\u0323\2\2\u14ce\u14d0\t\t\2\2\u14cf\u14c4\3\2\2\2\u14cf\u14ca\3\2\2"+
		"\2\u14d0\u14d3\3\2\2\2\u14d1\u14cf\3\2\2\2\u14d1\u14d2\3\2\2\2\u14d2\u14dc"+
		"\3\2\2\2\u14d3\u14d1\3\2\2\2\u14d4\u14d5\t\64\2\2\u14d5\u14d6\7+\2\2\u14d6"+
		"\u14dc\5\u03b6\u01dc\2\u14d7\u14d8\t\64\2\2\u14d8\u14d9\7\22\2\2\u14d9"+
		"\u14da\7\u00ac\2\2\u14da\u14dc\5\u03b6\u01dc\2\u14db\u14c1\3\2\2\2\u14db"+
		"\u14d4\3\2\2\2\u14db\u14d7\3\2\2\2\u14dc\u14e1\3\2\2\2\u14dd\u14de\7I"+
		"\2\2\u14de\u14df\7\u0171\2\2\u14df\u14e1\5\u03b6\u01dc\2\u14e0\u144e\3"+
		"\2\2\2\u14e0\u146a\3\2\2\2\u14e0\u14be\3\2\2\2\u14e0\u14dd\3\2\2\2\u14e1"+
		"\u0193\3\2\2\2\u14e2\u14e3\7I\2\2\u14e3\u14e4\7\u0171\2\2\u14e4\u14ea"+
		"\5\u03b6\u01dc\2\u14e5\u14e6\t\64\2\2\u14e6\u14e7\7\u023c\2\2\u14e7\u14eb"+
		"\5\u03b6\u01dc\2\u14e8\u14e9\7\u017e\2\2\u14e9\u14eb\7\u023c\2\2\u14ea"+
		"\u14e5\3\2\2\2\u14ea\u14e8\3\2\2\2\u14ea\u14eb\3\2\2\2\u14eb\u14f0\3\2"+
		"\2\2\u14ec\u14ed\7\u017c\2\2\u14ed\u14ee\7\\\2\2\u14ee\u14ef\7\u0323\2"+
		"\2\u14ef\u14f1\5\u03b6\u01dc\2\u14f0\u14ec\3\2\2\2\u14f0\u14f1\3\2\2\2"+
		"\u14f1\u14ff\3\2\2\2\u14f2\u14f3\7I\2\2\u14f3\u14f4\7\u0171\2\2\u14f4"+
		"\u14f5\5\u03b6\u01dc\2\u14f5\u14f6\7\u008c\2\2\u14f6\u14f7\7|\2\2\u14f7"+
		"\u14fc\7\u0291\2\2\u14f8\u14f9\7\u017c\2\2\u14f9\u14fa\7\\\2\2\u14fa\u14fb"+
		"\7\u0323\2\2\u14fb\u14fd\5\u03b6\u01dc\2\u14fc\u14f8\3\2\2\2\u14fc\u14fd"+
		"\3\2\2\2\u14fd\u14ff\3\2\2\2\u14fe\u14e2\3\2\2\2\u14fe\u14f2\3\2\2\2\u14ff"+
		"\u0195\3\2\2\2\u1500\u1501\7\n\2\2\u1501\u1502\7\u0171\2\2\u1502\u1503"+
		"\5\u03b6\u01dc\2\u1503\u151c\7\u017c\2\2\u1504\u1506\7\u0337\2\2\u1505"+
		"\u1504\3\2\2\2\u1505\u1506\3\2\2\2\u1506\u1507\3\2\2\2\u1507\u1508\7\u025e"+
		"\2\2\u1508\u1509\7\u0323\2\2\u1509\u151d\5\u03b6\u01dc\2\u150a\u150c\7"+
		"\u0337\2\2\u150b\u150a\3\2\2\2\u150b\u150c\3\2\2\2\u150c\u150d\3\2\2\2"+
		"\u150d\u150e\7\\\2\2\u150e\u150f\7\u0323\2\2\u150f\u151d\5\u03b6\u01dc"+
		"\2\u1510\u1512\7\u0337\2\2\u1511\u1510\3\2\2\2\u1511\u1512\3\2\2\2\u1512"+
		"\u1513\3\2\2\2\u1513\u1514\7\u023c\2\2\u1514\u1515\7\u0323\2\2\u1515\u151d"+
		"\5\u03b6\u01dc\2\u1516\u1518\7\u0337\2\2\u1517\u1516\3\2\2\2\u1517\u1518"+
		"\3\2\2\2\u1518\u1519\3\2\2\2\u1519\u151a\7\u018e\2\2\u151a\u151b\7\u0323"+
		"\2\2\u151b\u151d\t\t\2\2\u151c\u1505\3\2\2\2\u151c\u150b\3\2\2\2\u151c"+
		"\u1511\3\2\2\2\u151c\u1517\3\2\2\2\u151d\u151e\3\2\2\2\u151e\u151c\3\2"+
		"\2\2\u151e\u151f\3\2\2\2\u151f\u0197\3\2\2\2\u1520\u1521\7\n\2\2\u1521"+
		"\u1522\7\u030d\2\2\u1522\u1525\7\u0093\2\2\u1523\u1526\5\u03b6\u01dc\2"+
		"\u1524\u1526\7\u01d4\2\2\u1525\u1523\3\2\2\2\u1525\u1524\3\2\2\2\u1526"+
		"\u1546\3\2\2\2\u1527\u1528\7\u017c\2\2\u1528\u1541\7\u0335\2\2\u1529\u152a"+
		"\7\u021e\2\2\u152a\u152b\7\u0323\2\2\u152b\u1542\t\65\2\2\u152c\u152e"+
		"\7\u0337\2\2\u152d\u152c\3\2\2\2\u152d\u152e\3\2\2\2\u152e\u152f\3\2\2"+
		"\2\u152f\u1530\7\u02ae\2\2\u1530\u1531\7\u0323\2\2\u1531\u1542\7\u031b"+
		"\2\2\u1532\u1534\7\u0337\2\2\u1533\u1532\3\2\2\2\u1533\u1534\3\2\2\2\u1534"+
		"\u1535\3\2\2\2\u1535\u1536\7\u02ad\2\2\u1536\u1537\7\u0323\2\2\u1537\u1542"+
		"\7\u031b\2\2\u1538\u1539\7\u02af\2\2\u1539\u153a\7\u0323\2\2\u153a\u1542"+
		"\7\u031b\2\2\u153b\u153c\7\u0244\2\2\u153c\u153d\7\u0323\2\2\u153d\u1542"+
		"\7\u031b\2\2\u153e\u153f\7\u0211\2\2\u153f\u1540\7\u0323\2\2\u1540\u1542"+
		"\7\u031b\2\2\u1541\u1529\3\2\2\2\u1541\u152d\3\2\2\2\u1541\u1533\3\2\2"+
		"\2\u1541\u1538\3\2\2\2\u1541\u153b\3\2\2\2\u1541\u153e\3\2\2\2\u1542\u1543"+
		"\3\2\2\2\u1543\u1541\3\2\2\2\u1543\u1544\3\2\2\2\u1544\u1545\3\2\2\2\u1545"+
		"\u1547\7\u0336\2\2\u1546\u1527\3\2\2\2\u1546\u1547\3\2\2\2\u1547\u154d"+
		"\3\2\2\2\u1548\u154b\7\u0301\2\2\u1549\u154c\5\u03b6\u01dc\2\u154a\u154c"+
		"\7\u01d4\2\2\u154b\u1549\3\2\2\2\u154b\u154a\3\2\2\2\u154c\u154e\3\2\2"+
		"\2\u154d\u1548\3\2\2\2\u154d\u154e\3\2\2\2\u154e\u0199\3\2\2\2\u154f\u1550"+
		"\7I\2\2\u1550\u1551\7\u030d\2\2\u1551\u1552\7\u0093\2\2\u1552\u1572\5"+
		"\u03b6\u01dc\2\u1553\u1554\7\u017c\2\2\u1554\u156d\7\u0335\2\2\u1555\u1556"+
		"\7\u021e\2\2\u1556\u1557\7\u0323\2\2\u1557\u156e\t\65\2\2\u1558\u155a"+
		"\7\u0337\2\2\u1559\u1558\3\2\2\2\u1559\u155a\3\2\2\2\u155a\u155b\3\2\2"+
		"\2\u155b\u155c\7\u02ae\2\2\u155c\u155d\7\u0323\2\2\u155d\u156e\7\u031b"+
		"\2\2\u155e\u1560\7\u0337\2\2\u155f\u155e\3\2\2\2\u155f\u1560\3\2\2\2\u1560"+
		"\u1561\3\2\2\2\u1561\u1562\7\u02ad\2\2\u1562\u1563\7\u0323\2\2\u1563\u156e"+
		"\7\u031b\2\2\u1564\u1565\7\u02af\2\2\u1565\u1566\7\u0323\2\2\u1566\u156e"+
		"\7\u031b\2\2\u1567\u1568\7\u0244\2\2\u1568\u1569\7\u0323\2\2\u1569\u156e"+
		"\7\u031b\2\2\u156a\u156b\7\u0211\2\2\u156b\u156c\7\u0323\2\2\u156c\u156e"+
		"\7\u031b\2\2\u156d\u1555\3\2\2\2\u156d\u1559\3\2\2\2\u156d\u155f\3\2\2"+
		"\2\u156d\u1564\3\2\2\2\u156d\u1567\3\2\2\2\u156d\u156a\3\2\2\2\u156e\u156f"+
		"\3\2\2\2\u156f\u156d\3\2\2\2\u156f\u1570\3\2\2\2\u1570\u1571\3\2\2\2\u1571"+
		"\u1573\7\u0336\2\2\u1572\u1553\3\2\2\2\u1572\u1573\3\2\2\2\u1573\u1581"+
		"\3\2\2\2\u1574\u1577\7\u0301\2\2\u1575\u1578\5\u03b6\u01dc\2\u1576\u1578"+
		"\7\u01d4\2\2\u1577\u1575\3\2\2\2\u1577\u1576\3\2\2\2\u1577\u1578\3\2\2"+
		"\2\u1578\u157f\3\2\2\2\u1579\u157b\7\u0337\2\2\u157a\u1579\3\2\2\2\u157a"+
		"\u157b\3\2\2\2\u157b\u157c\3\2\2\2\u157c\u157d\7|\2\2\u157d\u1580\5\u03b6"+
		"\u01dc\2\u157e\u1580\7\u01d4\2\2\u157f\u157a\3\2\2\2\u157f\u157e\3\2\2"+
		"\2\u157f\u1580\3\2\2\2\u1580\u1582\3\2\2\2\u1581\u1574\3\2\2\2\u1581\u1582"+
		"\3\2\2\2\u1582\u019b\3\2\2\2\u1583\u1584\7I\2\2\u1584\u1585\7\u030e\2"+
		"\2\u1585\u1586\7\u012e\2\2\u1586\u158a\7\u01b8\2\2\u1587\u1588\5\u03b6"+
		"\u01dc\2\u1588\u1589\7\u0330\2\2\u1589\u158b\3\2\2\2\u158a\u1587\3\2\2"+
		"\2\u158a\u158b\3\2\2\2\u158b\u158c\3\2\2\2\u158c\u158d\5\u03b6\u01dc\2"+
		"\u158d\u1591\7\20\2\2\u158e\u1592\7\u031f\2\2\u158f\u1592\5\u03b6\u01dc"+
		"\2\u1590\u1592\7\u031a\2\2\u1591\u158e\3\2\2\2\u1591\u158f\3\2\2\2\u1591"+
		"\u1590\3\2\2\2\u1592\u019d\3\2\2\2\u1593\u1594\7I\2\2\u1594\u1597\7\u0294"+
		"\2\2\u1595\u1598\5\u0380\u01c1\2\u1596\u1598\5\u03b6\u01dc\2\u1597\u1595"+
		"\3\2\2\2\u1597\u1596\3\2\2\2\u1598\u159a\3\2\2\2\u1599\u159b\5\u01a0\u00d1"+
		"\2\u159a\u1599\3\2\2\2\u159a\u159b\3\2\2\2\u159b\u159f\3\2\2\2\u159c\u159d"+
		"\7\u00e5\2\2\u159d\u15a0\5\u03b6\u01dc\2\u159e\u15a0\7Z\2\2\u159f\u159c"+
		"\3\2\2\2\u159f\u159e\3\2\2\2\u159f\u15a0\3\2\2\2\u15a0\u019f\3\2\2\2\u15a1"+
		"\u15a8\7\u017c\2\2\u15a2\u15a3\7\u02de\2\2\u15a3\u15a4\7\u0323\2\2\u15a4"+
		"\u15a6\t\t\2\2\u15a5\u15a7\7\u0337\2\2\u15a6\u15a5\3\2\2\2\u15a6\u15a7"+
		"\3\2\2\2\u15a7\u15a9\3\2\2\2\u15a8\u15a2\3\2\2\2\u15a8\u15a9\3\2\2\2\u15a9"+
		"\u15b0\3\2\2\2\u15aa\u15ab\7\u02b5\2\2\u15ab\u15ac\7\u0323\2\2\u15ac\u15ae"+
		"\t\t\2\2\u15ad\u15af\7\u0337\2\2\u15ae\u15ad\3\2\2\2\u15ae\u15af\3\2\2"+
		"\2\u15af\u15b1\3\2\2\2\u15b0\u15aa\3\2\2\2\u15b0\u15b1\3\2\2\2\u15b1\u15df"+
		"\3\2\2\2\u15b2\u15b3\7\u0184\2\2\u15b3\u15d9\7\u0335\2\2\u15b4\u15b5\7"+
		"\u02de\2\2\u15b5\u15b6\7\u0323\2\2\u15b6\u15b8\t\t\2\2\u15b7\u15b9\7\u0337"+
		"\2\2\u15b8\u15b7\3\2\2\2\u15b8\u15b9\3\2\2\2\u15b9\u15bb\3\2\2\2\u15ba"+
		"\u15b4\3\2\2\2\u15ba\u15bb\3\2\2\2\u15bb\u15c2\3\2\2\2\u15bc\u15bd\7\u028f"+
		"\2\2\u15bd\u15be\7\u0323\2\2\u15be\u15c0\5\u0386\u01c4\2\u15bf\u15c1\7"+
		"\u0337\2\2\u15c0\u15bf\3\2\2\2\u15c0\u15c1\3\2\2\2\u15c1\u15c3\3\2\2\2"+
		"\u15c2\u15bc\3\2\2\2\u15c2\u15c3\3\2\2\2\u15c3\u15ca\3\2\2\2\u15c4\u15c5"+
		"\7\u0249\2\2\u15c5\u15c6\7\u0323\2\2\u15c6\u15c8\7\u031b\2\2\u15c7\u15c9"+
		"\7\u0337\2\2\u15c8\u15c7\3\2\2\2\u15c8\u15c9\3\2\2\2\u15c9\u15cb\3\2\2"+
		"\2\u15ca\u15c4\3\2\2\2\u15ca\u15cb\3\2\2\2\u15cb\u15d6\3\2\2\2\u15cc\u15cd"+
		"\7w\2\2\u15cd\u15d1\7\20\2\2\u15ce\u15d2\7\u02ca\2\2\u15cf\u15d2\7\u031f"+
		"\2\2\u15d0\u15d2\7\u027d\2\2\u15d1\u15ce\3\2\2\2\u15d1\u15cf\3\2\2\2\u15d1"+
		"\u15d0\3\2\2\2\u15d2\u15d4\3\2\2\2\u15d3\u15d5\7\u0337\2\2\u15d4\u15d3"+
		"\3\2\2\2\u15d4\u15d5\3\2\2\2\u15d5\u15d7\3\2\2\2\u15d6\u15cc\3\2\2\2\u15d6"+
		"\u15d7\3\2\2\2\u15d7\u15da\3\2\2\2\u15d8\u15da\7h\2\2\u15d9\u15ba\3\2"+
		"\2\2\u15d9\u15d8\3\2\2\2\u15da\u15db\3\2\2\2\u15db\u15dd\7\u0336\2\2\u15dc"+
		"\u15de\7\u0337\2\2\u15dd\u15dc\3\2\2\2\u15dd\u15de\3\2\2\2\u15de\u15e0"+
		"\3\2\2\2\u15df\u15b2\3\2\2\2\u15df\u15e0\3\2\2\2\u15e0\u15e8\3\2\2\2\u15e1"+
		"\u15e2\7\u0284\2\2\u15e2\u15e3\7\u0335\2\2\u15e3\u15e4\7\u02de\2\2\u15e4"+
		"\u15e5\7\u0323\2\2\u15e5\u15e6\t\t\2\2\u15e6\u15e7\3\2\2\2\u15e7\u15e9"+
		"\7\u0336\2\2\u15e8\u15e1\3\2\2\2\u15e8\u15e9\3\2\2\2\u15e9\u01a1\3\2\2"+
		"\2\u15ea\u15eb\7\n\2\2\u15eb\u15ee\7\u0294\2\2\u15ec\u15ef\5\u0380\u01c1"+
		"\2\u15ed\u15ef\5\u03b6\u01dc\2\u15ee\u15ec\3\2\2\2\u15ee\u15ed\3\2\2\2"+
		"\u15ef\u15f2\3\2\2\2\u15f0\u15f3\5\u01a0\u00d1\2\u15f1\u15f3\5\u01a4\u00d3"+
		"\2\u15f2\u15f0\3\2\2\2\u15f2\u15f1\3\2\2\2\u15f3\u01a3\3\2\2\2\u15f4\u15fa"+
		"\7\u02a1\2\2\u15f5\u15f6\7\u017c\2\2\u15f6\u15f7\7\u0335\2\2\u15f7\u15f8"+
		"\5\u01a6\u00d4\2\u15f8\u15f9\7\u0336\2\2\u15f9\u15fb\3\2\2\2\u15fa\u15f5"+
		"\3\2\2\2\u15fa\u15fb\3\2\2\2\u15fb\u160a\3\2\2\2\u15fc\u1601\7\u02aa\2"+
		"\2\u15fd\u15fe\7\u017c\2\2\u15fe\u15ff\7\u0237\2\2\u15ff\u1600\7\u0323"+
		"\2\2\u1600\u1602\t\t\2\2\u1601\u15fd\3\2\2\2\u1601\u1602\3\2\2\2\u1602"+
		"\u160a\3\2\2\2\u1603\u1604\7\u025c\2\2\u1604\u1607\7\u015d\2\2\u1605\u1608"+
		"\5\u03b6\u01dc\2\u1606\u1608\7Z\2\2\u1607\u1605\3\2\2\2\u1607\u1606\3"+
		"\2\2\2\u1608\u160a\3\2\2\2\u1609\u15f4\3\2\2\2\u1609\u15fc\3\2\2\2\u1609"+
		"\u1603\3\2\2\2\u160a\u01a5\3\2\2\2\u160b\u160c\7\u024b\2\2\u160c\u160d"+
		"\7\u0323\2\2\u160d\u160e\7\u031b\2\2\u160e\u01a7\3\2\2\2\u160f\u1610\7"+
		"I\2\2\u1610\u1611\7D\2\2\u1611\u1614\5\u03a0\u01d1\2\u1612\u1613\7\24"+
		"\2\2\u1613\u1615\5\u03b6\u01dc\2\u1614\u1612\3\2\2\2\u1614\u1615\3\2\2"+
		"\2\u1615\u1616\3\2\2\2\u1616\u1621\7\u0335\2\2\u1617\u161a\5\u03b6\u01dc"+
		"\2\u1618\u161a\7Z\2\2\u1619\u1617\3\2\2\2\u1619\u1618\3\2\2\2\u161a\u161b"+
		"\3\2\2\2\u161b\u161c\7\u02cd\2\2\u161c\u161d\7&\2\2\u161d\u161f\t\66\2"+
		"\2\u161e\u1620\7\u0337\2\2\u161f\u161e\3\2\2\2\u161f\u1620\3\2\2\2\u1620"+
		"\u1622\3\2\2\2\u1621\u1619\3\2\2\2\u1622\u1623\3\2\2\2\u1623\u1621\3\2"+
		"\2\2\u1623\u1624\3\2\2\2\u1624\u1625\3\2\2\2\u1625\u1626\7\u0336\2\2\u1626"+
		"\u01a9\3\2\2\2\u1627\u162e\5\u039c\u01cf\2\u1628\u162e\5\u039e\u01d0\2"+
		"\u1629\u162e\5\u03a4\u01d3\2\u162a\u162e\5\u03a8\u01d5\2\u162b\u162e\5"+
		"\u03ac\u01d7\2\u162c\u162e\5\u03a6\u01d4\2\u162d\u1627\3\2\2\2\u162d\u1628"+
		"\3\2\2\2\u162d\u1629\3\2\2\2\u162d\u162a\3\2\2\2\u162d\u162b\3\2\2\2\u162d"+
		"\u162c\3\2\2\2\u162e\u01ab\3\2\2\2\u162f\u1630\7I\2\2\u1630\u1631\7\u0251"+
		"\2\2\u1631\u1632\7\u02fb\2\2\u1632\u1635\5\u03b6\u01dc\2\u1633\u1634\7"+
		"\24\2\2\u1634\u1636\5\u03b6\u01dc\2\u1635\u1633\3\2\2\2\u1635\u1636\3"+
		"\2\2\2\u1636\u1637\3\2\2\2\u1637\u1638\7\u0303\2\2\u1638\u1641\7\u0323"+
		"\2\2\u1639\u1642\7\u00d5\2\2\u163a\u1642\7\u01ea\2\2\u163b\u1642\7\u030a"+
		"\2\2\u163c\u163d\7\u0302\2\2\u163d\u163e\7\u017c\2\2\u163e\u163f\7\u012e"+
		"\2\2\u163f\u1640\7\u01b8\2\2\u1640\u1642\5\u03b6\u01dc\2\u1641\u1639\3"+
		"\2\2\2\u1641\u163a\3\2\2\2\u1641\u163b\3\2\2\2\u1641\u163c\3\2\2\2\u1642"+
		"\u01ad\3\2\2\2\u1643\u1645\5\u02da\u016e\2\u1644\u1643\3\2\2\2\u1644\u1645"+
		"\3\2\2\2\u1645\u1646\3\2\2\2\u1646\u164e\7\u00c9\2\2\u1647\u1648\7\u015e"+
		"\2\2\u1648\u1649\7\u0335\2\2\u1649\u164a\5\u02cc\u0167\2\u164a\u164c\7"+
		"\u0336\2\2\u164b\u164d\7\u00f5\2\2\u164c\u164b\3\2\2\2\u164c\u164d\3\2"+
		"\2\2\u164d\u164f\3\2\2\2\u164e\u1647\3\2\2\2\u164e\u164f\3\2\2\2\u164f"+
		"\u1651\3\2\2\2\u1650\u1652\7\u00a5\2\2\u1651\u1650\3\2\2\2\u1651\u1652"+
		"\3\2\2\2\u1652\u1653\3\2\2\2\u1653\u1655\5\u0388\u01c5\2\u1654\u1656\5"+
		"\u034e\u01a8\2\u1655\u1654\3\2\2\2\u1655\u1656\3\2\2\2\u1656\u1658\3\2"+
		"\2\2\u1657\u1659\5\u0348\u01a5\2\u1658\u1657\3\2\2\2\u1658\u1659\3\2\2"+
		"\2\u1659\u165a\3\2\2\2\u165a\u165b\7\u0301\2\2\u165b\u165c\5\u0314\u018b"+
		"\2\u165c\u165d\7\u00e5\2\2\u165d\u1668\5\u02e2\u0172\2\u165e\u165f\7\u0178"+
		"\2\2\u165f\u1662\7\u00bc\2\2\u1660\u1661\7\13\2\2\u1661\u1663\5\u02e2"+
		"\u0172\2\u1662\u1660\3\2\2\2\u1662\u1663\3\2\2\2\u1663\u1664\3\2\2\2\u1664"+
		"\u1665\7\u015c\2\2\u1665\u1667\5\u01b0\u00d9\2\u1666\u165e\3\2\2\2\u1667"+
		"\u166a\3\2\2\2\u1668\u1666\3\2\2\2\u1668\u1669\3\2\2\2\u1669\u1678\3\2"+
		"\2\2\u166a\u1668\3\2\2\2\u166b\u166c\7\u0178\2\2\u166c\u166d\7\u00dc\2"+
		"\2\u166d\u1670\7\u00bc\2\2\u166e\u166f\7&\2\2\u166f\u1671\7\u0159\2\2"+
		"\u1670\u166e\3\2\2\2\u1670\u1671\3\2\2\2\u1671\u1674\3\2\2\2\u1672\u1673"+
		"\7\13\2\2\u1673\u1675\5\u02e2\u0172\2\u1674\u1672\3\2\2\2\u1674\u1675"+
		"\3\2\2\2\u1675\u1676\3\2\2\2\u1676\u1677\7\u015c\2\2\u1677\u1679\5\u01b2"+
		"\u00da\2\u1678\u166b\3\2\2\2\u1678\u1679\3\2\2\2\u1679\u1687\3\2\2\2\u167a"+
		"\u167b\7\u0178\2\2\u167b\u167c\7\u00dc\2\2\u167c\u167d\7\u00bc\2\2\u167d"+
		"\u167e\7&\2\2\u167e\u1681\7\u0144\2\2\u167f\u1680\7\13\2\2\u1680\u1682"+
		"\5\u02e2\u0172\2\u1681\u167f\3\2\2\2\u1681\u1682\3\2\2\2\u1682\u1683\3"+
		"\2\2\2\u1683\u1684\7\u015c\2\2\u1684\u1686\5\u01b0\u00d9\2\u1685\u167a"+
		"\3\2\2\2\u1686\u1689\3\2\2\2\u1687\u1685\3\2\2\2\u1687\u1688\3\2\2\2\u1688"+
		"\u168b\3\2\2\2\u1689\u1687\3\2\2\2\u168a\u168c\5\u01c4\u00e3\2\u168b\u168a"+
		"\3\2\2\2\u168b\u168c\3\2\2\2\u168c\u168e\3\2\2\2\u168d\u168f\5\u0300\u0181"+
		"\2\u168e\u168d\3\2\2\2\u168e\u168f\3\2\2\2\u168f\u1690\3\2\2\2\u1690\u1691"+
		"\7\u0338\2\2\u1691\u01af\3\2\2\2\u1692\u1693\7\u016c\2\2\u1693\u1694\7"+
		"\u013d\2\2\u1694\u1699\5\u02de\u0170\2\u1695\u1696\7\u0337\2\2\u1696\u1698"+
		"\5\u02de\u0170\2\u1697\u1695\3\2\2\2\u1698\u169b\3\2\2\2\u1699\u1697\3"+
		"\2\2\2\u1699\u169a\3\2\2\2\u169a\u169e\3\2\2\2\u169b\u1699\3\2\2\2\u169c"+
		"\u169e\7]\2\2\u169d\u1692\3\2\2\2\u169d\u169c\3\2\2\2\u169e\u01b1\3\2"+
		"\2\2\u169f\u16a4\7\u00a2\2\2\u16a0\u16a1\7\u0335\2\2\u16a1\u16a2\5\u038e"+
		"\u01c8\2\u16a2\u16a3\7\u0336\2\2\u16a3\u16a5\3\2\2\2\u16a4\u16a0\3\2\2"+
		"\2\u16a4\u16a5\3\2\2\2\u16a5\u16a9\3\2\2\2\u16a6\u16aa\5\u0358\u01ad\2"+
		"\u16a7\u16a8\7Z\2\2\u16a8\u16aa\7\u0172\2\2\u16a9\u16a6\3\2\2\2\u16a9"+
		"\u16a7\3\2\2\2\u16aa\u01b3\3\2\2\2\u16ab\u16ad\5\u02da\u016e\2\u16ac\u16ab"+
		"\3\2\2\2\u16ac\u16ad\3\2\2\2\u16ad\u16ae\3\2\2\2\u16ae\u16b8\7]\2\2\u16af"+
		"\u16b0\7\u015e\2\2\u16b0\u16b1\7\u0335\2\2\u16b1\u16b2\5\u02cc\u0167\2"+
		"\u16b2\u16b4\7\u0336\2\2\u16b3\u16b5\7\u00f5\2\2\u16b4\u16b3\3\2\2\2\u16b4"+
		"\u16b5\3\2\2\2\u16b5\u16b9\3\2\2\2\u16b6\u16b7\7\u015e\2\2\u16b7\u16b9"+
		"\7\u031b\2\2\u16b8\u16af\3\2\2\2\u16b8\u16b6\3\2\2\2\u16b8\u16b9\3\2\2"+
		"\2\u16b9\u16bb\3\2\2\2\u16ba\u16bc\7\u008c\2\2\u16bb\u16ba\3\2\2\2\u16bb"+
		"\u16bc\3\2\2\2\u16bc\u16bd\3\2\2\2\u16bd\u16bf\5\u01b6\u00dc\2\u16be\u16c0"+
		"\5\u034e\u01a8\2\u16bf\u16be\3\2\2\2\u16bf\u16c0\3\2\2\2\u16c0\u16c2\3"+
		"\2\2\2\u16c1\u16c3\5\u01c4\u00e3\2\u16c2\u16c1\3\2\2\2\u16c2\u16c3\3\2"+
		"\2\2\u16c3\u16c6\3\2\2\2\u16c4\u16c5\7\u008c\2\2\u16c5\u16c7\5\u0314\u018b"+
		"\2\u16c6\u16c4\3\2\2\2\u16c6\u16c7\3\2\2\2\u16c7\u16d5\3\2\2\2\u16c8\u16d3"+
		"\7\u0179\2\2\u16c9\u16d4\5\u02e2\u0172\2\u16ca\u16cb\7K\2\2\u16cb\u16d1"+
		"\7\u00e1\2\2\u16cc\u16ce\7\u020f\2\2\u16cd\u16cc\3\2\2\2\u16cd\u16ce\3"+
		"\2\2\2\u16ce\u16cf\3\2\2\2\u16cf\u16d2\5\u0390\u01c9\2\u16d0\u16d2\7\u031a"+
		"\2\2\u16d1\u16cd\3\2\2\2\u16d1\u16d0\3\2\2\2\u16d2\u16d4\3\2\2\2\u16d3"+
		"\u16c9\3\2\2\2\u16d3\u16ca\3\2\2\2\u16d4\u16d6\3\2\2\2\u16d5\u16c8\3\2"+
		"\2\2\u16d5\u16d6\3\2\2\2\u16d6\u16d8\3\2\2\2\u16d7\u16d9\5\u02f8\u017d"+
		"\2\u16d8\u16d7\3\2\2\2\u16d8\u16d9\3\2\2\2\u16d9\u16db\3\2\2\2\u16da\u16dc"+
		"\5\u0300\u0181\2\u16db\u16da\3\2\2\2\u16db\u16dc\3\2\2\2\u16dc\u16de\3"+
		"\2\2\2\u16dd\u16df\7\u0338\2\2\u16de\u16dd\3\2\2\2\u16de\u16df\3\2\2\2"+
		"\u16df\u01b5\3\2\2\2\u16e0\u16e5\5\u0388\u01c5\2\u16e1\u16e5\5\u034a\u01a6"+
		"\2\u16e2\u16e5\5\u025c\u012f\2\u16e3\u16e5\7\u031a\2\2\u16e4\u16e0\3\2"+
		"\2\2\u16e4\u16e1\3\2\2\2\u16e4\u16e2\3\2\2\2\u16e4\u16e3\3\2\2\2\u16e5"+
		"\u01b7\3\2\2\2\u16e6\u16e8\5\u02da\u016e\2\u16e7\u16e6\3\2\2\2\u16e7\u16e8"+
		"\3\2\2\2\u16e8\u16e9\3\2\2\2\u16e9\u16f1\7\u00a2\2\2\u16ea\u16eb\7\u015e"+
		"\2\2\u16eb\u16ec\7\u0335\2\2\u16ec\u16ed\5\u02cc\u0167\2\u16ed\u16ef\7"+
		"\u0336\2\2\u16ee\u16f0\7\u00f5\2\2\u16ef\u16ee\3\2\2\2\u16ef\u16f0\3\2"+
		"\2\2\u16f0\u16f2\3\2\2\2\u16f1\u16ea\3\2\2\2\u16f1\u16f2\3\2\2\2\u16f2"+
		"\u16f4\3\2\2\2\u16f3\u16f5\7\u00a5\2\2\u16f4\u16f3\3\2\2\2\u16f4\u16f5"+
		"\3\2\2\2\u16f5\u16f8\3\2\2\2\u16f6\u16f9\5\u0388\u01c5\2\u16f7\u16f9\5"+
		"\u025c\u012f\2\u16f8\u16f6\3\2\2\2\u16f8\u16f7\3\2\2\2\u16f9\u16fb\3\2"+
		"\2\2\u16fa\u16fc\5\u034e\u01a8\2\u16fb\u16fa\3\2\2\2\u16fb\u16fc\3\2\2"+
		"\2\u16fc\u1701\3\2\2\2\u16fd\u16fe\7\u0335\2\2\u16fe\u16ff\5\u038e\u01c8"+
		"\2\u16ff\u1700\7\u0336\2\2\u1700\u1702\3\2\2\2\u1701\u16fd\3\2\2\2\u1701"+
		"\u1702\3\2\2\2\u1702\u1704\3\2\2\2\u1703\u1705\5\u01c4\u00e3\2\u1704\u1703"+
		"\3\2\2\2\u1704\u1705\3\2\2\2\u1705\u1706\3\2\2\2\u1706\u1708\5\u01ba\u00de"+
		"\2\u1707\u1709\5\u02f8\u017d\2\u1708\u1707\3\2\2\2\u1708\u1709\3\2\2\2"+
		"\u1709\u170b\3\2\2\2\u170a\u170c\5\u0300\u0181\2\u170b\u170a\3\2\2\2\u170b"+
		"\u170c\3\2\2\2\u170c\u170e\3\2\2\2\u170d\u170f\7\u0338\2\2\u170e\u170d"+
		"\3\2\2\2\u170e\u170f\3\2\2\2\u170f\u01b9\3\2\2\2\u1710\u1716\5\u0358\u01ad"+
		"\2\u1711\u1716\5\u0332\u019a\2\u1712\u1716\5\u0270\u0139\2\u1713\u1714"+
		"\7Z\2\2\u1714\u1716\7\u0172\2\2\u1715\u1710\3\2\2\2\u1715\u1711\3\2\2"+
		"\2\u1715\u1712\3\2\2\2\u1715\u1713\3\2\2\2\u1716\u01bb\3\2\2\2\u1717\u1719"+
		"\7\u0335\2\2\u1718\u1717\3\2\2\2\u1718\u1719\3\2\2\2\u1719\u171a\3\2\2"+
		"\2\u171a\u171f\7\u02a2\2\2\u171b\u1720\7\6\2\2\u171c\u1720\7c\2\2\u171d"+
		"\u1720\5\u02f0\u0179\2\u171e\u1720\7\u033a\2\2\u171f\u171b\3\2\2\2\u171f"+
		"\u171c\3\2\2\2\u171f\u171d\3\2\2\2\u171f\u171e\3\2\2\2\u1720\u1729\3\2"+
		"\2\2\u1721\u1722\7\u031a\2\2\u1722\u1723\7\u0323\2\2\u1723\u1725\5\u02cc"+
		"\u0167\2\u1724\u1726\7\u0337\2\2\u1725\u1724\3\2\2\2\u1725\u1726\3\2\2"+
		"\2\u1726\u1728\3\2\2\2\u1727\u1721\3\2\2\2\u1728\u172b\3\2\2\2\u1729\u1727"+
		"\3\2\2\2\u1729\u172a\3\2\2\2\u172a\u172c\3\2\2\2\u172b\u1729\3\2\2\2\u172c"+
		"\u172d\7\u008c\2\2\u172d\u1733\5\u0380\u01c1\2\u172e\u172f\7\u00a5\2\2"+
		"\u172f\u1730\5\u03b6\u01dc\2\u1730\u1731\7\u0179\2\2\u1731\u1732\5\u02e2"+
		"\u0172\2\u1732\u1734\3\2\2\2\u1733\u172e\3\2\2\2\u1733\u1734\3\2\2\2\u1734"+
		"\u1736\3\2\2\2\u1735\u1737\7\u0336\2\2\u1736\u1735\3\2\2\2\u1736\u1737"+
		"\3\2\2\2\u1737\u01bd\3\2\2\2\u1738\u173a\5\u02da\u016e\2\u1739\u1738\3"+
		"\2\2\2\u1739\u173a\3\2\2\2\u173a\u173b\3\2\2\2\u173b\u173d\5\u02ea\u0176"+
		"\2\u173c\u173e\5\u02f6\u017c\2\u173d\u173c\3\2\2\2\u173d\u173e\3\2\2\2"+
		"\u173e\u1740\3\2\2\2\u173f\u1741\5\u02f8\u017d\2\u1740\u173f\3\2\2\2\u1740"+
		"\u1741\3\2\2\2\u1741\u1743\3\2\2\2\u1742\u1744\5\u0300\u0181\2\u1743\u1742"+
		"\3\2\2\2\u1743\u1744\3\2\2\2\u1744\u1746\3\2\2\2\u1745\u1747\7\u0338\2"+
		"\2\u1746\u1745\3\2\2\2\u1746\u1747\3\2\2\2\u1747\u01bf\3\2\2\2\u1748\u174b"+
		"\7\u031a\2\2\u1749\u174b\5\u03b2\u01da\2\u174a\u1748\3\2\2\2\u174a\u1749"+
		"\3\2\2\2\u174b\u01c1\3\2\2\2\u174c\u174e\5\u02da\u016e\2\u174d\u174c\3"+
		"\2\2\2\u174d\u174e\3\2\2\2\u174e\u174f\3\2\2\2\u174f\u1757\7\u016c\2\2"+
		"\u1750\u1751\7\u015e\2\2\u1751\u1752\7\u0335\2\2\u1752\u1753\5\u02cc\u0167"+
		"\2\u1753\u1755\7\u0336\2\2\u1754\u1756\7\u00f5\2\2\u1755\u1754\3\2\2\2"+
		"\u1755\u1756\3\2\2\2\u1756\u1758\3\2\2\2\u1757\u1750\3\2\2\2\u1757\u1758"+
		"\3\2\2\2\u1758\u175b\3\2\2\2\u1759\u175c\5\u0388\u01c5\2\u175a\u175c\5"+
		"\u025c\u012f\2\u175b\u1759\3\2\2\2\u175b\u175a\3\2\2\2\u175c\u175e\3\2"+
		"\2\2\u175d\u175f\5\u034c\u01a7\2\u175e\u175d\3\2\2\2\u175e\u175f\3\2\2"+
		"\2\u175f\u1760\3\2\2\2\u1760\u1761\7\u013d\2\2\u1761\u1766\5\u02de\u0170"+
		"\2\u1762\u1763\7\u0337\2\2\u1763\u1765\5\u02de\u0170\2\u1764\u1762\3\2"+
		"\2\2\u1765\u1768\3\2\2\2\u1766\u1764\3\2\2\2\u1766\u1767\3\2\2\2\u1767"+
		"\u176a\3\2\2\2\u1768\u1766\3\2\2\2\u1769\u176b\5\u01c4\u00e3\2\u176a\u1769"+
		"\3\2\2\2\u176a\u176b\3\2\2\2\u176b\u176e\3\2\2\2\u176c\u176d\7\u008c\2"+
		"\2\u176d\u176f\5\u0314\u018b\2\u176e\u176c\3\2\2\2\u176e\u176f\3\2\2\2"+
		"\u176f\u177d\3\2\2\2\u1770\u177b\7\u0179\2\2\u1771\u177c\5\u02e0\u0171"+
		"\2\u1772\u1773\7K\2\2\u1773\u1779\7\u00e1\2\2\u1774\u1776\7\u020f\2\2"+
		"\u1775\u1774\3\2\2\2\u1775\u1776\3\2\2\2\u1776\u1777\3\2\2\2\u1777\u177a"+
		"\5\u0390\u01c9\2\u1778\u177a\7\u031a\2\2\u1779\u1775\3\2\2\2\u1779\u1778"+
		"\3\2\2\2\u177a\u177c\3\2\2\2\u177b\u1771\3\2\2\2\u177b\u1772\3\2\2\2\u177c"+
		"\u177e\3\2\2\2\u177d\u1770\3\2\2\2\u177d\u177e\3\2\2\2\u177e\u1780\3\2"+
		"\2\2\u177f\u1781\5\u02f8\u017d\2\u1780\u177f\3\2\2\2\u1780\u1781\3\2\2"+
		"\2\u1781\u1783\3\2\2\2\u1782\u1784\5\u0300\u0181\2\u1783\u1782\3\2\2\2"+
		"\u1783\u1784\3\2\2\2\u1784\u1786\3\2\2\2\u1785\u1787\7\u0338\2\2\u1786"+
		"\u1785\3\2\2\2\u1786\u1787\3\2\2\2\u1787\u01c3\3\2\2\2\u1788\u1789\7\u027c"+
		"\2\2\u1789\u178e\5\u01c6\u00e4\2\u178a\u178b\7\u0337\2\2\u178b\u178d\5"+
		"\u01c6\u00e4\2\u178c\u178a\3\2\2\2\u178d\u1790\3\2\2\2\u178e\u178c\3\2"+
		"\2\2\u178e\u178f\3\2\2\2\u178f\u179c\3\2\2\2\u1790\u178e\3\2\2\2\u1791"+
		"\u1794\7\u00a5\2\2\u1792\u1795\7\u031a\2\2\u1793\u1795\5\u0382\u01c2\2"+
		"\u1794\u1792\3\2\2\2\u1794\u1793\3\2\2\2\u1795\u179a\3\2\2\2\u1796\u1797"+
		"\7\u0335\2\2\u1797\u1798\5\u038e\u01c8\2\u1798\u1799\7\u0336\2\2\u1799"+
		"\u179b\3\2\2\2\u179a\u1796\3\2\2\2\u179a\u179b\3\2\2\2\u179b\u179d\3\2"+
		"\2\2\u179c\u1791\3\2\2\2\u179c\u179d\3\2\2\2\u179d\u01c5\3\2\2\2\u179e"+
		"\u17a1\5\u01c8\u00e5\2\u179f\u17a1\5\u02cc\u0167\2\u17a0\u179e\3\2\2\2"+
		"\u17a0\u179f\3\2\2\2\u17a1\u17a3\3\2\2\2\u17a2\u17a4\5\u0346\u01a4\2\u17a3"+
		"\u17a2\3\2\2\2\u17a3\u17a4\3\2\2\2\u17a4\u01c7\3\2\2\2\u17a5\u17a9\7\u01d9"+
		"\2\2\u17a6\u17a9\7\u0224\2\2\u17a7\u17a9\5\u0382\u01c2\2\u17a8\u17a5\3"+
		"\2\2\2\u17a8\u17a6\3\2\2\2\u17a8\u17a7\3\2\2\2\u17a9\u17aa\3\2\2\2\u17aa"+
		"\u17ad\7\u0330\2\2\u17ab\u17ae\7\u033a\2\2\u17ac\u17ae\5\u03b6\u01dc\2"+
		"\u17ad\u17ab\3\2\2\2\u17ad\u17ac\3\2\2\2\u17ae\u17b1\3\2\2\2\u17af\u17b1"+
		"\7\u0313\2\2\u17b0\u17a8\3\2\2\2\u17b0\u17af\3\2\2\2\u17b1\u01c9\3\2\2"+
		"\2\u17b2\u17b3\7I\2\2\u17b3\u17b4\7U\2\2\u17b4\u17b8\5\u03b6\u01dc\2\u17b5"+
		"\u17b6\7>\2\2\u17b6\u17b7\7\u0323\2\2\u17b7\u17b9\t\67\2\2\u17b8\u17b5"+
		"\3\2\2\2\u17b8\u17b9\3\2\2\2\u17b9\u17c6\3\2\2\2\u17ba\u17bc\7\u00e5\2"+
		"\2\u17bb\u17bd\7\u0100\2\2\u17bc\u17bb\3\2\2\2\u17bc\u17bd\3\2\2\2\u17bd"+
		"\u17be\3\2\2\2\u17be\u17c3\5\u0374\u01bb\2\u17bf\u17c0\7\u0337\2\2\u17c0"+
		"\u17c2\5\u0374\u01bb\2\u17c1\u17bf\3\2\2\2\u17c2\u17c5\3\2\2\2\u17c3\u17c1"+
		"\3\2\2\2\u17c3\u17c4\3\2\2\2\u17c4\u17c7\3\2\2\2\u17c5\u17c3\3\2\2\2\u17c6"+
		"\u17ba\3\2\2\2\u17c6\u17c7\3\2\2\2\u17c7\u17d2\3\2\2\2\u17c8\u17c9\7\u00bb"+
		"\2\2\u17c9\u17ca\7\u00e5\2\2\u17ca\u17cf\5\u0374\u01bb\2\u17cb\u17cc\7"+
		"\u0337\2\2\u17cc\u17ce\5\u0374\u01bb\2\u17cd\u17cb\3\2\2\2\u17ce\u17d1"+
		"\3\2\2\2\u17cf\u17cd\3\2\2\2\u17cf\u17d0\3\2\2\2\u17d0\u17d3\3\2\2\2\u17d1"+
		"\u17cf\3\2\2\2\u17d2\u17c8\3\2\2\2\u17d2\u17d3\3\2\2\2\u17d3\u17d6\3\2"+
		"\2\2\u17d4\u17d5\7\67\2\2\u17d5\u17d7\5\u03b6\u01dc\2\u17d6\u17d4\3\2"+
		"\2\2\u17d6\u17d7\3\2\2\2\u17d7\u17e1\3\2\2\2\u17d8\u17d9\7\u017c\2\2\u17d9"+
		"\u17de\5\u0370\u01b9\2\u17da\u17db\7\u0337\2\2\u17db\u17dd\5\u0370\u01b9"+
		"\2\u17dc\u17da\3\2\2\2\u17dd\u17e0\3\2\2\2\u17de\u17dc\3\2\2\2\u17de\u17df"+
		"\3\2\2\2\u17df\u17e2\3\2\2\2\u17e0\u17de\3\2\2\2\u17e1\u17d8\3\2\2\2\u17e1"+
		"\u17e2\3\2\2\2\u17e2\u01cb\3\2\2\2\u17e3\u17e5\7I\2\2\u17e4\u17e6\7\u0168"+
		"\2\2\u17e5\u17e4\3\2\2\2\u17e5\u17e6\3\2\2\2\u17e6\u17e8\3\2\2\2\u17e7"+
		"\u17e9\5\u0394\u01cb\2\u17e8\u17e7\3\2\2\2\u17e8\u17e9\3\2\2\2\u17e9\u17ea"+
		"\3\2\2\2\u17ea\u17eb\7\u009e\2\2\u17eb\u17ec\5\u03b6\u01dc\2\u17ec\u17ed"+
		"\7\u00e5\2\2\u17ed\u17ee\5\u032c\u0197\2\u17ee\u17ef\7\u0335\2\2\u17ef"+
		"\u17f0\5\u038c\u01c7\2\u17f0\u17f6\7\u0336\2\2\u17f1\u17f2\7\u009c\2\2"+
		"\u17f2\u17f3\7\u0335\2\2\u17f3\u17f4\5\u038e\u01c8\2\u17f4\u17f5\7\u0336"+
		"\2\2\u17f5\u17f7\3\2\2\2\u17f6\u17f1\3\2\2\2\u17f6\u17f7\3\2\2\2\u17f7"+
		"\u17fa\3\2\2\2\u17f8\u17f9\7\u0179\2\2\u17f9\u17fb\5\u02e2\u0172\2\u17fa"+
		"\u17f8\3\2\2\2\u17fa\u17fb\3\2\2\2\u17fb\u17fd\3\2\2\2\u17fc\u17fe\5\u02bc"+
		"\u015f\2\u17fd\u17fc\3\2\2\2\u17fd\u17fe\3\2\2\2\u17fe\u1801\3\2\2\2\u17ff"+
		"\u1800\7\u00e5\2\2\u1800\u1802\5\u03b6\u01dc\2\u1801\u17ff\3\2\2\2\u1801"+
		"\u1802\3\2\2\2\u1802\u1804\3\2\2\2\u1803\u1805\7\u0338\2\2\u1804\u1803"+
		"\3\2";
	private static final String _serializedATNSegment3 =
		"\2\2\u1804\u1805\3\2\2\2\u1805\u01cd\3\2\2\2\u1806\u1809\7I\2\2\u1807"+
		"\u1808\7\u00ed\2\2\u1808\u180a\7\n\2\2\u1809\u1807\3\2\2\2\u1809\u180a"+
		"\3\2\2\2\u180a\u180d\3\2\2\2\u180b\u180d\7\n\2\2\u180c\u1806\3\2\2\2\u180c"+
		"\u180b\3\2\2\2\u180d\u180e\3\2\2\2\u180e\u180f\t8\2\2\u180f\u1812\5\u0386"+
		"\u01c4\2\u1810\u1811\7\u0338\2\2\u1811\u1813\7\u031b\2\2\u1812\u1810\3"+
		"\2\2\2\u1812\u1813\3\2\2\2\u1813\u1822\3\2\2\2\u1814\u1816\7\u0335\2\2"+
		"\u1815\u1814\3\2\2\2\u1815\u1816\3\2\2\2\u1816\u1817\3\2\2\2\u1817\u181c"+
		"\5\u01e4\u00f3\2\u1818\u1819\7\u0337\2\2\u1819\u181b\5\u01e4\u00f3\2\u181a"+
		"\u1818\3\2\2\2\u181b\u181e\3\2\2\2\u181c\u181a\3\2\2\2\u181c\u181d\3\2"+
		"\2\2\u181d\u1820\3\2\2\2\u181e\u181c\3\2\2\2\u181f\u1821\7\u0336\2\2\u1820"+
		"\u181f\3\2\2\2\u1820\u1821\3\2\2\2\u1821\u1823\3\2\2\2\u1822\u1815\3\2"+
		"\2\2\u1822\u1823\3\2\2\2\u1823\u182d\3\2\2\2\u1824\u1825\7\u017c\2\2\u1825"+
		"\u182a\5\u01e6\u00f4\2\u1826\u1827\7\u0337\2\2\u1827\u1829\5\u01e6\u00f4"+
		"\2\u1828\u1826\3\2\2\2\u1829\u182c\3\2\2\2\u182a\u1828\3\2\2\2\u182a\u182b"+
		"\3\2\2\2\u182b\u182e\3\2\2\2\u182c\u182a\3\2\2\2\u182d\u1824\3\2\2\2\u182d"+
		"\u182e\3\2\2\2\u182e\u1831\3\2\2\2\u182f\u1830\7\u0086\2\2\u1830\u1832"+
		"\7\u0112\2\2\u1831\u182f\3\2\2\2\u1831\u1832\3\2\2\2\u1832\u1833\3\2\2"+
		"\2\u1833\u1834\7\20\2\2\u1834\u1835\5\6\4\2\u1835\u01cf\3\2\2\2\u1836"+
		"\u1839\5\u01d2\u00ea\2\u1837\u1839\5\u01d8\u00ed\2\u1838\u1836\3\2\2\2"+
		"\u1838\u1837\3\2\2\2\u1839\u01d1\3\2\2\2\u183a\u183d\7I\2\2\u183b\u183c"+
		"\7\u00ed\2\2\u183c\u183e\7\n\2\2\u183d\u183b\3\2\2\2\u183d\u183e\3\2\2"+
		"\2\u183e\u1841\3\2\2\2\u183f\u1841\7\n\2\2\u1840\u183a\3\2\2\2\u1840\u183f"+
		"\3\2\2\2\u1841\u1842\3\2\2\2\u1842\u1843\7\u0163\2\2\u1843\u1844\5\u0384"+
		"\u01c3\2\u1844\u1845\7\u00e5\2\2\u1845\u184f\5\u0382\u01c2\2\u1846\u1847"+
		"\7\u017c\2\2\u1847\u184c\5\u01d4\u00eb\2\u1848\u1849\7\u0337\2\2\u1849"+
		"\u184b\5\u01d4\u00eb\2\u184a\u1848\3\2\2\2\u184b\u184e\3\2\2\2\u184c\u184a"+
		"\3\2\2\2\u184c\u184d\3\2\2\2\u184d\u1850\3\2\2\2\u184e\u184c\3\2\2\2\u184f"+
		"\u1846\3\2\2\2\u184f\u1850\3\2\2\2\u1850\u1855\3\2\2\2\u1851\u1856\7\u0086"+
		"\2\2\u1852\u1856\7\u018b\2\2\u1853\u1854\7\u00a3\2\2\u1854\u1856\7\u00e1"+
		"\2\2\u1855\u1851\3\2\2\2\u1855\u1852\3\2\2\2\u1855\u1853\3\2\2\2\u1856"+
		"\u1857\3\2\2\2\u1857\u185c\5\u01d6\u00ec\2\u1858\u1859\7\u0337\2\2\u1859"+
		"\u185b\5\u01d6\u00ec\2\u185a\u1858\3\2\2\2\u185b\u185e\3\2\2\2\u185c\u185a"+
		"\3\2\2\2\u185c\u185d\3\2\2\2\u185d\u1861\3\2\2\2\u185e\u185c\3\2\2\2\u185f"+
		"\u1860\7\u017c\2\2\u1860\u1862\7\16\2\2\u1861\u185f\3\2\2\2\u1861\u1862"+
		"\3\2\2\2\u1862\u1866\3\2\2\2\u1863\u1864\7\u00dc\2\2\u1864\u1865\7\u0086"+
		"\2\2\u1865\u1867\7\u0112\2\2\u1866\u1863\3\2\2\2\u1866\u1867\3\2\2\2\u1867"+
		"\u1868\3\2\2\2\u1868\u1869\7\20\2\2\u1869\u186a\5\6\4\2\u186a\u01d3\3"+
		"\2\2\2\u186b\u186e\7\u01ee\2\2\u186c\u186e\5\u02a2\u0152\2\u186d\u186b"+
		"\3\2\2\2\u186d\u186c\3\2\2\2\u186e\u01d5\3\2\2\2\u186f\u1870\t9\2\2\u1870"+
		"\u01d7\3\2\2\2\u1871\u1874\7I\2\2\u1872\u1873\7\u00ed\2\2\u1873\u1875"+
		"\7\n\2\2\u1874\u1872\3\2\2\2\u1874\u1875\3\2\2\2\u1875\u1878\3\2\2\2\u1876"+
		"\u1878\7\n\2\2\u1877\u1871\3\2\2\2\u1877\u1876\3\2\2\2\u1878\u1879\3\2"+
		"\2\2\u1879\u187a\7\u0163\2\2\u187a\u187b\5\u0384\u01c3\2\u187b\u187f\7"+
		"\u00e5\2\2\u187c\u187d\7\6\2\2\u187d\u1880\7\u0137\2\2\u187e\u1880\7U"+
		"\2\2\u187f\u187c\3\2\2\2\u187f\u187e\3\2\2\2\u1880\u188a\3\2\2\2\u1881"+
		"\u1882\7\u017c\2\2\u1882\u1887\5\u01d4\u00eb\2\u1883\u1884\7\u0337\2\2"+
		"\u1884\u1886\5\u01d4\u00eb\2\u1885\u1883\3\2\2\2\u1886\u1889\3\2\2\2\u1887"+
		"\u1885\3\2\2\2\u1887\u1888\3\2\2\2\u1888\u188b\3\2\2\2\u1889\u1887\3\2"+
		"\2\2\u188a\u1881\3\2\2\2\u188a\u188b\3\2\2\2\u188b\u188c\3\2\2\2\u188c"+
		"\u188d\t:\2\2\u188d\u1892\5\u01da\u00ee\2\u188e\u188f\7\u0337\2\2\u188f"+
		"\u1891\5\u01d6\u00ec\2\u1890\u188e\3\2\2\2\u1891\u1894\3\2\2\2\u1892\u1890"+
		"\3\2\2\2\u1892\u1893\3\2\2\2\u1893\u1895\3\2\2\2\u1894\u1892\3\2\2\2\u1895"+
		"\u1896\7\20\2\2\u1896\u1897\5\6\4\2\u1897\u01d9\3\2\2\2\u1898\u1899\5"+
		"\u03b8\u01dd\2\u1899\u01db\3\2\2\2\u189a\u189d\7I\2\2\u189b\u189c\7\u00ed"+
		"\2\2\u189c\u189e\7\n\2\2\u189d\u189b\3\2\2\2\u189d\u189e\3\2\2\2\u189e"+
		"\u18a1\3\2\2\2\u189f\u18a1\7\n\2\2\u18a0\u189a\3\2\2\2\u18a0\u189f\3\2"+
		"\2\2\u18a1\u18a2\3\2\2\2\u18a2\u18a3\7\u008e\2\2\u18a3\u18b1\5\u0386\u01c4"+
		"\2\u18a4\u18a5\7\u0335\2\2\u18a5\u18aa\5\u01e4\u00f3\2\u18a6\u18a7\7\u0337"+
		"\2\2\u18a7\u18a9\5\u01e4\u00f3\2\u18a8\u18a6\3\2\2\2\u18a9\u18ac\3\2\2"+
		"\2\u18aa\u18a8\3\2\2\2\u18aa\u18ab\3\2\2\2\u18ab\u18ad\3\2\2\2\u18ac\u18aa"+
		"\3\2\2\2\u18ad\u18ae\7\u0336\2\2\u18ae\u18b2\3\2\2\2\u18af\u18b0\7\u0335"+
		"\2\2\u18b0\u18b2\7\u0336\2\2\u18b1\u18a4\3\2\2\2\u18b1\u18af\3\2\2\2\u18b2"+
		"\u18b6\3\2\2\2\u18b3\u18b7\5\u01de\u00f0\2\u18b4\u18b7\5\u01e0\u00f1\2"+
		"\u18b5\u18b7\5\u01e2\u00f2\2\u18b6\u18b3\3\2\2\2\u18b6\u18b4\3\2\2\2\u18b6"+
		"\u18b5\3\2\2\2\u18b7\u18b9\3\2\2\2\u18b8\u18ba\7\u0338\2\2\u18b9\u18b8"+
		"\3\2\2\2\u18b9\u18ba\3\2\2\2\u18ba\u01dd\3\2\2\2\u18bb\u18bc\7\u011b\2"+
		"\2\u18bc\u18c6\7\u0156\2\2\u18bd\u18be\7\u017c\2\2\u18be\u18c3\5\u01e8"+
		"\u00f5\2\u18bf\u18c0\7\u0337\2\2\u18c0\u18c2\5\u01e8\u00f5\2\u18c1\u18bf"+
		"\3\2\2\2\u18c2\u18c5\3\2\2\2\u18c3\u18c1\3\2\2\2\u18c3\u18c4\3\2\2\2\u18c4"+
		"\u18c7\3\2\2\2\u18c5\u18c3\3\2\2\2\u18c6\u18bd\3\2\2\2\u18c6\u18c7\3\2"+
		"\2\2\u18c7\u18c9\3\2\2\2\u18c8\u18ca\7\20\2\2\u18c9\u18c8\3\2\2\2\u18c9"+
		"\u18ca\3\2\2\2\u18ca\u18cb\3\2\2\2\u18cb\u18d1\7\u011a\2\2\u18cc\u18cd"+
		"\7\u0335\2\2\u18cd\u18ce\5\u01be\u00e0\2\u18ce\u18cf\7\u0336\2\2\u18cf"+
		"\u18d2\3\2\2\2\u18d0\u18d2\5\u01be\u00e0\2\u18d1\u18cc\3\2\2\2\u18d1\u18d0"+
		"\3\2\2\2\u18d2\u01df\3\2\2\2\u18d3\u18d4\7\u011b\2\2\u18d4\u18d5\7\u031a"+
		"\2\2\u18d5\u18df\5\u02a6\u0154\2\u18d6\u18d7\7\u017c\2\2\u18d7\u18dc\5"+
		"\u01e8\u00f5\2\u18d8\u18d9\7\u0337\2\2\u18d9\u18db\5\u01e8\u00f5\2\u18da"+
		"\u18d8\3\2\2\2\u18db\u18de\3\2\2\2\u18dc\u18da\3\2\2\2\u18dc\u18dd\3\2"+
		"\2\2\u18dd\u18e0\3\2\2\2\u18de\u18dc\3\2\2\2\u18df\u18d6\3\2\2\2\u18df"+
		"\u18e0\3\2\2\2\u18e0\u18e2\3\2\2\2\u18e1\u18e3\7\20\2\2\u18e2\u18e1\3"+
		"\2\2\2\u18e2\u18e3\3\2\2\2\u18e3\u18e4\3\2\2\2\u18e4\u18e8\7\34\2\2\u18e5"+
		"\u18e7\5\b\5\2\u18e6\u18e5\3\2\2\2\u18e7\u18ea\3\2\2\2\u18e8\u18e6\3\2"+
		"\2\2\u18e8\u18e9\3\2\2\2\u18e9\u18eb\3\2\2\2\u18ea\u18e8\3\2\2\2\u18eb"+
		"\u18ed\7\u011a\2\2\u18ec\u18ee\7\u0338\2\2\u18ed\u18ec\3\2\2\2\u18ed\u18ee"+
		"\3\2\2\2\u18ee\u18ef\3\2\2\2\u18ef\u18f1\7m\2\2\u18f0\u18f2\7\u0338\2"+
		"\2\u18f1\u18f0\3\2\2\2\u18f1\u18f2\3\2\2\2\u18f2\u01e1\3\2\2\2\u18f3\u18f4"+
		"\7\u011b\2\2\u18f4\u18fe\5\u03ae\u01d8\2\u18f5\u18f6\7\u017c\2\2\u18f6"+
		"\u18fb\5\u01e8\u00f5\2\u18f7\u18f8\7\u0337\2\2\u18f8\u18fa\5\u01e8\u00f5"+
		"\2\u18f9\u18f7\3\2\2\2\u18fa\u18fd\3\2\2\2\u18fb\u18f9\3\2\2\2\u18fb\u18fc"+
		"\3\2\2\2\u18fc\u18ff\3\2\2\2\u18fd\u18fb\3\2\2\2\u18fe\u18f5\3\2\2\2\u18fe"+
		"\u18ff\3\2\2\2\u18ff\u1901\3\2\2\2\u1900\u1902\7\20\2\2\u1901\u1900\3"+
		"\2\2\2\u1901\u1902\3\2\2\2\u1902\u1903\3\2\2\2\u1903\u1907\7\34\2\2\u1904"+
		"\u1906\5\b\5\2\u1905\u1904\3\2\2\2\u1906\u1909\3\2\2\2\u1907\u1905\3\2"+
		"\2\2\u1907\u1908\3\2\2\2\u1908\u190a\3\2\2\2\u1909\u1907\3\2\2\2\u190a"+
		"\u190b\7\u011a\2\2\u190b\u190d\5\u02cc\u0167\2\u190c\u190e\7\u0338\2\2"+
		"\u190d\u190c\3\2\2\2\u190d\u190e\3\2\2\2\u190e\u190f\3\2\2\2\u190f\u1910"+
		"\7m\2\2\u1910\u01e3\3\2\2\2\u1911\u1915\7\u031a\2\2\u1912\u1913\5\u03b6"+
		"\u01dc\2\u1913\u1914\7\u0330\2\2\u1914\u1916\3\2\2\2\u1915\u1912\3\2\2"+
		"\2\u1915\u1916\3\2\2\2\u1916\u1918\3\2\2\2\u1917\u1919\7\20\2\2\u1918"+
		"\u1917\3\2\2\2\u1918\u1919\3\2\2\2\u1919\u191a\3\2\2\2\u191a\u191c\5\u03ae"+
		"\u01d8\2\u191b\u191d\7\u0173\2\2\u191c\u191b\3\2\2\2\u191c\u191d\3\2\2"+
		"\2\u191d\u1920\3\2\2\2\u191e\u191f\7\u0323\2\2\u191f\u1921\5\u03b0\u01d9"+
		"\2\u1920\u191e\3\2\2\2\u1920\u1921\3\2\2\2\u1921\u1923\3\2\2\2\u1922\u1924"+
		"\t;\2\2\u1923\u1922\3\2\2\2\u1923\u1924\3\2\2\2\u1924\u01e5\3\2\2\2\u1925"+
		"\u1929\7\u01ee\2\2\u1926\u1929\7\u02a3\2\2\u1927\u1929\5\u02a2\u0152\2"+
		"\u1928\u1925\3\2\2\2\u1928\u1926\3\2\2\2\u1928\u1927\3\2\2\2\u1929\u01e7"+
		"\3\2\2\2\u192a\u1937\7\u01ee\2\2\u192b\u1937\7\u02be\2\2\u192c\u192d\7"+
		"\u011b\2\2\u192d\u192e\7\u00df\2\2\u192e\u192f\7\u00e5\2\2\u192f\u1930"+
		"\7\u00df\2\2\u1930\u1937\7\u0222\2\2\u1931\u1932\7(\2\2\u1932\u1933\7"+
		"\u00e5\2\2\u1933\u1934\7\u00df\2\2\u1934\u1937\7\u0222\2\2\u1935\u1937"+
		"\5\u02a2\u0152\2\u1936\u192a\3\2\2\2\u1936\u192b\3\2\2\2\u1936\u192c\3"+
		"\2\2\2\u1936\u1931\3\2\2\2\u1936\u1935\3\2\2\2\u1937\u01e9\3\2\2\2\u1938"+
		"\u1939\7I\2\2\u1939\u193a\7\u014a\2\2\u193a\u193b\5\u03b6\u01dc\2\u193b"+
		"\u193c\7\u00e5\2\2\u193c\u193d\5\u032c\u0197\2\u193d\u193e\7\u0335\2\2"+
		"\u193e\u193f\5\u038e\u01c8\2\u193f\u1952\7\u0336\2\2\u1940\u1946\7\u017c"+
		"\2\2\u1941\u1947\7\u020a\2\2\u1942\u1943\7\u02bd\2\2\u1943\u1944\7\u031b"+
		"\2\2\u1944\u1947\t<\2\2\u1945\u1947\7\u02dd\2\2\u1946\u1941\3\2\2\2\u1946"+
		"\u1942\3\2\2\2\u1946\u1945\3\2\2\2\u1947\u194a\3\2\2\2\u1948\u1949\7\u0337"+
		"\2\2\u1949\u194b\7\u026b\2\2\u194a\u1948\3\2\2\2\u194a\u194b\3\2\2\2\u194b"+
		"\u1950\3\2\2\2\u194c\u194d\7\u0337\2\2\u194d\u194e\7\u0220\2\2\u194e\u194f"+
		"\7\u0323\2\2\u194f\u1951\5\u0392\u01ca\2\u1950\u194c\3\2\2\2\u1950\u1951"+
		"\3\2\2\2\u1951\u1953\3\2\2\2\u1952\u1940\3\2\2\2\u1952\u1953\3\2\2\2\u1953"+
		"\u1955\3\2\2\2\u1954\u1956\7\u0338\2\2\u1955\u1954\3\2\2\2\u1955\u1956"+
		"\3\2\2\2\u1956\u01eb\3\2\2\2\u1957\u1959\7\u016c\2\2\u1958\u195a\t=\2"+
		"\2\u1959\u1958\3\2\2\2\u1959\u195a\3\2\2\2\u195a\u195b\3\2\2\2\u195b\u195c"+
		"\7\u014a\2\2\u195c\u195e\5\u0380\u01c1\2\u195d\u195f\5\u03b6\u01dc\2\u195e"+
		"\u195d\3\2\2\2\u195e\u195f\3\2\2\2\u195f\u1963\3\2\2\2\u1960\u1961\7\u0301"+
		"\2\2\u1961\u1962\7\u031b\2\2\u1962\u1964\7\u0172\2\2\u1963\u1960\3\2\2"+
		"\2\u1963\u1964\3\2\2\2\u1964\u01ed\3\2\2\2\u1965\u1966\7I\2\2\u1966\u1967"+
		"\7\u0156\2\2\u1967\u1968\5\u0382\u01c2\2\u1968\u1969\7\u0335\2\2\u1969"+
		"\u196b\5\u02ac\u0157\2\u196a\u196c\7\u0337\2\2\u196b\u196a\3\2\2\2\u196b"+
		"\u196c\3\2\2\2\u196c\u196d\3\2\2\2\u196d\u1970\7\u0336\2\2\u196e\u196f"+
		"\7\u023a\2\2\u196f\u1971\5\u03b8\u01dd\2\u1970\u196e\3\2\2\2\u1970\u1971"+
		"\3\2\2\2\u1971\u1975\3\2\2\2\u1972\u1974\5\u01f0\u00f9\2\u1973\u1972\3"+
		"\2\2\2\u1974\u1977\3\2\2\2\u1975\u1973\3\2\2\2\u1975\u1976\3\2\2\2\u1976"+
		"\u197b\3\2\2\2\u1977\u1975\3\2\2\2\u1978\u1979\7\u00e5\2\2\u1979\u197c"+
		"\5\u03b6\u01dc\2\u197a\u197c\7Z\2\2\u197b\u1978\3\2\2\2\u197b\u197a\3"+
		"\2\2\2\u197b\u197c\3\2\2\2\u197c\u1980\3\2\2\2\u197d\u197e\7\u02ec\2\2"+
		"\u197e\u1981\5\u03b6\u01dc\2\u197f\u1981\7Z\2\2\u1980\u197d\3\2\2\2\u1980"+
		"\u197f\3\2\2\2\u1980\u1981\3\2\2\2\u1981\u1983\3\2\2\2\u1982\u1984\7\u0338"+
		"\2\2\u1983\u1982\3\2\2\2\u1983\u1984\3\2\2\2\u1984\u01ef\3\2\2\2\u1985"+
		"\u1999\7\u017c\2\2\u1986\u1987\7\u0335\2\2\u1987\u198c\5\u02be\u0160\2"+
		"\u1988\u1989\7\u0337\2\2\u1989\u198b\5\u02be\u0160\2\u198a\u1988\3\2\2"+
		"\2\u198b\u198e\3\2\2\2\u198c\u198a\3\2\2\2\u198c\u198d\3\2\2\2\u198d\u198f"+
		"\3\2\2\2\u198e\u198c\3\2\2\2\u198f\u1990\7\u0336\2\2\u1990\u199a\3\2\2"+
		"\2\u1991\u1996\5\u02be\u0160\2\u1992\u1993\7\u0337\2\2\u1993\u1995\5\u02be"+
		"\u0160\2\u1994\u1992\3\2\2\2\u1995\u1998\3\2\2\2\u1996\u1994\3\2\2\2\u1996"+
		"\u1997\3\2\2\2\u1997\u199a\3\2\2\2\u1998\u1996\3\2\2\2\u1999\u1986\3\2"+
		"\2\2\u1999\u1991\3\2\2\2\u199a\u01f1\3\2\2\2\u199b\u199c\7I\2\2\u199c"+
		"\u199d\7\u0175\2\2\u199d\u19a2\5\u0384\u01c3\2\u199e\u199f\7\u0335\2\2"+
		"\u199f\u19a0\5\u038e\u01c8\2\u19a0\u19a1\7\u0336\2\2\u19a1\u19a3\3\2\2"+
		"\2\u19a2\u199e\3\2\2\2\u19a2\u19a3\3\2\2\2\u19a3\u19ad\3\2\2\2\u19a4\u19a5"+
		"\7\u017c\2\2\u19a5\u19aa\5\u01f4\u00fb\2\u19a6\u19a7\7\u0337\2\2\u19a7"+
		"\u19a9\5\u01f4\u00fb\2\u19a8\u19a6\3\2\2\2\u19a9\u19ac\3\2\2\2\u19aa\u19a8"+
		"\3\2\2\2\u19aa\u19ab\3\2\2\2\u19ab\u19ae\3\2\2\2\u19ac\u19aa\3\2\2\2\u19ad"+
		"\u19a4\3\2\2\2\u19ad\u19ae\3\2\2\2\u19ae\u19af\3\2\2\2\u19af\u19b0\7\20"+
		"\2\2\u19b0\u19b4\5\u01be\u00e0\2\u19b1\u19b2\7\u017c\2\2\u19b2\u19b3\7"+
		".\2\2\u19b3\u19b5\7\u00ec\2\2\u19b4\u19b1\3\2\2\2\u19b4\u19b5\3\2\2\2"+
		"\u19b5\u19b7\3\2\2\2\u19b6\u19b8\7\u0338\2\2\u19b7\u19b6\3\2\2\2\u19b7"+
		"\u19b8\3\2\2\2\u19b8\u01f3\3\2\2\2\u19b9\u19ba\t>\2\2\u19ba\u01f5\3\2"+
		"\2\2\u19bb\u19bc\7\n\2\2\u19bc\u19bd\7\u0156\2\2\u19bd\u19e9\5\u0382\u01c2"+
		"\2\u19be\u19bf\7\u013d\2\2\u19bf\u19c0\7\u0335\2\2\u19c0\u19c1\7\u023b"+
		"\2\2\u19c1\u19c2\7\u0323\2\2\u19c2\u19c3\t?\2\2\u19c3\u19ea\7\u0336\2"+
		"\2\u19c4\u19c5\7\4\2\2\u19c5\u19ea\5\u02ae\u0158\2\u19c6\u19c7\7\n\2\2"+
		"\u19c7\u19c8\78\2\2\u19c8\u19ea\5\u02b0\u0159\2\u19c9\u19ca\7h\2\2\u19ca"+
		"\u19cb\78\2\2\u19cb\u19ea\5\u03b6\u01dc\2\u19cc\u19cd\7h\2\2\u19cd\u19ce"+
		"\7=\2\2\u19ce\u19ea\5\u03b6\u01dc\2\u19cf\u19d0\7\u017c\2\2\u19d0\u19d1"+
		"\7.\2\2\u19d1\u19d2\7\4\2\2\u19d2\u19d3\7=\2\2\u19d3\u19d4\5\u03b6\u01dc"+
		"\2\u19d4\u19d5\7\u0089\2\2\u19d5\u19d6\7\u00ac\2\2\u19d6\u19d7\7\u0335"+
		"\2\2\u19d7\u19d8\5\u038e\u01c8\2\u19d8\u19d9\7\u0336\2\2\u19d9\u19da\7"+
		"\u010e\2\2\u19da\u19db\5\u0382\u01c2\2\u19db\u19dc\7\u0335\2\2\u19dc\u19dd"+
		"\5\u038e\u01c8\2\u19dd\u19de\7\u0336\2\2\u19de\u19ea\3\2\2\2\u19df\u19e0"+
		"\7.\2\2\u19e0\u19e1\7=\2\2\u19e1\u19ea\5\u03b6\u01dc\2\u19e2\u19e3\t\27"+
		"\2\2\u19e3\u19e5\7\u0163\2\2\u19e4\u19e6\5\u03b6\u01dc\2\u19e5\u19e4\3"+
		"\2\2\2\u19e5\u19e6\3\2\2\2\u19e6\u19ea\3\2\2\2\u19e7\u19e8\7\u02a1\2\2"+
		"\u19e8\u19ea\5\u01f0\u00f9\2\u19e9\u19be\3\2\2\2\u19e9\u19c4\3\2\2\2\u19e9"+
		"\u19c6\3\2\2\2\u19e9\u19c9\3\2\2\2\u19e9\u19cc\3\2\2\2\u19e9\u19cf\3\2"+
		"\2\2\u19e9\u19df\3\2\2\2\u19e9\u19e2\3\2\2\2\u19e9\u19e7\3\2\2\2\u19ea"+
		"\u19ec\3\2\2\2\u19eb\u19ed\7\u0338\2\2\u19ec\u19eb\3\2\2\2\u19ec\u19ed"+
		"\3\2\2\2\u19ed\u01f7\3\2\2\2\u19ee\u19ef\7\n\2\2\u19ef\u19f2\7U\2\2\u19f0"+
		"\u19f3\5\u03b6\u01dc\2\u19f1\u19f3\7K\2\2\u19f2\u19f0\3\2\2\2\u19f2\u19f1"+
		"\3\2\2\2\u19f3\u1a00\3\2\2\2\u19f4\u19f5\7\u025b\2\2\u19f5\u19f6\7\u025e"+
		"\2\2\u19f6\u19f7\7\u0323\2\2\u19f7\u1a01\5\u03b6\u01dc\2\u19f8\u19f9\7"+
		"\67\2\2\u19f9\u1a01\5\u03b6\u01dc\2\u19fa\u19fb\7\u013d\2\2\u19fb\u19fe"+
		"\5\u01fa\u00fe\2\u19fc\u19fd\7\u017c\2\2\u19fd\u19ff\5\u0240\u0121\2\u19fe"+
		"\u19fc\3\2\2\2\u19fe\u19ff\3\2\2\2\u19ff\u1a01\3\2\2\2\u1a00\u19f4\3\2"+
		"\2\2\u1a00\u19f8\3\2\2\2\u1a00\u19fa\3\2\2\2\u1a01\u1a03\3\2\2\2\u1a02"+
		"\u1a04\7\u0338\2\2\u1a03\u1a02\3\2\2\2\u1a03\u1a04\3\2\2\2\u1a04\u01f9"+
		"\3\2\2\2\u1a05\u1a1d\5\u01fc\u00ff\2\u1a06\u1a1d\5\u01fe\u0100\2\u1a07"+
		"\u1a1d\5\u0202\u0102\2\u1a08\u1a1d\5\u0204\u0103\2\u1a09\u1a1d\5\u0208"+
		"\u0105\2\u1a0a\u1a1d\5\u0222\u0112\2\u1a0b\u1a1d\5\u0224\u0113\2\u1a0c"+
		"\u1a1d\5\u0226\u0114\2\u1a0d\u1a1d\5\u0228\u0115\2\u1a0e\u1a1d\5\u022a"+
		"\u0116\2\u1a0f\u1a1d\5\u022c\u0117\2\u1a10\u1a1d\5\u022e\u0118\2\u1a11"+
		"\u1a12\7\u0200\2\2\u1a12\u1a1d\5\u0372\u01ba\2\u1a13\u1a1d\5\u0230\u0119"+
		"\2\u1a14\u1a1d\5\u0232\u011a\2\u1a15\u1a1d\5\u0234\u011b\2\u1a16\u1a1d"+
		"\5\u0236\u011c\2\u1a17\u1a1d\5\u0238\u011d\2\u1a18\u1a1d\5\u023a\u011e"+
		"\2\u1a19\u1a1d\5\u023c\u011f\2\u1a1a\u1a1d\5\u023e\u0120\2\u1a1b\u1a1d"+
		"\5\u0240\u0121\2\u1a1c\u1a05\3\2\2\2\u1a1c\u1a06\3\2\2\2\u1a1c\u1a07\3"+
		"\2\2\2\u1a1c\u1a08\3\2\2\2\u1a1c\u1a09\3\2\2\2\u1a1c\u1a0a\3\2\2\2\u1a1c"+
		"\u1a0b\3\2\2\2\u1a1c\u1a0c\3\2\2\2\u1a1c\u1a0d\3\2\2\2\u1a1c\u1a0e\3\2"+
		"\2\2\u1a1c\u1a0f\3\2\2\2\u1a1c\u1a10\3\2\2\2\u1a1c\u1a11\3\2\2\2\u1a1c"+
		"\u1a13\3\2\2\2\u1a1c\u1a14\3\2\2\2\u1a1c\u1a15\3\2\2\2\u1a1c\u1a16\3\2"+
		"\2\2\u1a1c\u1a17\3\2\2\2\u1a1c\u1a18\3\2\2\2\u1a1c\u1a19\3\2\2\2\u1a1c"+
		"\u1a1a\3\2\2\2\u1a1c\u1a1b\3\2\2\2\u1a1d\u01fb\3\2\2\2\u1a1e\u1a1f\7\u019d"+
		"\2\2\u1a1f\u1a30\5\u0392\u01ca\2\u1a20\u1a21\7\u019e\2\2\u1a21\u1a30\7"+
		"\u00e2\2\2\u1a22\u1a27\7\u00e5\2\2\u1a23\u1a24\7\u0220\2\2\u1a24\u1a25"+
		"\7\u0323\2\2\u1a25\u1a28\7\u00e5\2\2\u1a26\u1a28\7\u00e2\2\2\u1a27\u1a23"+
		"\3\2\2\2\u1a27\u1a26\3\2\2\2\u1a28\u1a30\3\2\2\2\u1a29\u1a2a\7\u019f\2"+
		"\2\u1a2a\u1a30\5\u0392\u01ca\2\u1a2b\u1a2c\7\u01a0\2\2\u1a2c\u1a30\5\u0392"+
		"\u01ca\2\u1a2d\u1a2e\7\u01a1\2\2\u1a2e\u1a30\t\t\2\2\u1a2f\u1a1e\3\2\2"+
		"\2\u1a2f\u1a20\3\2\2\2\u1a2f\u1a22\3\2\2\2\u1a2f\u1a29\3\2\2\2\u1a2f\u1a2b"+
		"\3\2\2\2\u1a2f\u1a2d\3\2\2\2\u1a30\u01fd\3\2\2\2\u1a31\u1a32\7\u01b4\2"+
		"\2\u1a32\u1a42\7\u0323\2\2\u1a33\u1a43\7\u00e2\2\2\u1a34\u1a3f\7\u00e5"+
		"\2\2\u1a35\u1a3a\5\u0200\u0101\2\u1a36\u1a37\7\u0337\2\2\u1a37\u1a39\5"+
		"\u0200\u0101\2\u1a38\u1a36\3\2\2\2\u1a39\u1a3c\3\2\2\2\u1a3a\u1a38\3\2"+
		"\2\2\u1a3a\u1a3b\3\2\2\2\u1a3b\u1a3e\3\2\2\2\u1a3c\u1a3a\3\2\2\2\u1a3d"+
		"\u1a35\3\2\2\2\u1a3e\u1a41\3\2\2\2\u1a3f\u1a3d\3\2\2\2\u1a3f\u1a40\3\2"+
		"\2\2\u1a40\u1a43\3\2\2\2\u1a41\u1a3f\3\2\2\2\u1a42\u1a33\3\2\2\2\u1a42"+
		"\u1a34\3\2\2\2\u1a43\u01ff\3\2\2\2\u1a44\u1a45\7\u019c\2\2\u1a45\u1a46"+
		"\7\u0323\2\2\u1a46\u1a4b\5\u0392\u01ca\2\u1a47\u1a48\7\u01b3\2\2\u1a48"+
		"\u1a49\7\u0323\2\2\u1a49\u1a4b\t@\2\2\u1a4a\u1a44\3\2\2\2\u1a4a\u1a47"+
		"\3\2\2\2\u1a4b\u0201\3\2\2\2\u1a4c\u1a4d\7>\2\2\u1a4d\u1a4e\7\u0323\2"+
		"\2\u1a4e\u1a4f\t\67\2\2\u1a4f\u0203\3\2\2\2\u1a50\u1a51\7\u01c9\2\2\u1a51"+
		"\u1a55\5\u0392\u01ca\2\u1a52\u1a53\7\u01ca\2\2\u1a53\u1a55\tA\2\2\u1a54"+
		"\u1a50\3\2\2\2\u1a54\u1a52\3\2\2\2\u1a55\u0205\3\2\2\2\u1a56\u1a57\7\n"+
		"\2\2\u1a57\u1a58\7n\2\2\u1a58\u1a5b\5\u03b6\u01dc\2\u1a59\u1a5a\7\24\2"+
		"\2\u1a5a\u1a5c\5\u03b6\u01dc\2\u1a5b\u1a59\3\2\2\2\u1a5b\u1a5c\3\2\2\2"+
		"\u1a5c\u1a64\3\2\2\2\u1a5d\u1a5e\7\u014b\2\2\u1a5e\u1a62\7\u0323\2\2\u1a5f"+
		"\u1a63\7\u014e\2\2\u1a60\u1a63\7\u0151\2\2\u1a61\u1a63\7\u01e4\2\2\u1a62"+
		"\u1a5f\3\2\2\2\u1a62\u1a60\3\2\2\2\u1a62\u1a61\3\2\2\2\u1a63\u1a65\3\2"+
		"\2\2\u1a64\u1a5d\3\2\2\2\u1a64\u1a65\3\2\2\2\u1a65\u1a66\3\2\2\2\u1a66"+
		"\u1a67\7\20\2\2\u1a67\u1a68\7\u015a\2\2\u1a68\u1a69\7\u0335\2\2\u1a69"+
		"\u1a6a\7\u00b8\2\2\u1a6a\u1a6b\7\u0323\2\2\u1a6b\u1a70\7\u031b\2\2\u1a6c"+
		"\u1a6d\7\u0337\2\2\u1a6d\u1a6e\7\u00b7\2\2\u1a6e\u1a6f\7\u0323\2\2\u1a6f"+
		"\u1a71\tB\2\2\u1a70\u1a6c\3\2\2\2\u1a70\u1a71\3\2\2\2\u1a71\u1a72\3\2"+
		"\2\2\u1a72\u1ae0\7\u0336\2\2\u1a73\u1ae1\7\u02f9\2\2\u1a74\u1a75\7\u0086"+
		"\2\2\u1a75\u1a76\7\u0139\2\2\u1a76\u1a77\7\u0335\2\2\u1a77\u1a78\7\25"+
		"\2\2\u1a78\u1a89\7\u0323\2\2\u1a79\u1a7b\7\u017b\2\2\u1a7a\u1a7c\tC\2"+
		"\2\u1a7b\u1a7a\3\2\2\2\u1a7b\u1a7c\3\2\2\2\u1a7c\u1a7f\3\2\2\2\u1a7d\u1a7e"+
		"\7+\2\2\u1a7e\u1a80\5\u03b6\u01dc\2\u1a7f\u1a7d\3\2\2\2\u1a7f\u1a80\3"+
		"\2\2\2\u1a80\u1a8a\3\2\2\2\u1a81\u1a82\7+\2\2\u1a82\u1a84\5\u03b6\u01dc"+
		"\2\u1a83\u1a85\7\u017b\2\2\u1a84\u1a83\3\2\2\2\u1a84\u1a85\3\2\2\2\u1a85"+
		"\u1a87\3\2\2\2\u1a86\u1a88\tC\2\2\u1a87\u1a86\3\2\2\2\u1a87\u1a88\3\2"+
		"\2\2\u1a88\u1a8a\3\2\2\2\u1a89\u1a79\3\2\2\2\u1a89\u1a81\3\2\2\2\u1a8a"+
		"\u1a9c\3\2\2\2\u1a8b\u1a8d\7\u0337\2\2\u1a8c\u1a8b\3\2\2\2\u1a8c\u1a8d"+
		"\3\2\2\2\u1a8d\u1a8e\3\2\2\2\u1a8e\u1a8f\7\u01ee\2\2\u1a8f\u1a90\7\u0323"+
		"\2\2\u1a90\u1a9a\tD\2\2\u1a91\u1a98\7\u018d\2\2\u1a92\u1a99\7\5\2\2\u1a93"+
		"\u1a99\7\u029a\2\2\u1a94\u1a95\7\5\2\2\u1a95\u1a99\7\u029a\2\2\u1a96\u1a97"+
		"\7\u029a\2\2\u1a97\u1a99\7\5\2\2\u1a98\u1a92\3\2\2\2\u1a98\u1a93\3\2\2"+
		"\2\u1a98\u1a94\3\2\2\2\u1a98\u1a96\3\2\2\2\u1a99\u1a9b\3\2\2\2\u1a9a\u1a91"+
		"\3\2\2\2\u1a9a\u1a9b\3\2\2\2\u1a9b\u1a9d\3\2\2\2\u1a9c\u1a8c\3\2\2\2\u1a9c"+
		"\u1a9d\3\2\2\2\u1a9d\u1aa4\3\2\2\2\u1a9e\u1aa0\7\u0337\2\2\u1a9f\u1a9e"+
		"\3\2\2\2\u1a9f\u1aa0\3\2\2\2\u1aa0\u1aa1\3\2\2\2\u1aa1\u1aa2\7\u00ca\2"+
		"\2\u1aa2\u1aa3\7\u0323\2\2\u1aa3\u1aa5\tE\2\2\u1aa4\u1a9f\3\2\2\2\u1aa4"+
		"\u1aa5\3\2\2\2\u1aa5\u1aac\3\2\2\2\u1aa6\u1aa8\7\u0337\2\2\u1aa7\u1aa6"+
		"\3\2\2\2\u1aa7\u1aa8\3\2\2\2\u1aa8\u1aa9\3\2\2\2\u1aa9\u1aaa\7\u00cb\2"+
		"\2\u1aaa\u1aab\7\u0323\2\2\u1aab\u1aad\7\u031b\2\2\u1aac\u1aa7\3\2\2\2"+
		"\u1aac\u1aad\3\2\2\2\u1aad\u1aae\3\2\2\2\u1aae\u1ae1\7\u0336\2\2\u1aaf"+
		"\u1ab0\7\u0086\2\2\u1ab0\u1ab1\7V\2\2\u1ab1\u1ab2\7\u0335\2\2\u1ab2\u1ab3"+
		"\7\25\2\2\u1ab3\u1ac4\7\u0323\2\2\u1ab4\u1ab6\7\u017b\2\2\u1ab5\u1ab7"+
		"\tC\2\2\u1ab6\u1ab5\3\2\2\2\u1ab6\u1ab7\3\2\2\2\u1ab7\u1aba\3\2\2\2\u1ab8"+
		"\u1ab9\7+\2\2\u1ab9\u1abb\5\u03b6\u01dc\2\u1aba\u1ab8\3\2\2\2\u1aba\u1abb"+
		"\3\2\2\2\u1abb\u1ac5\3\2\2\2\u1abc\u1abd\7+\2\2\u1abd\u1abf\5\u03b6\u01dc"+
		"\2\u1abe\u1ac0\7\u017b\2\2\u1abf\u1abe\3\2\2\2\u1abf\u1ac0\3\2\2\2\u1ac0"+
		"\u1ac2\3\2\2\2\u1ac1\u1ac3\tC\2\2\u1ac2\u1ac1\3\2\2\2\u1ac2\u1ac3\3\2"+
		"\2\2\u1ac3\u1ac5\3\2\2\2\u1ac4\u1ab4\3\2\2\2\u1ac4\u1abc\3\2\2\2\u1ac5"+
		"\u1ad7\3\2\2\2\u1ac6\u1ac8\7\u0337\2\2\u1ac7\u1ac6\3\2\2\2\u1ac7\u1ac8"+
		"\3\2\2\2\u1ac8\u1ac9\3\2\2\2\u1ac9\u1aca\7\u01ee\2\2\u1aca\u1acb\7\u0323"+
		"\2\2\u1acb\u1ad5\tD\2\2\u1acc\u1ad3\7\u018d\2\2\u1acd\u1ad4\7\5\2\2\u1ace"+
		"\u1ad4\7\u029a\2\2\u1acf\u1ad0\7\5\2\2\u1ad0\u1ad4\7\u029a\2\2\u1ad1\u1ad2"+
		"\7\u029a\2\2\u1ad2\u1ad4\7\5\2\2\u1ad3\u1acd\3\2\2\2\u1ad3\u1ace\3\2\2"+
		"\2\u1ad3\u1acf\3\2\2\2\u1ad3\u1ad1\3\2\2\2\u1ad4\u1ad6\3\2\2\2\u1ad5\u1acc"+
		"\3\2\2\2\u1ad5\u1ad6\3\2\2\2\u1ad6\u1ad8\3\2\2\2\u1ad7\u1ac7\3\2\2\2\u1ad7"+
		"\u1ad8\3\2\2\2\u1ad8\u1ada\3\2\2\2\u1ad9\u1adb\7\u0337\2\2\u1ada\u1ad9"+
		"\3\2\2\2\u1ada\u1adb\3\2\2\2\u1adb\u1adc\3\2\2\2\u1adc\u1add\7\u0121\2"+
		"\2\u1add\u1ade\7\u0323\2\2\u1ade\u1adf\tF\2\2\u1adf\u1ae1\7\u0336\2\2"+
		"\u1ae0\u1a73\3\2\2\2\u1ae0\u1a74\3\2\2\2\u1ae0\u1aaf\3\2\2\2\u1ae1\u0207"+
		"\3\2\2\2\u1ae2\u1ae3\5\u020a\u0106\2\u1ae3\u0209\3\2\2\2\u1ae4\u1ae5\5"+
		"\u020c\u0107\2\u1ae5\u1ae6\5\u0212\u010a\2\u1ae6\u1aeb\3\2\2\2\u1ae7\u1ae8"+
		"\5\u020e\u0108\2\u1ae8\u1ae9\5\u0214\u010b\2\u1ae9\u1aeb\3\2\2\2\u1aea"+
		"\u1ae4\3\2\2\2\u1aea\u1ae7\3\2\2\2\u1aeb\u020b\3\2\2\2\u1aec\u1aed\7\u0282"+
		"\2\2\u1aed\u020d\3\2\2\2\u1aee\u1aef\7\u017f\2\2\u1aef\u020f\3\2\2\2\u1af0"+
		"\u1af1\7\u0323\2\2\u1af1\u0211\3\2\2\2\u1af2\u1af3\5\u0210\u0109\2\u1af3"+
		"\u1af4\5\u0218\u010d\2\u1af4\u1aff\3\2\2\2\u1af5\u1aff\7~\2\2\u1af6\u1aff"+
		"\7\u0088\2\2\u1af7\u1aff\7\u00e2\2\2\u1af8\u1aff\7\u0118\2\2\u1af9\u1afa"+
		"\7\u0129\2\2\u1afa\u1aff\tG\2\2\u1afb\u1aff\7\u02e5\2\2\u1afc\u1afd\7"+
		"\u02f0\2\2\u1afd\u1aff\7\u031b\2\2\u1afe\u1af2\3\2\2\2\u1afe\u1af5\3\2"+
		"\2\2\u1afe\u1af6\3\2\2\2\u1afe\u1af7\3\2\2\2\u1afe\u1af8\3\2\2\2\u1afe"+
		"\u1af9\3\2\2\2\u1afe\u1afb\3\2\2\2\u1afe\u1afc\3\2\2\2\u1aff\u0213\3\2"+
		"\2\2\u1b00\u1b01\5\u0210\u0109\2\u1b01\u1b02\5\u0216\u010c\2\u1b02\u1b05"+
		"\3\2\2\2\u1b03\u1b05\7\u00e2\2\2\u1b04\u1b00\3\2\2\2\u1b04\u1b03\3\2\2"+
		"\2\u1b05\u0215\3\2\2\2\u1b06\u1b07\5\u0218\u010d\2\u1b07\u0217\3\2\2\2"+
		"\u1b08\u1b09\5\u021c\u010f\2\u1b09\u1b0a\5\u0220\u0111\2\u1b0a\u1b0b\5"+
		"\u021a\u010e\2\u1b0b\u1b0c\5\u021e\u0110\2\u1b0c\u0219\3\2\2\2\u1b0d\u1b0e"+
		"\7\u0339\2\2\u1b0e\u021b\3\2\2\2\u1b0f\u1b10\7\u015a\2\2\u1b10\u1b11\7"+
		"\u0339\2\2\u1b11\u1b12\7g\2\2\u1b12\u021d\3\2\2\2\u1b13\u1b14\7\u031b"+
		"\2\2\u1b14\u021f\3\2\2\2\u1b15\u1b16\5\u03b6\u01dc\2\u1b16\u1b17\7\u0330"+
		"\2\2\u1b17\u1b18\5\u0220\u0111\2\u1b18\u1b20\3\2\2\2\u1b19\u1b1a\5\u03b6"+
		"\u01dc\2\u1b1a\u1b1b\7\u0330\2\2\u1b1b\u1b1e\3\2\2\2\u1b1c\u1b1e\5\u03b6"+
		"\u01dc\2\u1b1d\u1b19\3\2\2\2\u1b1d\u1b1c\3\2\2\2\u1b1e\u1b20\3\2\2\2\u1b1f"+
		"\u1b15\3\2\2\2\u1b1f\u1b1d\3\2\2\2\u1b20\u0221\3\2\2\2\u1b21\u1b22\7\u01cb"+
		"\2\2\u1b22\u1b23\5\u0392\u01ca\2\u1b23\u0223\3\2\2\2\u1b24\u1b25\7\u01ee"+
		"\2\2\u1b25\u1b26\5\u0392\u01ca\2\u1b26\u0225\3\2\2\2\u1b27\u1b28\tH\2"+
		"\2\u1b28\u0227\3\2\2\2\u1b29\u1b2a\tI\2\2\u1b2a\u0229\3\2\2\2\u1b2b\u1b2c"+
		"\tJ\2\2\u1b2c\u022b\3\2\2\2\u1b2d\u1b2e\7\u01d8\2\2\u1b2e\u1b2f\7\u0323"+
		"\2\2\u1b2f\u1b30\tK\2\2\u1b30\u022d\3\2\2\2\u1b31\u1b32\7\u01d1\2\2\u1b32"+
		"\u1b4b\5\u0392\u01ca\2\u1b33\u1b34\7\u02f7\2\2\u1b34\u1b4b\5\u0392\u01ca"+
		"\2\u1b35\u1b36\7\u01d6\2\2\u1b36\u1b39\7\u0323\2\2\u1b37\u1b3a\5\u03b6"+
		"\u01dc\2\u1b38\u1b3a\7\u031f\2\2\u1b39\u1b37\3\2\2\2\u1b39\u1b38\3\2\2"+
		"\2\u1b3a\u1b4b\3\2\2\2\u1b3b\u1b3c\7\u01d5\2\2\u1b3c\u1b3f\7\u0323\2\2"+
		"\u1b3d\u1b40\5\u03b6\u01dc\2\u1b3e\u1b40\7\u031f\2\2\u1b3f\u1b3d\3\2\2"+
		"\2\u1b3f\u1b3e\3\2\2\2\u1b40\u1b4b\3\2\2\2\u1b41\u1b42\7\u025f\2\2\u1b42"+
		"\u1b43\7\u0323\2\2\u1b43\u1b4b\t\t\2\2\u1b44\u1b45\7\u02f4\2\2\u1b45\u1b46"+
		"\7\u0323\2\2\u1b46\u1b4b\t\t\2\2\u1b47\u1b48\7\u02fa\2\2\u1b48\u1b49\7"+
		"\u0323\2\2\u1b49\u1b4b\7\u031b\2\2\u1b4a\u1b31\3\2\2\2\u1b4a\u1b33\3\2"+
		"\2\2\u1b4a\u1b35\3\2\2\2\u1b4a\u1b3b\3\2\2\2\u1b4a\u1b41\3\2\2\2\u1b4a"+
		"\u1b44\3\2\2\2\u1b4a\u1b47\3\2\2\2\u1b4b\u022f\3\2\2\2\u1b4c\u1b55\7\u0214"+
		"\2\2\u1b4d\u1b4e\7\u01a2\2\2\u1b4e\u1b4f\7\u0093\2\2\u1b4f\u1b50\7\u0323"+
		"\2\2\u1b50\u1b53\5\u03b6\u01dc\2\u1b51\u1b53\7\u00e2\2\2\u1b52\u1b4d\3"+
		"\2\2\2\u1b52\u1b51\3\2\2\2\u1b53\u1b56\3\2\2\2\u1b54\u1b56\tL\2\2\u1b55"+
		"\u1b52\3\2\2\2\u1b55\u1b54\3\2\2\2\u1b56\u0231\3\2\2\2\u1b57\u1b58\7\u0259"+
		"\2\2\u1b58\u1b59\t\t\2\2\u1b59\u0233\3\2\2\2\u1b5a\u1b5b\7\u027f\2\2\u1b5b"+
		"\u1b5c\tM\2\2\u1b5c\u0235\3\2\2\2\u1b5d\u1b5e\7\u02a4\2\2\u1b5e\u1b64"+
		"\tN\2\2\u1b5f\u1b60\7\u02f3\2\2\u1b60\u1b64\5\u0392\u01ca\2\u1b61\u1b62"+
		"\7\u027e\2\2\u1b62\u1b64\tO\2\2\u1b63\u1b5d\3\2\2\2\u1b63\u1b5f\3\2\2"+
		"\2\u1b63\u1b61\3\2\2\2\u1b64\u0237\3\2\2\2\u1b65\u1b6c\7\u01ec\2\2\u1b66"+
		"\u1b6c\7\u01e3\2\2\u1b67\u1b6c\7\u0261\2\2\u1b68\u1b6c\7\u01f0\2\2\u1b69"+
		"\u1b6a\7\u0218\2\2\u1b6a\u1b6c\5\u0392\u01ca\2\u1b6b\u1b65\3\2\2\2\u1b6b"+
		"\u1b66\3\2\2\2\u1b6b\u1b67\3\2\2\2\u1b6b\u1b68\3\2\2\2\u1b6b\u1b69\3\2"+
		"\2\2\u1b6c\u0239\3\2\2\2\u1b6d\u1b6e\7\u018f\2\2\u1b6e\u1b73\5\u0392\u01ca"+
		"\2\u1b6f\u1b70\7\u029c\2\2\u1b70\u1b73\t\t\2\2\u1b71\u1b73\t\t\2\2\u1b72"+
		"\u1b6d\3\2\2\2\u1b72\u1b6f\3\2\2\2\u1b72\u1b71\3\2\2\2\u1b73\u023b\3\2"+
		"\2\2\u1b74\u1b75\7\u0191\2\2\u1b75\u1b8a\5\u0392\u01ca\2\u1b76\u1b77\7"+
		"\u0192\2\2\u1b77\u1b8a\5\u0392\u01ca\2\u1b78\u1b79\7\u0193\2\2\u1b79\u1b8a"+
		"\5\u0392\u01ca\2\u1b7a\u1b7b\7\u0194\2\2\u1b7b\u1b8a\5\u0392\u01ca\2\u1b7c"+
		"\u1b7d\7\u0197\2\2\u1b7d\u1b8a\5\u0392\u01ca\2\u1b7e\u1b7f\7\u01bb\2\2"+
		"\u1b7f\u1b80\7\u0323\2\2\u1b80\u1b8a\7\u031b\2\2\u1b81\u1b82\7\u01bd\2"+
		"\2\u1b82\u1b8a\5\u0392\u01ca\2\u1b83\u1b84\7\u0271\2\2\u1b84\u1b8a\5\u0392"+
		"\u01ca\2\u1b85\u1b86\7\u0296\2\2\u1b86\u1b8a\5\u0392\u01ca\2\u1b87\u1b88"+
		"\7\u02a5\2\2\u1b88\u1b8a\5\u0392\u01ca\2\u1b89\u1b74\3\2\2\2\u1b89\u1b76"+
		"\3\2\2\2\u1b89\u1b78\3\2\2\2\u1b89\u1b7a\3\2\2\2\u1b89\u1b7c\3\2\2\2\u1b89"+
		"\u1b7e\3\2\2\2\u1b89\u1b81\3\2\2\2\u1b89\u1b83\3\2\2\2\u1b89\u1b85\3\2"+
		"\2\2\u1b89\u1b87\3\2\2\2\u1b8a\u023d\3\2\2\2\u1b8b\u1b8c\7\u02ea\2\2\u1b8c"+
		"\u1b8d\7\u0323\2\2\u1b8d\u1b8e\7\u031b\2\2\u1b8e\u1b8f\tP\2\2\u1b8f\u023f"+
		"\3\2\2\2\u1b90\u1b91\7\u0120\2\2\u1b91\u1b92\7\u018b\2\2\u1b92\u1b97\7"+
		"\u031b\2\2\u1b93\u1b94\7\u0120\2\2\u1b94\u1b97\7\u021c\2\2\u1b95\u1b97"+
		"\7\u0266\2\2\u1b96\u1b90\3\2\2\2\u1b96\u1b93\3\2\2\2\u1b96\u1b95\3\2\2"+
		"\2\u1b97\u0241\3\2\2\2\u1b98\u1b99\7h\2\2\u1b99\u1b9c\7\u009e\2\2\u1b9a"+
		"\u1b9b\7\u009a\2\2\u1b9b\u1b9d\7x\2\2\u1b9c\u1b9a\3\2\2\2\u1b9c\u1b9d"+
		"\3\2\2\2\u1b9d\u1bae\3\2\2\2\u1b9e\u1ba3\5\u0244\u0123\2\u1b9f\u1ba0\7"+
		"\u0337\2\2\u1ba0\u1ba2\5\u0244\u0123\2\u1ba1\u1b9f\3\2\2\2\u1ba2\u1ba5"+
		"\3\2\2\2\u1ba3\u1ba1\3\2\2\2\u1ba3\u1ba4\3\2\2\2\u1ba4\u1baf\3\2\2\2\u1ba5"+
		"\u1ba3\3\2\2\2\u1ba6\u1bab\5\u0246\u0124\2\u1ba7\u1ba8\7\u0337\2\2\u1ba8"+
		"\u1baa\5\u0246\u0124\2\u1ba9\u1ba7\3\2\2\2\u1baa\u1bad\3\2\2\2\u1bab\u1ba9"+
		"\3\2\2\2\u1bab\u1bac\3\2\2\2\u1bac\u1baf\3\2\2\2\u1bad\u1bab\3\2\2\2\u1bae"+
		"\u1b9e\3\2\2\2\u1bae\u1ba6\3\2\2\2\u1baf\u1bb1\3\2\2\2\u1bb0\u1bb2\7\u0338"+
		"\2\2\u1bb1\u1bb0\3\2\2\2\u1bb1\u1bb2\3\2\2\2\u1bb2\u0243\3\2\2\2\u1bb3"+
		"\u1bb4\5\u03b6\u01dc\2\u1bb4\u1bb5\7\u00e5\2\2\u1bb5\u1bb6\5\u0380\u01c1"+
		"\2\u1bb6\u0245\3\2\2\2\u1bb7\u1bb8\5\u03b6\u01dc\2\u1bb8\u1bb9\7\u0330"+
		"\2\2\u1bb9\u1bbb\3\2\2\2\u1bba\u1bb7\3\2\2\2\u1bba\u1bbb\3\2\2\2\u1bbb"+
		"\u1bbc\3\2\2\2\u1bbc\u1bbd\5\u03b6\u01dc\2\u1bbd\u1bbe\7\u0330\2\2\u1bbe"+
		"\u1bbf\5\u03b6\u01dc\2\u1bbf\u0247\3\2\2\2\u1bc0\u1bc1\7h\2\2\u1bc1\u1bc4"+
		"\t8\2\2\u1bc2\u1bc3\7\u009a\2\2\u1bc3\u1bc5\7x\2\2\u1bc4\u1bc2\3\2\2\2"+
		"\u1bc4\u1bc5\3\2\2\2\u1bc5\u1bc6\3\2\2\2\u1bc6\u1bcb\5\u0386\u01c4\2\u1bc7"+
		"\u1bc8\7\u0337\2\2\u1bc8\u1bca\5\u0386\u01c4\2\u1bc9\u1bc7\3\2\2\2\u1bca"+
		"\u1bcd\3\2\2\2\u1bcb\u1bc9\3\2\2\2\u1bcb\u1bcc\3\2\2\2\u1bcc\u1bcf\3\2"+
		"\2\2\u1bcd\u1bcb\3\2\2\2\u1bce\u1bd0\7\u0338\2\2\u1bcf\u1bce\3\2\2\2\u1bcf"+
		"\u1bd0\3\2\2\2\u1bd0\u0249\3\2\2\2\u1bd1\u1bd4\5\u024c\u0127\2\u1bd2\u1bd4"+
		"\5\u024e\u0128\2\u1bd3\u1bd1\3\2\2\2\u1bd3\u1bd2\3\2\2\2\u1bd4\u024b\3"+
		"\2\2\2\u1bd5\u1bd6\7h\2\2\u1bd6\u1bd9\7\u0163\2\2\u1bd7\u1bd8\7\u009a"+
		"\2\2\u1bd8\u1bda\7x\2\2\u1bd9\u1bd7\3\2\2\2\u1bd9\u1bda\3\2\2\2\u1bda"+
		"\u1bdb\3\2\2\2\u1bdb\u1be0\5\u0384\u01c3\2\u1bdc\u1bdd\7\u0337\2\2\u1bdd"+
		"\u1bdf\5\u0384\u01c3\2\u1bde\u1bdc\3\2\2\2\u1bdf\u1be2\3\2\2\2\u1be0\u1bde"+
		"\3\2\2\2\u1be0\u1be1\3\2\2\2\u1be1\u1be4\3\2\2\2\u1be2\u1be0\3\2\2\2\u1be3"+
		"\u1be5\7\u0338\2\2\u1be4\u1be3\3\2\2\2\u1be4\u1be5\3\2\2\2\u1be5\u024d"+
		"\3\2\2\2\u1be6\u1be7\7h\2\2\u1be7\u1bea\7\u0163\2\2\u1be8\u1be9\7\u009a"+
		"\2\2\u1be9\u1beb\7x\2\2\u1bea\u1be8\3\2\2\2\u1bea\u1beb\3\2\2\2\u1beb"+
		"\u1bec\3\2\2\2\u1bec\u1bf1\5\u0384\u01c3\2\u1bed\u1bee\7\u0337\2\2\u1bee"+
		"\u1bf0\5\u0384\u01c3\2\u1bef\u1bed\3\2\2\2\u1bf0\u1bf3\3\2\2\2\u1bf1\u1bef"+
		"\3\2\2\2\u1bf1\u1bf2\3\2\2\2\u1bf2\u1bf4\3\2\2\2\u1bf3\u1bf1\3\2\2\2\u1bf4"+
		"\u1bf8\7\u00e5\2\2\u1bf5\u1bf9\7U\2\2\u1bf6\u1bf7\7\6\2\2\u1bf7\u1bf9"+
		"\7\u0137\2\2\u1bf8\u1bf5\3\2\2\2\u1bf8\u1bf6\3\2\2\2\u1bf9\u1bfb\3\2\2"+
		"\2\u1bfa\u1bfc\7\u0338\2\2\u1bfb\u1bfa\3\2\2\2\u1bfb\u1bfc\3\2\2\2\u1bfc"+
		"\u024f\3\2\2\2\u1bfd\u1bfe\7h\2\2\u1bfe\u1c01\7\u008e\2\2\u1bff\u1c00"+
		"\7\u009a\2\2\u1c00\u1c02\7x\2\2\u1c01\u1bff\3\2\2\2\u1c01\u1c02\3\2\2"+
		"\2\u1c02\u1c03\3\2\2\2\u1c03\u1c08\5\u0386\u01c4\2\u1c04\u1c05\7\u0337"+
		"\2\2\u1c05\u1c07\5\u0386\u01c4\2\u1c06\u1c04\3\2\2\2\u1c07\u1c0a\3\2\2"+
		"\2\u1c08\u1c06\3\2\2\2\u1c08\u1c09\3\2\2\2\u1c09\u1c0c\3\2\2\2\u1c0a\u1c08"+
		"\3\2\2\2\u1c0b\u1c0d\7\u0338\2\2\u1c0c\u1c0b\3\2\2\2\u1c0c\u1c0d\3\2\2"+
		"\2\u1c0d\u0251\3\2\2\2\u1c0e\u1c0f\7h\2\2\u1c0f\u1c19\7\u014a\2\2\u1c10"+
		"\u1c12\7\u0337\2\2\u1c11\u1c10\3\2\2\2\u1c11\u1c12\3\2\2\2\u1c12\u1c16"+
		"\3\2\2\2\u1c13\u1c14\5\u0382\u01c2\2\u1c14\u1c15\7\u0330\2\2\u1c15\u1c17"+
		"\3\2\2\2\u1c16\u1c13\3\2\2\2\u1c16\u1c17\3\2\2\2\u1c17\u1c18\3\2\2\2\u1c18"+
		"\u1c1a\5\u03b6\u01dc\2\u1c19\u1c11\3\2\2\2\u1c1a\u1c1b\3\2\2\2\u1c1b\u1c19"+
		"\3\2\2\2\u1c1b\u1c1c\3\2\2\2\u1c1c\u1c1d\3\2\2\2\u1c1d\u1c1e\7\u0338\2"+
		"\2\u1c1e\u0253\3\2\2\2\u1c1f\u1c20\7h\2\2\u1c20\u1c23\7\u0156\2\2\u1c21"+
		"\u1c22\7\u009a\2\2\u1c22\u1c24\7x\2\2\u1c23\u1c21\3\2\2\2\u1c23\u1c24"+
		"\3\2\2\2\u1c24\u1c25\3\2\2\2\u1c25\u1c27\5\u0382\u01c2\2\u1c26\u1c28\7"+
		"\u0338\2\2\u1c27\u1c26\3\2\2\2\u1c27\u1c28\3\2\2\2\u1c28\u0255\3\2\2\2"+
		"\u1c29\u1c2a\7h\2\2\u1c2a\u1c2d\7\u0175\2\2\u1c2b\u1c2c\7\u009a\2\2\u1c2c"+
		"\u1c2e\7x\2\2\u1c2d\u1c2b\3\2\2\2\u1c2d\u1c2e\3\2\2\2\u1c2e\u1c2f\3\2"+
		"\2\2\u1c2f\u1c34\5\u0384\u01c3\2\u1c30\u1c31\7\u0337\2\2\u1c31\u1c33\5"+
		"\u0384\u01c3\2\u1c32\u1c30\3\2\2\2\u1c33\u1c36\3\2\2\2\u1c34\u1c32\3\2"+
		"\2\2\u1c34\u1c35\3\2\2\2\u1c35\u1c38\3\2\2\2\u1c36\u1c34\3\2\2\2\u1c37"+
		"\u1c39\7\u0338\2\2\u1c38\u1c37\3\2\2\2\u1c38\u1c39\3\2\2\2\u1c39\u0257"+
		"\3\2\2\2\u1c3a\u1c3b\7I\2\2\u1c3b\u1c3c\7\u02fb\2\2\u1c3c\u1c41\5\u0384"+
		"\u01c3\2\u1c3d\u1c3e\7\u008c\2\2\u1c3e\u1c3f\5\u03ae\u01d8\2\u1c3f\u1c40"+
		"\5\u03b0\u01d9\2\u1c40\u1c42\3\2\2\2\u1c41\u1c3d\3\2\2\2\u1c41\u1c42\3"+
		"\2\2\2\u1c42\u1c49\3\2\2\2\u1c43\u1c44\7\20\2\2\u1c44\u1c45\7\u0156\2"+
		"\2\u1c45\u1c46\7\u0335\2\2\u1c46\u1c47\5\u02ac\u0157\2\u1c47\u1c48\7\u0336"+
		"\2\2\u1c48\u1c4a\3\2\2\2\u1c49\u1c43\3\2\2\2\u1c49\u1c4a\3\2\2\2\u1c4a"+
		"\u0259\3\2\2\2\u1c4b\u1c4c\7h\2\2\u1c4c\u1c4f\7\u02fb\2\2\u1c4d\u1c4e"+
		"\7\u009a\2\2\u1c4e\u1c50\7x\2\2\u1c4f\u1c4d\3\2\2\2\u1c4f\u1c50\3\2\2"+
		"\2\u1c50\u1c51\3\2\2\2\u1c51\u1c52\5\u0384\u01c3\2\u1c52\u025b\3\2\2\2"+
		"\u1c53\u1c56\5\u025e\u0130\2\u1c54\u1c56\5\u0260\u0131\2\u1c55\u1c53\3"+
		"\2\2\2\u1c55\u1c54\3\2\2\2\u1c56\u025d\3\2\2\2\u1c57\u1c58\7\u00e9\2\2"+
		"\u1c58\u1c59\7\u0335\2\2\u1c59\u1c5a\5\u03b6\u01dc\2\u1c5a\u1c5b\7\u0337"+
		"\2\2\u1c5b\u1c5c\7\u031f\2\2\u1c5c\u1c5d\7\u0336\2\2\u1c5d\u025f\3\2\2"+
		"\2\u1c5e\u1c5f\7\u00e8\2\2\u1c5f\u1c60\7\u0335\2\2\u1c60\u1c61\7\u031f"+
		"\2\2\u1c61\u1c62\7\u0337\2\2\u1c62\u1c63\7\u031f\2\2\u1c63\u1c64\7\u0336"+
		"\2\2\u1c64\u1c66\7\u0330\2\2\u1c65\u1c67\5\u03b6\u01dc\2\u1c66\u1c65\3"+
		"\2\2\2\u1c66\u1c67\3\2\2\2\u1c67\u1c68\3\2\2\2\u1c68\u1c6a\7\u0330\2\2"+
		"\u1c69\u1c6b\5\u03b6\u01dc\2\u1c6a\u1c69\3\2\2\2\u1c6a\u1c6b\3\2\2\2\u1c6b"+
		"\u1c6c\3\2\2\2\u1c6c\u1c6d\7\u0330\2\2\u1c6d\u1c6e\5\u03b6\u01dc\2\u1c6e"+
		"\u0261\3\2\2\2\u1c6f\u1c70\7Y\2\2\u1c70\u1c72\7\u031a\2\2\u1c71\u1c73"+
		"\7\20\2\2\u1c72\u1c71\3\2\2\2\u1c72\u1c73\3\2\2\2\u1c73\u1c74\3\2\2\2"+
		"\u1c74\u1c76\5\u02a6\u0154\2\u1c75\u1c77\7\u0338\2\2\u1c76\u1c75\3\2\2"+
		"\2\u1c76\u1c77\3\2\2\2\u1c77\u1c9b\3\2\2\2\u1c78\u1c79\7Y\2\2\u1c79\u1c7e"+
		"\5\u02a4\u0153\2\u1c7a\u1c7b\7\u0337\2\2\u1c7b\u1c7d\5\u02a4\u0153\2\u1c7c"+
		"\u1c7a\3\2\2\2\u1c7d\u1c80\3\2\2\2\u1c7e\u1c7c\3\2\2\2\u1c7e\u1c7f\3\2"+
		"\2\2\u1c7f\u1c82\3\2\2\2\u1c80\u1c7e\3\2\2\2\u1c81\u1c83\7\u0338\2\2\u1c82"+
		"\u1c81\3\2\2\2\u1c82\u1c83\3\2\2\2\u1c83\u1c9b\3\2\2\2\u1c84\u1c85\7Y"+
		"\2\2\u1c85\u1c87\7\u031a\2\2\u1c86\u1c88\7\20\2\2\u1c87\u1c86\3\2\2\2"+
		"\u1c87\u1c88\3\2\2\2\u1c88\u1c89\3\2\2\2\u1c89\u1c8b\5\u02a8\u0155\2\u1c8a"+
		"\u1c8c\7\u0338\2\2\u1c8b\u1c8a\3\2\2\2\u1c8b\u1c8c\3\2\2\2\u1c8c\u1c9b"+
		"\3\2\2\2\u1c8d\u1c8e\7\u017c\2\2\u1c8e\u1c8f\7\u0310\2\2\u1c8f\u1c90\7"+
		"\u0335\2\2\u1c90\u1c92\7\u031f\2\2\u1c91\u1c93\7\u0337\2\2\u1c92\u1c91"+
		"\3\2\2\2\u1c92\u1c93\3\2\2\2\u1c93\u1c94\3\2\2\2\u1c94\u1c95\7\20\2\2"+
		"\u1c95\u1c96\5\u03b6\u01dc\2\u1c96\u1c98\7\u0336\2\2\u1c97\u1c99\7\u0338"+
		"\2\2\u1c98\u1c97\3\2\2\2\u1c98\u1c99\3\2\2\2\u1c99\u1c9b\3\2\2\2\u1c9a"+
		"\u1c6f\3\2\2\2\u1c9a\u1c78\3\2\2\2\u1c9a\u1c84\3\2\2\2\u1c9a\u1c8d\3\2"+
		"\2\2\u1c9b\u0263\3\2\2\2\u1c9c\u1c9e\7\63\2\2\u1c9d\u1c9f\7\u020f\2\2"+
		"\u1c9e\u1c9d\3\2\2\2\u1c9e\u1c9f\3\2\2\2\u1c9f\u1ca0\3\2\2\2\u1ca0\u1ca2"+
		"\5\u0390\u01c9\2\u1ca1\u1ca3\7\u0338\2\2\u1ca2\u1ca1\3\2\2\2\u1ca2\u1ca3"+
		"\3\2\2\2\u1ca3\u1cba\3\2\2\2\u1ca4\u1ca6\7X\2\2\u1ca5\u1ca7\7\u020f\2"+
		"\2\u1ca6\u1ca5\3\2\2\2\u1ca6\u1ca7\3\2\2\2\u1ca7\u1ca9\3\2\2\2\u1ca8\u1caa"+
		"\7P\2\2\u1ca9\u1ca8\3\2\2\2\u1ca9\u1caa\3\2\2\2\u1caa\u1cab\3\2\2\2\u1cab"+
		"\u1cad\5\u0390\u01c9\2\u1cac\u1cae\7\u0338\2\2\u1cad\u1cac\3\2\2\2\u1cad"+
		"\u1cae\3\2\2\2\u1cae\u1cba\3\2\2\2\u1caf\u1cba\5\u02c0\u0161\2\u1cb0\u1cba"+
		"\5\u02c6\u0164\2\u1cb1\u1cb3\7\u00e7\2\2\u1cb2\u1cb4\7\u020f\2\2\u1cb3"+
		"\u1cb2\3\2\2\2\u1cb3\u1cb4\3\2\2\2\u1cb4\u1cb5\3\2\2\2\u1cb5\u1cb7\5\u0390"+
		"\u01c9\2\u1cb6\u1cb8\7\u0338\2\2\u1cb7\u1cb6\3\2\2\2\u1cb7\u1cb8\3\2\2"+
		"\2\u1cb8\u1cba\3\2\2\2\u1cb9\u1c9c\3\2\2\2\u1cb9\u1ca4\3\2\2\2\u1cb9\u1caf"+
		"\3\2\2\2\u1cb9\u1cb0\3\2\2\2\u1cb9\u1cb1\3\2\2\2\u1cba\u0265\3\2\2\2\u1cbb"+
		"\u1cbc\7\32\2\2\u1cbc\u1cbd\7U\2\2\u1cbd\u1cca\5\u03b6\u01dc\2\u1cbe\u1cc7"+
		"\7\u010c\2\2\u1cbf\u1cc1\7\u0337\2\2\u1cc0\u1cbf\3\2\2\2\u1cc0\u1cc1\3"+
		"\2\2\2\u1cc1\u1cc2\3\2\2\2\u1cc2\u1cc3\tQ\2\2\u1cc3\u1cc4\7\u0323\2\2"+
		"\u1cc4\u1cc6\7\u031f\2\2\u1cc5\u1cc0\3\2\2\2\u1cc6\u1cc9\3\2\2\2\u1cc7"+
		"\u1cc5\3\2\2\2\u1cc7\u1cc8\3\2\2\2\u1cc8\u1ccb\3\2\2\2\u1cc9\u1cc7\3\2"+
		"\2\2\u1cca\u1cbe\3\2\2\2\u1cca\u1ccb\3\2\2\2\u1ccb\u1cd4\3\2\2\2\u1ccc"+
		"\u1cce\7\u0337\2\2\u1ccd\u1ccc\3\2\2\2\u1ccd\u1cce\3\2\2\2\u1cce\u1ccf"+
		"\3\2\2\2\u1ccf\u1cd0\tQ\2\2\u1cd0\u1cd1\7\u0323\2\2\u1cd1\u1cd3\7\u031f"+
		"\2\2\u1cd2\u1ccd\3\2\2\2\u1cd3\u1cd6\3\2\2\2\u1cd4\u1cd2\3\2\2\2\u1cd4"+
		"\u1cd5\3\2\2\2\u1cd5\u1cee\3\2\2\2\u1cd6\u1cd4\3\2\2\2\u1cd7\u1cdc\7\u015d"+
		"\2\2\u1cd8\u1cda\7\u0337\2\2\u1cd9\u1cd8\3\2\2\2\u1cd9\u1cda\3\2\2\2\u1cda"+
		"\u1cdb\3\2\2\2\u1cdb\u1cdd\5\u03b6\u01dc\2\u1cdc\u1cd9\3\2\2\2\u1cdd\u1cde"+
		"\3\2\2\2\u1cde\u1cdc\3\2\2\2\u1cde\u1cdf\3\2\2\2\u1cdf\u1cef\3\2\2\2\u1ce0"+
		"\u1cea\7\u015d\2\2\u1ce1\u1ce3\7\u0337\2\2\u1ce2\u1ce1\3\2\2\2\u1ce2\u1ce3"+
		"\3\2\2\2\u1ce3\u1ce4\3\2\2\2\u1ce4\u1ce5\tR\2\2\u1ce5\u1ce8\7\u0323\2"+
		"\2\u1ce6\u1ce9\7\u031f\2\2\u1ce7\u1ce9\5\u03b6\u01dc\2\u1ce8\u1ce6\3\2"+
		"\2\2\u1ce8\u1ce7\3\2\2\2\u1ce9\u1ceb\3\2\2\2\u1cea\u1ce2\3\2\2\2\u1ceb"+
		"\u1cec\3\2\2\2\u1cec\u1cea\3\2\2\2\u1cec\u1ced\3\2\2\2\u1ced\u1cef\3\2"+
		"\2\2\u1cee\u1cd7\3\2\2\2\u1cee\u1ce0\3\2\2\2\u1cef\u1d11\3\2\2\2\u1cf0"+
		"\u1cf1\7\u00cd\2\2\u1cf1\u1cf6\7\u015d\2\2\u1cf2\u1cf4\7\u0337\2\2\u1cf3"+
		"\u1cf2\3\2\2\2\u1cf3\u1cf4\3\2\2\2\u1cf4\u1cf5\3\2\2\2\u1cf5\u1cf7\5\u03b6"+
		"\u01dc\2\u1cf6\u1cf3\3\2\2\2\u1cf7\u1cf8\3\2\2\2\u1cf8\u1cf6\3\2\2\2\u1cf8"+
		"\u1cf9\3\2\2\2\u1cf9\u1cfb\3\2\2\2\u1cfa\u1cf0\3\2\2\2\u1cfb\u1cfc\3\2"+
		"\2\2\u1cfc\u1cfa\3\2\2\2\u1cfc\u1cfd\3\2\2\2\u1cfd\u1d12\3\2\2\2\u1cfe"+
		"\u1cff\7\u00cd\2\2\u1cff\u1d09\7\u015d\2\2\u1d00\u1d02\7\u0337\2\2\u1d01"+
		"\u1d00\3\2\2\2\u1d01\u1d02\3\2\2\2\u1d02\u1d03\3\2\2\2\u1d03\u1d04\tR"+
		"\2\2\u1d04\u1d07\7\u0323\2\2\u1d05\u1d08\7\u031f\2\2\u1d06\u1d08\5\u03b6"+
		"\u01dc\2\u1d07\u1d05\3\2\2\2\u1d07\u1d06\3\2\2\2\u1d08\u1d0a\3\2\2\2\u1d09"+
		"\u1d01\3\2\2\2\u1d0a\u1d0b\3\2\2\2\u1d0b\u1d09\3\2\2\2\u1d0b\u1d0c\3\2"+
		"\2\2\u1d0c\u1d0e\3\2\2\2\u1d0d\u1cfe\3\2\2\2\u1d0e\u1d0f\3\2\2\2\u1d0f"+
		"\u1d0d\3\2\2\2\u1d0f\u1d10\3\2\2\2\u1d10\u1d12\3\2\2\2\u1d11\u1cfa\3\2"+
		"\2\2\u1d11\u1d0d\3\2\2\2\u1d11\u1d12\3\2\2\2\u1d12\u1db3\3\2\2\2\u1d13"+
		"\u1db0\7\u017c\2\2\u1d14\u1d16\7\u0337\2\2\u1d15\u1d14\3\2\2\2\u1d15\u1d16"+
		"\3\2\2\2\u1d16\u1d17\3\2\2\2\u1d17\u1daf\7a\2\2\u1d18\u1d1a\7\u0337\2"+
		"\2\u1d19\u1d18\3\2\2\2\u1d19\u1d1a\3\2\2\2\u1d1a\u1d1b\3\2\2\2\u1d1b\u1daf"+
		"\7H\2\2\u1d1c\u1d1e\7\u0337\2\2\u1d1d\u1d1c\3\2\2\2\u1d1d\u1d1e\3\2\2"+
		"\2\u1d1e\u1d1f\3\2\2\2\u1d1f\u1daf\tS\2\2\u1d20\u1d22\7\u0337\2\2\u1d21"+
		"\u1d20\3\2\2\2\u1d21\u1d22\3\2\2\2\u1d22\u1d23\3\2\2\2\u1d23\u1d24\7\u01dd"+
		"\2\2\u1d24\u1d27\7\u0323\2\2\u1d25\u1d28\7\u031f\2\2\u1d26\u1d28\5\u03b6"+
		"\u01dc\2\u1d27\u1d25\3\2\2\2\u1d27\u1d26\3\2\2\2\u1d28\u1daf\3\2\2\2\u1d29"+
		"\u1d2b\7\u0337\2\2\u1d2a\u1d29\3\2\2\2\u1d2a\u1d2b\3\2\2\2\u1d2b\u1d2c"+
		"\3\2\2\2\u1d2c\u1d2d\7\u025e\2\2\u1d2d\u1d2e\7\u0323\2\2\u1d2e\u1daf\5"+
		"\u03b6\u01dc\2\u1d2f\u1d31\7\u0337\2\2\u1d30\u1d2f\3\2\2\2\u1d30\u1d31"+
		"\3\2\2\2\u1d31\u1d32\3\2\2\2\u1d32\u1daf\7\u01c7\2\2\u1d33\u1d35\7\u0337"+
		"\2\2\u1d34\u1d33\3\2\2\2\u1d34\u1d35\3\2\2\2\u1d35\u1d36\3\2\2\2\u1d36"+
		"\u1daf\7\u0085\2\2\u1d37\u1d39\7\u0337\2\2\u1d38\u1d37\3\2\2\2\u1d38\u1d39"+
		"\3\2\2\2\u1d39\u1d46\3\2\2\2\u1d3a\u1d3b\7y\2\2\u1d3b\u1d3e\7\u0323\2"+
		"\2\u1d3c\u1d3f\7\u031f\2\2\u1d3d\u1d3f\5\u03b6\u01dc\2\u1d3e\u1d3c\3\2"+
		"\2\2\u1d3e\u1d3d\3\2\2\2\u1d3f\u1d47\3\2\2\2\u1d40\u1d41\7\u0119\2\2\u1d41"+
		"\u1d44\7\u0323\2\2\u1d42\u1d45\7\u031b\2\2\u1d43\u1d45\5\u03b6\u01dc\2"+
		"\u1d44\u1d42\3\2\2\2\u1d44\u1d43\3\2\2\2\u1d45\u1d47\3\2\2\2\u1d46\u1d3a"+
		"\3\2\2\2\u1d46\u1d40\3\2\2\2\u1d47\u1daf\3\2\2\2\u1d48\u1d4a\7\u0337\2"+
		"\2\u1d49\u1d48\3\2\2\2\u1d49\u1d4a\3\2\2\2\u1d4a\u1d4b\3\2\2\2\u1d4b\u1daf"+
		"\tT\2\2\u1d4c\u1d4e\7\u0337\2\2\u1d4d\u1d4c\3\2\2\2\u1d4d\u1d4e\3\2\2"+
		"\2\u1d4e\u1d4f\3\2\2\2\u1d4f\u1daf\tU\2\2\u1d50\u1d52\7\u0337\2\2\u1d51"+
		"\u1d50\3\2\2\2\u1d51\u1d52\3\2\2\2\u1d52\u1d53\3\2\2\2\u1d53\u1daf\tV"+
		"\2\2\u1d54\u1d56\7\u0337\2\2\u1d55\u1d54\3\2\2\2\u1d55\u1d56\3\2\2\2\u1d56"+
		"\u1d57\3\2\2\2\u1d57\u1d58\7\u00c5\2\2\u1d58\u1d5b\7\u0323\2\2\u1d59\u1d5c"+
		"\7\u031f\2\2\u1d5a\u1d5c\5\u03b6\u01dc\2\u1d5b\u1d59\3\2\2\2\u1d5b\u1d5a"+
		"\3\2\2\2\u1d5c\u1daf\3\2\2\2\u1d5d\u1d5f\7\u0337\2\2\u1d5e\u1d5d\3\2\2"+
		"\2\u1d5e\u1d5f\3\2\2\2\u1d5f\u1d60\3\2\2\2\u1d60\u1d61\7\u00c6\2\2\u1d61"+
		"\u1d62\7\u0323\2\2\u1d62\u1daf\7\u031f\2\2\u1d63\u1d65\7\u0337\2\2\u1d64"+
		"\u1d63\3\2\2\2\u1d64\u1d65\3\2\2\2\u1d65\u1d66\3\2\2\2\u1d66\u1d67\7\37"+
		"\2\2\u1d67\u1d6a\7\u0323\2\2\u1d68\u1d6b\7\u031b\2\2\u1d69\u1d6b\5\u03b6"+
		"\u01dc\2\u1d6a\u1d68\3\2\2\2\u1d6a\u1d69\3\2\2\2\u1d6b\u1daf\3\2\2\2\u1d6c"+
		"\u1d6e\7\u0337\2\2\u1d6d\u1d6c\3\2\2\2\u1d6d\u1d6e\3\2\2\2\u1d6e\u1d6f"+
		"\3\2\2\2\u1d6f\u1d70\7$\2\2\u1d70\u1d73\7\u0323\2\2\u1d71\u1d74\7\u031b"+
		"\2\2\u1d72\u1d74\5\u03b6\u01dc\2\u1d73\u1d71\3\2\2\2\u1d73\u1d72\3\2\2"+
		"\2\u1d74\u1daf\3\2\2\2\u1d75\u1d77\7\u0337\2\2\u1d76\u1d75\3\2\2\2\u1d76"+
		"\u1d77\3\2\2\2\u1d77\u1d78\3\2\2\2\u1d78\u1d79\7\u00bf\2\2\u1d79\u1d7c"+
		"\7\u0323\2\2\u1d7a\u1d7d\7\u031b\2\2\u1d7b\u1d7d\5\u03b6\u01dc\2\u1d7c"+
		"\u1d7a\3\2\2\2\u1d7c\u1d7b\3\2\2\2\u1d7d\u1daf\3\2\2\2\u1d7e\u1d80\7\u0337"+
		"\2\2\u1d7f\u1d7e\3\2\2\2\u1d7f\u1d80\3\2\2\2\u1d80\u1d81\3\2\2\2\u1d81"+
		"\u1daf\tW\2\2\u1d82\u1d84\7\u0337\2\2\u1d83\u1d82\3\2\2\2\u1d83\u1d84"+
		"\3\2\2\2\u1d84\u1d85\3\2\2\2\u1d85\u1daf\tX\2\2\u1d86\u1d88\7\u0337\2"+
		"\2\u1d87\u1d86\3\2\2\2\u1d87\u1d88\3\2\2\2\u1d88\u1d89\3\2\2\2\u1d89\u1daf"+
		"\7\u0115\2\2\u1d8a\u1d8c\7\u0337\2\2\u1d8b\u1d8a\3\2\2\2\u1d8b\u1d8c\3"+
		"\2\2\2\u1d8c\u1d8d\3\2\2\2\u1d8d\u1d90\7\u014c\2\2\u1d8e\u1d8f\7\u0323"+
		"\2\2\u1d8f\u1d91\7\u031b\2\2\u1d90\u1d8e\3\2\2\2\u1d90\u1d91\3\2\2\2\u1d91"+
		"\u1daf\3\2\2\2\u1d92\u1d94\7\u0337\2\2\u1d93\u1d92\3\2\2\2\u1d93\u1d94"+
		"\3\2\2\2\u1d94\u1d95\3\2\2\2\u1d95\u1daf\tY\2\2\u1d96\u1d98\7\u0337\2"+
		"\2\u1d97\u1d96\3\2\2\2\u1d97\u1d98\3\2\2\2\u1d98\u1d99\3\2\2\2\u1d99\u1daf"+
		"\tZ\2\2\u1d9a\u1d9c\7\u0337\2\2\u1d9b\u1d9a\3\2\2\2\u1d9b\u1d9c\3\2\2"+
		"\2\u1d9c\u1d9d\3\2\2\2\u1d9d\u1d9e\7\u01ee\2\2\u1d9e\u1d9f\7\u0335\2\2"+
		"\u1d9f\u1da0\7\u018d\2\2\u1da0\u1da1\7\u0323\2\2\u1da1\u1da2\t[\2\2\u1da2"+
		"\u1da3\7\u0337\2\2\u1da3\u1da4\7\u0137\2\2\u1da4\u1da5\7+\2\2\u1da5\u1dac"+
		"\7\u0323\2\2\u1da6\u1dad\5\u03b6\u01dc\2\u1da7\u1da8\7\u0137\2\2\u1da8"+
		"\u1da9\7\22\2\2\u1da9\u1daa\7\u00ac\2\2\u1daa\u1dab\7\u0323\2\2\u1dab"+
		"\u1dad\5\u03b6\u01dc\2\u1dac\u1da6\3\2\2\2\u1dac\u1da7\3\2\2\2\u1dad\u1daf"+
		"\3\2\2\2\u1dae\u1d15\3\2\2\2\u1dae\u1d19\3\2\2\2\u1dae\u1d1d\3\2\2\2\u1dae"+
		"\u1d21\3\2\2\2\u1dae\u1d2a\3\2\2\2\u1dae\u1d30\3\2\2\2\u1dae\u1d34\3\2"+
		"\2\2\u1dae\u1d38\3\2\2\2\u1dae\u1d49\3\2\2\2\u1dae\u1d4d\3\2\2\2\u1dae"+
		"\u1d51\3\2\2\2\u1dae\u1d55\3\2\2\2\u1dae\u1d5e\3\2\2\2\u1dae\u1d64\3\2"+
		"\2\2\u1dae\u1d6d\3\2\2\2\u1dae\u1d76\3\2\2\2\u1dae\u1d7f\3\2\2\2\u1dae"+
		"\u1d83\3\2\2\2\u1dae\u1d87\3\2\2\2\u1dae\u1d8b\3\2\2\2\u1dae\u1d93\3\2"+
		"\2\2\u1dae\u1d97\3\2\2\2\u1dae\u1d9b\3\2\2\2\u1daf\u1db2\3\2\2\2\u1db0"+
		"\u1dae\3\2\2\2\u1db0\u1db1\3\2\2\2\u1db1\u1db4\3\2\2\2\u1db2\u1db0\3\2"+
		"\2\2\u1db3\u1d13\3\2\2\2\u1db3\u1db4\3\2\2\2\u1db4\u0267\3\2\2\2\u1db5"+
		"\u1db6\7\32\2\2\u1db6\u1db7\7\u00bb\2\2\u1db7\u1dcf\5\u03b6\u01dc\2\u1db8"+
		"\u1dbd\7\u015d\2\2\u1db9\u1dbb\7\u0337\2\2\u1dba\u1db9\3\2\2\2\u1dba\u1dbb"+
		"\3\2\2\2\u1dbb\u1dbc\3\2\2\2\u1dbc\u1dbe\5\u03b6\u01dc\2\u1dbd\u1dba\3"+
		"\2\2\2\u1dbe\u1dbf\3\2\2\2\u1dbf\u1dbd\3\2\2\2\u1dbf\u1dc0\3\2\2\2\u1dc0"+
		"\u1dd0\3\2\2\2\u1dc1\u1dcb\7\u015d\2\2\u1dc2\u1dc4\7\u0337\2\2\u1dc3\u1dc2"+
		"\3\2\2\2\u1dc3\u1dc4\3\2\2\2\u1dc4\u1dc5\3\2\2\2\u1dc5\u1dc6\tR\2\2\u1dc6"+
		"\u1dc9\7\u0323\2\2\u1dc7\u1dca\7\u031f\2\2\u1dc8\u1dca\5\u03b6\u01dc\2"+
		"\u1dc9\u1dc7\3\2\2\2\u1dc9\u1dc8\3\2\2\2\u1dca\u1dcc\3\2\2\2\u1dcb\u1dc3"+
		"\3\2\2\2\u1dcc\u1dcd\3\2\2\2\u1dcd\u1dcb\3\2\2\2\u1dcd\u1dce\3\2\2\2\u1dce"+
		"\u1dd0\3\2\2\2\u1dcf\u1db8\3\2\2\2\u1dcf\u1dc1\3\2\2\2\u1dd0\u1df2\3\2"+
		"\2\2\u1dd1\u1dd2\7\u00cd\2\2\u1dd2\u1dd7\7\u015d\2\2\u1dd3\u1dd5\7\u0337"+
		"\2\2\u1dd4\u1dd3\3\2\2\2\u1dd4\u1dd5\3\2\2\2\u1dd5\u1dd6\3\2\2\2\u1dd6"+
		"\u1dd8\5\u03b6\u01dc\2\u1dd7\u1dd4\3\2\2\2\u1dd8\u1dd9\3\2\2\2\u1dd9\u1dd7"+
		"\3\2\2\2\u1dd9\u1dda\3\2\2\2\u1dda\u1ddc\3\2\2\2\u1ddb\u1dd1\3\2\2\2\u1ddc"+
		"\u1ddd\3\2\2\2\u1ddd\u1ddb\3\2\2\2\u1ddd\u1dde\3\2\2\2\u1dde\u1df3\3\2"+
		"\2\2\u1ddf\u1de0\7\u00cd\2\2\u1de0\u1dea\7\u015d\2\2\u1de1\u1de3\7\u0337"+
		"\2\2\u1de2\u1de1\3\2\2\2\u1de2\u1de3\3\2\2\2\u1de3\u1de4\3\2\2\2\u1de4"+
		"\u1de5\tR\2\2\u1de5\u1de8\7\u0323\2\2\u1de6\u1de9\7\u031f\2\2\u1de7\u1de9"+
		"\5\u03b6\u01dc\2\u1de8\u1de6\3\2\2\2\u1de8\u1de7\3\2\2\2\u1de9\u1deb\3"+
		"\2\2\2\u1dea\u1de2\3\2\2\2\u1deb\u1dec\3\2\2\2\u1dec\u1dea\3\2\2\2\u1dec"+
		"\u1ded\3\2\2\2\u1ded\u1def\3\2\2\2\u1dee\u1ddf\3\2\2\2\u1def\u1df0\3\2"+
		"\2\2\u1df0\u1dee\3\2\2\2\u1df0\u1df1\3\2\2\2\u1df1\u1df3\3\2\2\2\u1df2"+
		"\u1ddb\3\2\2\2\u1df2\u1dee\3\2\2\2\u1df2\u1df3\3\2\2\2\u1df3\u1ea1\3\2"+
		"\2\2\u1df4\u1e9e\7\u017c\2\2\u1df5\u1df7\7\u0337\2\2\u1df6\u1df5\3\2\2"+
		"\2\u1df6\u1df7\3\2\2\2\u1df7\u1df8\3\2\2\2\u1df8\u1e9d\7a\2\2\u1df9\u1dfb"+
		"\7\u0337\2\2\u1dfa\u1df9\3\2\2\2\u1dfa\u1dfb\3\2\2\2\u1dfb\u1dfc\3\2\2"+
		"\2\u1dfc\u1e9d\7H\2\2\u1dfd\u1dff\7\u0337\2\2\u1dfe\u1dfd\3\2\2\2\u1dfe"+
		"\u1dff\3\2\2\2\u1dff\u1e00\3\2\2\2\u1e00\u1e9d\tS\2\2\u1e01\u1e03\7\u0337"+
		"\2\2\u1e02\u1e01\3\2\2\2\u1e02\u1e03\3\2\2\2\u1e03\u1e04\3\2\2\2\u1e04"+
		"\u1e05\7\u01dd\2\2\u1e05\u1e08\7\u0323\2\2\u1e06\u1e09\7\u031f\2\2\u1e07"+
		"\u1e09\5\u03b6\u01dc\2\u1e08\u1e06\3\2\2\2\u1e08\u1e07\3\2\2\2\u1e09\u1e9d"+
		"\3\2\2\2\u1e0a\u1e0c\7\u0337\2\2\u1e0b\u1e0a\3\2\2\2\u1e0b\u1e0c\3\2\2"+
		"\2\u1e0c\u1e0d\3\2\2\2\u1e0d\u1e0e\7\u025e\2\2\u1e0e\u1e0f\7\u0323\2\2"+
		"\u1e0f\u1e9d\5\u03b6\u01dc\2\u1e10\u1e12\7\u0337\2\2\u1e11\u1e10\3\2\2"+
		"\2\u1e11\u1e12\3\2\2\2\u1e12\u1e13\3\2\2\2\u1e13\u1e9d\7\u01c7\2\2\u1e14"+
		"\u1e16\7\u0337\2\2\u1e15\u1e14\3\2\2\2\u1e15\u1e16\3\2\2\2\u1e16\u1e17"+
		"\3\2\2\2\u1e17\u1e9d\7\u0085\2\2\u1e18\u1e1a\7\u0337\2\2\u1e19\u1e18\3"+
		"\2\2\2\u1e19\u1e1a\3\2\2\2\u1e1a\u1e27\3\2\2\2\u1e1b\u1e1c\7y\2\2\u1e1c"+
		"\u1e1f\7\u0323\2\2\u1e1d\u1e20\7\u031f\2\2\u1e1e\u1e20\5\u03b6\u01dc\2"+
		"\u1e1f\u1e1d\3\2\2\2\u1e1f\u1e1e\3\2\2\2\u1e20\u1e28\3\2\2\2\u1e21\u1e22"+
		"\7\u0119\2\2\u1e22\u1e25\7\u0323\2\2\u1e23\u1e26\7\u031b\2\2\u1e24\u1e26"+
		"\5\u03b6\u01dc\2\u1e25\u1e23\3\2\2\2\u1e25\u1e24\3\2\2\2\u1e26\u1e28\3"+
		"\2\2\2\u1e27\u1e1b\3\2\2\2\u1e27\u1e21\3\2\2\2\u1e28\u1e9d\3\2\2\2\u1e29"+
		"\u1e2b\7\u0337\2\2\u1e2a\u1e29\3\2\2\2\u1e2a\u1e2b\3\2\2\2\u1e2b\u1e2c"+
		"\3\2\2\2\u1e2c\u1e9d\tT\2\2\u1e2d\u1e2f\7\u0337\2\2\u1e2e\u1e2d\3\2\2"+
		"\2\u1e2e\u1e2f\3\2\2\2\u1e2f\u1e30\3\2\2\2\u1e30\u1e9d\tU\2\2\u1e31\u1e33"+
		"\7\u0337\2\2\u1e32\u1e31\3\2\2\2\u1e32\u1e33\3\2\2\2\u1e33\u1e34\3\2\2"+
		"\2\u1e34\u1e9d\tV\2\2\u1e35\u1e37\7\u0337\2\2\u1e36\u1e35\3\2\2\2\u1e36"+
		"\u1e37\3\2\2\2\u1e37\u1e38\3\2\2\2\u1e38\u1e39\7\u00c5\2\2\u1e39\u1e3c"+
		"\7\u0323\2\2\u1e3a\u1e3d\7\u031f\2\2\u1e3b\u1e3d\5\u03b6\u01dc\2\u1e3c"+
		"\u1e3a\3\2\2\2\u1e3c\u1e3b\3\2\2\2\u1e3d\u1e9d\3\2\2\2\u1e3e\u1e40\7\u0337"+
		"\2\2\u1e3f\u1e3e\3\2\2\2\u1e3f\u1e40\3\2\2\2\u1e40\u1e41\3\2\2\2\u1e41"+
		"\u1e42\7\u00c6\2\2\u1e42\u1e43\7\u0323\2\2\u1e43\u1e9d\7\u031f\2\2\u1e44"+
		"\u1e46\7\u0337\2\2\u1e45\u1e44\3\2\2\2\u1e45\u1e46\3\2\2\2\u1e46\u1e47"+
		"\3\2\2\2\u1e47\u1e48\7\37\2\2\u1e48\u1e4b\7\u0323\2\2\u1e49\u1e4c\7\u031b"+
		"\2\2\u1e4a\u1e4c\5\u03b6\u01dc\2\u1e4b\u1e49\3\2\2\2\u1e4b\u1e4a\3\2\2"+
		"\2\u1e4c\u1e9d\3\2\2\2\u1e4d\u1e4f\7\u0337\2\2\u1e4e\u1e4d\3\2\2\2\u1e4e"+
		"\u1e4f\3\2\2\2\u1e4f\u1e50\3\2\2\2\u1e50\u1e51\7$\2\2\u1e51\u1e54\7\u0323"+
		"\2\2\u1e52\u1e55\7\u031b\2\2\u1e53\u1e55\5\u03b6\u01dc\2\u1e54\u1e52\3"+
		"\2\2\2\u1e54\u1e53\3\2\2\2\u1e55\u1e9d\3\2\2\2\u1e56\u1e58\7\u0337\2\2"+
		"\u1e57\u1e56\3\2\2\2\u1e57\u1e58\3\2\2\2\u1e58\u1e59\3\2\2\2\u1e59\u1e5a"+
		"\7\u00bf\2\2\u1e5a\u1e5d\7\u0323\2\2\u1e5b\u1e5e\7\u031b\2\2\u1e5c\u1e5e"+
		"\5\u03b6\u01dc\2\u1e5d\u1e5b\3\2\2\2\u1e5d\u1e5c\3\2\2\2\u1e5e\u1e9d\3"+
		"\2\2\2\u1e5f\u1e61\7\u0337\2\2\u1e60\u1e5f\3\2\2\2\u1e60\u1e61\3\2\2\2"+
		"\u1e61\u1e62\3\2\2\2\u1e62\u1e9d\tW\2\2\u1e63\u1e65\7\u0337\2\2\u1e64"+
		"\u1e63\3\2\2\2\u1e64\u1e65\3\2\2\2\u1e65\u1e66\3\2\2\2\u1e66\u1e9d\tX"+
		"\2\2\u1e67\u1e69\7\u0337\2\2\u1e68\u1e67\3\2\2\2\u1e68\u1e69\3\2\2\2\u1e69"+
		"\u1e6a\3\2\2\2\u1e6a\u1e9d\7\u0115\2\2\u1e6b\u1e6d\7\u0337\2\2\u1e6c\u1e6b"+
		"\3\2\2\2\u1e6c\u1e6d\3\2\2\2\u1e6d\u1e6e\3\2\2\2\u1e6e\u1e71\7\u014c\2"+
		"\2\u1e6f\u1e70\7\u0323\2\2\u1e70\u1e72\7\u031b\2\2\u1e71\u1e6f\3\2\2\2"+
		"\u1e71\u1e72\3\2\2\2\u1e72\u1e9d\3\2\2\2\u1e73\u1e75\7\u0337\2\2\u1e74"+
		"\u1e73\3\2\2\2\u1e74\u1e75\3\2\2\2\u1e75\u1e76\3\2\2\2\u1e76\u1e9d\tY"+
		"\2\2\u1e77\u1e79\7\u0337\2\2\u1e78\u1e77\3\2\2\2\u1e78\u1e79\3\2\2\2\u1e79"+
		"\u1e7a\3\2\2\2\u1e7a\u1e9d\tZ\2\2\u1e7b\u1e7d\7\u0337\2\2\u1e7c\u1e7b"+
		"\3\2\2\2\u1e7c\u1e7d\3\2\2\2\u1e7d\u1e82\3\2\2\2\u1e7e\u1e83\7\u026c\2"+
		"\2\u1e7f\u1e80\7\u02da\2\2\u1e80\u1e81\7\u0323\2\2\u1e81\u1e83\7\u031f"+
		"\2\2\u1e82\u1e7e\3\2\2\2\u1e82\u1e7f\3\2\2\2\u1e83\u1e9d\3\2\2\2\u1e84"+
		"\u1e86\7\u0337\2\2\u1e85\u1e84\3\2\2\2\u1e85\u1e86\3\2\2\2\u1e86\u1e87"+
		"\3\2\2\2\u1e87\u1e9d\7\u0265\2\2\u1e88\u1e8a\7\u0337\2\2\u1e89\u1e88\3"+
		"\2\2\2\u1e89\u1e8a\3\2\2\2\u1e8a\u1e8b\3\2\2\2\u1e8b\u1e8c\7\u01ee\2\2"+
		"\u1e8c\u1e8d\7\u0335\2\2\u1e8d\u1e8e\7\u018d\2\2\u1e8e\u1e8f\7\u0323\2"+
		"\2\u1e8f\u1e90\t[\2\2\u1e90\u1e91\7\u0337\2\2\u1e91\u1e92\7\u0137\2\2"+
		"\u1e92\u1e93\7+\2\2\u1e93\u1e9a\7\u0323\2\2\u1e94\u1e9b\5\u03b6\u01dc"+
		"\2\u1e95\u1e96\7\u0137\2\2\u1e96\u1e97\7\22\2\2\u1e97\u1e98\7\u00ac\2"+
		"\2\u1e98\u1e99\7\u0323\2\2\u1e99\u1e9b\5\u03b6\u01dc\2\u1e9a\u1e94\3\2"+
		"\2\2\u1e9a\u1e95\3\2\2\2\u1e9b\u1e9d\3\2\2\2\u1e9c\u1df6\3\2\2\2\u1e9c"+
		"\u1dfa\3\2\2\2\u1e9c\u1dfe\3\2\2\2\u1e9c\u1e02\3\2\2\2\u1e9c\u1e0b\3\2"+
		"\2\2\u1e9c\u1e11\3\2\2\2\u1e9c\u1e15\3\2\2\2\u1e9c\u1e19\3\2\2\2\u1e9c"+
		"\u1e2a\3\2\2\2\u1e9c\u1e2e\3\2\2\2\u1e9c\u1e32\3\2\2\2\u1e9c\u1e36\3\2"+
		"\2\2\u1e9c\u1e3f\3\2\2\2\u1e9c\u1e45\3\2\2\2\u1e9c\u1e4e\3\2\2\2\u1e9c"+
		"\u1e57\3\2\2\2\u1e9c\u1e60\3\2\2\2\u1e9c\u1e64\3\2\2\2\u1e9c\u1e68\3\2"+
		"\2\2\u1e9c\u1e6c\3\2\2\2\u1e9c\u1e74\3\2\2\2\u1e9c\u1e78\3\2\2\2\u1e9c"+
		"\u1e7c\3\2\2\2\u1e9c\u1e85\3\2\2\2\u1e9c\u1e89\3\2\2\2\u1e9d\u1ea0\3\2"+
		"\2\2\u1e9e\u1e9c\3\2\2\2\u1e9e\u1e9f\3\2\2\2\u1e9f\u1ea2\3\2\2\2\u1ea0"+
		"\u1e9e\3\2\2\2\u1ea1\u1df4\3\2\2\2\u1ea1\u1ea2\3\2\2\2\u1ea2\u0269\3\2"+
		"\2\2\u1ea3\u1ea4\7\32\2\2\u1ea4\u1ea5\7+\2\2\u1ea5\u1ea6\5\u03b6\u01dc"+
		"\2\u1ea6\u1ea7\7\u015d\2\2\u1ea7\u1ea8\7\u0082\2\2\u1ea8\u1ea9\7\u0323"+
		"\2\2\u1ea9\u1ec9\7\u031f\2\2\u1eaa\u1eab\7\u017c\2\2\u1eab\u1eac\7\u028c"+
		"\2\2\u1eac\u1ead\7\u00ac\2\2\u1ead\u1ec4\7\u0335\2\2\u1eae\u1eb0\7\u0337"+
		"\2\2\u1eaf\u1eae\3\2\2\2\u1eaf\u1eb0\3\2\2\2\u1eb0\u1eb1\3\2\2\2\u1eb1"+
		"\u1eb2\7\u0082\2\2\u1eb2\u1eb3\7\u0323\2\2\u1eb3\u1ec5\7\u031f\2\2\u1eb4"+
		"\u1eb6\7\u0337\2\2\u1eb5\u1eb4\3\2\2\2\u1eb5\u1eb6\3\2\2\2\u1eb6\u1eb7"+
		"\3\2\2\2\u1eb7\u1eb8\7\u01ee\2\2\u1eb8\u1eb9\7&\2\2\u1eb9\u1eba\7\u00f4"+
		"\2\2\u1eba\u1ebb\7\u0323\2\2\u1ebb\u1ec5\7\u031f\2\2\u1ebc\u1ebe\7\u0337"+
		"\2\2\u1ebd\u1ebc\3\2\2\2\u1ebd\u1ebe\3\2\2\2\u1ebe\u1ebf\3\2\2\2\u1ebf"+
		"\u1ec0\7\u01d3\2\2\u1ec0\u1ec1\7&\2\2\u1ec1\u1ec2\7\u00f4\2\2\u1ec2\u1ec3"+
		"\7\u0323\2\2\u1ec3\u1ec5\7\u031f\2\2\u1ec4\u1eaf\3\2\2\2\u1ec4\u1eb5\3"+
		"\2\2\2\u1ec4\u1ebd\3\2\2\2\u1ec5\u1ec6\3\2\2\2\u1ec6\u1ec4\3\2\2\2\u1ec6"+
		"\u1ec7\3\2\2\2\u1ec7\u1ec8\3\2\2\2\u1ec8\u1eca\7\u0336\2\2\u1ec9\u1eaa"+
		"\3\2\2\2\u1ec9\u1eca\3\2\2\2\u1eca\u026b\3\2\2\2\u1ecb\u1ecc\7\32\2\2"+
		"\u1ecc\u1ecd\7\u00bd\2\2\u1ecd\u1ece\7\u00ac\2\2\u1ece\u1ecf\7\u015d\2"+
		"\2\u1ecf\u1ed0\7\u0082\2\2\u1ed0\u1ed1\7\u0323\2\2\u1ed1\u1ed2\7\u031f"+
		"\2\2\u1ed2\u1ed3\7\u01ee\2\2\u1ed3\u1ed4\7&\2\2\u1ed4\u1ed5\7\u00f4\2"+
		"\2\u1ed5\u1ed6\7\u0323\2\2\u1ed6\u1ed7\7\u031f\2\2\u1ed7\u026d\3\2\2\2"+
		"\u1ed8\u1ed9\7\32\2\2\u1ed9\u1eda\7\u0138\2\2\u1eda\u1edb\7\u00bd\2\2"+
		"\u1edb\u1edc\7\u00ac\2\2\u1edc\u1edd\7\u015d\2\2\u1edd\u1ede\7\u0082\2"+
		"\2\u1ede\u1edf\7\u0323\2\2\u1edf\u1ee0\7\u031f\2\2\u1ee0\u1ee1\7\u01ee"+
		"\2\2\u1ee1\u1ee2\7&\2\2\u1ee2\u1ee3\7\u00f4\2\2\u1ee3\u1ee4\7\u0323\2"+
		"\2\u1ee4\u1ee5\7\u031f\2\2\u1ee5\u026f\3\2\2\2\u1ee6\u1ee7\7w\2\2\u1ee7"+
		"\u1ee8\5\u0272\u013a\2\u1ee8\u0271\3\2\2\2\u1ee9\u1eea\7\u031a\2\2\u1eea"+
		"\u1eec\7\u0323\2\2\u1eeb\u1ee9\3\2\2\2\u1eeb\u1eec\3\2\2\2\u1eec\u1eef"+
		"\3\2\2\2\u1eed\u1ef0\5\u0386\u01c4\2\u1eee\u1ef0\5\u02cc\u0167\2\u1eef"+
		"\u1eed\3\2\2\2\u1eef\u1eee\3\2\2\2\u1ef0\u1ef9\3\2\2\2\u1ef1\u1ef6\5\u0274"+
		"\u013b\2\u1ef2\u1ef3\7\u0337\2\2\u1ef3\u1ef5\5\u0274\u013b\2\u1ef4\u1ef2"+
		"\3\2\2\2\u1ef5\u1ef8\3\2\2\2\u1ef6\u1ef4\3\2\2\2\u1ef6\u1ef7\3\2\2\2\u1ef7"+
		"\u1efa\3\2\2\2\u1ef8\u1ef6\3\2\2\2\u1ef9\u1ef1\3\2\2\2\u1ef9\u1efa\3\2"+
		"\2\2\u1efa\u1efc\3\2\2\2\u1efb\u1efd\7\u0338\2\2\u1efc\u1efb\3\2\2\2\u1efc"+
		"\u1efd\3\2\2\2\u1efd\u1f14\3\2\2\2\u1efe\u1eff\7\u0335\2\2\u1eff\u1f04"+
		"\5\u0276\u013c\2\u1f00\u1f01\7\u033d\2\2\u1f01\u1f03\5\u0276\u013c\2\u1f02"+
		"\u1f00\3\2\2\2\u1f03\u1f06\3\2\2\2\u1f04\u1f02\3\2\2\2\u1f04\u1f05\3\2"+
		"\2\2\u1f05\u1f07\3\2\2\2\u1f06\u1f04\3\2\2\2\u1f07\u1f0e\7\u0336\2\2\u1f08"+
		"\u1f0a\7\20\2\2\u1f09\u1f08\3\2\2\2\u1f09\u1f0a\3\2\2\2\u1f0a\u1f0b\3"+
		"\2\2\2\u1f0b\u1f0c\t\\\2\2\u1f0c\u1f0d\7\u0323\2\2\u1f0d\u1f0f\7\u031f"+
		"\2\2\u1f0e\u1f09\3\2\2\2\u1f0e\u1f0f\3\2\2\2\u1f0f\u1f11\3\2\2\2\u1f10"+
		"\u1f12\7\u0338\2\2\u1f11\u1f10\3\2\2\2\u1f11\u1f12\3\2\2\2\u1f12\u1f14"+
		"\3\2\2\2\u1f13\u1eeb\3\2\2\2\u1f13\u1efe\3\2\2\2\u1f14\u0273\3\2\2\2\u1f15"+
		"\u1f16\7\u031a\2\2\u1f16\u1f18\7\u0323\2\2\u1f17\u1f15\3\2\2\2\u1f17\u1f18"+
		"\3\2\2\2\u1f18\u1f22\3\2\2\2\u1f19\u1f1c\5\u02ca\u0166\2\u1f1a\u1f1c\5"+
		"\u03b6\u01dc\2\u1f1b\u1f19\3\2\2\2\u1f1b\u1f1a\3\2\2\2\u1f1c\u1f1e\3\2"+
		"\2\2\u1f1d\u1f1f\t]\2\2\u1f1e\u1f1d\3\2\2\2\u1f1e\u1f1f\3\2\2\2\u1f1f"+
		"\u1f23\3\2\2\2\u1f20\u1f23\7Z\2\2\u1f21\u1f23\7\u00df\2\2\u1f22\u1f1b"+
		"\3\2\2\2\u1f22\u1f20\3\2\2\2\u1f22\u1f21\3\2\2\2\u1f23\u0275\3\2\2\2\u1f24"+
		"\u1f25\t\3\2\2\u1f25\u0277\3\2\2\2\u1f26\u1f28\5\u02a2\u0152\2\u1f27\u1f29"+
		"\7\u0338\2\2\u1f28\u1f27\3\2\2\2\u1f28\u1f29\3\2\2\2\u1f29\u1f62\3\2\2"+
		"\2\u1f2a\u1f36\7\u0092\2\2\u1f2b\u1f2d\7\6\2\2\u1f2c\u1f2e\7\u028e\2\2"+
		"\u1f2d\u1f2c\3\2\2\2\u1f2d\u1f2e\3\2\2\2\u1f2e\u1f37\3\2\2\2\u1f2f\u1f34"+
		"\5\u0292\u014a\2\u1f30\u1f31\7\u0335\2\2\u1f31\u1f32\5\u038e\u01c8\2\u1f32"+
		"\u1f33\7\u0336\2\2\u1f33\u1f35\3\2\2\2\u1f34\u1f30\3\2\2\2\u1f34\u1f35"+
		"\3\2\2\2\u1f35\u1f37\3\2\2\2\u1f36\u1f2b\3\2\2\2\u1f36\u1f2f\3\2\2\2\u1f37"+
		"\u1f3a\3\2\2\2\u1f38\u1f39\7\u00e5\2\2\u1f39\u1f3b\5\u0382\u01c2\2\u1f3a"+
		"\u1f38\3\2\2\2\u1f3a\u1f3b\3\2\2\2\u1f3b\u1f3c\3\2\2\2\u1f3c\u1f3d\7\u015d"+
		"\2\2\u1f3d\u1f42\5\u03b6\u01dc\2\u1f3e\u1f3f\7\u0337\2\2\u1f3f\u1f41\5"+
		"\u03b6\u01dc\2\u1f40\u1f3e\3\2\2\2\u1f41\u1f44\3\2\2\2\u1f42\u1f40\3\2"+
		"\2\2\u1f42\u1f43\3\2\2\2\u1f43\u1f48\3\2\2\2\u1f44\u1f42\3\2\2\2\u1f45"+
		"\u1f46\7\u017c\2\2\u1f46\u1f47\7\u0092\2\2\u1f47\u1f49\7\u00ec\2\2\u1f48"+
		"\u1f45\3\2\2\2\u1f48\u1f49\3\2\2\2\u1f49\u1f4c\3\2\2\2\u1f4a\u1f4b\7\20"+
		"\2\2\u1f4b\u1f4d\5\u03b6\u01dc\2\u1f4c\u1f4a\3\2\2\2\u1f4c\u1f4d\3\2\2"+
		"\2\u1f4d\u1f4f\3\2\2\2\u1f4e\u1f50\7\u0338\2\2\u1f4f\u1f4e\3\2\2\2\u1f4f"+
		"\u1f50\3\2\2\2\u1f50\u1f62\3\2\2\2\u1f51\u1f58\7\u011c\2\2\u1f52\u1f53"+
		"\7\u0335\2\2\u1f53\u1f54\7\u017c\2\2\u1f54\u1f55\7\u01c0\2\2\u1f55\u1f56"+
		"\7\u0323\2\2\u1f56\u1f57\7\u031a\2\2\u1f57\u1f59\7\u0336\2\2\u1f58\u1f52"+
		"\3\2\2\2\u1f58\u1f59\3\2\2\2\u1f59\u1f5b\3\2\2\2\u1f5a\u1f5c\7\u0338\2"+
		"\2\u1f5b\u1f5a\3\2\2\2\u1f5b\u1f5c\3\2\2\2\u1f5c\u1f62\3\2\2\2\u1f5d\u1f62"+
		"\5\u0284\u0143\2\u1f5e\u1f62\5\u0286\u0144\2\u1f5f\u1f62\5\u0288\u0145"+
		"\2\u1f60\u1f62\5\u027a\u013e\2\u1f61\u1f26\3\2\2\2\u1f61\u1f2a\3\2\2\2"+
		"\u1f61\u1f51\3\2\2\2\u1f61\u1f5d\3\2\2\2\u1f61\u1f5e\3\2\2\2\u1f61\u1f5f"+
		"\3\2\2\2\u1f61\u1f60\3\2\2\2\u1f62\u0279\3\2\2\2\u1f63\u1f64\7I\2\2\u1f64"+
		"\u1f65\7+\2\2\u1f65\u1f68\5\u03b6\u01dc\2\u1f66\u1f67\7\24\2\2\u1f67\u1f69"+
		"\5\u03b6\u01dc\2\u1f68\u1f66\3\2\2\2\u1f68\u1f69\3\2\2\2\u1f69\u1f6d\3"+
		"\2\2\2\u1f6a\u1f6b\7\u008c\2\2\u1f6b\u1f6e\5\u027c\u013f\2\u1f6c\u1f6e"+
		"\5\u0280\u0141\2\u1f6d\u1f6a\3\2\2\2\u1f6d\u1f6c\3\2\2\2\u1f6e\u1f75\3"+
		"\2\2\2\u1f6f\u1f70\7\u0185\2\2\u1f70\u1f71\7\u0086\2\2\u1f71\u1f72\7\34"+
		"\2\2\u1f72\u1f73\7\u01e0\2\2\u1f73\u1f74\7\u0323\2\2\u1f74\u1f76\t\t\2"+
		"\2\u1f75\u1f6f\3\2\2\2\u1f75\u1f76\3\2\2\2\u1f76\u027b\3\2\2\2\u1f77\u1f78"+
		"\7\u0198\2\2\u1f78\u1f89\5\u03b6\u01dc\2\u1f79\u1f7b\7\u01f2\2\2\u1f7a"+
		"\u1f79\3\2\2\2\u1f7a\u1f7b\3\2\2\2\u1f7b\u1f7c\3\2\2\2\u1f7c\u1f7d\7\u0082"+
		"\2\2\u1f7d\u1f7e\7\u0323\2\2\u1f7e\u1f86\7\u031f\2\2\u1f7f\u1f80\7\u017c"+
		"\2\2\u1f80\u1f81\7\u028c\2\2\u1f81\u1f82\7\u00ac\2\2\u1f82\u1f83\7\u0335"+
		"\2\2\u1f83\u1f84\5\u027e\u0140\2\u1f84\u1f85\7\u0336\2\2\u1f85\u1f87\3"+
		"\2\2\2\u1f86\u1f7f\3\2\2\2\u1f86\u1f87\3\2\2\2\u1f87\u1f89\3\2\2\2\u1f88"+
		"\u1f77\3\2\2\2\u1f88\u1f7a\3\2\2\2\u1f89\u027d\3\2\2\2\u1f8a\u1f8b\t^"+
		"\2\2\u1f8b\u1f8c\7\u0323\2\2\u1f8c\u1f93\7\u031f\2\2\u1f8d\u1f8e\7\u0337"+
		"\2\2\u1f8e\u1f8f\t_\2\2\u1f8f\u1f90\7&\2\2\u1f90\u1f91\7\u00f4\2\2\u1f91"+
		"\u1f92\7\u0323\2\2\u1f92\u1f94\7\u031f\2\2\u1f93\u1f8d\3\2\2\2\u1f93\u1f94"+
		"\3\2\2\2\u1f94\u027f\3\2\2\2\u1f95\u1f96\7\u01ee\2\2\u1f96\u1f97\7&\2"+
		"\2\u1f97\u1f98\7\u00f4\2\2\u1f98\u1f99\7\u0323\2\2\u1f99\u1f9b\7\u031f"+
		"\2\2\u1f9a\u1f95\3\2\2\2\u1f9a\u1f9b\3\2\2\2\u1f9b\u1f9c\3\2\2\2\u1f9c"+
		"\u1f9d\7\u017c\2\2\u1f9d\u1f9e\7\u02e3\2\2\u1f9e\u1f9f\7\u0323\2\2\u1f9f"+
		"\u1fa4\7\u031f\2\2\u1fa0\u1fa1\7\u0337\2\2\u1fa1\u1fa3\5\u0282\u0142\2"+
		"\u1fa2\u1fa0\3\2\2\2\u1fa3\u1fa6\3\2\2\2\u1fa4\u1fa2\3\2\2\2\u1fa4\u1fa5"+
		"\3\2\2\2\u1fa5\u0281\3\2\2\2\u1fa6\u1fa4\3\2\2\2\u1fa7\u1fa8\t`\2\2\u1fa8"+
		"\u1fa9\7\u0323\2\2\u1fa9\u1faa\7\u031f\2\2\u1faa\u0283\3\2\2\2\u1fab\u1fac"+
		"\7\u00e7\2\2\u1fac\u1fad\7\u02e6\2\2\u1fad\u1fae\7\u00ac\2\2\u1fae\u1faf"+
		"\5\u03b6\u01dc\2\u1faf\u1fb0\7\u01d3\2\2\u1fb0\u1fb1\7&\2\2\u1fb1\u1fb2"+
		"\5\u0290\u0149\2\u1fb2\u1fbc\3\2\2\2\u1fb3\u1fb4\7\u00e7\2\2\u1fb4\u1fb5"+
		"\7\u00bd\2\2\u1fb5\u1fb6\7\u00ac\2\2\u1fb6\u1fb7\7\u01d3\2\2\u1fb7\u1fb8"+
		"\7&\2\2\u1fb8\u1fb9\7\u00f4\2\2\u1fb9\u1fba\7\u0323\2\2\u1fba\u1fbc\7"+
		"\u031f\2\2\u1fbb\u1fab\3\2\2\2\u1fbb\u1fb3\3\2\2\2\u1fbc\u0285\3\2\2\2"+
		"\u1fbd\u1fbe\7\63\2\2\u1fbe\u1fbf\7\u02e6\2\2\u1fbf\u1fc0\7\u00ac\2\2"+
		"\u1fc0\u1fc9\5\u03b6\u01dc\2\u1fc1\u1fc2\7\63\2\2\u1fc2\u1fc3\7\6\2\2"+
		"\u1fc3\u1fc4\7\u02e6\2\2\u1fc4\u1fc9\7\u022d\2\2\u1fc5\u1fc6\7\63\2\2"+
		"\u1fc6\u1fc7\7\u00bd\2\2\u1fc7\u1fc9\7\u00ac\2\2\u1fc8\u1fbd\3\2\2\2\u1fc8"+
		"\u1fc1\3\2\2\2\u1fc8\u1fc5\3\2\2\2\u1fc9\u0287\3\2\2\2\u1fca\u1fcb\7I"+
		"\2\2\u1fcb\u1fcc\7\u00bd\2\2\u1fcc\u1fcd\7\u00ac\2\2\u1fcd\u1fce\7\u01ee"+
		"\2\2\u1fce\u1fcf\7&\2\2\u1fcf\u1fd0\7\u00f4\2\2\u1fd0\u1fd1\7\u0323\2"+
		"\2\u1fd1\u1fee\7\u031f\2\2\u1fd2\u1fd3\7I\2\2\u1fd3\u1fd4\7\u02e6\2\2"+
		"\u1fd4\u1fd5\7\u00ac\2\2\u1fd5\u1fd8\5\u03b6\u01dc\2\u1fd6\u1fd7\7\24"+
		"\2\2\u1fd7\u1fd9\5\u03b6\u01dc\2\u1fd8\u1fd6\3\2\2\2\u1fd8\u1fd9\3\2\2"+
		"\2\u1fd9\u1fdd\3\2\2\2\u1fda\u1fdb\7\u008c\2\2\u1fdb\u1fdc\7\u0291\2\2"+
		"\u1fdc\u1fde\5\u03b6\u01dc\2\u1fdd\u1fda\3\2\2\2\u1fdd\u1fde\3\2\2\2\u1fde"+
		"\u1fdf\3\2\2\2\u1fdf\u1fe9\7\u017c\2\2\u1fe0\u1fe5\5\u028a\u0146\2\u1fe1"+
		"\u1fe2\7\u01ee\2\2\u1fe2\u1fe3\7&\2\2\u1fe3\u1fe5\5\u028e\u0148\2\u1fe4"+
		"\u1fe0\3\2\2\2\u1fe4\u1fe1\3\2\2\2\u1fe5\u1fe7\3\2\2\2\u1fe6\u1fe8\7\u0337"+
		"\2\2\u1fe7\u1fe6\3\2\2\2\u1fe7\u1fe8\3\2\2\2\u1fe8\u1fea\3\2\2\2\u1fe9"+
		"\u1fe4\3\2\2\2\u1fea\u1feb\3\2\2\2\u1feb\u1fe9\3\2\2\2\u1feb\u1fec\3\2"+
		"\2\2\u1fec\u1fee\3\2\2\2\u1fed\u1fca\3\2\2\2\u1fed\u1fd2\3\2\2\2\u1fee"+
		"\u0289\3\2\2\2\u1fef\u1ff0\7\u022c\2\2\u1ff0\u1ff1\7\u0323\2\2\u1ff1\u1fff"+
		"\7\u031f\2\2\u1ff2\u1ff3\7\u018d\2\2\u1ff3\u1ff4\7\u0323\2\2\u1ff4\u1fff"+
		"\5\u028c\u0147\2\u1ff5\u1ff6\7\u021a\2\2\u1ff6\u1ff7\7\u0323\2\2\u1ff7"+
		"\u1fff\7\u031f\2\2\u1ff8\u1ff9\7\u0292\2\2\u1ff9\u1ffa\7\u0323\2\2\u1ffa"+
		"\u1fff\7\u031f\2\2\u1ffb\u1ffc\7\u01c6\2\2\u1ffc\u1ffd\7\u0323\2\2\u1ffd"+
		"\u1fff\t\f\2\2\u1ffe\u1fef\3\2\2\2\u1ffe\u1ff2\3\2\2\2\u1ffe\u1ff5\3\2"+
		"\2\2\u1ffe\u1ff8\3\2\2\2\u1ffe\u1ffb\3\2\2\2\u1fff\u028b\3\2\2\2\u2000"+
		"\u2001\t\63\2\2\u2001\u028d\3\2\2\2\u2002\u2003\7+\2\2\u2003\u200e\5\u03b6"+
		"\u01dc\2\u2004\u2005\7\22\2\2\u2005\u2006\7\u00ac\2\2\u2006\u200e\5\u03b6"+
		"\u01dc\2\u2007\u2008\7\u02e6\2\2\u2008\u2009\7\u00ac\2\2\u2009\u200e\5"+
		"\u03b6\u01dc\2\u200a\u200b\7\u00f4\2\2\u200b\u200c\7\u0323\2\2\u200c\u200e"+
		"\7\u031f\2\2\u200d\u2002\3\2\2\2\u200d\u2004\3\2\2\2\u200d\u2007\3\2\2"+
		"\2\u200d\u200a\3\2\2\2\u200e\u028f\3\2\2\2\u200f\u2010\7+\2\2\u2010\u2015"+
		"\5\u03b6\u01dc\2\u2011\u2012\7\u017c\2\2\u2012\u2013\7\u00f4\2\2\u2013"+
		"\u2014\7\u0323\2\2\u2014\u2016\7\u031f\2\2\u2015\u2011\3\2\2\2\u2015\u2016"+
		"\3\2\2\2\u2016\u2027\3\2\2\2\u2017\u2018\7\22\2\2\u2018\u2019\7\u00ac"+
		"\2\2\u2019\u201e\5\u03b6\u01dc\2\u201a\u201b\7\u017c\2\2\u201b\u201c\7"+
		"\u00f4\2\2\u201c\u201d\7\u0323\2\2\u201d\u201f\7\u031f\2\2\u201e\u201a"+
		"\3\2\2\2\u201e\u201f\3\2\2\2\u201f\u2027\3\2\2\2\u2020\u2021\7\u02e6\2"+
		"\2\u2021\u2022\7\u00ac\2\2\u2022\u2027\5\u03b6\u01dc\2\u2023\u2024\7\u00f4"+
		"\2\2\u2024\u2025\7\u0323\2\2\u2025\u2027\7\u031f\2\2\u2026\u200f\3\2\2"+
		"\2\u2026\u2017\3\2\2\2\u2026\u2020\3\2\2\2\u2026\u2023\3\2\2\2\u2027\u0291"+
		"\3\2\2\2\u2028\u2043\7w\2\2\u2029\u202a\7\u0175\2\2\u202a\u2043\5\u03b6"+
		"\u01dc\2\u202b\u202c\7\u02e9\2\2\u202c\u2043\5\u03b6\u01dc\2\u202d\u202f"+
		"\7\u01bf\2\2\u202e\u2030\5\u03b6\u01dc\2\u202f\u202e\3\2\2\2\u202f\u2030"+
		"\3\2\2\2\u2030\u2043\3\2\2\2\u2031\u2032\7I\2\2\u2032\u2043\ta\2\2\u2033"+
		"\u2043\7\u02d2\2\2\u2034\u2043\7\u021d\2\2\u2035\u2043\7\u0132\2\2\u2036"+
		"\u2043\7\u010e\2\2\u2037\u2043\7\u00a2\2\2\u2038\u2040\7\n\2\2\u2039\u203b"+
		"\7\r\2\2\u203a\u2039\3\2\2\2\u203a\u203b\3\2\2\2\u203b\u203e\3\2\2\2\u203c"+
		"\u203f\5\u03b6\u01dc\2\u203d\u203f\7U\2\2\u203e\u203c\3\2\2\2\u203e\u203d"+
		"\3\2\2\2\u203f\u2041\3\2\2\2\u2040\u203a\3\2\2\2\u2040\u2041\3\2\2\2\u2041"+
		"\u2043\3\2\2\2\u2042\u2028\3\2\2\2\u2042\u2029\3\2\2\2\u2042\u202b\3\2"+
		"\2\2\u2042\u202d\3\2\2\2\u2042\u2031\3\2\2\2\u2042\u2033\3\2\2\2\u2042"+
		"\u2034\3\2\2\2\u2042\u2035\3\2\2\2\u2042\u2036\3\2\2\2\u2042\u2037\3\2"+
		"\2\2\u2042\u2038\3\2\2\2\u2043\u0293\3\2\2\2\u2044\u2045\7\u013d\2\2\u2045"+
		"\u2048\7\u031a\2\2\u2046\u2047\7\u0330\2\2\u2047\u2049\5\u03b6\u01dc\2"+
		"\u2048\u2046\3\2\2\2\u2048\u2049\3\2\2\2\u2049\u204a\3\2\2\2\u204a\u204b"+
		"\7\u0323\2\2\u204b\u204d\5\u02cc\u0167\2\u204c\u204e\7\u0338\2\2\u204d"+
		"\u204c\3\2\2\2\u204d\u204e\3\2\2\2\u204e\u206c\3\2\2\2\u204f\u2050\7\u013d"+
		"\2\2\u2050\u2051\7\u031a\2\2\u2051\u2052\5\u03bc\u01df\2\u2052\u2054\5"+
		"\u02cc\u0167\2\u2053\u2055\7\u0338\2\2\u2054\u2053\3\2\2\2\u2054\u2055"+
		"\3\2\2\2\u2055\u206c\3\2\2\2\u2056\u2057\7\u013d\2\2\u2057\u2058\7\u031a"+
		"\2\2\u2058\u2059\7\u0323\2\2\u2059\u205a\7P\2\2\u205a\u2065\5\u02c2\u0162"+
		"\2\u205b\u2063\7\u0086\2\2\u205c\u205d\7\u010a\2\2\u205d\u2064\7\u0277"+
		"\2\2\u205e\u2061\7\u016c\2\2\u205f\u2060\7\u00e1\2\2\u2060\u2062\5\u038e"+
		"\u01c8\2\u2061\u205f\3\2\2\2\u2061\u2062\3\2\2\2\u2062\u2064\3\2\2\2\u2063"+
		"\u205c\3\2\2\2\u2063\u205e\3\2\2\2\u2064\u2066\3\2\2\2\u2065\u205b\3\2"+
		"\2\2\u2065\u2066\3\2\2\2\u2066\u2068\3\2\2\2\u2067\u2069\7\u0338\2\2\u2068"+
		"\u2067\3\2\2\2\u2068\u2069\3\2\2\2\u2069\u206c\3\2\2\2\u206a\u206c\5\u02c8"+
		"\u0165\2\u206b\u2044\3\2\2\2\u206b\u204f\3\2\2\2\u206b\u2056\3\2\2\2\u206b"+
		"\u206a\3\2\2\2\u206c\u0295\3\2\2\2\u206d\u206e\7\34\2\2\u206e\u206f\7"+
		"d\2\2\u206f\u2072\tb\2\2\u2070\u2073\5\u03b6\u01dc\2\u2071\u2073\7\u031a"+
		"\2\2\u2072\u2070\3\2\2\2\u2072\u2071\3\2\2\2\u2072\u2073\3\2\2\2\u2073"+
		"\u2075\3\2\2\2\u2074\u2076\7\u0338\2\2\u2075\u2074\3\2\2\2\u2075\u2076"+
		"\3\2\2\2\u2076\u20bf\3\2\2\2\u2077\u2078\7\34\2\2\u2078\u2082\tb\2\2\u2079"+
		"\u207c\5\u03b6\u01dc\2\u207a\u207c\7\u031a\2\2\u207b\u2079\3\2\2\2\u207b"+
		"\u207a\3\2\2\2\u207c\u2080\3\2\2\2\u207d\u207e\7\u017c\2\2\u207e\u207f"+
		"\7\u0240\2\2\u207f\u2081\7\u031f\2\2\u2080\u207d\3\2\2\2\u2080\u2081\3"+
		"\2\2\2\u2081\u2083\3\2\2\2\u2082\u207b\3\2\2\2\u2082\u2083\3\2\2\2\u2083"+
		"\u2085\3\2\2\2\u2084\u2086\7\u0338\2\2\u2085\u2084\3\2\2\2\u2085\u2086"+
		"\3\2\2\2\u2086\u20bf\3\2\2\2\u2087\u2088\7:\2\2\u2088\u2095\tb\2\2\u2089"+
		"\u208c\5\u03b6\u01dc\2\u208a\u208c\7\u031a\2\2\u208b\u2089\3\2\2\2\u208b"+
		"\u208a\3\2\2\2\u208c\u2093\3\2\2\2\u208d\u208e\7\u017c\2\2\u208e\u208f"+
		"\7\u0335\2\2\u208f\u2090\7\u01d8\2\2\u2090\u2091\7\u0323\2\2\u2091\u2092"+
		"\t\t\2\2\u2092\u2094\7\u0336\2\2\u2093\u208d\3\2\2\2\u2093\u2094\3\2\2"+
		"\2\u2094\u2096\3\2\2\2\u2095\u208b\3\2\2\2\u2095\u2096\3\2\2\2\u2096\u2098"+
		"\3\2\2\2\u2097\u2099\7\u0338\2\2\u2098\u2097\3\2\2\2\u2098\u2099\3\2\2"+
		"\2\u2099\u20bf\3\2\2\2\u209a\u209c\7:\2\2\u209b\u209d\7\u030c\2\2\u209c"+
		"\u209b\3\2\2\2\u209c\u209d\3\2\2\2\u209d\u209f\3\2\2\2\u209e\u20a0\7\u0338"+
		"\2\2\u209f\u209e\3\2\2\2\u209f\u20a0\3\2\2\2\u20a0\u20bf\3\2\2\2\u20a1"+
		"\u20a2\7:\2\2\u20a2\u20bf\5\u03b6\u01dc\2\u20a3\u20a4\7\u0120\2\2\u20a4"+
		"\u20bf\5\u03b6\u01dc\2\u20a5\u20a6\7\u0120\2\2\u20a6\u20a9\tb\2\2\u20a7"+
		"\u20aa\5\u03b6\u01dc\2\u20a8\u20aa\7\u031a\2\2\u20a9\u20a7\3\2\2\2\u20a9"+
		"\u20a8\3\2\2\2\u20a9\u20aa\3\2\2\2\u20aa\u20ac\3\2\2\2\u20ab\u20ad\7\u0338"+
		"\2\2\u20ac\u20ab\3\2\2\2\u20ac\u20ad\3\2\2\2\u20ad\u20bf\3\2\2\2\u20ae"+
		"\u20b0\7\u0120\2\2\u20af\u20b1\7\u030c\2\2\u20b0\u20af\3\2\2\2\u20b0\u20b1"+
		"\3\2\2\2\u20b1\u20b3\3\2\2\2\u20b2\u20b4\7\u0338\2\2\u20b3\u20b2\3\2\2"+
		"\2\u20b3\u20b4\3\2\2\2\u20b4\u20bf\3\2\2\2\u20b5\u20b6\7\u012c\2\2\u20b6"+
		"\u20b9\tb\2\2\u20b7\u20ba\5\u03b6\u01dc\2\u20b8\u20ba\7\u031a\2\2\u20b9"+
		"\u20b7\3\2\2\2\u20b9\u20b8\3\2\2\2\u20b9\u20ba\3\2\2\2\u20ba\u20bc\3\2"+
		"\2\2\u20bb\u20bd\7\u0338\2\2\u20bc\u20bb\3\2\2\2\u20bc\u20bd\3\2\2\2\u20bd"+
		"\u20bf\3\2\2\2\u20be\u206d\3\2\2\2\u20be\u2077\3\2\2\2\u20be\u2087\3\2"+
		"\2\2\u20be\u209a\3\2\2\2\u20be\u20a1\3\2\2\2\u20be\u20a3\3\2\2\2\u20be"+
		"\u20a5\3\2\2\2\u20be\u20ae\3\2\2\2\u20be\u20b5\3\2\2\2\u20bf\u0297\3\2"+
		"\2\2\u20c0\u20c2\7\u0210\2\2\u20c1\u20c3\7\u031b\2\2\u20c2\u20c1\3\2\2"+
		"\2\u20c2\u20c3\3\2\2\2\u20c3\u0299\3\2\2\2\u20c4\u20c5\7\u016f\2\2\u20c5"+
		"\u20c7\5\u03b6\u01dc\2\u20c6\u20c8\7\u0338\2\2\u20c7\u20c6\3\2\2\2\u20c7"+
		"\u20c8\3\2\2\2\u20c8\u029b\3\2\2\2\u20c9\u20cb\7\u013e\2\2\u20ca\u20cc"+
		"\7\u031f\2\2\u20cb\u20ca\3\2\2\2\u20cb\u20cc\3\2\2\2\u20cc\u029d\3\2\2"+
		"\2\u20cd\u20ce\7W\2\2\u20ce\u20d3\5\u03b8\u01dd\2\u20cf\u20d0\7\u0335"+
		"\2\2\u20d0\u20d1\5\u035a\u01ae\2\u20d1\u20d2\7\u0336\2\2\u20d2\u20d4\3"+
		"\2\2\2\u20d3\u20cf\3\2\2\2\u20d3\u20d4\3\2\2\2\u20d4\u20d7\3\2\2\2\u20d5"+
		"\u20d6\7\u017c\2\2\u20d6\u20d8\5\u02a0\u0151\2\u20d7\u20d5\3\2\2\2\u20d7"+
		"\u20d8\3\2\2\2\u20d8\u20da\3\2\2\2\u20d9\u20db\7\u0338\2\2\u20da\u20d9"+
		"\3\2\2\2\u20da\u20db\3\2\2\2\u20db\u029f\3\2\2\2\u20dc\u20df\5\u03b8\u01dd"+
		"\2\u20dd\u20de\7\u0337\2\2\u20de\u20e0\5\u03b8\u01dd\2\u20df\u20dd\3\2"+
		"\2\2\u20df\u20e0\3\2\2\2\u20e0\u02a1\3\2\2\2\u20e1\u20e2\7w\2\2\u20e2"+
		"\u20e3\7\20\2\2\u20e3\u20e4\tc\2\2\u20e4\u02a3\3\2\2\2\u20e5\u20e7\7\u031a"+
		"\2\2\u20e6\u20e8\7\20\2\2\u20e7\u20e6\3\2\2\2\u20e7\u20e8\3\2\2\2\u20e8"+
		"\u20e9\3\2\2\2\u20e9\u20ec\5\u03ae\u01d8\2\u20ea\u20eb\7\u0323\2\2\u20eb"+
		"\u20ed\5\u02cc\u0167\2\u20ec\u20ea\3\2\2\2\u20ec\u20ed\3\2\2\2\u20ed\u02a5"+
		"\3\2\2\2\u20ee\u20ef\7\u0156\2\2\u20ef\u20f0\7\u0335\2\2\u20f0\u20f1\5"+
		"\u02ac\u0157\2\u20f1\u20f2\7\u0336\2\2\u20f2\u02a7\3\2\2\2\u20f3\u20f4"+
		"\7\u030e\2\2\u20f4\u20f6\7\u0335\2\2\u20f5\u20f7\td\2\2\u20f6\u20f5\3"+
		"\2\2\2\u20f6\u20f7\3\2\2\2\u20f7\u20f8\3\2\2\2\u20f8\u20f9\5\u02aa\u0156"+
		"\2\u20f9\u20fa\7\u0336\2\2\u20fa\u02a9\3\2\2\2\u20fb\u20fc\7\u031c\2\2"+
		"\u20fc\u20fd\7\u0330\2\2\u20fd\u20fe\7\u031c\2\2\u20fe\u02ab\3\2\2\2\u20ff"+
		"\u2106\5\u02ae\u0158\2\u2100\u2102\7\u0337\2\2\u2101\u2100\3\2\2\2\u2101"+
		"\u2102\3\2\2\2\u2102\u2103\3\2\2\2\u2103\u2105\5\u02ae\u0158\2\u2104\u2101"+
		"\3\2\2\2\u2105\u2108\3\2\2\2\u2106\u2104\3\2\2\2\u2106\u2107\3\2\2\2\u2107"+
		"\u02ad\3\2\2\2\u2108\u2106\3\2\2\2\u2109\u210d\5\u02b0\u0159\2\u210a\u210d"+
		"\5\u02b2\u015a\2\u210b\u210d\5\u02b6\u015c\2\u210c\u2109\3\2\2\2\u210c"+
		"\u210a\3\2\2\2\u210c\u210b\3\2\2\2\u210d\u02af\3\2\2\2\u210e\u2112\5\u03b6"+
		"\u01dc\2\u210f\u2113\5\u03ae\u01d8\2\u2110\u2111\7\20\2\2\u2111\u2113"+
		"\5\u02cc\u0167\2\u2112\u210f\3\2\2\2\u2112\u2110\3\2\2\2\u2113\u2116\3"+
		"\2\2\2\u2114\u2115\7\67\2\2\u2115\u2117\5\u03b6\u01dc\2\u2116\u2114\3"+
		"\2\2\2\u2116\u2117\3\2\2\2\u2117\u2119\3\2\2\2\u2118\u211a\5\u0396\u01cc"+
		"\2\u2119\u2118\3\2\2\2\u2119\u211a\3\2\2\2\u211a\u2130\3\2\2\2\u211b\u211c"+
		"\7=\2\2\u211c\u211e\5\u03b6\u01dc\2\u211d\u211b\3\2\2\2\u211d\u211e\3"+
		"\2\2\2\u211e\u211f\3\2\2\2\u211f\u2121\5\u0398\u01cd\2\u2120\u2122\5\u0398"+
		"\u01cd\2\u2121\u2120\3\2\2\2\u2121\u2122\3\2\2\2\u2122\u2131\3\2\2\2\u2123"+
		"\u2129\7\u0097\2\2\u2124\u2125\7\u0335\2\2\u2125\u2126\7\u031b\2\2\u2126"+
		"\u2127\7\u0337\2\2\u2127\u2128\7\u031b\2\2\u2128\u212a\7\u0336\2\2\u2129"+
		"\u2124\3\2\2\2\u2129\u212a\3\2\2\2\u212a\u212e\3\2\2\2\u212b\u212c\7\u00dc"+
		"\2\2\u212c\u212d\7\u0086\2\2\u212d\u212f\7\u0112\2\2\u212e\u212b\3\2\2"+
		"\2\u212e\u212f\3\2\2\2\u212f\u2131\3\2\2\2\u2130\u211d\3\2\2\2\u2130\u2123"+
		"\3\2\2\2\u2130\u2131\3\2\2\2\u2131\u2133\3\2\2\2\u2132\u2134\7\u0123\2"+
		"\2\u2133\u2132\3\2\2\2\u2133\u2134\3\2\2\2\u2134\u2138\3\2\2\2\u2135\u2137"+
		"\5\u02b4\u015b\2\u2136\u2135\3\2\2\2\u2137\u213a\3\2\2\2\u2138\u2136\3"+
		"\2\2\2\u2138\u2139\3\2\2\2\u2139\u02b1\3\2\2\2\u213a\u2138\3\2\2\2\u213b"+
		"\u213c\5\u03b6\u01dc\2\u213c\u213d\te\2\2\u213d\u2141\5\u02cc\u0167\2"+
		"\u213e\u2142\7\u0241\2\2\u213f\u2140\7\u00dc\2\2\u2140\u2142\7\u0241\2"+
		"\2\u2141\u213e\3\2\2\2\u2141\u213f\3\2\2\2\u2141\u2142\3\2\2\2\u2142\u02b3"+
		"\3\2\2\2\u2143\u2144\7=\2\2\u2144\u2146\5\u03b6\u01dc\2\u2145\u2143\3"+
		"\2\2\2\u2145\u2146\3\2\2\2\u2146\u216c\3\2\2\2\u2147\u2148\7\u0100\2\2"+
		"\u2148\u214b\7\u00ac\2\2\u2149\u214b\7\u0168\2\2\u214a\u2147\3\2\2\2\u214a"+
		"\u2149\3\2\2\2\u214b\u214d\3\2\2\2\u214c\u214e\5\u0394\u01cb\2\u214d\u214c"+
		"\3\2\2\2\u214d\u214e\3\2\2\2\u214e\u2150\3\2\2\2\u214f\u2151\5\u02bc\u015f"+
		"\2\u2150\u214f\3\2\2\2\u2150\u2151\3\2\2\2\u2151\u216d\3\2\2\2\u2152\u2156"+
		"\7.\2\2\u2153\u2154\7\u00dc\2\2\u2154\u2155\7\u0086\2\2\u2155\u2157\7"+
		"\u0112\2\2\u2156\u2153\3\2\2\2\u2156\u2157\3\2\2\2\u2157\u2158\3\2\2\2"+
		"\u2158\u2159\7\u0335\2\2\u2159\u215a\5\u02e2\u0172\2\u215a\u215b\7\u0336"+
		"\2\2\u215b\u216d\3\2\2\2\u215c\u215d\7\u0089\2\2\u215d\u215f\7\u00ac\2"+
		"\2\u215e\u215c\3\2\2\2\u215e\u215f\3\2\2\2\u215f\u2160\3\2\2\2\u2160\u2161"+
		"\7\u010e\2\2\u2161\u2162\5\u0382\u01c2\2\u2162\u2163\7\u0335\2\2\u2163"+
		"\u2164\5\u038e\u01c8\2\u2164\u2166\7\u0336\2\2\u2165\u2167\5\u02b8\u015d"+
		"\2\u2166\u2165\3\2\2\2\u2166\u2167\3\2\2\2\u2167\u2169\3\2\2\2\u2168\u216a"+
		"\5\u02ba\u015e\2\u2169\u2168\3\2\2\2\u2169\u216a\3\2\2\2\u216a\u216d\3"+
		"\2\2\2\u216b\u216d\5\u0396\u01cc\2\u216c\u214a\3\2\2\2\u216c\u2152\3\2"+
		"\2\2\u216c\u215e\3\2\2\2\u216c\u216b\3\2\2\2\u216d\u02b5\3\2\2\2\u216e"+
		"\u216f\7=\2\2\u216f\u2171\5\u03b6\u01dc\2\u2170\u216e\3\2\2\2\u2170\u2171"+
		"\3\2\2\2\u2171\u21b2\3\2\2\2\u2172\u2173\7\u0100\2\2\u2173\u2176\7\u00ac"+
		"\2\2\u2174\u2176\7\u0168\2\2\u2175\u2172\3\2\2\2\u2175\u2174\3\2\2\2\u2176"+
		"\u2178\3\2\2\2\u2177\u2179\5\u0394\u01cb\2\u2178\u2177\3\2\2\2\u2178\u2179"+
		"\3\2\2\2\u2179\u217a\3\2\2\2\u217a\u217b\7\u0335\2\2\u217b\u217c\5\u038c"+
		"\u01c7\2\u217c\u217e\7\u0336\2\2\u217d\u217f\5\u02bc\u015f\2\u217e\u217d"+
		"\3\2\2\2\u217e\u217f\3\2\2\2\u217f\u2182\3\2\2\2\u2180\u2181\7\u00e5\2"+
		"\2\u2181\u2183\5\u03b6\u01dc\2\u2182\u2180\3\2\2\2\u2182\u2183\3\2\2\2"+
		"\u2183\u21b3\3\2\2\2\u2184\u2188\7.\2\2\u2185\u2186\7\u00dc\2\2\u2186"+
		"\u2187\7\u0086\2\2\u2187\u2189\7\u0112\2\2\u2188\u2185\3\2\2\2\u2188\u2189"+
		"\3\2\2\2\u2189\u218a\3\2\2\2\u218a\u218b\7\u0335\2\2\u218b\u218c\5\u02e2"+
		"\u0172\2\u218c\u218d\7\u0336\2\2\u218d\u21b3\3\2\2\2\u218e\u2190\7Z\2"+
		"\2\u218f\u2191\7\u0335\2\2\u2190\u218f\3\2\2\2\u2190\u2191\3\2\2\2\u2191"+
		"\u2196\3\2\2\2\u2192\u2197\7\u031f\2\2\u2193\u2197\7\u033d\2\2\u2194\u2197"+
		"\5\u0334\u019b\2\u2195\u2197\7\u031b\2\2\u2196\u2192\3\2\2\2\u2196\u2193"+
		"\3\2\2\2\u2196\u2194\3\2\2\2\u2196\u2195\3\2\2\2\u2197\u2198\3\2\2\2\u2198"+
		"\u2196\3\2\2\2\u2198\u2199\3\2\2\2\u2199\u219b\3\2\2\2\u219a\u219c\7\u0336"+
		"\2\2\u219b\u219a\3\2\2\2\u219b\u219c\3\2\2\2\u219c\u219d\3\2\2\2\u219d"+
		"\u219e\7\u0086\2\2\u219e\u21b3\5\u03b6\u01dc\2\u219f\u21a0\7\u0089\2\2"+
		"\u21a0\u21a1\7\u00ac\2\2\u21a1\u21a2\7\u0335\2\2\u21a2\u21a3\5\u038e\u01c8"+
		"\2\u21a3\u21a4\7\u0336\2\2\u21a4\u21a5\7\u010e\2\2\u21a5\u21aa\5\u0382"+
		"\u01c2\2\u21a6\u21a7\7\u0335\2\2\u21a7\u21a8\5\u038e\u01c8\2\u21a8\u21a9"+
		"\7\u0336\2\2\u21a9\u21ab\3\2\2\2\u21aa\u21a6\3\2\2\2\u21aa\u21ab\3\2\2"+
		"\2\u21ab\u21ad\3\2\2\2\u21ac\u21ae\5\u02b8\u015d\2\u21ad\u21ac\3\2\2\2"+
		"\u21ad\u21ae\3\2\2\2\u21ae\u21b0\3\2\2\2\u21af\u21b1\5\u02ba\u015e\2\u21b0"+
		"\u21af\3\2\2\2\u21b0\u21b1\3\2\2\2\u21b1\u21b3\3\2\2\2\u21b2\u2175\3\2"+
		"\2\2\u21b2\u2184\3\2\2\2\u21b2\u218e\3\2\2\2\u21b2\u219f\3\2\2\2\u21b3"+
		"\u02b7\3\2\2\2\u21b4\u21b5\7\u00e5\2\2\u21b5\u21bd\7]\2\2\u21b6\u21b7"+
		"\7\u0264\2\2\u21b7\u21be\7\u0183\2\2\u21b8\u21be\7)\2\2\u21b9\u21ba\7"+
		"\u013d\2\2\u21ba\u21be\7\u00df\2\2\u21bb\u21bc\7\u013d\2\2\u21bc\u21be"+
		"\7Z\2\2\u21bd\u21b6\3\2\2\2\u21bd\u21b8\3\2\2\2\u21bd\u21b9\3\2\2\2\u21bd"+
		"\u21bb\3\2\2\2\u21be\u02b9\3\2\2\2\u21bf\u21c0\7\u00e5\2\2\u21c0\u21c8"+
		"\7\u016c\2\2\u21c1\u21c2\7\u0264\2\2\u21c2\u21c9\7\u0183\2\2\u21c3\u21c9"+
		"\7)\2\2\u21c4\u21c5\7\u013d\2\2\u21c5\u21c9\7\u00df\2\2\u21c6\u21c7\7"+
		"\u013d\2\2\u21c7\u21c9\7Z\2\2\u21c8\u21c1\3\2\2\2\u21c8\u21c3\3\2\2\2"+
		"\u21c8\u21c4\3\2\2\2\u21c8\u21c6\3\2\2\2\u21c9\u02bb\3\2\2\2\u21ca\u21cb"+
		"\7\u017c\2\2\u21cb\u21cc\7\u0335\2\2\u21cc\u21d1\5\u02be\u0160\2\u21cd"+
		"\u21ce\7\u0337\2\2\u21ce\u21d0\5\u02be\u0160\2\u21cf\u21cd\3\2\2\2\u21d0"+
		"\u21d3\3\2\2\2\u21d1\u21cf\3\2\2\2\u21d1\u21d2\3\2\2\2\u21d2\u21d4\3\2"+
		"\2\2\u21d3\u21d1\3\2\2\2\u21d4\u21d5\7\u0336\2\2\u21d5\u02bd\3\2\2\2\u21d6"+
		"\u21d7\5\u03b8\u01dd\2\u21d7\u21db\7\u0323\2\2\u21d8\u21dc\5\u03b8\u01dd"+
		"\2\u21d9\u21dc\5\u0392\u01ca\2\u21da\u21dc\7\u031b\2\2\u21db\u21d8\3\2"+
		"\2\2\u21db\u21d9\3\2\2\2\u21db\u21da\3\2\2\2\u21dc\u02bf\3\2\2\2\u21dd"+
		"\u21de\7Y\2\2\u21de\u21fe\5\u0390\u01c9\2\u21df\u21e9\7P\2\2\u21e0\u21e7"+
		"\5\u02c2\u0162\2\u21e1\u21e2\7\u0086\2\2\u21e2\u21e5\7\u016c\2\2\u21e3"+
		"\u21e4\7\u00e1\2\2\u21e4\u21e6\5\u038e\u01c8\2\u21e5\u21e3\3\2\2\2\u21e5"+
		"\u21e6\3\2\2\2\u21e6\u21e8\3\2\2\2\u21e7\u21e1\3\2\2\2\u21e7\u21e8\3\2"+
		"\2\2\u21e8\u21ea\3\2\2\2\u21e9\u21e0\3\2\2\2\u21e9\u21ea\3\2\2\2\u21ea"+
		"\u21ff\3\2\2\2\u21eb\u21ed\tf\2\2\u21ec\u21eb\3\2\2\2\u21ec\u21ed\3\2"+
		"\2\2\u21ed\u21ef\3\2\2\2\u21ee\u21f0\7\u02c0\2\2\u21ef\u21ee\3\2\2\2\u21ef"+
		"\u21f0\3\2\2\2\u21f0\u21f1\3\2\2\2\u21f1\u21f2\7P\2\2\u21f2\u21f3\7\u0086"+
		"\2\2\u21f3\u21fc\5\u01be\u00e0\2\u21f4\u21fa\7\u0086\2\2\u21f5\u21f6\7"+
		"\u010a\2\2\u21f6\u21fb\7\u0277\2\2\u21f7\u21fb\7\u016c\2\2\u21f8\u21f9"+
		"\7\u00e1\2\2\u21f9\u21fb\5\u038e\u01c8\2\u21fa\u21f5\3\2\2\2\u21fa\u21f7"+
		"\3\2\2\2\u21fa\u21f8\3\2\2\2\u21fb\u21fd\3\2\2\2\u21fc\u21f4\3\2\2\2\u21fc"+
		"\u21fd\3\2\2\2\u21fd\u21ff\3\2\2\2\u21fe\u21df\3\2\2\2\u21fe\u21ec\3\2"+
		"\2\2\u21ff\u2201\3\2\2\2\u2200\u2202\7\u0338\2\2\u2201\u2200\3\2\2\2\u2201"+
		"\u2202\3\2\2\2\u2202\u02c1\3\2\2\2\u2203\u2205\5\u02c4\u0163\2\u2204\u2203"+
		"\3\2\2\2\u2205\u2208\3\2\2\2\u2206\u2204\3\2\2\2\u2206\u2207\3\2\2\2\u2207"+
		"\u2209\3\2\2\2\u2208\u2206\3\2\2\2\u2209\u220a\7\u0086\2\2\u220a\u220b"+
		"\5\u01be\u00e0\2\u220b\u02c3\3\2\2\2\u220c\u2212\tA\2\2\u220d\u2212\t"+
		"g\2\2\u220e\u2212\th\2\2\u220f\u2212\ti\2\2\u2210\u2212\7\u02fc\2\2\u2211"+
		"\u220c\3\2\2\2\u2211\u220d\3\2\2\2\u2211\u220e\3\2\2\2\u2211\u220f\3\2"+
		"\2\2\u2211\u2210\3\2\2\2\u2212\u02c5\3\2\2\2\u2213\u221d\7\u0081\2\2\u2214"+
		"\u221b\7\u0263\2\2\u2215\u221b\7\u0289\2\2\u2216\u221b\7\u0202\2\2\u2217"+
		"\u221b\7\u0230\2\2\u2218\u2219\tj\2\2\u2219\u221b\5\u02cc\u0167\2\u221a"+
		"\u2214\3\2\2\2\u221a\u2215\3\2\2\2\u221a\u2216\3\2\2\2\u221a\u2217\3\2"+
		"\2\2\u221a\u2218\3\2\2\2\u221a\u221b\3\2\2\2\u221b\u221c\3\2\2\2\u221c"+
		"\u221e\7\u008c\2\2\u221d\u221a\3\2\2\2\u221d\u221e\3\2\2\2\u221e\u2220"+
		"\3\2\2\2\u221f\u2221\7\u020f\2\2\u2220\u221f\3\2\2\2\u2220\u2221\3\2\2"+
		"\2\u2221\u2222\3\2\2\2\u2222\u222c\5\u0390\u01c9\2\u2223\u2224\7\u00a5"+
		"\2\2\u2224\u2229\7\u031a\2\2\u2225\u2226\7\u0337\2\2\u2226\u2228\7\u031a"+
		"\2\2\u2227\u2225\3\2\2\2\u2228\u222b\3\2\2\2\u2229\u2227\3\2\2\2\u2229"+
		"\u222a\3\2\2\2\u222a\u222d\3\2\2\2\u222b\u2229\3\2\2\2\u222c\u2223\3\2"+
		"\2\2\u222c\u222d\3\2\2\2\u222d\u222f\3\2\2\2\u222e\u2230\7\u0338\2\2\u222f"+
		"\u222e\3\2\2\2\u222f\u2230\3\2\2\2\u2230\u02c7\3\2\2\2\u2231\u2232\7\u013d"+
		"\2\2\u2232\u2236\5\u03b6\u01dc\2\u2233\u2237\5\u03b6\u01dc\2\u2234\u2237"+
		"\5\u02ca\u0166\2\u2235\u2237\5\u0392\u01ca\2\u2236\u2233\3\2\2\2\u2236"+
		"\u2234\3\2\2\2\u2236\u2235\3\2\2\2\u2237\u2239\3\2\2\2\u2238\u223a\7\u0338"+
		"\2\2\u2239\u2238\3\2\2\2\u2239\u223a\3\2\2\2\u223a\u2263\3\2\2\2\u223b"+
		"\u223c\7\u013d\2\2\u223c\u223d\7\u0161\2\2\u223d\u223e\7\u0227\2\2\u223e"+
		"\u2248\7\u0233\2\2\u223f\u2240\7\u010a\2\2\u2240\u2249\7\u02fe\2\2\u2241"+
		"\u2242\7\u010a\2\2\u2242\u2249\7\u01ba\2\2\u2243\u2244\7\u02ab\2\2\u2244"+
		"\u2249\7\u010a\2\2\u2245\u2249\7\u02d8\2\2\u2246\u2249\7\u02ce\2\2\u2247"+
		"\u2249\7\u031b\2\2\u2248\u223f\3\2\2\2\u2248\u2241\3\2\2\2\u2248\u2243"+
		"\3\2\2\2\u2248\u2245\3\2\2\2\u2248\u2246\3\2\2\2\u2248\u2247\3\2\2\2\u2249"+
		"\u224b\3\2\2\2\u224a\u224c\7\u0338\2\2\u224b\u224a\3\2\2\2\u224b\u224c"+
		"\3\2\2\2\u224c\u2263\3\2\2\2\u224d\u224e\7\u013d\2\2\u224e\u224f\7\u0099"+
		"\2\2\u224f\u2250\5\u0382\u01c2\2\u2250\u2252\5\u0392\u01ca\2\u2251\u2253"+
		"\7\u0338\2\2\u2252\u2251\3\2\2\2\u2252\u2253\3\2\2\2\u2253\u2263\3\2\2"+
		"\2\u2254\u2255\7\u013d\2\2\u2255\u2256\7\u0192\2\2\u2256\u2263\5\u0392"+
		"\u01ca\2\u2257\u2258\7\u013d\2\2\u2258\u2259\7\u0296\2\2\u2259\u2263\5"+
		"\u0392\u01ca\2\u225a\u225b\7\u013d\2\2\u225b\u225c\7\u0193\2\2\u225c\u2263"+
		"\5\u0392\u01ca\2\u225d\u225e\7\u013d\2\2\u225e\u225f\7\u0194\2\2\u225f"+
		"\u2263\5\u0392\u01ca\2\u2260\u2261\7\u013d\2\2\u2261\u2263\5\u033e\u01a0"+
		"\2\u2262\u2231\3\2\2\2\u2262\u223b\3\2\2\2\u2262\u224d\3\2\2\2\u2262\u2254"+
		"\3\2\2\2\u2262\u2257\3\2\2\2\u2262\u225a\3\2\2\2\u2262\u225d\3\2\2\2\u2262"+
		"\u2260\3\2\2\2\u2263\u02c9\3\2\2\2\u2264\u2267\5\u03b2\u01da\2\u2265\u2267"+
		"\7\u031a\2\2\u2266\u2264\3\2\2\2\u2266\u2265\3\2\2\2\u2267\u02cb\3\2\2"+
		"\2\u2268\u2269\b\u0167\1\2\u2269\u2271\5\u02ce\u0168\2\u226a\u2271\5\u0334"+
		"\u019b\2\u226b\u2271\5\u02d0\u0169\2\u226c\u2271\5\u038a\u01c6\2\u226d"+
		"\u2271\5\u02d4\u016b\2\u226e\u2271\5\u02d2\u016a\2\u226f\u2271\5\u0364"+
		"\u01b3\2\u2270\u2268\3\2\2\2\u2270\u226a\3\2\2\2\u2270\u226b\3\2\2\2\u2270"+
		"\u226c\3\2\2\2\u2270\u226d\3\2\2\2\u2270\u226e\3\2\2\2\u2270\u226f\3\2"+
		"\2\2\u2271\u2285\3\2\2\2\u2272\u2273\f\7\2\2\u2273\u2274\tk\2\2\u2274"+
		"\u2284\5\u02cc\u0167\b\u2275\u2276\f\6\2\2\u2276\u2277\tl\2\2\u2277\u2284"+
		"\5\u02cc\u0167\7\u2278\u2279\f\5\2\2\u2279\u227a\5\u03ba\u01de\2\u227a"+
		"\u227b\5\u02cc\u0167\6\u227b\u2284\3\2\2\2\u227c\u227d\f\4\2\2\u227d\u227e"+
		"\5\u03bc\u01df\2\u227e\u227f\5\u02cc\u0167\5\u227f\u2284\3\2\2\2\u2280"+
		"\u2281\f\f\2\2\u2281\u2282\7\67\2\2\u2282\u2284\5\u03b6\u01dc\2\u2283"+
		"\u2272\3\2\2\2\u2283\u2275\3\2\2\2\u2283\u2278\3\2\2\2\u2283\u227c\3\2"+
		"\2\2\u2283\u2280\3\2\2\2\u2284\u2287\3\2\2\2\u2285\u2283\3\2\2\2\u2285"+
		"\u2286\3\2\2\2\u2286\u02cd\3\2\2\2\u2287\u2285\3\2\2\2\u2288\u228d\7Z"+
		"\2\2\u2289\u228d\7\u00df\2\2\u228a\u228d\7\u031a\2\2\u228b\u228d\5\u03b2"+
		"\u01da\2\u228c\u2288\3\2\2\2\u228c\u2289\3\2\2\2\u228c\u228a\3\2\2\2\u228c"+
		"\u228b\3\2\2\2\u228d\u02cf\3\2\2\2\u228e\u228f\7*\2\2\u228f\u2291\5\u02cc"+
		"\u0167\2\u2290\u2292\5\u0342\u01a2\2\u2291\u2290\3\2\2\2\u2292\u2293\3"+
		"\2\2\2\u2293\u2291\3\2\2\2\u2293\u2294\3\2\2\2\u2294\u2297\3\2\2\2\u2295"+
		"\u2296\7k\2\2\u2296\u2298\5\u02cc\u0167\2\u2297\u2295\3\2\2\2\u2297\u2298"+
		"\3\2\2\2\u2298\u2299\3\2\2\2\u2299\u229a\7m\2\2\u229a\u22a8\3\2\2\2\u229b"+
		"\u229d\7*\2\2\u229c\u229e\5\u0344\u01a3\2\u229d\u229c\3\2\2\2\u229e\u229f"+
		"\3\2\2\2\u229f\u229d\3\2\2\2\u229f\u22a0\3\2\2\2\u22a0\u22a3\3\2\2\2\u22a1"+
		"\u22a2\7k\2\2\u22a2\u22a4\5\u02cc\u0167\2\u22a3\u22a1\3\2\2\2\u22a3\u22a4"+
		"\3\2\2\2\u22a4\u22a5\3\2\2\2\u22a5\u22a6\7m\2\2\u22a6\u22a8\3\2\2\2\u22a7"+
		"\u228e\3\2\2\2\u22a7\u229b\3\2\2\2\u22a8\u02d1\3\2\2\2\u22a9\u22aa\7\u033f"+
		"\2\2\u22aa\u22ae\5\u02cc\u0167\2\u22ab\u22ac\tm\2\2\u22ac\u22ae\5\u02cc"+
		"\u0167\2\u22ad\u22a9\3\2\2\2\u22ad\u22ab\3\2\2\2\u22ae\u02d3\3\2\2\2\u22af"+
		"\u22b0\7\u0335\2\2\u22b0\u22b1\5\u02cc\u0167\2\u22b1\u22b2\7\u0336\2\2"+
		"\u22b2\u22b8\3\2\2\2\u22b3\u22b4\7\u0335\2\2\u22b4\u22b5\5\u02d8\u016d"+
		"\2\u22b5\u22b6\7\u0336\2\2\u22b6\u22b8\3\2\2\2\u22b7\u22af\3\2\2\2\u22b7"+
		"\u22b3\3\2\2\2\u22b8\u02d5\3\2\2\2\u22b9\u22c2\7\u00df\2\2\u22ba\u22c2"+
		"\5\u03b2\u01da\2\u22bb\u22c2\5\u0334\u019b\2\u22bc\u22c2\7\u031a\2\2\u22bd"+
		"\u22be\7\u0335\2\2\u22be\u22bf\5\u02d6\u016c\2\u22bf\u22c0\7\u0336\2\2"+
		"\u22c0\u22c2\3\2\2\2\u22c1\u22b9\3\2\2\2\u22c1\u22ba\3\2\2\2\u22c1\u22bb"+
		"\3\2\2\2\u22c1\u22bc\3\2\2\2\u22c1\u22bd\3\2\2\2\u22c2\u02d7\3\2\2\2\u22c3"+
		"\u22c4\5\u01be\u00e0\2\u22c4\u02d9\3\2\2\2\u22c5\u22c8\7\u017c\2\2\u22c6"+
		"\u22c7\7\u0310\2\2\u22c7\u22c9\7\u0337\2\2\u22c8\u22c6\3\2\2\2\u22c8\u22c9"+
		"\3\2\2\2\u22c9\u22ca\3\2\2\2\u22ca\u22cf\5\u02dc\u016f\2\u22cb\u22cc\7"+
		"\u0337\2\2\u22cc\u22ce\5\u02dc\u016f\2\u22cd\u22cb\3\2\2\2\u22ce\u22d1"+
		"\3\2\2\2\u22cf\u22cd\3\2\2\2\u22cf\u22d0\3\2\2\2\u22d0\u22e0\3\2\2\2\u22d1"+
		"\u22cf\3\2\2\2\u22d2\u22d3\7\u017c\2\2\u22d3\u22d8\7 \2\2\u22d4\u22d5"+
		"\7\u0335\2\2\u22d5\u22d6\5\u032a\u0196\2\u22d6\u22d7\7\u0336\2\2\u22d7"+
		"\u22d9\3\2\2\2\u22d8\u22d4\3\2\2\2\u22d8\u22d9\3\2\2\2\u22d9\u22da\3\2"+
		"\2\2\u22da\u22db\7\20\2\2\u22db\u22dc\7\u0335\2\2\u22dc\u22dd\5\u01be"+
		"\u00e0\2\u22dd\u22de\7\u0336\2\2\u22de\u22e0\3\2\2\2\u22df\u22c5\3\2\2"+
		"\2\u22df\u22d2\3\2\2\2\u22e0\u02db\3\2\2\2\u22e1\u22e6\5\u03b6\u01dc\2"+
		"\u22e2\u22e3\7\u0335\2\2\u22e3\u22e4\5\u038e\u01c8\2\u22e4\u22e5\7\u0336"+
		"\2\2\u22e5\u22e7\3\2\2\2\u22e6\u22e2\3\2\2\2\u22e6\u22e7\3\2\2\2\u22e7"+
		"\u22e8\3\2\2\2\u22e8\u22e9\7\20\2\2\u22e9\u22ea\7\u0335\2\2\u22ea\u22eb"+
		"\5\u01be\u00e0\2\u22eb\u22ec\7\u0336\2\2\u22ec\u02dd\3\2\2\2\u22ed\u22f0"+
		"\5\u038a\u01c6\2\u22ee\u22f0\7\u031a\2\2\u22ef\u22ed\3\2\2\2\u22ef\u22ee"+
		"\3\2\2\2\u22f0\u22f3\3\2\2\2\u22f1\u22f4\7\u0323\2\2\u22f2\u22f4\5\u03bc"+
		"\u01df\2\u22f3\u22f1\3\2\2\2\u22f3\u22f2\3\2\2\2\u22f4\u22f5\3\2\2\2\u22f5"+
		"\u22fe\5\u02cc\u0167\2\u22f6\u22f7\5\u03b6\u01dc\2\u22f7\u22f8\7\u0330"+
		"\2\2\u22f8\u22f9\5\u03b6\u01dc\2\u22f9\u22fa\7\u0335\2\2\u22fa\u22fb\5"+
		"\u035a\u01ae\2\u22fb\u22fc\7\u0336\2\2\u22fc\u22fe\3\2\2\2\u22fd\u22ef"+
		"\3\2\2\2\u22fd\u22f6\3\2\2\2\u22fe\u02df\3\2\2\2\u22ff\u2304\5\u02e2\u0172"+
		"\2\u2300\u2301\7\u0337\2\2\u2301\u2303\5\u02e2\u0172\2\u2302\u2300\3\2"+
		"\2\2\u2303\u2306\3\2\2\2\u2304\u2302\3\2\2\2\u2304\u2305\3\2\2\2\u2305"+
		"\u02e1\3\2\2\2\u2306\u2304\3\2\2\2\u2307\u230c\5\u02e4\u0173\2\u2308\u2309"+
		"\7\u00ed\2\2\u2309\u230b\5\u02e4\u0173\2\u230a\u2308\3\2\2\2\u230b\u230e"+
		"\3\2\2\2\u230c\u230a\3\2\2\2\u230c\u230d\3\2\2\2\u230d\u02e3\3\2\2\2\u230e"+
		"\u230c\3\2\2\2\u230f\u2314\5\u02e6\u0174\2\u2310\u2311\7\13\2\2\u2311"+
		"\u2313\5\u02e6\u0174\2\u2312\u2310\3\2\2\2\u2313\u2316\3\2\2\2\u2314\u2312"+
		"\3\2\2\2\u2314\u2315\3\2\2\2\u2315\u02e5\3\2\2\2\u2316\u2314\3\2\2\2\u2317"+
		"\u2319\7\u00dc\2\2\u2318\u2317\3\2\2\2\u2318\u2319\3\2\2\2\u2319\u231a"+
		"\3\2\2\2\u231a\u231b\5\u02e8\u0175\2\u231b\u02e7\3\2\2\2\u231c\u231d\7"+
		"x\2\2\u231d\u231e\7\u0335\2\2\u231e\u231f\5\u02d8\u016d\2\u231f\u2320"+
		"\7\u0336\2\2\u2320\u2354\3\2\2\2\u2321\u2322\5\u02cc\u0167\2\u2322\u2323"+
		"\5\u03ba\u01de\2\u2323\u2324\5\u02cc\u0167\2\u2324\u2354\3\2\2\2\u2325"+
		"\u2326\5\u02cc\u0167\2\u2326\u2327\5\u03ba\u01de\2\u2327\u2328\tn\2\2"+
		"\u2328\u2329\7\u0335\2\2\u2329\u232a\5\u02d8\u016d\2\u232a\u232b\7\u0336"+
		"\2\2\u232b\u2354\3\2\2\2\u232c\u232e\5\u02cc\u0167\2\u232d\u232f\7\u00dc"+
		"\2\2\u232e\u232d\3\2\2\2\u232e\u232f\3\2\2\2\u232f\u2330\3\2\2\2\u2330"+
		"\u2331\7\35\2\2\u2331\u2332\5\u02cc\u0167\2\u2332\u2333\7\13\2\2\u2333"+
		"\u2334\5\u02cc\u0167\2\u2334\u2354\3\2\2\2\u2335\u2337\5\u02cc\u0167\2"+
		"\u2336\u2338\7\u00dc\2\2\u2337\u2336\3\2\2\2\u2337\u2338\3\2\2\2\u2338"+
		"\u2339\3\2\2\2\u2339\u233a\7\u009b\2\2\u233a\u233d\7\u0335\2\2\u233b\u233e"+
		"\5\u02d8\u016d\2\u233c\u233e\5\u035a\u01ae\2\u233d\u233b\3\2\2\2\u233d"+
		"\u233c\3\2\2\2\u233e\u233f\3\2\2\2\u233f\u2340\7\u0336\2\2\u2340\u2354"+
		"\3\2\2\2\u2341\u2343\5\u02cc\u0167\2\u2342\u2344\7\u00dc\2\2\u2343\u2342"+
		"\3\2\2\2\u2343\u2344\3\2\2\2\u2344\u2345\3\2\2\2\u2345\u2346\7\u00b4\2"+
		"\2\u2346\u2349\5\u02cc\u0167\2\u2347\u2348\7p\2\2\u2348\u234a\5\u02cc"+
		"\u0167\2\u2349\u2347\3\2\2\2\u2349\u234a\3\2\2\2\u234a\u2354\3\2\2\2\u234b"+
		"\u234c\5\u02cc\u0167\2\u234c\u234d\7\u00a8\2\2\u234d\u234e\5\u0396\u01cc"+
		"\2\u234e\u2354\3\2\2\2\u234f\u2350\7\u0335\2\2\u2350\u2351\5\u02e2\u0172"+
		"\2\u2351\u2352\7\u0336\2\2\u2352\u2354\3\2\2\2\u2353\u231c\3\2\2\2\u2353"+
		"\u2321\3\2\2\2\u2353\u2325\3\2\2\2\u2353\u232c\3\2\2\2\u2353\u2335\3\2"+
		"\2\2\u2353\u2341\3\2\2\2\u2353\u234b\3\2\2\2\u2353\u234f\3\2\2\2\u2354"+
		"\u02e9\3\2\2\2\u2355\u235b\5\u02ee\u0178\2\u2356\u2357\7\u0335\2\2\u2357"+
		"\u2358\5\u02ea\u0176\2\u2358\u2359\7\u0336\2\2\u2359\u235b\3\2\2\2\u235a"+
		"\u2355\3\2\2\2\u235a\u2356\3\2\2\2\u235b\u235f\3\2\2\2\u235c\u235e\5\u02ec"+
		"\u0177\2\u235d\u235c\3\2\2\2\u235e\u2361\3\2\2\2\u235f\u235d\3\2\2\2\u235f"+
		"\u2360\3\2\2\2\u2360\u02eb\3\2\2\2\u2361\u235f\3\2\2\2\u2362\u2364\7\u0167"+
		"\2\2\u2363\u2365\7\6\2\2\u2364\u2363\3\2\2\2\u2364\u2365\3\2\2\2\u2365"+
		"\u2369\3\2\2\2\u2366\u2369\7u\2\2\u2367\u2369\7\u00a4\2\2\u2368\u2362"+
		"\3\2\2\2\u2368\u2366\3\2\2\2\u2368\u2367\3\2\2\2\u2369\u236f\3\2\2\2\u236a"+
		"\u2370\5\u02ee\u0178\2\u236b\u236c\7\u0335\2\2\u236c\u236d\5\u02ea\u0176"+
		"\2\u236d\u236e\7\u0336\2\2\u236e\u2370\3\2\2\2\u236f\u236a\3\2\2\2\u236f"+
		"\u236b\3\2\2\2\u2370\u02ed\3\2\2\2\u2371\u2373\7\u0132\2\2\u2372\u2374"+
		"\to\2\2\u2373\u2372\3\2\2\2\u2373\u2374\3\2\2\2\u2374\u2376\3\2\2\2\u2375"+
		"\u2377\5\u02f0\u0179\2\u2376\u2375\3\2\2\2\u2376\u2377\3\2\2\2\u2377\u2378"+
		"\3\2\2\2\u2378\u237b\5\u0306\u0184\2\u2379\u237a\7\u00a5\2\2\u237a\u237c"+
		"\5\u0382\u01c2\2\u237b\u2379\3\2\2\2\u237b\u237c\3\2\2\2\u237c\u237f\3";
	private static final String _serializedATNSegment4 =
		"\2\2\2\u237d\u237e\7\u008c\2\2\u237e\u2380\5\u0314\u018b\2\u237f\u237d"+
		"\3\2\2\2\u237f\u2380\3\2\2\2\u2380\u2383\3\2\2\2\u2381\u2382\7\u0179\2"+
		"\2\u2382\u2384\5\u02e2\u0172\2\u2383\u2381\3\2\2\2\u2383\u2384\3\2\2\2"+
		"\u2384\u2392\3\2\2\2\u2385\u2386\7\u0093\2\2\u2386\u2388\7&\2\2\u2387"+
		"\u2389\7\6\2\2\u2388\u2387\3\2\2\2\u2388\u2389\3\2\2\2\u2389\u238a\3\2"+
		"\2\2\u238a\u238f\5\u02fe\u0180\2\u238b\u238c\7\u0337\2\2\u238c\u238e\5"+
		"\u02fe\u0180\2\u238d\u238b\3\2\2\2\u238e\u2391\3\2\2\2\u238f\u238d\3\2"+
		"\2\2\u238f\u2390\3\2\2\2\u2390\u2393\3\2\2\2\u2391\u238f\3\2\2\2\u2392"+
		"\u2385\3\2\2\2\u2392\u2393\3\2\2\2\u2393\u2396\3\2\2\2\u2394\u2395\7\u0094"+
		"\2\2\u2395\u2397\5\u02e2\u0172\2\u2396\u2394\3\2\2\2\u2396\u2397\3\2\2"+
		"\2\u2397\u02ef\3\2\2\2\u2398\u239b\7\u015e\2\2\u2399\u239c\5\u02f2\u017a"+
		"\2\u239a\u239c\5\u02f4\u017b\2\u239b\u2399\3\2\2\2\u239b\u239a\3\2\2\2"+
		"\u239c\u239f\3\2\2\2\u239d\u239e\7\u017c\2\2\u239e\u23a0\7\u02ee\2\2\u239f"+
		"\u239d\3\2\2\2\u239f\u23a0\3\2\2\2\u23a0\u02f1\3\2\2\2\u23a1\u23a2\tp"+
		"\2\2\u23a2\u23a9\7\u00f5\2\2\u23a3\u23a4\7\u0335\2\2\u23a4\u23a5\5\u02cc"+
		"\u0167\2\u23a5\u23a6\7\u0336\2\2\u23a6\u23a7\7\u00f5\2\2\u23a7\u23a9\3"+
		"\2\2\2\u23a8\u23a1\3\2\2\2\u23a8\u23a3\3\2\2\2\u23a9\u02f3\3\2\2\2\u23aa"+
		"\u23b0\7\u031b\2\2\u23ab\u23ac\7\u0335\2\2\u23ac\u23ad\5\u02cc\u0167\2"+
		"\u23ad\u23ae\7\u0336\2\2\u23ae\u23b0\3\2\2\2\u23af\u23aa\3\2\2\2\u23af"+
		"\u23ab\3\2\2\2\u23b0\u02f5\3\2\2\2\u23b1\u23b2\7\u00ee\2\2\u23b2\u23b3"+
		"\7&\2\2\u23b3\u23b8\5\u02fc\u017f\2\u23b4\u23b5\7\u0337\2\2\u23b5\u23b7"+
		"\5\u02fc\u017f\2\u23b6\u23b4\3\2\2\2\u23b7\u23ba\3\2\2\2\u23b8\u23b6\3"+
		"\2\2\2\u23b8\u23b9\3\2\2\2\u23b9\u23c6\3\2\2\2\u23ba\u23b8\3\2\2\2\u23bb"+
		"\u23bc\7\u0274\2\2\u23bc\u23bd\5\u02cc\u0167\2\u23bd\u23c4\tq\2\2\u23be"+
		"\u23bf\7\u0081\2\2\u23bf\u23c0\tr\2\2\u23c0\u23c1\5\u02cc\u0167\2\u23c1"+
		"\u23c2\tq\2\2\u23c2\u23c3\7\u0277\2\2\u23c3\u23c5\3\2\2\2\u23c4\u23be"+
		"\3\2\2\2\u23c4\u23c5\3\2\2\2\u23c5\u23c7\3\2\2\2\u23c6\u23bb\3\2\2\2\u23c6"+
		"\u23c7\3\2\2\2\u23c7\u02f7\3\2\2\2\u23c8\u23c9\7\u0086\2\2\u23c9\u2421"+
		"\7\"\2\2\u23ca\u23cb\7\u0086\2\2\u23cb\u23d3\7\u030e\2\2\u23cc\u23d0\7"+
		"\u0109\2\2\u23cd\u23ce\7\u0335\2\2\u23ce\u23cf\7\u031f\2\2\u23cf\u23d1"+
		"\7\u0336\2\2\u23d0\u23cd\3\2\2\2\u23d0\u23d1\3\2\2\2\u23d1\u23d4\3\2\2"+
		"\2\u23d2\u23d4\7\u019b\2\2\u23d3\u23cc\3\2\2\2\u23d3\u23d2\3\2\2\2\u23d4"+
		"\u23d8\3\2\2\2\u23d5\u23d7\5\u02fa\u017e\2\u23d6\u23d5\3\2\2\2\u23d7\u23da"+
		"\3\2\2\2\u23d8\u23d6\3\2\2\2\u23d8\u23d9\3\2\2\2\u23d9\u23e5\3\2\2\2\u23da"+
		"\u23d8\3\2\2\2\u23db\u23e3\7\u0337\2\2\u23dc\u23e4\7\u030f\2\2\u23dd\u23e1"+
		"\7\u0311\2\2\u23de\u23df\7\u0335\2\2\u23df\u23e0\7\u031f\2\2\u23e0\u23e2"+
		"\7\u0336\2\2\u23e1\u23de\3\2\2\2\u23e1\u23e2\3\2\2\2\u23e2\u23e4\3\2\2"+
		"\2\u23e3\u23dc\3\2\2\2\u23e3\u23dd\3\2\2\2\u23e4\u23e6\3\2\2\2\u23e5\u23db"+
		"\3\2\2\2\u23e5\u23e6\3\2\2\2\u23e6\u23ea\3\2\2\2\u23e7\u23e8\7\u0337\2"+
		"\2\u23e8\u23e9\7\u01e8\2\2\u23e9\u23eb\ts\2\2\u23ea\u23e7\3\2\2\2\u23ea"+
		"\u23eb\3\2\2\2\u23eb\u2421\3\2\2\2\u23ec\u23ed\7\u0086\2\2\u23ed\u23ee"+
		"\7\u030e\2\2\u23ee\u23f2\7\u01f6\2\2\u23ef\u23f1\5\u02fa\u017e\2\u23f0"+
		"\u23ef\3\2\2\2\u23f1\u23f4\3\2\2\2\u23f2\u23f0\3\2\2\2\u23f2\u23f3\3\2"+
		"\2\2\u23f3\u23f7\3\2\2\2\u23f4\u23f2\3\2\2\2\u23f5\u23f6\7\u0337\2\2\u23f6"+
		"\u23f8\7\u030f\2\2\u23f7\u23f5\3\2\2\2\u23f7\u23f8\3\2\2\2\u23f8\u2421"+
		"\3\2\2\2\u23f9\u23fa\7\u0086\2\2\u23fa\u23fb\7\u030e\2\2\u23fb\u23ff\7"+
		"\u0283\2\2\u23fc\u23fd\7\u0335\2\2\u23fd\u23fe\7\u031f\2\2\u23fe\u2400"+
		"\7\u0336\2\2\u23ff\u23fc\3\2\2\2\u23ff\u2400\3\2\2\2\u2400\u2404\3\2\2"+
		"\2\u2401\u2403\5\u02fa\u017e\2\u2402\u2401\3\2\2\2\u2403\u2406\3\2\2\2"+
		"\u2404\u2402\3\2\2\2\u2404\u2405\3\2\2\2\u2405\u240a\3\2\2\2\u2406\u2404"+
		"\3\2\2\2\u2407\u2408\7\u0337\2\2\u2408\u2409\7\u01e8\2\2\u2409\u240b\t"+
		"s\2\2\u240a\u2407\3\2\2\2\u240a\u240b\3\2\2\2\u240b\u2421\3\2\2\2\u240c"+
		"\u240d\7\u0086\2\2\u240d\u240e\7\u0228\2\2\u240e\u2416\tt\2\2\u240f\u2410"+
		"\7\u0337\2\2\u2410\u2414\7\u02b7\2\2\u2411\u2412\7\u0335\2\2\u2412\u2413"+
		"\7\u031f\2\2\u2413\u2415\7\u0336\2\2\u2414\u2411\3\2\2\2\u2414\u2415\3"+
		"\2\2\2\u2415\u2417\3\2\2\2\u2416\u240f\3\2\2\2\u2416\u2417\3\2\2\2\u2417"+
		"\u241a\3\2\2\2\u2418\u2419\7\u0337\2\2\u2419\u241b\7\u021f\2\2\u241a\u2418"+
		"\3\2\2\2\u241a\u241b\3\2\2\2\u241b\u241e\3\2\2\2\u241c\u241d\7\u0337\2"+
		"\2\u241d\u241f\7\u030b\2\2\u241e\u241c\3\2\2\2\u241e\u241f\3\2\2\2\u241f"+
		"\u2421\3\2\2\2\u2420\u23c8\3\2\2\2\u2420\u23ca\3\2\2\2\u2420\u23ec\3\2"+
		"\2\2\u2420\u23f9\3\2\2\2\u2420\u240c\3\2\2\2\u2421\u02f9\3\2\2\2\u2422"+
		"\u2423\7\u0337\2\2\u2423\u2424\tu\2\2\u2424\u02fb\3\2\2\2\u2425\u2427"+
		"\5\u02cc\u0167\2\u2426\u2428\tv\2\2\u2427\u2426\3\2\2\2\u2427\u2428\3"+
		"\2\2\2\u2428\u02fd\3\2\2\2\u2429\u242a\5\u02cc\u0167\2\u242a\u02ff\3\2"+
		"\2\2\u242b\u242c\7\u00ec\2\2\u242c\u242d\7\u0335\2\2\u242d\u2432\5\u0302"+
		"\u0182\2\u242e\u242f\7\u0337\2\2\u242f\u2431\5\u0302\u0182\2\u2430\u242e"+
		"\3\2\2\2\u2431\u2434\3\2\2\2\u2432\u2430\3\2\2\2\u2432\u2433\3\2\2\2\u2433"+
		"\u2435\3\2\2\2\u2434\u2432\3\2\2\2\u2435\u2436\7\u0336\2\2\u2436\u0301"+
		"\3\2\2\2\u2437\u2438\7\u01fb\2\2\u2438\u2465\7\u031b\2\2\u2439\u243a\t"+
		"w\2\2\u243a\u2465\7\u0093\2\2\u243b\u243c\tx\2\2\u243c\u2465\7\u0167\2"+
		"\2\u243d\u243e\ty\2\2\u243e\u2465\7\u00aa\2\2\u243f\u2440\7\u01f4\2\2"+
		"\u2440\u2465\7\u0308\2\2\u2441\u2442\7\u0205\2\2\u2442\u2465\7\u00ee\2"+
		"\2\u2443\u2465\7\u021b\2\2\u2444\u2445\7\u022a\2\2\u2445\u2465\7\u00fb"+
		"\2\2\u2446\u2447\7\u022b\2\2\u2447\u2465\7\u00fb\2\2\u2448\u2449\7\u024b"+
		"\2\2\u2449\u2465\7\u031b\2\2\u244a\u244b\7\u024c\2\2\u244b\u2465\7\u031b"+
		"\2\2\u244c\u244d\7\u027a\2\2\u244d\u244e\7\u0086\2\2\u244e\u244f\7\u0335"+
		"\2\2\u244f\u2454\5\u0304\u0183\2\u2450\u2451\7\u0337\2\2\u2451\u2453\5"+
		"\u0304\u0183\2\u2452\u2450\3\2\2\2\u2453\u2456\3\2\2\2\u2454\u2452\3\2"+
		"\2\2\u2454\u2455\3\2\2\2\u2455\u2457\3\2\2\2\u2456\u2454\3\2\2\2\u2457"+
		"\u2458\7\u0336\2\2\u2458\u2465\3\2\2\2\u2459\u245a\7\u027a\2\2\u245a\u245b"+
		"\7\u0086\2\2\u245b\u2465\7\u02ff\2\2\u245c\u245d\7\u027f\2\2\u245d\u2465"+
		"\tM\2\2\u245e\u2465\7\u02a3\2\2\u245f\u2460\7\u02b6\2\2\u2460\u2465\7"+
		"\u00fb\2\2\u2461\u2462\7\u016f\2\2\u2462\u2463\7\u00fb\2\2\u2463\u2465"+
		"\7\u031f\2\2\u2464\u2437\3\2\2\2\u2464\u2439\3\2\2\2\u2464\u243b\3\2\2"+
		"\2\u2464\u243d\3\2\2\2\u2464\u243f\3\2\2\2\u2464\u2441\3\2\2\2\u2464\u2443"+
		"\3\2\2\2\u2464\u2444\3\2\2\2\u2464\u2446\3\2\2\2\u2464\u2448\3\2\2\2\u2464"+
		"\u244a\3\2\2\2\u2464\u244c\3\2\2\2\u2464\u2459\3\2\2\2\u2464\u245c\3\2"+
		"\2\2\u2464\u245e\3\2\2\2\u2464\u245f\3\2\2\2\u2464\u2461\3\2\2\2\u2465"+
		"\u0303\3\2\2\2\u2466\u246d\7\u031a\2\2\u2467\u246e\7\u02ff\2\2\u2468\u246b"+
		"\7\u0323\2\2\u2469\u246c\5\u03b2\u01da\2\u246a\u246c\7\u00df\2\2\u246b"+
		"\u2469\3\2\2\2\u246b\u246a\3\2\2\2\u246c\u246e\3\2\2\2\u246d\u2467\3\2"+
		"\2\2\u246d\u2468\3\2\2\2\u246e\u0305\3\2\2\2\u246f\u2474\5\u0312\u018a"+
		"\2\u2470\u2471\7\u0337\2\2\u2471\u2473\5\u0312\u018a\2\u2472\u2470\3\2"+
		"\2\2\u2473\u2476\3\2\2\2\u2474\u2472\3\2\2\2\u2474\u2475\3\2\2\2\u2475"+
		"\u0307\3\2\2\2\u2476\u2474\3\2\2\2\u2477\u2478\7\u0335\2\2\u2478\u247d"+
		"\5\u0276\u013c\2\u2479\u247a\7\u0337\2\2\u247a\u247c\5\u0276\u013c\2\u247b"+
		"\u2479\3\2\2\2\u247c\u247f\3\2\2\2\u247d\u247b\3\2\2\2\u247d\u247e\3\2"+
		"\2\2\u247e\u2480\3\2\2\2\u247f\u247d\3\2\2\2\u2480\u2481\7\u0336\2\2\u2481"+
		"\u0309\3\2\2\2\u2482\u2488\7\u033a\2\2\u2483\u2484\5\u0382\u01c2\2\u2484"+
		"\u2485\7\u0330\2\2\u2485\u2486\5\u030a\u0186\2\u2486\u2488\3\2\2\2\u2487"+
		"\u2482\3\2\2\2\u2487\u2483\3\2\2\2\u2488\u030b\3\2\2\2\u2489\u248a\5\u0382"+
		"\u01c2\2\u248a\u248b\7\u0330\2\2\u248b\u248d\3\2\2\2\u248c\u2489\3\2\2"+
		"\2\u248c\u248d\3\2\2\2\u248d\u2493\3\2\2\2\u248e\u2494\5\u03b6\u01dc\2"+
		"\u248f\u2490\7\u0334\2\2\u2490\u2494\7\u0097\2\2\u2491\u2492\7\u0334\2"+
		"\2\u2492\u2494\7\u02bb\2\2\u2493\u248e\3\2\2\2\u2493\u248f\3\2\2\2\u2493"+
		"\u2491\3\2\2\2\u2494\u2496\3\2\2\2\u2495\u2497\5\u0346\u01a4\2\u2496\u2495"+
		"\3\2\2\2\u2496\u2497\3\2\2\2\u2497\u030d\3\2\2\2\u2498\u2499\5\u03b6\u01dc"+
		"\2\u2499\u249a\7\u0330\2\2\u249a\u249b\5\u03b6\u01dc\2\u249b\u249d\5\u0308"+
		"\u0185\2\u249c\u249e\5\u0346\u01a4\2\u249d\u249c\3\2\2\2\u249d\u249e\3"+
		"\2\2\2\u249e\u24aa\3\2\2\2\u249f\u24a0\5\u03b6\u01dc\2\u24a0\u24a1\7\u0339"+
		"\2\2\u24a1\u24a2\7\u0339\2\2\u24a2\u24a4\5\u03b6\u01dc\2\u24a3\u24a5\5"+
		"\u0308\u0185\2\u24a4\u24a3\3\2\2\2\u24a4\u24a5\3\2\2\2\u24a5\u24a7\3\2"+
		"\2\2\u24a6\u24a8\5\u0346\u01a4\2\u24a7\u24a6\3\2\2\2\u24a7\u24a8\3\2\2"+
		"\2\u24a8\u24aa\3\2\2\2\u24a9\u2498\3\2\2\2\u24a9\u249f\3\2\2\2\u24aa\u030f"+
		"\3\2\2\2\u24ab\u24ac\5\u0356\u01ac\2\u24ac\u24ad\7\u0323\2\2\u24ad\u24ae"+
		"\5\u02cc\u0167\2\u24ae\u24b4\3\2\2\2\u24af\u24b1\5\u02cc\u0167\2\u24b0"+
		"\u24b2\5\u0346\u01a4\2\u24b1\u24b0\3\2\2\2\u24b1\u24b2\3\2\2\2\u24b2\u24b4"+
		"\3\2\2\2\u24b3\u24ab\3\2\2\2\u24b3\u24af\3\2\2\2\u24b4\u0311\3\2\2\2\u24b5"+
		"\u24ba\5\u030a\u0186\2\u24b6\u24ba\5\u030c\u0187\2\u24b7\u24ba\5\u030e"+
		"\u0188\2\u24b8\u24ba\5\u0310\u0189\2\u24b9\u24b5\3\2\2\2\u24b9\u24b6\3"+
		"\2\2\2\u24b9\u24b7\3\2\2\2\u24b9\u24b8\3\2\2\2\u24ba\u0313\3\2\2\2\u24bb"+
		"\u24c0\5\u0316\u018c\2\u24bc\u24bd\7\u0337\2\2\u24bd\u24bf\5\u0316\u018c"+
		"\2\u24be\u24bc\3\2\2\2\u24bf\u24c2\3\2\2\2\u24c0\u24be\3\2\2\2\u24c0\u24c1"+
		"\3\2\2\2\u24c1\u0315\3\2\2\2\u24c2\u24c0\3\2\2\2\u24c3\u24c9\5\u0318\u018d"+
		"\2\u24c4\u24c5\7\u0335\2\2\u24c5\u24c6\5\u0318\u018d\2\u24c6\u24c7\7\u0336"+
		"\2\2\u24c7\u24c9\3\2\2\2\u24c8\u24c3\3\2\2\2\u24c8\u24c4\3\2\2\2\u24c9"+
		"\u0317\3\2\2\2\u24ca\u24ce\5\u031a\u018e\2\u24cb\u24cd\5\u0324\u0193\2"+
		"\u24cc\u24cb\3\2\2\2\u24cd\u24d0\3\2\2\2\u24ce\u24cc\3\2\2\2\u24ce\u24cf"+
		"\3\2\2\2\u24cf\u0319\3\2\2\2\u24d0\u24ce\3\2\2\2\u24d1\u24d3\5\u032c\u0197"+
		"\2\u24d2\u24d4\5\u0348\u01a5\2\u24d3\u24d2\3\2\2\2\u24d3\u24d4\3\2\2\2"+
		"\u24d4\u2500\3\2\2\2\u24d5\u24d7\5\u0380\u01c1\2\u24d6\u24d8\5\u0348\u01a5"+
		"\2\u24d7\u24d6\3\2\2\2\u24d7\u24d8\3\2\2\2\u24d8\u2500\3\2\2\2\u24d9\u24db"+
		"\5\u032e\u0198\2\u24da\u24dc\5\u0348\u01a5\2\u24db\u24da\3\2\2\2\u24db"+
		"\u24dc\3\2\2\2\u24dc\u2500\3\2\2\2\u24dd\u24e2\5\u0332\u019a\2\u24de\u24e0"+
		"\5\u0348\u01a5\2\u24df\u24e1\5\u0354\u01ab\2\u24e0\u24df\3\2\2\2\u24e0"+
		"\u24e1\3\2\2\2\u24e1\u24e3\3\2\2\2\u24e2\u24de\3\2\2\2\u24e2\u24e3\3\2"+
		"\2\2\u24e3\u2500\3\2\2\2\u24e4\u24e5\5\u0322\u0192\2\u24e5\u24e6\5\u0348"+
		"\u01a5\2\u24e6\u2500\3\2\2\2\u24e7\u24e9\5\u0334\u019b\2\u24e8\u24ea\5"+
		"\u0348\u01a5\2\u24e9\u24e8\3\2\2\2\u24e9\u24ea\3\2\2\2\u24ea\u2500\3\2"+
		"\2\2\u24eb\u24ed\7\u031a\2\2\u24ec\u24ee\5\u0348\u01a5\2\u24ed\u24ec\3"+
		"\2\2\2\u24ed\u24ee\3\2\2\2\u24ee\u2500\3\2\2\2\u24ef\u24f0\7\u031a\2\2"+
		"\u24f0\u24f1\7\u0330\2\2\u24f1\u24f6\5\u0334\u019b\2\u24f2\u24f4\5\u0348"+
		"\u01a5\2\u24f3\u24f5\5\u0354\u01ab\2\u24f4\u24f3\3\2\2\2\u24f4\u24f5\3"+
		"\2\2\2\u24f5\u24f7\3\2\2\2\u24f6\u24f2\3\2\2\2\u24f6\u24f7\3\2\2\2\u24f7"+
		"\u2500\3\2\2\2\u24f8\u2500\5\u031c\u018f\2\u24f9\u24fa\7\u0339\2\2\u24fa"+
		"\u24fb\7\u0339\2\2\u24fb\u24fd\5\u0334\u019b\2\u24fc\u24fe\5\u0348\u01a5"+
		"\2\u24fd\u24fc\3\2\2\2\u24fd\u24fe\3\2\2\2\u24fe\u2500\3\2\2\2\u24ff\u24d1"+
		"\3\2\2\2\u24ff\u24d5\3\2\2\2\u24ff\u24d9\3\2\2\2\u24ff\u24dd\3\2\2\2\u24ff"+
		"\u24e4\3\2\2\2\u24ff\u24e7\3\2\2\2\u24ff\u24eb\3\2\2\2\u24ff\u24ef\3\2"+
		"\2\2\u24ff\u24f8\3\2\2\2\u24ff\u24f9\3\2\2\2\u2500\u031b\3\2\2\2\u2501"+
		"\u2502\7\u00eb\2\2\u2502\u2503\7\u0335\2\2\u2503\u2504\5\u02cc\u0167\2"+
		"\u2504\u2505\7\u0337\2\2\u2505\u2508\5\u02cc\u0167\2\u2506\u2507\7\u0337"+
		"\2\2\u2507\u2509\5\u02cc\u0167\2\u2508\u2506\3\2\2\2\u2508\u2509\3\2\2"+
		"\2\u2509\u250a\3\2\2\2\u250a\u2510\7\u0336\2\2\u250b\u250c\7\u017c\2\2"+
		"\u250c\u250d\7\u0335\2\2\u250d\u250e\5\u031e\u0190\2\u250e\u250f\7\u0336"+
		"\2\2\u250f\u2511\3\2\2\2\u2510\u250b\3\2\2\2\u2510\u2511\3\2\2\2\u2511"+
		"\u031d\3\2\2\2\u2512\u2517\5\u0320\u0191\2\u2513\u2514\7\u0337\2\2\u2514"+
		"\u2516\5\u0320\u0191\2\u2515\u2513\3\2\2\2\u2516\u2519\3\2\2\2\u2517\u2515"+
		"\3\2\2\2\u2517\u2518\3\2\2\2\u2518\u031f\3\2\2\2\u2519\u2517\3\2\2\2\u251a"+
		"\u251b\7\u031c\2\2\u251b\u251d\5\u03ae\u01d8\2\u251c\u251e\7\u031f\2\2"+
		"\u251d\u251c\3\2\2\2\u251d\u251e\3\2\2\2\u251e\u0321\3\2\2\2\u251f\u2520"+
		"\7,\2\2\u2520\u2521\7\u0335\2\2\u2521\u2522\7-\2\2\u2522\u2523\5\u0382"+
		"\u01c2\2\u2523\u2524\7\u0337\2\2\u2524\u2525\tz\2\2\u2525\u2526\7\u0336"+
		"\2\2\u2526\u0323\3\2\2\2\u2527\u2529\7\u00a1\2\2\u2528\u2527\3\2\2\2\u2528"+
		"\u2529\3\2\2\2\u2529\u252f\3\2\2\2\u252a\u252c\t{\2\2\u252b\u252d\7\u00ef"+
		"\2\2\u252c\u252b\3\2\2\2\u252c\u252d\3\2\2\2\u252d\u252f\3\2\2\2\u252e"+
		"\u2528\3\2\2\2\u252e\u252a\3\2\2\2\u252f\u2531\3\2\2\2\u2530\u2532\t|"+
		"\2\2\u2531\u2530\3\2\2\2\u2531\u2532\3\2\2\2\u2532\u2533\3\2\2\2\u2533"+
		"\u2534\7\u00aa\2\2\u2534\u2535\5\u0316\u018c\2\u2535\u2536\7\u00e5\2\2"+
		"\u2536\u2537\5\u02e2\u0172\2\u2537\u254a\3\2\2\2\u2538\u2539\7J\2\2\u2539"+
		"\u253a\7\u00aa\2\2\u253a\u254a\5\u0316\u018c\2\u253b\u253c\7J\2\2\u253c"+
		"\u253d\7\u0196\2\2\u253d\u254a\5\u0316\u018c\2\u253e\u253f\7\u00ef\2\2"+
		"\u253f\u2540\7\u0196\2\2\u2540\u254a\5\u0316\u018c\2\u2541\u2542\7\u00fa"+
		"\2\2\u2542\u2543\5\u0326\u0194\2\u2543\u2544\5\u0348\u01a5\2\u2544\u254a"+
		"\3\2\2\2\u2545\u2546\7\u016a\2\2\u2546\u2547\5\u0328\u0195\2\u2547\u2548"+
		"\5\u0348\u01a5\2\u2548\u254a\3\2\2\2\u2549\u252e\3\2\2\2\u2549\u2538\3"+
		"\2\2\2\u2549\u253b\3\2\2\2\u2549\u253e\3\2\2\2\u2549\u2541\3\2\2\2\u2549"+
		"\u2545\3\2\2\2\u254a\u0325\3\2\2\2\u254b\u254c\7\u0335\2\2\u254c\u254d"+
		"\5\u035e\u01b0\2\u254d\u254e\7\u0086\2\2\u254e\u254f\5\u038a\u01c6\2\u254f"+
		"\u2550\7\u009b\2\2\u2550\u2551\5\u0354\u01ab\2\u2551\u2552\7\u0336\2\2"+
		"\u2552\u0327\3\2\2\2\u2553\u2554\7\u0335\2\2\u2554\u2555\5\u02cc\u0167"+
		"\2\u2555\u2556\7\u0086\2\2\u2556\u2557\5\u038a\u01c6\2\u2557\u2558\7\u009b"+
		"\2\2\u2558\u2559\7\u0335\2\2\u2559\u255a\5\u032a\u0196\2\u255a\u255b\7"+
		"\u0336\2\2\u255b\u255c\7\u0336\2\2\u255c\u0329\3\2\2\2\u255d\u2562\5\u038a"+
		"\u01c6\2\u255e\u255f\7\u0337\2\2\u255f\u2561\5\u038a\u01c6\2\u2560\u255e"+
		"\3\2\2\2\u2561\u2564\3\2\2\2\u2562\u2560\3\2\2\2\u2562\u2563\3\2\2\2\u2563"+
		"\u032b\3\2\2\2\u2564\u2562\3\2\2\2\u2565\u2567\5\u0382\u01c2\2\u2566\u2568"+
		"\5\u034c\u01a7\2\u2567\u2566\3\2\2\2\u2567\u2568\3\2\2\2\u2568\u032d\3"+
		"\2\2\2\u2569\u256a\7\u00ea\2\2\u256a\u256b\7\u0335\2\2\u256b\u256c\7\u031f"+
		"\2\2\u256c\u256d\7\u0337\2\2\u256d\u256e\7\u031f\2\2\u256e\u256f\7\u0337"+
		"\2\2\u256f\u2570\7\u031f\2\2\u2570\u2584\7\u0336\2\2\u2571\u2572\7\u00ea"+
		"\2\2\u2572\u2573\7\u0335\2\2\u2573\u2574\7%\2\2\u2574\u2575\7\u031f\2"+
		"\2\u2575\u257f\7\u0337\2\2\u2576\u257b\5\u0330\u0199\2\u2577\u2578\7\u0337"+
		"\2\2\u2578\u257a\5\u0330\u0199\2\u2579\u2577\3\2\2\2\u257a\u257d\3\2\2"+
		"\2\u257b\u2579\3\2\2\2\u257b\u257c\3\2\2\2\u257c\u2580\3\2\2\2\u257d\u257b"+
		"\3\2\2\2\u257e\u2580\5\u03b6\u01dc\2\u257f\u2576\3\2\2\2\u257f\u257e\3"+
		"\2\2\2\u2580\u2581\3\2\2\2\u2581\u2582\7\u0336\2\2\u2582\u2584\3\2\2\2"+
		"\u2583\u2569\3\2\2\2\u2583\u2571\3\2\2\2\u2584\u032f\3\2\2\2\u2585\u2586"+
		"\5\u03b6\u01dc\2\u2586\u2587\7\u0323\2\2\u2587\u2588\t\30\2\2\u2588\u0331"+
		"\3\2\2\2\u2589\u2594\5\u02d8\u016d\2\u258a\u258b\7\u0335\2\2\u258b\u258c"+
		"\5\u02d8\u016d\2\u258c\u258d\7\u0336\2\2\u258d\u2594\3\2\2\2\u258e\u2594"+
		"\5\u0358\u01ad\2\u258f\u2590\7\u0335\2\2\u2590\u2591\5\u0358\u01ad\2\u2591"+
		"\u2592\7\u0336\2\2\u2592\u2594\3\2\2\2\u2593\u2589\3\2\2\2\u2593\u258a"+
		"\3\2\2\2\u2593\u258e\3\2\2\2\u2593\u258f\3\2\2\2\u2594\u0333\3\2\2\2\u2595"+
		"\u2611\5\u035c\u01af\2\u2596\u2611\5\u035e\u01b0\2\u2597\u2611\5\u0360"+
		"\u01b1\2\u2598\u2599\5\u039a\u01ce\2\u2599\u259b\7\u0335\2\2\u259a\u259c"+
		"\5\u035a\u01ae\2\u259b\u259a\3\2\2\2\u259b\u259c\3\2\2\2\u259c\u259d\3"+
		"\2\2\2\u259d\u259e\7\u0336\2\2\u259e\u2611\3\2\2\2\u259f\u25a0\7\u01a8"+
		"\2\2\u25a0\u25a1\7\u0335\2\2\u25a1\u25a2\7\u033a\2\2\u25a2\u2611\7\u0336"+
		"\2\2\u25a3\u25a4\7\u01b0\2\2\u25a4\u25a5\7\u0335\2\2\u25a5\u25a6\5\u02cc"+
		"\u0167\2\u25a6\u25a7\7\20\2\2\u25a7\u25a8\5\u03ae\u01d8\2\u25a8\u25a9"+
		"\7\u0336\2\2\u25a9\u2611\3\2\2\2\u25aa\u25ab\7G\2\2\u25ab\u25ac\7\u0335"+
		"\2\2\u25ac\u25ad\5\u03ae\u01d8\2\u25ad\u25ae\7\u0337\2\2\u25ae\u25b1\5"+
		"\u02cc\u0167\2\u25af\u25b0\7\u0337\2\2\u25b0\u25b2\5\u02cc\u0167\2\u25b1"+
		"\u25af\3\2\2\2\u25b1\u25b2\3\2\2\2\u25b2\u25b3\3\2\2\2\u25b3\u25b4\7\u0336"+
		"\2\2\u25b4\u2611\3\2\2\2\u25b5\u25b6\7\u01b5\2\2\u25b6\u25b7\7\u0335\2"+
		"\2\u25b7\u25b8\7\u033a\2\2\u25b8\u2611\7\u0336\2\2\u25b9\u25ba\7\66\2"+
		"\2\u25ba\u25bb\7\u0335\2\2\u25bb\u25bc\5\u035a\u01ae\2\u25bc\u25bd\7\u0336"+
		"\2\2\u25bd\u2611\3\2\2\2\u25be\u2611\7N\2\2\u25bf\u2611\7O\2\2\u25c0\u25c1"+
		"\7\u01cc\2\2\u25c1\u25c2\7\u0335\2\2\u25c2\u25c3\7\u031c\2\2\u25c3\u25c4"+
		"\7\u0337\2\2\u25c4\u25c5\5\u02cc\u0167\2\u25c5\u25c6\7\u0337\2\2\u25c6"+
		"\u25c7\5\u02cc\u0167\2\u25c7\u25c8\7\u0336\2\2\u25c8\u2611\3\2\2\2\u25c9"+
		"\u25ca\7\u01cd\2\2\u25ca\u25cb\7\u0335\2\2\u25cb\u25cc\7\u031c\2\2\u25cc"+
		"\u25cd\7\u0337\2\2\u25cd\u25ce\5\u02cc\u0167\2\u25ce\u25cf\7\u0337\2\2"+
		"\u25cf\u25d0\5\u02cc\u0167\2\u25d0\u25d1\7\u0336\2\2\u25d1\u2611\3\2\2"+
		"\2\u25d2\u25d3\7\u01ce\2\2\u25d3\u25d4\7\u0335\2\2\u25d4\u25d5\7\u031c"+
		"\2\2\u25d5\u25d6\7\u0337\2\2\u25d6\u25d7\5\u02cc\u0167\2\u25d7\u25d8\7"+
		"\u0336\2\2\u25d8\u2611\3\2\2\2\u25d9\u25da\7\u01cf\2\2\u25da\u25db\7\u0335"+
		"\2\2\u25db\u25dc\7\u031c\2\2\u25dc\u25dd\7\u0337\2\2\u25dd\u25de\5\u02cc"+
		"\u0167\2\u25de\u25df\7\u0336\2\2\u25df\u2611\3\2\2\2\u25e0\u25e1\7\u020d"+
		"\2\2\u25e1\u25e2\7\u0335\2\2\u25e2\u2611\7\u0336\2\2\u25e3\u25e4\7\u020e"+
		"\2\2\u25e4\u25e5\7\u0335\2\2\u25e5\u2611\7\u0336\2\2\u25e6\u25e7\7\u0097"+
		"\2\2\u25e7\u25e8\7\u0335\2\2\u25e8\u25eb\5\u03ae\u01d8\2\u25e9\u25ea\7"+
		"\u0337\2\2\u25ea\u25ec\7\u031b\2\2\u25eb\u25e9\3\2\2\2\u25eb\u25ec\3\2"+
		"\2\2\u25ec\u25ef\3\2\2\2\u25ed\u25ee\7\u0337\2\2\u25ee\u25f0\7\u031b\2"+
		"\2\u25ef\u25ed\3\2\2\2\u25ef\u25f0\3\2\2\2\u25f0\u25f1\3\2\2\2\u25f1\u25f2"+
		"\7\u0336\2\2\u25f2\u2611\3\2\2\2\u25f3\u2611\7\u0253\2\2\u25f4\u25f5\7"+
		"\u00e0\2\2\u25f5\u25f6\7\u0335\2\2\u25f6\u25f7\5\u02cc\u0167\2\u25f7\u25f8"+
		"\7\u0337\2\2\u25f8\u25f9\5\u02cc\u0167\2\u25f9\u25fa\7\u0336\2\2\u25fa"+
		"\u2611\3\2\2\2\u25fb\u25fc\7\u02e2\2\2\u25fc\u25fd\7\u0335\2\2\u25fd\u25fe"+
		"\5\u02cc\u0167\2\u25fe\u25ff\7\u0337\2\2\u25ff\u2600\7\u031b\2\2\u2600"+
		"\u2601\7\u0337\2\2\u2601\u2602\7\u031b\2\2\u2602\u2603\7\u0337\2\2\u2603"+
		"\u2604\5\u02cc\u0167\2\u2604\u2605\7\u0336\2\2\u2605\u2611\3\2\2\2\u2606"+
		"\u2611\7\u013c\2\2\u2607\u2611\7\u0155\2\2\u2608\u2609\7\u00a9\2\2\u2609"+
		"\u260a\7\u0335\2\2\u260a\u260b\5\u02cc\u0167\2\u260b\u260c\7\u0337\2\2"+
		"\u260c\u260d\5\u02cc\u0167\2\u260d\u260e\7\u0336\2\2\u260e\u2611\3\2\2"+
		"\2\u260f\u2611\5\u0336\u019c\2\u2610\u2595\3\2\2\2\u2610\u2596\3\2\2\2"+
		"\u2610\u2597\3\2\2\2\u2610\u2598\3\2\2\2\u2610\u259f\3\2\2\2\u2610\u25a3"+
		"\3\2\2\2\u2610\u25aa\3\2\2\2\u2610\u25b5\3\2\2\2\u2610\u25b9\3\2\2\2\u2610"+
		"\u25be\3\2\2\2\u2610\u25bf\3\2\2\2\u2610\u25c0\3\2\2\2\u2610\u25c9\3\2"+
		"\2\2\u2610\u25d2\3\2\2\2\u2610\u25d9\3\2\2\2\u2610\u25e0\3\2\2\2\u2610"+
		"\u25e3\3\2\2\2\u2610\u25e6\3\2\2\2\u2610\u25f3\3\2\2\2\u2610\u25f4\3\2"+
		"\2\2\u2610\u25fb\3\2\2\2\u2610\u2606\3\2\2\2\u2610\u2607\3\2\2\2\u2610"+
		"\u2608\3\2\2\2\u2610\u260f\3\2\2\2\u2611\u0335\3\2\2\2\u2612\u2618\5\u0338"+
		"\u019d\2\u2613\u2618\5\u033a\u019e\2\u2614\u2618\5\u033c\u019f\2\u2615"+
		"\u2618\5\u033e\u01a0\2\u2616\u2618\5\u0340\u01a1\2\u2617\u2612\3\2\2\2"+
		"\u2617\u2613\3\2\2\2\u2617\u2614\3\2\2\2\u2617\u2615\3\2\2\2\u2617\u2616"+
		"\3\2\2\2\u2618\u0337\3\2\2\2\u2619\u261e\7\u031a\2\2\u261a\u261e\7\u031c"+
		"\2\2\u261b\u261e\7s\2\2\u261c\u261e\5\u033a\u019e\2\u261d\u2619\3\2\2"+
		"\2\u261d\u261a\3\2\2\2\u261d\u261b\3\2\2\2\u261d\u261c\3\2\2\2\u261e\u261f"+
		"\3\2\2\2\u261f\u2620\7\u0330\2\2\u2620\u2621\7\u0304\2\2\u2621\u2622\7"+
		"\u0335\2\2\u2622\u2623\7\u031f\2\2\u2623\u2624\7\u0337\2\2\u2624\u2625"+
		"\7\u031f\2\2\u2625\u2645\7\u0336\2\2\u2626\u262b\7\u031a\2\2\u2627\u262b"+
		"\7\u031c\2\2\u2628\u262b\7s\2\2\u2629\u262b\5\u033a\u019e\2\u262a\u2626"+
		"\3\2\2\2\u262a\u2627\3\2\2\2\u262a\u2628\3\2\2\2\u262a\u2629\3\2\2\2\u262b"+
		"\u262c\3\2\2\2\u262c\u262d\7\u0330\2\2\u262d\u262e\7\u02b9\2\2\u262e\u262f"+
		"\7\u0330\2\2\u262f\u2630\7\u0304\2\2\u2630\u2631\7\u0335\2\2\u2631\u2632"+
		"\7\u031f\2\2\u2632\u2633\7\u0337\2\2\u2633\u2634\7\u031f\2\2\u2634\u2645"+
		"\7\u0336\2\2\u2635\u263a\7\u031a\2\2\u2636\u263a\7\u031c\2\2\u2637\u263a"+
		"\7s\2\2\u2638\u263a\5\u033a\u019e\2\u2639\u2635\3\2\2\2\u2639\u2636\3"+
		"\2\2\2\u2639\u2637\3\2\2\2\u2639\u2638\3\2\2\2\u263a\u263b\3\2\2\2\u263b"+
		"\u263c\7\u0330\2\2\u263c\u263d\7\u00f2\2\2\u263d\u263e\7\u0330\2\2\u263e"+
		"\u263f\7\u0304\2\2\u263f\u2640\7\u0335\2\2\u2640\u2641\7\u031f\2\2\u2641"+
		"\u2642\7\u0337\2\2\u2642\u2643\7\u031f\2\2\u2643\u2645\7\u0336\2\2\u2644"+
		"\u261d\3\2\2\2\u2644\u262a\3\2\2\2\u2644\u2639\3\2\2\2\u2645\u0339\3\2"+
		"\2\2\u2646\u264a\7\u031a\2\2\u2647\u264a\7\u031c\2\2\u2648\u264a\5\u0380"+
		"\u01c1\2\u2649\u2646\3\2\2\2\u2649\u2647\3\2\2\2\u2649\u2648\3\2\2\2\u264a"+
		"\u264b\3\2\2\2\u264b\u264c\7\u0330\2\2\u264c\u264d\7\u0293\2\2\u264d\u264e"+
		"\7\u0335\2\2\u264e\u264f\7\u031f\2\2\u264f\u265d\7\u0336\2\2\u2650\u2654"+
		"\7\u031a\2\2\u2651\u2654\7\u031c\2\2\u2652\u2654\5\u0380\u01c1\2\u2653"+
		"\u2650\3\2\2\2\u2653\u2651\3\2\2\2\u2653\u2652\3\2\2\2\u2654\u2655\3\2"+
		"\2\2\u2655\u2656\7\u0330\2\2\u2656\u2657\7\u02b9\2\2\u2657\u2658\7\u0330"+
		"\2\2\u2658\u2659\7\u0293\2\2\u2659\u265a\7\u0335\2\2\u265a\u265b\7\u031f"+
		"\2\2\u265b\u265d\7\u0336\2\2\u265c\u2649\3\2\2\2\u265c\u2653\3\2\2\2\u265d"+
		"\u033b\3\2\2\2\u265e\u265f\t}\2\2\u265f\u2660\7\u0330\2\2\u2660\u2661"+
		"\7\u01f3\2\2\u2661\u2662\7\u0335\2\2\u2662\u2663\7\u031f\2\2\u2663\u2664"+
		"\7\u0336\2\2\u2664\u033d\3\2\2\2\u2665\u2666\t}\2\2\u2666\u2667\7\u0330"+
		"\2\2\u2667\u2668\7\u025b\2\2\u2668\u2669\7\u0335\2\2\u2669\u266a\7\u031f"+
		"\2\2\u266a\u266b\7\u0336\2\2\u266b\u033f\3\2\2\2\u266c\u266d\t}\2\2\u266d"+
		"\u266e\7\u0330\2\2\u266e\u266f\7\u0268\2\2\u266f\u2670\7\u0335\2\2\u2670"+
		"\u2671\7\u031f\2\2\u2671\u2672\7\u0336\2\2\u2672\u0341\3\2\2\2\u2673\u2674"+
		"\7\u0178\2\2\u2674\u2675\5\u02cc\u0167\2\u2675\u2676\7\u015c\2\2\u2676"+
		"\u2677\5\u02cc\u0167\2\u2677\u0343\3\2\2\2\u2678\u2679\7\u0178\2\2\u2679"+
		"\u267a\5\u02e2\u0172\2\u267a\u267b\7\u015c\2\2\u267b\u267c\5\u02cc\u0167"+
		"\2\u267c\u0345\3\2\2\2\u267d\u267f\7\20\2\2\u267e\u267d\3\2\2\2\u267e"+
		"\u267f\3\2\2\2\u267f\u2680\3\2\2\2\u2680\u2681\5\u0356\u01ac\2\u2681\u0347"+
		"\3\2\2\2\u2682\u2684\7\20\2\2\u2683\u2682\3\2\2\2\u2683\u2684\3\2\2\2"+
		"\u2684\u2685\3\2\2\2\u2685\u2686\5\u034a\u01a6\2\u2686\u0349\3\2\2\2\u2687"+
		"\u2689\5\u03b6\u01dc\2\u2688\u268a\5\u034c\u01a7\2\u2689\u2688\3\2\2\2"+
		"\u2689\u268a\3\2\2\2\u268a\u034b\3\2\2\2\u268b\u268d\7\u017c\2\2\u268c"+
		"\u268b\3\2\2\2\u268c\u268d\3\2\2\2\u268d\u268e\3\2\2\2\u268e\u268f\7\u0335"+
		"\2\2\u268f\u2696\5\u0350\u01a9\2\u2690\u2692\7\u0337\2\2\u2691\u2690\3"+
		"\2\2\2\u2691\u2692\3\2\2\2\u2692\u2693\3\2\2\2\u2693\u2695\5\u0350\u01a9"+
		"\2\u2694\u2691\3\2\2\2\u2695\u2698\3\2\2\2\u2696\u2694\3\2\2\2\u2696\u2697"+
		"\3\2\2\2\u2697\u2699\3\2\2\2\u2698\u2696\3\2\2\2\u2699\u269a\7\u0336\2"+
		"\2\u269a\u034d\3\2\2\2\u269b\u269c\7\u017c\2\2\u269c\u269d\7\u0335\2\2"+
		"\u269d\u26a4\5\u0350\u01a9\2\u269e\u26a0\7\u0337\2\2\u269f\u269e\3\2\2"+
		"\2\u269f\u26a0\3\2\2\2\u26a0\u26a1\3\2\2\2\u26a1\u26a3\5\u0350\u01a9\2"+
		"\u26a2\u269f\3\2\2\2\u26a3\u26a6\3\2\2\2\u26a4\u26a2\3\2\2\2\u26a4\u26a5"+
		"\3\2\2\2\u26a5\u26a7\3\2\2\2\u26a6\u26a4\3\2\2\2\u26a7\u26a8\7\u0336\2"+
		"\2\u26a8\u034f\3\2\2\2\u26a9\u26ab\7\u0269\2\2\u26aa\u26a9\3\2\2\2\u26aa"+
		"\u26ab\3\2\2\2\u26ab\u26dc\3\2\2\2\u26ac\u26c0\7\u009e\2\2\u26ad\u26ae"+
		"\7\u0335\2\2\u26ae\u26b3\5\u0352\u01aa\2\u26af\u26b0\7\u0337\2\2\u26b0"+
		"\u26b2\5\u0352\u01aa\2\u26b1\u26af\3\2\2\2\u26b2\u26b5\3\2\2\2\u26b3\u26b1"+
		"\3\2\2\2\u26b3\u26b4\3\2\2\2\u26b4\u26b6\3\2\2\2\u26b5\u26b3\3\2\2\2\u26b6"+
		"\u26b7\7\u0336\2\2\u26b7\u26c1\3\2\2\2\u26b8\u26bd\5\u0352\u01aa\2\u26b9"+
		"\u26ba\7\u0337\2\2\u26ba\u26bc\5\u0352\u01aa\2\u26bb\u26b9\3\2\2\2\u26bc"+
		"\u26bf\3\2\2\2\u26bd\u26bb\3\2\2\2\u26bd\u26be\3\2\2\2\u26be\u26c1\3\2"+
		"\2\2\u26bf\u26bd\3\2\2\2\u26c0\u26ad\3\2\2\2\u26c0\u26b8\3\2\2\2\u26c1"+
		"\u26dd\3\2\2\2\u26c2\u26c3\7\u009e\2\2\u26c3\u26c4\7\u0323\2\2\u26c4\u26dd"+
		"\5\u0352\u01aa\2\u26c5\u26d4\7\u0087\2\2\u26c6\u26c7\7\u0335\2\2\u26c7"+
		"\u26c8\5\u0352\u01aa\2\u26c8\u26c9\7\u0335\2\2\u26c9\u26ce\7\u031c\2\2"+
		"\u26ca\u26cb\7\u0337\2\2\u26cb\u26cd\7\u031c\2\2\u26cc\u26ca\3\2\2\2\u26cd"+
		"\u26d0\3\2\2\2\u26ce\u26cc\3\2\2\2\u26ce\u26cf\3\2\2\2\u26cf\u26d1\3\2"+
		"\2\2\u26d0\u26ce\3\2\2\2\u26d1\u26d2\7\u0336\2\2\u26d2\u26d3\7\u0336\2"+
		"\2\u26d3\u26d5\3\2\2\2\u26d4\u26c6\3\2\2\2\u26d4\u26d5\3\2\2\2\u26d5\u26dd"+
		"\3\2\2\2\u26d6\u26dd\7\u02ce\2\2\u26d7\u26dd\7\u02d8\2\2\u26d8\u26d9\7"+
		"\u02d9\2\2\u26d9\u26da\7\u0323\2\2\u26da\u26dd\7\u031b\2\2\u26db\u26dd"+
		"\7\u031c\2\2\u26dc\u26ac\3\2\2\2\u26dc\u26c2\3\2\2\2\u26dc\u26c5\3\2\2"+
		"\2\u26dc\u26d6\3\2\2\2\u26dc\u26d7\3\2\2\2\u26dc\u26d8\3\2\2\2\u26dc\u26db"+
		"\3\2\2\2\u26dd\u0351\3\2\2\2\u26de\u26e1\5\u03b6\u01dc\2\u26df\u26e1\7"+
		"\u031b\2\2\u26e0\u26de\3\2\2\2\u26e0\u26df\3\2\2\2\u26e1\u0353\3\2\2\2"+
		"\u26e2\u26e3\7\u0335\2\2\u26e3\u26e8\5\u0356\u01ac\2\u26e4\u26e5\7\u0337"+
		"\2\2\u26e5\u26e7\5\u0356\u01ac\2\u26e6\u26e4\3\2\2\2\u26e7\u26ea\3\2\2"+
		"\2\u26e8\u26e6\3\2\2\2\u26e8\u26e9\3\2\2\2\u26e9\u26eb\3\2\2\2\u26ea\u26e8"+
		"\3\2\2\2\u26eb\u26ec\7\u0336\2\2\u26ec\u0355\3\2\2\2\u26ed\u26f0\5\u03b6"+
		"\u01dc\2\u26ee\u26f0\7\u031f\2\2\u26ef\u26ed\3\2\2\2\u26ef\u26ee\3\2\2"+
		"\2\u26f0\u0357\3\2\2\2\u26f1\u26f2\7\u0172\2\2\u26f2\u26f3\7\u0335\2\2"+
		"\u26f3\u26f4\5\u035a\u01ae\2\u26f4\u26fc\7\u0336\2\2\u26f5\u26f6\7\u0337"+
		"\2\2\u26f6\u26f7\7\u0335\2\2\u26f7\u26f8\5\u035a\u01ae\2\u26f8\u26f9\7"+
		"\u0336\2\2\u26f9\u26fb\3\2\2\2\u26fa\u26f5\3\2\2\2\u26fb\u26fe\3\2\2\2"+
		"\u26fc\u26fa\3\2\2\2\u26fc\u26fd\3\2\2\2\u26fd\u0359\3\2\2\2\u26fe\u26fc"+
		"\3\2\2\2\u26ff\u2704\5\u02cc\u0167\2\u2700\u2701\7\u0337\2\2\u2701\u2703"+
		"\5\u02cc\u0167\2\u2702\u2700\3\2\2\2\u2703\u2706\3\2\2\2\u2704\u2702\3"+
		"\2\2\2\u2704\u2705\3\2\2\2\u2705\u035b\3\2\2\2\u2706\u2704\3\2\2\2\u2707"+
		"\u2708\t~\2\2\u2708\u2709\7\u0335\2\2\u2709\u270a\7\u0336\2\2\u270a\u2712"+
		"\5\u0364\u01b3\2\u270b\u270c\7\u026e\2\2\u270c\u270d\7\u0335\2\2\u270d"+
		"\u270e\5\u02cc\u0167\2\u270e\u270f\7\u0336\2\2\u270f\u2710\5\u0364\u01b3"+
		"\2\u2710\u2712\3\2\2\2\u2711\u2707\3\2\2\2\u2711\u270b\3\2\2\2\u2712\u035d"+
		"\3\2\2\2\u2713\u2714\t\177\2\2\u2714\u2715\7\u0335\2\2\u2715\u2716\5\u0362"+
		"\u01b2\2\u2716\u2718\7\u0336\2\2\u2717\u2719\5\u0364\u01b3\2\u2718\u2717"+
		"\3\2\2\2\u2718\u2719\3\2\2\2\u2719\u2734\3\2\2\2\u271a\u271b\t\u0080\2"+
		"\2\u271b\u271e\7\u0335\2\2\u271c\u271f\7\u033a\2\2\u271d\u271f\5\u0362"+
		"\u01b2\2\u271e\u271c\3\2\2\2\u271e\u271d\3\2\2\2\u271f\u2720\3\2\2\2\u2720"+
		"\u2722\7\u0336\2\2\u2721\u2723\5\u0364\u01b3\2\u2722\u2721\3\2\2\2\u2722"+
		"\u2723\3\2\2\2\u2723\u2734\3\2\2\2\u2724\u2725\7\u01b6\2\2\u2725\u2726"+
		"\7\u0335\2\2\u2726\u2727\5\u0362\u01b2\2\u2727\u2728\7\u0336\2\2\u2728"+
		"\u2734\3\2\2\2\u2729\u272a\7\u0212\2\2\u272a\u272b\7\u0335\2\2\u272b\u272c"+
		"\5\u02cc\u0167\2\u272c\u272d\7\u0336\2\2\u272d\u2734\3\2\2\2\u272e\u272f"+
		"\7\u0213\2\2\u272f\u2730\7\u0335\2\2\u2730\u2731\5\u035a\u01ae\2\u2731"+
		"\u2732\7\u0336\2\2\u2732\u2734\3\2\2\2\u2733\u2713\3\2\2\2\u2733\u271a"+
		"\3\2\2\2\u2733\u2724\3\2\2\2\u2733\u2729\3\2\2\2\u2733\u272e\3\2\2\2\u2734"+
		"\u035f\3\2\2\2\u2735\u2736\t\u0081\2\2\u2736\u2737\7\u0335\2\2\u2737\u2738"+
		"\5\u02cc\u0167\2\u2738\u2739\7\u0336\2\2\u2739\u273a\5\u0364\u01b3\2\u273a"+
		"\u274a\3\2\2\2\u273b\u273c\t\u0082\2\2\u273c\u273d\7\u0335\2\2\u273d\u2744"+
		"\5\u02cc\u0167\2\u273e\u273f\7\u0337\2\2\u273f\u2742\5\u02cc\u0167\2\u2740"+
		"\u2741\7\u0337\2\2\u2741\u2743\5\u02cc\u0167\2\u2742\u2740\3\2\2\2\u2742"+
		"\u2743\3\2\2\2\u2743\u2745\3\2\2\2\u2744\u273e\3\2\2\2\u2744\u2745\3\2"+
		"\2\2\u2745\u2746\3\2\2\2\u2746\u2747\7\u0336\2\2\u2747\u2748\5\u0364\u01b3"+
		"\2\u2748\u274a\3\2\2\2\u2749\u2735\3\2\2\2\u2749\u273b\3\2\2\2\u274a\u0361"+
		"\3\2\2\2\u274b\u274d\to\2\2\u274c\u274b\3\2\2\2\u274c\u274d\3\2\2\2\u274d"+
		"\u274e\3\2\2\2\u274e\u274f\5\u02cc\u0167\2\u274f\u0363\3\2\2\2\u2750\u2751"+
		"\7\u00f0\2\2\u2751\u2755\7\u0335\2\2\u2752\u2753\7\u0280\2\2\u2753\u2754"+
		"\7&\2\2\u2754\u2756\5\u035a\u01ae\2\u2755\u2752\3\2\2\2\u2755\u2756\3"+
		"\2\2\2\u2756\u2758\3\2\2\2\u2757\u2759\5\u02f6\u017c\2\u2758\u2757\3\2"+
		"\2\2\u2758\u2759\3\2\2\2\u2759\u275b\3\2\2\2\u275a\u275c\5\u0366\u01b4"+
		"\2\u275b\u275a\3\2\2\2\u275b\u275c\3\2\2\2\u275c\u275d\3\2\2\2\u275d\u275e"+
		"\7\u0336\2\2\u275e\u0365\3\2\2\2\u275f\u2760\t\u0083\2\2\u2760\u2761\5"+
		"\u0368\u01b5\2\u2761\u0367\3\2\2\2\u2762\u2769\5\u036c\u01b7\2\u2763\u2764"+
		"\7\35\2\2\u2764\u2765\5\u036a\u01b6\2\u2765\u2766\7\13\2\2\u2766\u2767"+
		"\5\u036a\u01b6\2\u2767\u2769\3\2\2\2\u2768\u2762\3\2\2\2\u2768\u2763\3"+
		"\2\2\2\u2769\u0369\3\2\2\2\u276a\u276d\5\u036c\u01b7\2\u276b\u276d\5\u036e"+
		"\u01b8\2\u276c\u276a\3\2\2\2\u276c\u276b\3\2\2\2\u276d\u036b\3\2\2\2\u276e"+
		"\u276f\7\u02fd\2\2\u276f\u2775\7\u0287\2\2\u2770\u2771\7\u031b\2\2\u2771"+
		"\u2775\7\u0287\2\2\u2772\u2773\7K\2\2\u2773\u2775\7\u02b9\2\2\u2774\u276e"+
		"\3\2\2\2\u2774\u2770\3\2\2\2\u2774\u2772\3\2\2\2\u2775\u036d\3\2\2\2\u2776"+
		"\u2777\7\u02fd\2\2\u2777\u277b\7\u0204\2\2\u2778\u2779\7\u031b\2\2\u2779"+
		"\u277b\7\u0204\2\2\u277a\u2776\3\2\2\2\u277a\u2778\3\2\2\2\u277b\u036f"+
		"\3\2\2\2\u277c\u277d\7\u0200\2\2\u277d\u2782\5\u0372\u01ba\2\u277e\u277f"+
		"\7\u0337\2\2\u277f\u2781\5\u0372\u01ba\2\u2780\u277e\3\2\2\2\u2781\u2784"+
		"\3\2\2\2\u2782\u2780\3\2\2\2\u2782\u2783\3\2\2\2\u2783\u279f\3\2\2\2\u2784"+
		"\u2782\3\2\2\2\u2785\u2786\7\u01d6\2\2\u2786\u2789\7\u0323\2\2\u2787\u278a"+
		"\5\u03b6\u01dc\2\u2788\u278a\7\u031f\2\2\u2789\u2787\3\2\2\2\u2789\u2788"+
		"\3\2\2\2\u278a\u279f\3\2\2\2\u278b\u278c\7\u01d5\2\2\u278c\u278f\7\u0323"+
		"\2\2\u278d\u2790\5\u03b6\u01dc\2\u278e\u2790\7\u031f\2\2\u278f\u278d\3"+
		"\2\2\2\u278f\u278e\3\2\2\2\u2790\u279f\3\2\2\2\u2791\u2792\7\u025f\2\2"+
		"\u2792\u2793\7\u0323\2\2\u2793\u279f\t\t\2\2\u2794\u2795\7\u02f4\2\2\u2795"+
		"\u2796\7\u0323\2\2\u2796\u279f\t\t\2\2\u2797\u2798\7\u02fa\2\2\u2798\u2799"+
		"\7\u0323\2\2\u2799\u279f\7\u031b\2\2\u279a\u279b\7\u01d1\2\2\u279b\u279f"+
		"\t\t\2\2\u279c\u279d\7\u02f7\2\2\u279d\u279f\t\t\2\2\u279e\u277c\3\2\2"+
		"\2\u279e\u2785\3\2\2\2\u279e\u278b\3\2\2\2\u279e\u2791\3\2\2\2\u279e\u2794"+
		"\3\2\2\2\u279e\u2797\3\2\2\2\u279e\u279a\3\2\2\2\u279e\u279c\3\2\2\2\u279f"+
		"\u0371\3\2\2\2\u27a0\u27a7\7\u0335\2\2\u27a1\u27a2\7\u026a\2\2\u27a2\u27a3"+
		"\7\u0323\2\2\u27a3\u27a8\t\u0084\2\2\u27a4\u27a5\7\u01e1\2\2\u27a5\u27a6"+
		"\7\u0323\2\2\u27a6\u27a8\7\u031f\2\2\u27a7\u27a1\3\2\2\2\u27a7\u27a4\3"+
		"\2\2\2\u27a8\u27a9\3\2\2\2\u27a9\u27aa\7\u0336\2\2\u27aa\u0373\3\2\2\2"+
		"\u27ab\u27ae\5\u0376\u01bc\2\u27ac\u27ae\5\u0378\u01bd\2\u27ad\u27ab\3"+
		"\2\2\2\u27ad\u27ac\3\2\2\2\u27ae\u0375\3\2\2\2\u27af\u27b0\7\u01fd\2\2"+
		"\u27b0\u27b3\5\u03b6\u01dc\2\u27b1\u27b2\7?\2\2\u27b2\u27b4\7\u0200\2"+
		"\2\u27b3\u27b1\3\2\2\2\u27b3\u27b4\3\2\2\2\u27b4\u27b6\3\2\2\2\u27b5\u27b7"+
		"\7Z\2\2\u27b6\u27b5\3\2\2\2\u27b6\u27b7\3\2\2\2\u27b7\u27ba\3\2\2\2\u27b8"+
		"\u27b9\7?\2\2\u27b9\u27bb\7\u0250\2\2\u27ba\u27b8\3\2\2\2\u27ba\u27bb"+
		"\3\2\2\2\u27bb\u27bc\3\2\2\2\u27bc\u27c1\5\u0378\u01bd\2\u27bd\u27be\7"+
		"\u0337\2\2\u27be\u27c0\5\u0378\u01bd\2\u27bf\u27bd\3\2\2\2\u27c0\u27c3"+
		"\3\2\2\2\u27c1\u27bf\3\2\2\2\u27c1\u27c2\3\2\2\2\u27c2\u0377\3\2\2\2\u27c3"+
		"\u27c1\3\2\2\2\u27c4\u27c5\7\u0335\2\2\u27c5\u27c6\7\u025e\2\2\u27c6\u27c9"+
		"\7\u0323\2\2\u27c7\u27ca\5\u03b6\u01dc\2\u27c8\u27ca\7\u031f\2\2\u27c9"+
		"\u27c7\3\2\2\2\u27c9\u27c8\3\2\2\2\u27ca\u27cc\3\2\2\2\u27cb\u27cd\7\u0337"+
		"\2\2\u27cc\u27cb\3\2\2\2\u27cc\u27cd\3\2\2\2\u27cd\u27ce\3\2\2\2\u27ce"+
		"\u27cf\7\u0083\2\2\u27cf\u27d0\7\u0323\2\2\u27d0\u27d2\7\u031f\2\2\u27d1"+
		"\u27d3\7\u0337\2\2\u27d2\u27d1\3\2\2\2\u27d2\u27d3\3\2\2\2\u27d3\u27da"+
		"\3\2\2\2\u27d4\u27d5\7\u02d6\2\2\u27d5\u27d6\7\u0323\2\2\u27d6\u27d8\5"+
		"\u03be\u01e0\2\u27d7\u27d9\7\u0337\2\2\u27d8\u27d7\3\2\2\2\u27d8\u27d9"+
		"\3\2\2\2\u27d9\u27db\3\2\2\2\u27da\u27d4\3\2\2\2\u27da\u27db\3\2\2\2\u27db"+
		"\u27e5\3\2\2\2\u27dc\u27dd\7\u024d\2\2\u27dd\u27e0\7\u0323\2\2\u27de\u27e1"+
		"\5\u03be\u01e0\2\u27df\u27e1\7\u0300\2\2\u27e0\u27de\3\2\2\2\u27e0\u27df"+
		"\3\2\2\2\u27e1\u27e3\3\2\2\2\u27e2\u27e4\7\u0337\2\2\u27e3\u27e2\3\2\2"+
		"\2\u27e3\u27e4\3\2\2\2\u27e4\u27e6\3\2\2\2\u27e5\u27dc\3\2\2\2\u27e5\u27e6"+
		"\3\2\2\2\u27e6\u27ed\3\2\2\2\u27e7\u27e8\7\u01fe\2\2\u27e8\u27e9\7\u0323"+
		"\2\2\u27e9\u27eb\5\u03be\u01e0\2\u27ea\u27ec\7\u0337\2\2\u27eb\u27ea\3"+
		"\2\2\2\u27eb\u27ec\3\2\2\2\u27ec\u27ee\3\2\2\2\u27ed\u27e7\3\2\2\2\u27ed"+
		"\u27ee\3\2\2\2\u27ee\u27ef\3\2\2\2\u27ef\u27f0\7\u0336\2\2\u27f0\u0379"+
		"\3\2\2\2\u27f1\u27f2\5\u03b6\u01dc\2\u27f2\u27f3\7\u0330\2\2\u27f3\u27f4"+
		"\5\u03b6\u01dc\2\u27f4\u27f5\7\u0330\2\2\u27f5\u27f6\5\u03b6\u01dc\2\u27f6"+
		"\u27f7\7\u0330\2\2\u27f7\u2803\3\2\2\2\u27f8\u27f9\5\u03b6\u01dc\2\u27f9"+
		"\u27fb\7\u0330\2\2\u27fa\u27fc\5\u03b6\u01dc\2\u27fb\u27fa\3\2\2\2\u27fb"+
		"\u27fc\3\2\2\2\u27fc\u27fd\3\2\2\2\u27fd\u27fe\7\u0330\2\2\u27fe\u2803"+
		"\3\2\2\2\u27ff\u2800\5\u03b6\u01dc\2\u2800\u2801\7\u0330\2\2\u2801\u2803"+
		"\3\2\2\2\u2802\u27f1\3\2\2\2\u2802\u27f8\3\2\2\2\u2802\u27ff\3\2\2\2\u2802"+
		"\u2803\3\2\2\2\u2803\u2804\3\2\2\2\u2804\u2805\5\u03b6\u01dc\2\u2805\u037b"+
		"\3\2\2\2\u2806\u280c\5\u03b6\u01dc\2\u2807\u2808\5\u03b6\u01dc\2\u2808"+
		"\u2809\7\u0330\2\2\u2809\u280a\5\u03b6\u01dc\2\u280a\u280c\3\2\2\2\u280b"+
		"\u2806\3\2\2\2\u280b\u2807\3\2\2\2\u280c\u037d\3\2\2\2\u280d\u2813\5\u03b6"+
		"\u01dc\2\u280e\u280f\5\u03b6\u01dc\2\u280f\u2810\7\u0330\2\2\u2810\u2811"+
		"\5\u03b6\u01dc\2\u2811\u2813\3\2\2\2\u2812\u280d\3\2\2\2\u2812\u280e\3"+
		"\2\2\2\u2813\u037f\3\2\2\2\u2814\u2815\5\u03b6\u01dc\2\u2815\u2816\7\u0330"+
		"\2\2\u2816\u2817\5\u03b6\u01dc\2\u2817\u2818\7\u0330\2\2\u2818\u2819\5"+
		"\u03b6\u01dc\2\u2819\u281a\7\u0330\2\2\u281a\u2826\3\2\2\2\u281b\u281c"+
		"\5\u03b6\u01dc\2\u281c\u281e\7\u0330\2\2\u281d\u281f\5\u03b6\u01dc\2\u281e"+
		"\u281d\3\2\2\2\u281e\u281f\3\2\2\2\u281f\u2820\3\2\2\2\u2820\u2821\7\u0330"+
		"\2\2\u2821\u2826\3\2\2\2\u2822\u2823\5\u03b6\u01dc\2\u2823\u2824\7\u0330"+
		"\2\2\u2824\u2826\3\2\2\2\u2825\u2814\3\2\2\2\u2825\u281b\3\2\2\2\u2825"+
		"\u2822\3\2\2\2\u2825\u2826\3\2\2\2\u2826\u2827\3\2\2\2\u2827\u2828\5\u03b6"+
		"\u01dc\2\u2828\u0381\3\2\2\2\u2829\u282a\5\u03b6\u01dc\2\u282a\u282c\7"+
		"\u0330\2\2\u282b\u282d\5\u03b6\u01dc\2\u282c\u282b\3\2\2\2\u282c\u282d"+
		"\3\2\2\2\u282d\u282e\3\2\2\2\u282e\u282f\7\u0330\2\2\u282f\u2834\3\2\2"+
		"\2\u2830\u2831\5\u03b6\u01dc\2\u2831\u2832\7\u0330\2\2\u2832\u2834\3\2"+
		"\2\2\u2833\u2829\3\2\2\2\u2833\u2830\3\2\2\2\u2833\u2834\3\2\2\2\u2834"+
		"\u2835\3\2\2\2\u2835\u2844\5\u03b6\u01dc\2\u2836\u2837\5\u03b6\u01dc\2"+
		"\u2837\u2839\7\u0330\2\2\u2838\u283a\5\u03b6\u01dc\2\u2839\u2838\3\2\2"+
		"\2\u2839\u283a\3\2\2\2\u283a\u283b\3\2\2\2\u283b\u283c\7\u0330\2\2\u283c"+
		"\u2841\3\2\2\2\u283d\u283e\5\u03b6\u01dc\2\u283e\u283f\7\u0330\2\2\u283f"+
		"\u2841\3\2\2\2\u2840\u2836\3\2\2\2\u2840\u283d\3\2\2\2\u2840\u2841\3\2"+
		"\2\2\u2841\u2842\3\2\2\2\u2842\u2844\7 \2\2\u2843\u2833\3\2\2\2\u2843"+
		"\u2840\3\2\2\2\u2844\u0383\3\2\2\2\u2845\u2846\5\u03b6\u01dc\2\u2846\u2847"+
		"\7\u0330\2\2\u2847\u2849\3\2\2\2\u2848\u2845\3\2\2\2\u2848\u2849\3\2\2"+
		"\2\u2849\u284a\3\2\2\2\u284a\u284b\5\u03b6\u01dc\2\u284b\u0385\3\2\2\2"+
		"\u284c\u284d\5\u03b6\u01dc\2\u284d\u284f\7\u0330\2\2\u284e\u2850\5\u03b6"+
		"\u01dc\2\u284f\u284e\3\2\2\2\u284f\u2850\3\2\2\2\u2850\u2851\3\2\2\2\u2851"+
		"\u2852\7\u0330\2\2\u2852\u2857\3\2\2\2\u2853\u2854\5\u03b6\u01dc\2\u2854"+
		"\u2855\7\u0330\2\2\u2855\u2857\3\2\2\2\u2856\u284c\3\2\2\2\u2856\u2853"+
		"\3\2\2\2\u2856\u2857\3\2\2\2\u2857\u2858\3\2\2\2\u2858\u2864\5\u03b6\u01dc"+
		"\2\u2859\u285a\5\u03b6\u01dc\2\u285a\u285b\7\u0330\2\2\u285b\u285c\5\u03b6"+
		"\u01dc\2\u285c\u285e\7\u0330\2\2\u285d\u285f\5\u03b6\u01dc\2\u285e\u285d"+
		"\3\2\2\2\u285e\u285f\3\2\2\2\u285f\u2860\3\2\2\2\u2860\u2861\7\u0330\2"+
		"\2\u2861\u2862\5\u03b6\u01dc\2\u2862\u2864\3\2\2\2\u2863\u2856\3\2\2\2"+
		"\u2863\u2859\3\2\2\2\u2864\u0387\3\2\2\2\u2865\u2868\5\u0380\u01c1\2\u2866"+
		"\u2868\7\u031a\2\2\u2867\u2865\3\2\2\2\u2867\u2866\3\2\2\2\u2868\u0389"+
		"\3\2\2\2\u2869\u286a\5\u0382\u01c2\2\u286a\u286b\7\u0330\2\2\u286b\u286d"+
		"\3\2\2\2\u286c\u2869\3\2\2\2\u286c\u286d\3\2\2\2\u286d\u286e\3\2\2\2\u286e"+
		"\u289a\5\u03b6\u01dc\2\u286f\u2870\5\u0382\u01c2\2\u2870\u2871\7\u0330"+
		"\2\2\u2871\u2873\3\2\2\2\u2872\u286f\3\2\2\2\u2872\u2873\3\2\2\2\u2873"+
		"\u2874\3\2\2\2\u2874\u289a\7\u01bb\2\2\u2875\u2876\5\u0382\u01c2\2\u2876"+
		"\u2877\7\u0330\2\2\u2877\u2879\3\2\2\2\u2878\u2875\3\2\2\2\u2878\u2879"+
		"\3\2\2\2\u2879\u287a\3\2\2\2\u287a\u289a\7\u02de\2\2\u287b\u287c\5\u0382"+
		"\u01c2\2\u287c\u287d\7\u0330\2\2\u287d\u287f\3\2\2\2\u287e\u287b\3\2\2"+
		"\2\u287e\u287f\3\2\2\2\u287f\u2880\3\2\2\2\u2880\u289a\7\u0296\2\2\u2881"+
		"\u2882\5\u0382\u01c2\2\u2882\u2883\7\u0330\2\2\u2883\u2885\3\2\2\2\u2884"+
		"\u2881\3\2\2\2\u2884\u2885\3\2\2\2\u2885\u2886\3\2\2\2\u2886\u289a\7\u0197"+
		"\2\2\u2887\u2888\5\u0382\u01c2\2\u2888\u2889\7\u0330\2\2\u2889\u288b\3"+
		"\2\2\2\u288a\u2887\3\2\2\2\u288a\u288b\3\2\2\2\u288b\u288c\3\2\2\2\u288c"+
		"\u289a\7\u0194\2\2\u288d\u288e\5\u0382\u01c2\2\u288e\u288f\7\u0330\2\2"+
		"\u288f\u2891\3\2\2\2\u2890\u288d\3\2\2\2\u2890\u2891\3\2\2\2\u2891\u2892"+
		"\3\2\2\2\u2892\u289a\7\u0193\2\2\u2893\u2894\5\u0382\u01c2\2\u2894\u2895"+
		"\7\u0330\2\2\u2895\u2897\3\2\2\2\u2896\u2893\3\2\2\2\u2896\u2897\3\2\2"+
		"\2\u2897\u2898\3\2\2\2\u2898\u289a\7\u0192\2\2\u2899\u286c\3\2\2\2\u2899"+
		"\u2872\3\2\2\2\u2899\u2878\3\2\2\2\u2899\u287e\3\2\2\2\u2899\u2884\3\2"+
		"\2\2\u2899\u288a\3\2\2\2\u2899\u2890\3\2\2\2\u2899\u2896\3\2\2\2\u289a"+
		"\u038b\3\2\2\2\u289b\u289d\5\u03b6\u01dc\2\u289c\u289e\tv\2\2\u289d\u289c"+
		"\3\2\2\2\u289d\u289e\3\2\2\2\u289e\u28a6\3\2\2\2\u289f\u28a0\7\u0337\2"+
		"\2\u28a0\u28a2\5\u03b6\u01dc\2\u28a1\u28a3\tv\2\2\u28a2\u28a1\3\2\2\2"+
		"\u28a2\u28a3\3\2\2\2\u28a3\u28a5\3\2\2\2\u28a4\u289f\3\2\2\2\u28a5\u28a8"+
		"\3\2\2\2\u28a6\u28a4\3\2\2\2\u28a6\u28a7\3\2\2\2\u28a7\u038d\3\2\2\2\u28a8"+
		"\u28a6\3\2\2\2\u28a9\u28ae\5\u03b6\u01dc\2\u28aa\u28ab\7\u0337\2\2\u28ab"+
		"\u28ad\5\u03b6\u01dc\2\u28ac\u28aa\3\2\2\2\u28ad\u28b0\3\2\2\2\u28ae\u28ac"+
		"\3\2\2\2\u28ae\u28af\3\2\2\2\u28af\u038f\3\2\2\2\u28b0\u28ae\3\2\2\2\u28b1"+
		"\u28b4\5\u03b6\u01dc\2\u28b2\u28b4\7\u031a\2\2\u28b3\u28b1\3\2\2\2\u28b3"+
		"\u28b2\3\2\2\2\u28b4\u0391\3\2\2\2\u28b5\u28b6\t\t\2\2\u28b6\u0393\3\2"+
		"\2\2\u28b7\u28b8\t\u0085\2\2\u28b8\u0395\3\2\2\2\u28b9\u28bb\7\u00dc\2"+
		"\2\u28ba\u28b9\3\2\2\2\u28ba\u28bb\3\2\2\2\u28bb\u28bc\3\2\2\2\u28bc\u28bd"+
		"\7\u00df\2\2\u28bd\u0397\3\2\2\2\u28be\u28c6\5\u0396\u01cc\2\u28bf\u28c0"+
		"\7Z\2\2\u28c0\u28c3\5\u02d6\u016c\2\u28c1\u28c2\7\u017c\2\2\u28c2\u28c4"+
		"\7\u0172\2\2\u28c3\u28c1\3\2\2\2\u28c3\u28c4\3\2\2\2\u28c4\u28c6\3\2\2"+
		"\2\u28c5\u28be\3\2\2\2\u28c5\u28bf\3\2\2\2\u28c6\u0399\3\2\2\2\u28c7\u28cd"+
		"\5\u0386\u01c4\2\u28c8\u28cd\7\u011f\2\2\u28c9\u28cd\7\u00b1\2\2\u28ca"+
		"\u28cd\7\u01a8\2\2\u28cb\u28cd\7\u01b5\2\2\u28cc\u28c7\3\2\2\2\u28cc\u28c8"+
		"\3\2\2\2\u28cc\u28c9\3\2\2\2\u28cc\u28ca\3\2\2\2\u28cc\u28cb\3\2\2\2\u28cd"+
		"\u039b\3\2\2\2\u28ce\u28cf\7\34\2\2\u28cf\u28d0\7F\2\2\u28d0\u28d1\7\u02f1"+
		"\2\2\u28d1\u28d2\7\u0335\2\2\u28d2\u28d3\7\u031a\2\2\u28d3\u28d4\7\u0336"+
		"\2\2\u28d4\u28d5\7\u02f0\2\2\u28d5\u28d6\7\u0323\2\2\u28d6\u28d8\5\u01c0"+
		"\u00e1\2\u28d7\u28d9\7\u0338\2\2\u28d8\u28d7\3\2\2\2\u28d8\u28d9\3\2\2"+
		"\2\u28d9\u039d\3\2\2\2\u28da\u28db\7\34\2\2\u28db\u28dd\7\u01e0\2\2\u28dc"+
		"\u28de\7F\2\2\u28dd\u28dc\3\2\2\2\u28dd\u28de\3\2\2\2\u28de\u28df\3\2"+
		"\2\2\u28df\u28e0\7\u031a\2\2\u28e0\u28e1\7\u008c\2\2\u28e1\u28e2\7\u0138"+
		"\2\2\u28e2\u28e3\5\u03a2\u01d2\2\u28e3\u28e4\7\u015d\2\2\u28e4\u28e5\7"+
		"\u0138\2\2\u28e5\u28e8\5\u03a2\u01d2\2\u28e6\u28e7\7\u0337\2\2\u28e7\u28e9"+
		"\7\u031f\2\2\u28e8\u28e6\3\2\2\2\u28e8\u28e9\3\2\2\2\u28e9\u28ea\3\2\2"+
		"\2\u28ea\u28eb\7\u00e5\2\2\u28eb\u28ec\7D\2\2\u28ec\u2903\5\u03a0\u01d1"+
		"\2\u28ed\u28f4\7\u017c\2\2\u28ee\u28ef\t\u0086\2\2\u28ef\u28f0\7\u0323"+
		"\2\2\u28f0\u28f2\7\u031a\2\2\u28f1\u28f3\7\u0337\2\2\u28f2\u28f1\3\2\2"+
		"\2\u28f2\u28f3\3\2\2\2\u28f3\u28f5\3\2\2\2\u28f4\u28ee\3\2\2\2\u28f4\u28f5"+
		"\3\2\2\2\u28f5\u28fc\3\2\2\2\u28f6\u28f7\7\u00b3\2\2\u28f7\u28f8\7\u0323"+
		"\2\2\u28f8\u28fa\t\2\2\2\u28f9\u28fb\7\u0337\2\2\u28fa\u28f9\3\2\2\2\u28fa"+
		"\u28fb\3\2\2\2\u28fb\u28fd\3\2\2\2\u28fc\u28f6\3\2\2\2\u28fc\u28fd\3\2"+
		"\2\2\u28fd\u2901\3\2\2\2\u28fe\u28ff\7\u01ee\2\2\u28ff\u2900\7\u0323\2"+
		"\2\u2900\u2902\t\t\2\2\u2901\u28fe\3\2\2\2\u2901\u2902\3\2\2\2\u2902\u2904"+
		"\3\2\2\2\u2903\u28ed\3\2\2\2\u2903\u2904\3\2\2\2\u2904\u2906\3\2\2\2\u2905"+
		"\u2907\7\u0338\2\2\u2906\u2905\3\2\2\2\u2906\u2907\3\2\2\2\u2907\u039f"+
		"\3\2\2\2\u2908\u290b\5\u03b6\u01dc\2\u2909\u290b\5\u02cc\u0167\2\u290a"+
		"\u2908\3\2\2\2\u290a\u2909\3\2\2\2\u290b\u03a1\3\2\2\2\u290c\u290f\5\u03b6"+
		"\u01dc\2\u290d\u290f\5\u02cc\u0167\2\u290e\u290c\3\2\2\2\u290e\u290d\3"+
		"\2\2\2\u290f\u03a3\3\2\2\2\u2910\u2911\7m\2\2\u2911\u2912\7F\2\2\u2912"+
		"\u2914\7\u031a\2\2\u2913\u2915\7\u0338\2\2\u2914\u2913\3\2\2\2\u2914\u2915"+
		"\3\2\2\2\u2915\u2922\3\2\2\2\u2916\u291d\7\u017c\2\2\u2917\u2918\7q\2"+
		"\2\u2918\u2919\7\u0323\2\2\u2919\u291a\t\3\2\2\u291a\u291b\7\u01dd\2\2"+
		"\u291b\u291c\7\u0323\2\2\u291c\u291e\t\3\2\2\u291d\u2917\3\2\2\2\u291d"+
		"\u291e\3\2\2\2\u291e\u2920\3\2\2\2\u291f\u2921\7\u01b7\2\2\u2920\u291f"+
		"\3\2\2\2\u2920\u2921\3\2\2\2\u2921\u2923\3\2\2\2\u2922\u2916\3\2\2\2\u2922"+
		"\u2923\3\2\2\2\u2923\u03a5\3\2\2\2\u2924\u2926\7\u0177\2\2\u2925\u2924"+
		"\3\2\2\2\u2925\u2926\3\2\2\2\u2926\u2927\3\2\2\2\u2927\u2928\7\u0335\2"+
		"\2\u2928\u2929\5\u03a8\u01d5\2\u2929\u292f\7\u0336\2\2\u292a\u292c\7\u0337"+
		"\2\2\u292b\u292a\3\2\2\2\u292b\u292c\3\2\2\2\u292c\u292d\3\2\2\2\u292d"+
		"\u292e\7\u02f0\2\2\u292e\u2930\5\u01c0\u00e1\2\u292f\u292b\3\2\2\2\u292f"+
		"\u2930\3\2\2\2\u2930\u2932\3\2\2\2\u2931\u2933\7\u0338\2\2\u2932\u2931"+
		"\3\2\2\2\u2932\u2933\3\2\2\2\u2933\u03a7\3\2\2\2\u2934\u2935\7\u008f\2"+
		"\2\u2935\u2936\7F\2\2\u2936\u2937\7\u0093\2\2\u2937\u2938\t\3\2\2\u2938"+
		"\u2939\7\u008c\2\2\u2939\u293b\5\u03aa\u01d6\2\u293a\u293c\7\u0338\2\2"+
		"\u293b\u293a\3\2\2\2\u293b\u293c\3\2\2\2\u293c\u03a9\3\2\2\2\u293d\u293e"+
		"\5\u03b6\u01dc\2\u293e\u293f\7\u0330\2\2\u293f\u2940\5\u03b6\u01dc\2\u2940"+
		"\u2941\7\u0330\2\2\u2941\u2942\5\u03b6\u01dc\2\u2942\u2945\3\2\2\2\u2943"+
		"\u2945\5\u03b6\u01dc\2\u2944\u293d\3\2\2\2\u2944\u2943\3\2\2\2\u2945\u03ab"+
		"\3\2\2\2\u2946\u2947\7\u02cc\2\2\u2947\u2948\7\u00e5\2\2\u2948\u2949\7"+
		"F\2\2\u2949\u294a\t\3\2\2\u294a\u294b\7\u0251\2\2\u294b\u294c\7\u02fb"+
		"\2\2\u294c\u2950\5\u02cc\u0167\2\u294d\u294e\7\u0335\2\2\u294e\u294f\t"+
		"\3\2\2\u294f\u2951\7\u0336\2\2\u2950\u294d\3\2\2\2\u2950\u2951\3\2\2\2"+
		"\u2951\u2953\3\2\2\2\u2952\u2954\7\u0338\2\2\u2953\u2952\3\2\2\2\u2953"+
		"\u2954\3\2\2\2\u2954\u03ad\3\2\2\2\u2955\u2957\5\u03b6\u01dc\2\u2956\u2958"+
		"\7\u0097\2\2\u2957\u2956\3\2\2\2\u2957\u2958\3\2\2\2\u2958\u2960\3\2\2"+
		"\2\u2959\u295a\7\u0335\2\2\u295a\u295d\t\u0087\2\2\u295b\u295c\7\u0337"+
		"\2\2\u295c\u295e\7\u031b\2\2\u295d\u295b\3\2\2\2\u295d\u295e\3\2\2\2\u295e"+
		"\u295f\3\2\2\2\u295f\u2961\7\u0336\2\2\u2960\u2959\3\2\2\2\u2960\u2961"+
		"\3\2\2\2\u2961\u296b\3\2\2\2\u2962\u2964\7e\2\2\u2963\u2965\7\u00fe\2"+
		"\2\u2964\u2963\3\2\2\2\u2964\u2965\3\2\2\2\u2965\u296b\3\2\2\2\u2966\u296b"+
		"\7\u0225\2\2\u2967\u296b\7\u02f2\2\2\u2968\u296b\7\u02d7\2\2\u2969\u296b"+
		"\7\u01a6\2\2\u296a\u2955\3\2\2\2\u296a\u2962\3\2\2\2\u296a\u2966\3\2\2"+
		"\2\u296a\u2967\3\2\2\2\u296a\u2968\3\2\2\2\u296a\u2969\3\2\2\2\u296b\u03af"+
		"\3\2\2\2\u296c\u2970\7\u00df\2\2\u296d\u2970\7Z\2\2\u296e\u2970\5\u03b2"+
		"\u01da\2\u296f\u296c\3\2\2\2\u296f\u296d\3\2\2\2\u296f\u296e\3\2\2\2\u2970"+
		"\u03b1\3\2\2\2\u2971\u2981\7\u031f\2\2\u2972\u2981\7\u0320\2\2\u2973\u2975"+
		"\5\u03b4\u01db\2\u2974\u2973\3\2\2\2\u2974\u2975\3\2\2\2\u2975\u2976\3"+
		"\2\2\2\u2976\u2981\7\u031b\2\2\u2977\u2979\5\u03b4\u01db\2\u2978\u2977"+
		"\3\2\2\2\u2978\u2979\3\2\2\2\u2979\u297a\3\2\2\2\u297a\u2981\tp\2\2\u297b"+
		"\u297d\5\u03b4\u01db\2\u297c\u297b\3\2\2\2\u297c\u297d\3\2\2\2\u297d\u297e"+
		"\3\2\2\2\u297e\u297f\7\u0334\2\2\u297f\u2981\t\u0088\2\2\u2980\u2971\3"+
		"\2\2\2\u2980\u2972\3\2\2\2\u2980\u2974\3\2\2\2\u2980\u2978\3\2\2\2\u2980"+
		"\u297c\3\2\2\2\u2981\u03b3\3\2\2\2\u2982\u2983\tm\2\2\u2983\u03b5\3\2"+
		"\2\2\u2984\u2988\5\u03b8\u01dd\2\u2985\u2988\7\u0317\2\2\u2986\u2988\7"+
		"\u0319\2\2\u2987\u2984\3\2\2\2\u2987\u2985\3\2\2\2\u2987\u2986\3\2\2\2"+
		"\u2988\u03b7\3\2\2\2\u2989\u298a\t\u0089\2\2\u298a\u03b9\3\2\2\2\u298b"+
		"\u299b\7\u0323\2\2\u298c\u299b\7\u0324\2\2\u298d\u299b\7\u0325\2\2\u298e"+
		"\u298f\7\u0325\2\2\u298f\u299b\7\u0323\2\2\u2990\u2991\7\u0324\2\2\u2991"+
		"\u299b\7\u0323\2\2\u2992\u2993\7\u0325\2\2\u2993\u299b\7\u0324\2\2\u2994"+
		"\u2995\7\u0326\2\2\u2995\u299b\7\u0323\2\2\u2996\u2997\7\u0326\2\2\u2997"+
		"\u299b\7\u0324\2\2\u2998\u2999\7\u0326\2\2\u2999\u299b\7\u0325\2\2\u299a"+
		"\u298b\3\2\2\2\u299a\u298c\3\2\2\2\u299a\u298d\3\2\2\2\u299a\u298e\3\2"+
		"\2\2\u299a\u2990\3\2\2\2\u299a\u2992\3\2\2\2\u299a\u2994\3\2\2\2\u299a"+
		"\u2996\3\2\2\2\u299a\u2998\3\2\2\2\u299b\u03bb\3\2\2\2\u299c\u299d\t\u008a"+
		"\2\2\u299d\u03bd\3\2\2\2\u299e\u29a0\7\u031b\2\2\u299f\u29a1\t\u008b\2"+
		"\2\u29a0\u299f\3\2\2\2\u29a0\u29a1\3\2\2\2\u29a1\u03bf\3\2\2\2\u05e7\u03c3"+
		"\u03cc\u03d0\u03d6\u03d9\u03dd\u03e1\u03ea\u03f1\u0492\u0499\u04a7\u04ab"+
		"\u04ae\u04b2\u04b6\u04ba\u04bf\u04c4\u04c6\u04ca\u04cd\u04d4\u04d7\u04e0"+
		"\u04e3\u04ee\u04f1\u04f6\u04fb\u04fe\u0503\u0507\u050a\u050e\u0511\u0514"+
		"\u051b\u051f\u0521\u0526\u052c\u0530\u053d\u0543\u0546\u054f\u0552\u0563"+
		"\u056b\u0570\u0573\u0578\u057b\u0580\u0588\u058d\u0590\u0595\u059b\u05a0"+
		"\u05b1\u05b4\u05b7\u05ba\u05bf\u05c8\u05d7\u05e8\u05f3\u05f9\u0608\u0617"+
		"\u0620\u0624\u0629\u062f\u0635\u0638\u063d\u0642\u064a\u0654\u0667\u066f"+
		"\u067c\u067e\u068a\u068c\u0693\u069c\u06a2\u06ab\u06ba\u06c4\u06ce\u06f6"+
		"\u070d\u0731\u0743\u0746\u074b\u074e\u0753\u0756\u075b\u075e\u0763\u0766"+
		"\u076e\u0771\u0779\u0786\u0791\u0796\u079a\u07a0\u07b7\u07c3\u07ce\u07d3"+
		"\u07d7\u07dd\u07df\u07ec\u0803\u080a\u0813\u0818\u081b\u0820\u0823\u0828"+
		"\u082d\u0849\u0850\u0855\u085c\u085e\u0869\u086f\u087e\u088c\u088f\u0891"+
		"\u0896\u089a\u089d\u089f\u08a5\u08a8\u08aa\u08b0\u08b2\u08c8\u08d0\u08d8"+
		"\u08da\u08dc\u08e5\u08fa\u0907\u0916\u091a\u093d\u0940\u0945\u0957\u095a"+
		"\u095f\u0979\u0987\u098c\u0994\u0999\u09a0\u09b5\u09da\u09df\u09f2\u09fe"+
		"\u0a01\u0a06\u0a09\u0a0f\u0a1e\u0a23\u0a2b\u0a2e\u0a33\u0a38\u0a3b\u0a53"+
		"\u0a5a\u0a5f\u0a64\u0a69\u0a6b\u0a72\u0a7f\u0a85\u0a8a\u0a92\u0aa2\u0aa9"+
		"\u0aae\u0ab3\u0ab6\u0abc\u0ac2\u0ac7\u0acc\u0ad1\u0ad4\u0ada\u0ae0\u0aeb"+
		"\u0aee\u0af8\u0afe\u0b02\u0b06\u0b23\u0b30\u0b36\u0b40\u0b43\u0b57\u0b5b"+
		"\u0b5f\u0b64\u0b73\u0b7a\u0b83\u0b8b\u0b8e\u0b93\u0b98\u0ba0\u0ba6\u0baa"+
		"\u0bb0\u0bb5\u0bb9\u0bc0\u0bc8\u0bd0\u0bd9\u0bde\u0be2\u0be5\u0be9\u0bef"+
		"\u0bf4\u0bfc\u0c04\u0c0a\u0c10\u0c13\u0c18\u0c1b\u0c22\u0c24\u0c27\u0c2d"+
		"\u0c30\u0c35\u0c38\u0c3d\u0c40\u0c45\u0c48\u0c4d\u0c50\u0c53\u0c56\u0c5d"+
		"\u0c61\u0c68\u0c6f\u0c75\u0c82\u0c86\u0c8b\u0c95\u0c9e\u0ca2\u0cae\u0cb4"+
		"\u0cb9\u0cbb\u0ccf\u0cd3\u0cdb\u0ce4\u0cea\u0cf0\u0cf8\u0cfa\u0d04\u0d08"+
		"\u0d0b\u0d0f\u0d14\u0d1a\u0d1d\u0d21\u0d29\u0d2b\u0d2e\u0d36\u0d3e\u0d45"+
		"\u0d4c\u0d4e\u0d50\u0d55\u0d5b\u0d5e\u0d60\u0d62\u0d65\u0d6a\u0d6d\u0d72"+
		"\u0d81\u0d88\u0d8f\u0d91\u0d93\u0d98\u0d9e\u0da1\u0da3\u0da5\u0da8\u0dad"+
		"\u0db0\u0db5\u0dc2\u0dc7\u0dd0\u0dd5\u0ddb\u0ddf\u0de3\u0df4\u0df6\u0e00"+
		"\u0e05\u0e07\u0e0b\u0e11\u0e19\u0e1e\u0e21\u0e29\u0e2c\u0e31\u0e36\u0e3b"+
		"\u0e40\u0e45\u0e4a\u0e4e\u0e53\u0e5e\u0e63\u0e66\u0e69\u0e6e\u0e71\u0e76"+
		"\u0e79\u0e7e\u0e81\u0e86\u0e89\u0e8e\u0e91\u0e96\u0e9c\u0ea1\u0ea4\u0ea9"+
		"\u0eb0\u0eb2\u0eb8\u0ec1\u0ec6\u0ec8\u0ed4\u0eda\u0ee6\u0ee9\u0eee\u0ef0"+
		"\u0efa\u0eff\u0f01\u0f05\u0f0b\u0f1d\u0f1f\u0f2e\u0f40\u0f48\u0f52\u0f62"+
		"\u0f77\u0f82\u0f88\u0f91\u0f9a\u0fa0\u0fa9\u0fae\u0fb1\u0fb6\u0fb9\u0fbe"+
		"\u0fc1\u0fc9\u0fcf\u0fd3\u0fda\u0fe0\u0fe4\u0fe7\u0fe9\u0fec\u0ff1\u0ff4"+
		"\u0ff9\u0ffc\u1001\u1004\u1009\u100c\u101b\u1026\u1032\u1039\u1040\u1044"+
		"\u1049\u104c\u1051\u1054\u1059\u105c\u1065\u106c\u107b\u107f\u1084\u108f"+
		"\u1099\u10a5\u10ab\u10ad\u10b5\u10be\u10c3\u10ce\u10d1\u10d5\u10dd\u10e1"+
		"\u10e5\u10ed\u10f2\u10fa\u10ff\u1103\u1105\u110a\u1113\u1116\u111b\u1122"+
		"\u1128\u112a\u112f\u1135\u113b\u1140\u1146\u114d\u1152\u1157\u115c\u115f"+
		"\u1163\u1167\u116b\u116f\u1174\u1178\u117c\u1186\u118c\u1193\u1196\u119c"+
		"\u11a2\u11a7\u11a9\u11af\u11b1\u11b6\u11bc\u11c2\u11c7\u11c9\u11cd\u11d1"+
		"\u11d4\u11e2\u11e7\u11eb\u11f8\u11fb\u11fd\u1205\u120f\u1215\u121c\u121f"+
		"\u1225\u122b\u1230\u1232\u1238\u123a\u123f\u1245\u124b\u1251\u1256\u1258"+
		"\u125c\u1260\u1263\u1271\u1276\u127a\u1287\u128a\u128c\u1294\u129f\u12a8"+
		"\u12b1\u12bc\u12c5\u12ce\u12da\u12de\u12e3\u12e5\u12e7\u12ec\u12f0\u12f5"+
		"\u12f7\u12f9\u1307\u130c\u1322\u1338\u133d\u134a\u1352\u1366\u1369\u136f"+
		"\u1377\u137e\u1383\u1387\u138b\u138e\u1395\u13a7\u13a9\u13bd\u13c5\u13ca"+
		"\u13dc\u13eb\u13ed\u13f4\u13fb\u1400\u1405\u140b\u1410\u1412\u1419\u141f"+
		"\u1425\u1428\u142e\u1438\u143b\u1442\u1445\u144a\u144c\u1454\u1458\u145e"+
		"\u1463\u1465\u1468\u146f\u1475\u147c\u147f\u1485\u148a\u148c\u148f\u1497"+
		"\u149d\u14a4\u14a7\u14ad\u14b2\u14b4\u14bc\u14c4\u14ca\u14cf\u14d1\u14db"+
		"\u14e0\u14ea\u14f0\u14fc\u14fe\u1505\u150b\u1511\u1517\u151c\u151e\u1525"+
		"\u152d\u1533\u1541\u1543\u1546\u154b\u154d\u1559\u155f\u156d\u156f\u1572"+
		"\u1577\u157a\u157f\u1581\u158a\u1591\u1597\u159a\u159f\u15a6\u15a8\u15ae"+
		"\u15b0\u15b8\u15ba\u15c0\u15c2\u15c8\u15ca\u15d1\u15d4\u15d6\u15d9\u15dd"+
		"\u15df\u15e8\u15ee\u15f2\u15fa\u1601\u1607\u1609\u1614\u1619\u161f\u1623"+
		"\u162d\u1635\u1641\u1644\u164c\u164e\u1651\u1655\u1658\u1662\u1668\u1670"+
		"\u1674\u1678\u1681\u1687\u168b\u168e\u1699\u169d\u16a4\u16a9\u16ac\u16b4"+
		"\u16b8\u16bb\u16bf\u16c2\u16c6\u16cd\u16d1\u16d3\u16d5\u16d8\u16db\u16de"+
		"\u16e4\u16e7\u16ef\u16f1\u16f4\u16f8\u16fb\u1701\u1704\u1708\u170b\u170e"+
		"\u1715\u1718\u171f\u1725\u1729\u1733\u1736\u1739\u173d\u1740\u1743\u1746"+
		"\u174a\u174d\u1755\u1757\u175b\u175e\u1766\u176a\u176e\u1775\u1779\u177b"+
		"\u177d\u1780\u1783\u1786\u178e\u1794\u179a\u179c\u17a0\u17a3\u17a8\u17ad"+
		"\u17b0\u17b8\u17bc\u17c3\u17c6\u17cf\u17d2\u17d6\u17de\u17e1\u17e5\u17e8"+
		"\u17f6\u17fa\u17fd\u1801\u1804\u1809\u180c\u1812\u1815\u181c\u1820\u1822"+
		"\u182a\u182d\u1831\u1838\u183d\u1840\u184c\u184f\u1855\u185c\u1861\u1866"+
		"\u186d\u1874\u1877\u187f\u1887\u188a\u1892\u189d\u18a0\u18aa\u18b1\u18b6"+
		"\u18b9\u18c3\u18c6\u18c9\u18d1\u18dc\u18df\u18e2\u18e8\u18ed\u18f1\u18fb"+
		"\u18fe\u1901\u1907\u190d\u1915\u1918\u191c\u1920\u1923\u1928\u1936\u1946"+
		"\u194a\u1950\u1952\u1955\u1959\u195e\u1963\u196b\u1970\u1975\u197b\u1980"+
		"\u1983\u198c\u1996\u1999\u19a2\u19aa\u19ad\u19b4\u19b7\u19e5\u19e9\u19ec"+
		"\u19f2\u19fe\u1a00\u1a03\u1a1c\u1a27\u1a2f\u1a3a\u1a3f\u1a42\u1a4a\u1a54"+
		"\u1a5b\u1a62\u1a64\u1a70\u1a7b\u1a7f\u1a84\u1a87\u1a89\u1a8c\u1a98\u1a9a"+
		"\u1a9c\u1a9f\u1aa4\u1aa7\u1aac\u1ab6\u1aba\u1abf\u1ac2\u1ac4\u1ac7\u1ad3"+
		"\u1ad5\u1ad7\u1ada\u1ae0\u1aea\u1afe\u1b04\u1b1d\u1b1f\u1b39\u1b3f\u1b4a"+
		"\u1b52\u1b55\u1b63\u1b6b\u1b72\u1b89\u1b96\u1b9c\u1ba3\u1bab\u1bae\u1bb1"+
		"\u1bba\u1bc4\u1bcb\u1bcf\u1bd3\u1bd9\u1be0\u1be4\u1bea\u1bf1\u1bf8\u1bfb"+
		"\u1c01\u1c08\u1c0c\u1c11\u1c16\u1c1b\u1c23\u1c27\u1c2d\u1c34\u1c38\u1c41"+
		"\u1c49\u1c4f\u1c55\u1c66\u1c6a\u1c72\u1c76\u1c7e\u1c82\u1c87\u1c8b\u1c92"+
		"\u1c98\u1c9a\u1c9e\u1ca2\u1ca6\u1ca9\u1cad\u1cb3\u1cb7\u1cb9\u1cc0\u1cc7"+
		"\u1cca\u1ccd\u1cd4\u1cd9\u1cde\u1ce2\u1ce8\u1cec\u1cee\u1cf3\u1cf8\u1cfc"+
		"\u1d01\u1d07\u1d0b\u1d0f\u1d11\u1d15\u1d19\u1d1d\u1d21\u1d27\u1d2a\u1d30"+
		"\u1d34\u1d38\u1d3e\u1d44\u1d46\u1d49\u1d4d\u1d51\u1d55\u1d5b\u1d5e\u1d64"+
		"\u1d6a\u1d6d\u1d73\u1d76\u1d7c\u1d7f\u1d83\u1d87\u1d8b\u1d90\u1d93\u1d97"+
		"\u1d9b\u1dac\u1dae\u1db0\u1db3\u1dba\u1dbf\u1dc3\u1dc9\u1dcd\u1dcf\u1dd4"+
		"\u1dd9\u1ddd\u1de2\u1de8\u1dec\u1df0\u1df2\u1df6\u1dfa\u1dfe\u1e02\u1e08"+
		"\u1e0b\u1e11\u1e15\u1e19\u1e1f\u1e25\u1e27\u1e2a\u1e2e\u1e32\u1e36\u1e3c"+
		"\u1e3f\u1e45\u1e4b\u1e4e\u1e54\u1e57\u1e5d\u1e60\u1e64\u1e68\u1e6c\u1e71"+
		"\u1e74\u1e78\u1e7c\u1e82\u1e85\u1e89\u1e9a\u1e9c\u1e9e\u1ea1\u1eaf\u1eb5"+
		"\u1ebd\u1ec4\u1ec6\u1ec9\u1eeb\u1eef\u1ef6\u1ef9\u1efc\u1f04\u1f09\u1f0e"+
		"\u1f11\u1f13\u1f17\u1f1b\u1f1e\u1f22\u1f28\u1f2d\u1f34\u1f36\u1f3a\u1f42"+
		"\u1f48\u1f4c\u1f4f\u1f58\u1f5b\u1f61\u1f68\u1f6d\u1f75\u1f7a\u1f86\u1f88"+
		"\u1f93\u1f9a\u1fa4\u1fbb\u1fc8\u1fd8\u1fdd\u1fe4\u1fe7\u1feb\u1fed\u1ffe"+
		"\u200d\u2015\u201e\u2026\u202f\u203a\u203e\u2040\u2042\u2048\u204d\u2054"+
		"\u2061\u2063\u2065\u2068\u206b\u2072\u2075\u207b\u2080\u2082\u2085\u208b"+
		"\u2093\u2095\u2098\u209c\u209f\u20a9\u20ac\u20b0\u20b3\u20b9\u20bc\u20be"+
		"\u20c2\u20c7\u20cb\u20d3\u20d7\u20da\u20df\u20e7\u20ec\u20f6\u2101\u2106"+
		"\u210c\u2112\u2116\u2119\u211d\u2121\u2129\u212e\u2130\u2133\u2138\u2141"+
		"\u2145\u214a\u214d\u2150\u2156\u215e\u2166\u2169\u216c\u2170\u2175\u2178"+
		"\u217e\u2182\u2188\u2190\u2196\u2198\u219b\u21aa\u21ad\u21b0\u21b2\u21bd"+
		"\u21c8\u21d1\u21db\u21e5\u21e7\u21e9\u21ec\u21ef\u21fa\u21fc\u21fe\u2201"+
		"\u2206\u2211\u221a\u221d\u2220\u2229\u222c\u222f\u2236\u2239\u2248\u224b"+
		"\u2252\u2262\u2266\u2270\u2283\u2285\u228c\u2293\u2297\u229f\u22a3\u22a7"+
		"\u22ad\u22b7\u22c1\u22c8\u22cf\u22d8\u22df\u22e6\u22ef\u22f3\u22fd\u2304"+
		"\u230c\u2314\u2318\u232e\u2337\u233d\u2343\u2349\u2353\u235a\u235f\u2364"+
		"\u2368\u236f\u2373\u2376\u237b\u237f\u2383\u2388\u238f\u2392\u2396\u239b"+
		"\u239f\u23a8\u23af\u23b8\u23c4\u23c6\u23d0\u23d3\u23d8\u23e1\u23e3\u23e5"+
		"\u23ea\u23f2\u23f7\u23ff\u2404\u240a\u2414\u2416\u241a\u241e\u2420\u2427"+
		"\u2432\u2454\u2464\u246b\u246d\u2474\u247d\u2487\u248c\u2493\u2496\u249d"+
		"\u24a4\u24a7\u24a9\u24b1\u24b3\u24b9\u24c0\u24c8\u24ce\u24d3\u24d7\u24db"+
		"\u24e0\u24e2\u24e9\u24ed\u24f4\u24f6\u24fd\u24ff\u2508\u2510\u2517\u251d"+
		"\u2528\u252c\u252e\u2531\u2549\u2562\u2567\u257b\u257f\u2583\u2593\u259b"+
		"\u25b1\u25eb\u25ef\u2610\u2617\u261d\u262a\u2639\u2644\u2649\u2653\u265c"+
		"\u267e\u2683\u2689\u268c\u2691\u2696\u269f\u26a4\u26aa\u26b3\u26bd\u26c0"+
		"\u26ce\u26d4\u26dc\u26e0\u26e8\u26ef\u26fc\u2704\u2711\u2718\u271e\u2722"+
		"\u2733\u2742\u2744\u2749\u274c\u2755\u2758\u275b\u2768\u276c\u2774\u277a"+
		"\u2782\u2789\u278f\u279e\u27a7\u27ad\u27b3\u27b6\u27ba\u27c1\u27c9\u27cc"+
		"\u27d2\u27d8\u27da\u27e0\u27e3\u27e5\u27eb\u27ed\u27fb\u2802\u280b\u2812"+
		"\u281e\u2825\u282c\u2833\u2839\u2840\u2843\u2848\u284f\u2856\u285e\u2863"+
		"\u2867\u286c\u2872\u2878\u287e\u2884\u288a\u2890\u2896\u2899\u289d\u28a2"+
		"\u28a6\u28ae\u28b3\u28ba\u28c3\u28c5\u28cc\u28d8\u28dd\u28e8\u28f2\u28f4"+
		"\u28fa\u28fc\u2901\u2903\u2906\u290a\u290e\u2914\u291d\u2920\u2922\u2925"+
		"\u292b\u292f\u2932\u293b\u2944\u2950\u2953\u2957\u295d\u2960\u2964\u296a"+
		"\u296f\u2974\u2978\u297c\u2980\u2987\u299a\u29a0";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2,
			_serializedATNSegment3,
			_serializedATNSegment4
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}